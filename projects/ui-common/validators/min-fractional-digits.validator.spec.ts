import { FormControl } from '@angular/forms'

import { decimalValidator } from './decimal.validator'

describe('decimalValidator', () => {
  it('should return null for empty control', () => {
    expect(decimalValidator(new FormControl())).toBeNull()
    expect(decimalValidator(new FormControl(null))).toBeNull()
    expect(decimalValidator(new FormControl(undefined))).toBeNull()
    expect(decimalValidator(new FormControl([]))).toBeNull()
    expect(decimalValidator(new FormControl(''))).toBeNull()
  })

  it('should succeed for valid decimal control values', () => {
    expect(decimalValidator(new FormControl(0))).toBeNull()
    expect(decimalValidator(new FormControl(1))).toBeNull()
    expect(decimalValidator(new FormControl(-1))).toBeNull()
    expect(decimalValidator(new FormControl(.1))).toBeNull()
    expect(decimalValidator(new FormControl(1.))).toBeNull()
    expect(decimalValidator(new FormControl(0.1))).toBeNull()
    expect(decimalValidator(new FormControl(1.0))).toBeNull()
    expect(decimalValidator(new FormControl(1.1))).toBeNull()
    expect(decimalValidator(new FormControl(-.1))).toBeNull()
    expect(decimalValidator(new FormControl(-1.))).toBeNull()
    expect(decimalValidator(new FormControl(-0.1))).toBeNull()
    expect(decimalValidator(new FormControl(-1.0))).toBeNull()
    expect(decimalValidator(new FormControl(-1.1))).toBeNull()
    expect(decimalValidator(new FormControl(1234567.012345))).toBeNull()
    expect(decimalValidator(new FormControl(-1234567.012345))).toBeNull()
    expect(decimalValidator(new FormControl('0'))).toBeNull()
    expect(decimalValidator(new FormControl('1'))).toBeNull()
    expect(decimalValidator(new FormControl('-1'))).toBeNull()
    expect(decimalValidator(new FormControl('.1'))).toBeNull()
    expect(decimalValidator(new FormControl('1.'))).toBeNull()
    expect(decimalValidator(new FormControl('0.1'))).toBeNull()
    expect(decimalValidator(new FormControl('1.0'))).toBeNull()
    expect(decimalValidator(new FormControl('1.1'))).toBeNull()
    expect(decimalValidator(new FormControl('-.1'))).toBeNull()
    expect(decimalValidator(new FormControl('-1.'))).toBeNull()
    expect(decimalValidator(new FormControl('-0.1'))).toBeNull()
    expect(decimalValidator(new FormControl('-1.0'))).toBeNull()
    expect(decimalValidator(new FormControl('-1.1'))).toBeNull()
    expect(decimalValidator(new FormControl('-1234567.012345'))).toBeNull()
    expect(decimalValidator(new FormControl('-1234567.012345'))).toBeNull()
  })

  it('should fail for non-valid decimal control values', () => {
    expect(decimalValidator(new FormControl('a'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('a-'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('a1'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('a1-'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('1a'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('1a-'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('a.1'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('a.1-'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('1.a'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('1.a-'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('--a'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('a--'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('-a1'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('-1a'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('-a.1'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('-1.a'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('-'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('+'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('--1'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('-+1'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('+-1'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('++1'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('1--'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('1-+'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('1+-'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('1++'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('1..1'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('-1..1'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('..1'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('1..'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('.'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl('..'))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl({}))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl(NaN))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl(Infinity))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl(new Date()))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl(new Object()))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl(true))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl(false))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl([1]))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
    expect(decimalValidator(new FormControl(['1']))).toStrictEqual({ 'decimal': { 'reason': 'Must be valid decimal number.' } })
  })
})

import { FormControl } from '@angular/forms'

import { integerValidator } from './integer.validator'

describe('integerValidator', () => {
  it('should return null for empty control', () => {
    expect(integerValidator(new FormControl())).toBeNull()
    expect(integerValidator(new FormControl(null))).toBeNull()
    expect(integerValidator(new FormControl(undefined))).toBeNull()
    expect(integerValidator(new FormControl([]))).toBeNull()
    expect(integerValidator(new FormControl(''))).toBeNull()
  })

  it('should succeed for valid integer control values', () => {
    expect(integerValidator(new FormControl(0))).toBeNull()
    expect(integerValidator(new FormControl(1))).toBeNull()
    expect(integerValidator(new FormControl(-1))).toBeNull()
    expect(integerValidator(new FormControl(1234))).toBeNull()
    expect(integerValidator(new FormControl(10))).toBeNull()
    expect(integerValidator(new FormControl('0'))).toBeNull()
    expect(integerValidator(new FormControl('1'))).toBeNull()
    expect(integerValidator(new FormControl('-1'))).toBeNull()
    expect(integerValidator(new FormControl('1234'))).toBeNull()
    expect(integerValidator(new FormControl('10'))).toBeNull()
    expect(integerValidator(new FormControl('01'))).toBeNull()
  })

  it('should fail for non-valid integer control values', () => {
    expect(integerValidator(new FormControl('a'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('a-'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('a1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('a1-'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1a'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1a-'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('a.1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('a.1-'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1.a'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1.a-'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('--a'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('a--'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-a1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1a'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-a.1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1.a'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('+'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('--1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-+1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('+-1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('++1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1--'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1-+'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1+-'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1++'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1..1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1..1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('..1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1..'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('.'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('..'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl({}))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(NaN))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(Infinity))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(new Date()))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(new Object()))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(true))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(false))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl([1]))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(['1']))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(.1))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(0.1))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(1.1))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(-.1))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(-0.1))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(-1.1))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(1234567.012345))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(-1234567.012345))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('.1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1.'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('0.1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1.1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1.0'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-.1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1.'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-0.1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1.0'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1.1'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1234567.012345'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1234567.012345'))).toStrictEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
  })
})

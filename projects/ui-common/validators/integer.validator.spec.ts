import { FormControl } from '@angular/forms'

import { integerValidator } from './integer.validator'

describe('integerValidator', () => {
  it('should return null for empty control', () => {
    expect(integerValidator(new FormControl())).toBeNull()
    expect(integerValidator(new FormControl(null))).toBeNull()
    expect(integerValidator(new FormControl(undefined))).toBeNull()
    expect(integerValidator(new FormControl([]))).toBeNull()
    expect(integerValidator(new FormControl(''))).toBeNull()
  })

  it('should succeed for valid integer control values', () => {
    expect(integerValidator(new FormControl(0))).toBeNull()
    expect(integerValidator(new FormControl(1))).toBeNull()
    expect(integerValidator(new FormControl(-1))).toBeNull()
    expect(integerValidator(new FormControl(1234))).toBeNull()
    expect(integerValidator(new FormControl(10))).toBeNull()
    expect(integerValidator(new FormControl('0'))).toBeNull()
    expect(integerValidator(new FormControl('1'))).toBeNull()
    expect(integerValidator(new FormControl('-1'))).toBeNull()
    expect(integerValidator(new FormControl('1234'))).toBeNull()
    expect(integerValidator(new FormControl('10'))).toBeNull()
    expect(integerValidator(new FormControl('01'))).toBeNull()
  })

  it('should fail for non-valid integer control values', () => {
    expect(integerValidator(new FormControl('a'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('a-'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('a1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('a1-'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1a'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1a-'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('a.1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('a.1-'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1.a'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1.a-'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('--a'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('a--'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-a1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1a'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-a.1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1.a'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('+'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('--1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-+1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('+-1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('++1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1--'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1-+'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1+-'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1++'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1..1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1..1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('..1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1..'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('.'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('..'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl({}))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(NaN))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(Infinity))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(new Date()))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(new Object()))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(true))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(false))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl([1]))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(['1']))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(.1))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(0.1))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(1.1))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(-.1))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(-0.1))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(-1.1))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(1234567.012345))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl(-1234567.012345))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('.1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1.'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('0.1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1.1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('1.0'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-.1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1.'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-0.1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1.0'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1.1'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1234567.012345'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
    expect(integerValidator(new FormControl('-1234567.012345'))).toEqual({ 'integer': { 'reason': 'Must be valid integer.' } })
  })
})

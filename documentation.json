{
    "pipes": [
        {
            "name": "MaskCharsPipe",
            "id": "pipe-MaskCharsPipe-97afe335d7a7b14134dabec4744de2f8",
            "file": "projects/ui-common/src/lib/shared/pipes/mask-chars.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        },
                        {
                            "name": "replacementChar",
                            "type": "string",
                            "defaultValue": "'*'"
                        },
                        {
                            "name": "ignoreCount",
                            "type": "number",
                            "defaultValue": "0"
                        },
                        {
                            "name": "ignoreFrom",
                            "type": "\"left\" | \"right\"",
                            "defaultValue": "'right'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "replacementChar",
                            "type": "string",
                            "defaultValue": "'*'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ignoreCount",
                            "type": "number",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ignoreFrom",
                            "type": "\"left\" | \"right\"",
                            "defaultValue": "'right'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "maskChars",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\n\nimport { padEnd, padStart } from 'lodash-es'\n\n@Pipe({\n  name: 'maskChars'\n})\nexport class MaskCharsPipe implements PipeTransform {\n\n  transform(value: string, replacementChar: string = '*', ignoreCount: number = 0, ignoreFrom: 'left' | 'right' = 'right'): string {\n    if (ignoreFrom === 'right') {\n      const s = value || ''\n      return padStart(s.substring(s.length - ignoreCount, s.length), s.length, replacementChar)\n    } else if (ignoreFrom === 'left') {\n      const s = value || ''\n      return padEnd(s.substring(0, ignoreCount), s.length, replacementChar)\n    }\n\n    return value\n  }\n\n}\n"
        },
        {
            "name": "TruncatePipe",
            "id": "pipe-TruncatePipe-992088f608b4f30da7eb3efd10d158e2",
            "file": "projects/ui-common/src/lib/shared/pipes/truncate.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "defaultValue": "30"
                        },
                        {
                            "name": "appendEllipsis",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "defaultValue": "30",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appendEllipsis",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "truncate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\n\n@Pipe({\n  name: 'truncate'\n})\nexport class TruncatePipe implements PipeTransform {\n\n  transform(value: string, length: number = 30, appendEllipsis: boolean = true): string {\n    let val = value\n\n    if (value && typeof value === 'string' && value.length > length) {\n      val = value.substr(0, length)\n      if (appendEllipsis) {\n        val += '...'\n      }\n    }\n\n    return val\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "CanBeActive",
            "id": "interface-CanBeActive-5bab523a49e71f16e616fb7d831fe3b0",
            "file": "projects/ui-common/src/lib/core/common-behaviors/active.ts",
            "type": "interface",
            "sourceCode": "import { coerceBooleanProperty } from '@angular/cdk/coercion'\nimport { Constructor } from './constructor'\n\nexport interface CanBeActive {\n  /** Whether the component is active. */\n  active: boolean\n}\n\nexport type CanBeActiveCtor = Constructor<CanBeActive>\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinActive<T extends Constructor<{}>>(base: T): CanBeActiveCtor & T {\n  return class extends base {\n    private _active = false\n\n    get active() { return this._active }\n    set active(value: any) { this._active = coerceBooleanProperty(value) }\n\n    constructor(...args: any[]) { super(...args) }\n  }\n}\n",
            "properties": [
                {
                    "name": "active",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Whether the component is active. </p>\n",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CanDisable",
            "id": "interface-CanDisable-c19bf7ec5af48f8d0a07d8cc8ad08844",
            "file": "projects/ui-common/src/lib/core/common-behaviors/disabled.ts",
            "type": "interface",
            "sourceCode": "import { coerceBooleanProperty } from '@angular/cdk/coercion'\nimport { Constructor } from './constructor'\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled = false\n\n    get disabled() { return this._disabled }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value) }\n\n    constructor(...args: any[]) { super(...args) }\n  }\n}\n",
            "properties": [
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Whether the component is disabled. </p>\n",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CanSize",
            "id": "interface-CanSize-1650eef5d44db3ac1855c7e3c62f5d3a",
            "file": "projects/ui-common/src/lib/core/common-behaviors/size.ts",
            "type": "interface",
            "sourceCode": "import { SizePrefixes } from '../../models/size-prefixes'\nimport { SizeTypes } from '../../models/size-types'\nimport { Constructor } from './constructor'\nimport { HasElementRef } from './element-ref'\n\nexport interface CanSize {\n  size: SizeTypes | undefined\n}\n\nexport type CanSizeCtor = Constructor<CanSize>\n\n/** Mixin to augment a directive with a `size` property. */\nexport function mixinSize<T extends Constructor<HasElementRef>>(\n    base: T, sizePrefix: SizePrefixes, defaultSize?: SizeTypes): CanSizeCtor & T {\n  return class extends base {\n    private _size: SizeTypes | undefined\n\n    get size(): SizeTypes | undefined { return this._size }\n    set size(value: SizeTypes | undefined) {\n      const themePalette = value || defaultSize\n\n      if (themePalette !== this._size) {\n        if (this._size) {\n          this._elementRef.nativeElement.classList.remove(`${sizePrefix}-${this._size}`)\n        }\n        if (themePalette) {\n          this._elementRef.nativeElement.classList.add(`${sizePrefix}-${themePalette}`)\n        }\n\n        this._size = themePalette\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args)\n\n      // Set the default size that can be specified from the mixin.\n      this.size = defaultSize\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "size",
                    "type": "SizeTypes | undefined",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CanTheme",
            "id": "interface-CanTheme-41b5d77ea3a2bf530fc3c02f4499fb46",
            "file": "projects/ui-common/src/lib/core/common-behaviors/theme.ts",
            "type": "interface",
            "sourceCode": "import { ThemePrefixes } from '../../models/theme-prefixes'\nimport { ThemeTypes } from '../../models/theme-types'\nimport { Constructor } from './constructor'\nimport { HasElementRef } from './element-ref'\n\nexport interface CanTheme {\n  /** Theme palette for the component. */\n  theme: ThemeTypes | undefined\n}\n\nexport type CanThemeCtor = Constructor<CanTheme>\n\n/** Mixin to augment a directive with a `theme` property. */\nexport function mixinTheme<T extends Constructor<HasElementRef>>(\n    base: T, themePrefix: ThemePrefixes, defaultTheme?: ThemeTypes): CanThemeCtor & T {\n  return class extends base {\n    private _theme: ThemeTypes | undefined\n\n    get theme(): ThemeTypes | undefined { return this._theme }\n    set theme(value: ThemeTypes | undefined) {\n      const themePalette = value || defaultTheme\n\n      if (themePalette !== this._theme) {\n        if (this._theme) {\n          this._elementRef.nativeElement.classList.remove(`${themePrefix}-${this._theme}`)\n        }\n        if (themePalette) {\n          this._elementRef.nativeElement.classList.add(`${themePrefix}-${themePalette}`)\n        }\n\n        this._theme = themePalette\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args)\n\n      // Set the default theme that can be specified from the mixin.\n      this.theme = defaultTheme\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "theme",
                    "type": "ThemeTypes | undefined",
                    "optional": false,
                    "description": "<p>Theme palette for the component. </p>\n",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ColorDispProps",
            "id": "interface-ColorDispProps-e8b203610b8eb751c00f298b782840bf",
            "file": "projects/ui-common/src/stories/mdx/components/color-preview.tsx",
            "type": "interface",
            "sourceCode": "import * as React from 'react'\n\nimport { ColorItem } from '@storybook/addon-docs/blocks'\nimport { styled } from '@storybook/theming'\n\ninterface ColorDispProps {\n  title: string\n  subtitle: string\n  colorVars: string[]\n}\n\nexport class ColorDisp extends React.Component<ColorDispProps> {\n\n  render() {\n    const { title, subtitle, colorVars } = this.props\n\n    const colors: string[] = []\n    for (const c of colorVars) {\n      colors.push(getComputedStyle(document.documentElement).getPropertyValue(c))\n    }\n    return (\n      <ColorItem\n        title={title}\n        subtitle={subtitle}\n        colors={colors}\n      />\n    )\n  }\n}\n",
            "properties": [
                {
                    "name": "colorVars",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "subtitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DocAlertProps",
            "id": "interface-DocAlertProps-6c089454c8bb1fe3d163b23f89e35a29",
            "file": "projects/ui-common/src/stories/mdx/components/doc-alert.tsx",
            "type": "interface",
            "sourceCode": "import * as React from 'react'\n\nimport { styled } from '@storybook/theming'\n\nconst StyledDiv = styled.div({\n  'borderRadius': '0',\n  'borderLeftWidth': '5px !important'\n})\n\ninterface DocAlertProps {\n  kind: string\n  children: any\n}\n\nexport class DocAlert extends React.Component<DocAlertProps> {\n\n  render() {\n    const { children, kind } = this.props\n    const _kind = kind || 'warning'\n    const cssClasses = `alart alert-${_kind} border-left border-${_kind} p-2`\n    return (\n      <StyledDiv className={cssClasses} role='alert'>{children}</StyledDiv>\n    )\n  }\n}\n",
            "properties": [
                {
                    "name": "children",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "kind",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DragCSSStyleDeclaration",
            "id": "interface-DragCSSStyleDeclaration-16f997dead8d6be4e7d1c3bba414d95e",
            "file": "projects/ui-common/src/lib/widget/directives/widget-drag-handle.directive.ts",
            "type": "interface",
            "sourceCode": "import { coerceBooleanProperty } from '@angular/cdk/coercion'\nimport { CdkDragHandle, ɵb as CDK_DRAG_PARENT } from '@angular/cdk/drag-drop'\nimport { AfterViewInit, Directive, ElementRef, Inject, Input, NgZone, OnDestroy, OnInit, Optional } from '@angular/core'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { Subject } from 'rxjs'\nimport { take } from 'rxjs/operators'\n\n\n//\n// NOTE: This will probably NOT be used long term, unless more of the\n// CdkDragDrop code is rewritten.\n//\n// This directive is meant to be a HACK replacement directive for CdkDragHandle.\n// The reason this was made is because CdkDragHandle doesn't work in child\n// components, since it uses ContentChildren to query for the handles.\n//\n// This could easily break, because I am forcing the handles query list to emit\n// changes manually. So, if the query list actually changes, then my changes\n// will be broken.\n//\n\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] }\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string\n  MozUserSelect: string // For some reason the Firefox property is in PascalCase.\n}\n\nexport function extendStyles(\n  dest: Writeable<CSSStyleDeclaration>,\n  source: Partial<DragCSSStyleDeclaration>\n) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration]\n    }\n  }\n\n  return dest\n}\n\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none'\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  })\n}\n\n@Directive({\n  selector: '[seamWidgetDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class WidgetDragHandleDirective implements OnDestroy, AfterViewInit {\n\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined\n\n  /** Emits when the state of the handle has changed. */\n  _stateChanges = new Subject<CdkDragHandle>()\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value)\n    this._stateChanges.next(<any>this)\n  }\n  private _disabled = false\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any\n  ) {\n    this._parentDrag = parentDrag\n    toggleNativeDragInteractions(element.nativeElement, false)\n  }\n\n  ngAfterViewInit() {\n    if (this._parentDrag) {\n      // HACK: This is a hack to allow the `CdkDrag` directive to manage a\n      // handle that is not visible to `ContentChildren` query.\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1), untilDestroyed(this))\n        .subscribe(() => {\n          const parent = <any>this._parentDrag\n          parent._handles.reset([ ...parent._handles._results, this ])\n          parent._handles.notifyOnChanges()\n          parent._dragRef.enableHandle(this.element.nativeElement)\n        })\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete()\n  }\n\n}\n",
            "properties": [
                {
                    "name": "MozUserSelect",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "webkitUserDrag",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Extended CSSStyleDeclaration that includes a couple of drag-related\nproperties that aren&#39;t in the built-in TS typings.</p>\n",
            "methods": [],
            "extends": "CSSStyleDeclaration"
        },
        {
            "name": "HasElementRef",
            "id": "interface-HasElementRef-158125509424fc4e87e7f5a939f5627a",
            "file": "projects/ui-common/src/lib/core/common-behaviors/element-ref.ts",
            "type": "interface",
            "sourceCode": "import { ElementRef } from '@angular/core'\n\nexport interface HasElementRef {\n  _elementRef: ElementRef\n}\n",
            "properties": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "HasInitialized",
            "id": "interface-HasInitialized-6672e953b9fc1af6aea91c512e04b734",
            "file": "projects/ui-common/src/lib/core/common-behaviors/initialized.ts",
            "type": "interface",
            "sourceCode": "import { Observable, Subscriber } from 'rxjs'\nimport { Constructor } from './constructor'\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = []\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber)\n      } else {\n        if (this._pendingSubscribers) {\n          this._pendingSubscribers.push(subscriber)\n        }\n      }\n    })\n\n    constructor(...args: any[]) { super(...args) }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.')\n      }\n\n      this._isInitialized = true\n\n      if (this._pendingSubscribers) {\n        this._pendingSubscribers.forEach(this._notifySubscriber)\n      }\n      this._pendingSubscribers = null\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next()\n      subscriber.complete()\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "_markInitialized",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Sets the state as initialized and must be called during ngOnInit to notify subscribers that\nthe directive has been initialized.</p>\n",
                    "line": 29,
                    "jsdoctags": [
                        {
                            "pos": 931,
                            "end": 936,
                            "flags": 0,
                            "kind": 288,
                            "atToken": {
                                "pos": 931,
                                "end": 932,
                                "flags": 0,
                                "kind": 57
                            },
                            "tagName": {
                                "pos": 932,
                                "end": 936,
                                "flags": 0,
                                "escapedText": "docs"
                            },
                            "comment": "<p>-private</p>\n"
                        }
                    ]
                },
                {
                    "name": "initialized",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "<p>Stream that emits once during the directive/component&#39;s ngOnInit. </p>\n",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\nvalue once markInitialized has been called, which should be done during the ngOnInit function.\nIf the subscription is made after it has already been marked as initialized, then it will trigger\nan emit immediately.</p>\n",
            "methods": []
        },
        {
            "name": "HasRenderer2",
            "id": "interface-HasRenderer2-ad8c4e433fde6feae5acefd6b3f0a294",
            "file": "projects/ui-common/src/lib/core/common-behaviors/renderer2.ts",
            "type": "interface",
            "sourceCode": "import { Renderer2 } from '@angular/core'\n\nexport interface HasRenderer2 {\n  _renderer: Renderer2\n}\n",
            "properties": [
                {
                    "name": "_renderer",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "HasTabIndex",
            "id": "interface-HasTabIndex-003d317639afbba20f96a4206d03d3e8",
            "file": "projects/ui-common/src/lib/core/common-behaviors/tabindex.ts",
            "type": "interface",
            "sourceCode": "import { Constructor } from './constructor'\nimport { CanDisable } from './disabled'\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex\n    }\n\n    constructor(...args: any[]) {\n      super(...args)\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "tabIndex",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Tabindex of the component. </p>\n",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IActionMenuItemEndpointConfig",
            "id": "interface-IActionMenuItemEndpointConfig-7fce2e518d118870c0ca7b841d34b0d0",
            "file": "projects/ui-common/src/lib/datatable/datatable-action-menu-item/datatable-action-menu-item.component.ts",
            "type": "interface",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, EventEmitter, HostBinding, Input, isDevMode, OnDestroy, OnInit, Output } from '@angular/core'\nimport { Subscription } from 'rxjs'\n\nimport jexl from 'jexl'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\n\nimport { IDynamicDatatableRow } from '../../datatable-dynamic/datatable-dynamic-def'\nimport { TheSeamDynamicComponentLoader } from '../../dynamic-component-loader/dynamic-component-loader.service'\nimport { Modal } from '../../modal/index'\n\n//\n// TODO: Move the dynamic datatable logic out of this component when refactoring.\n//\n\nexport interface IActionMenuItemEndpointConfig {\n  /**\n   * Api endpoint.\n   */\n  endpoint?: string\n\n  endpointExpr?: string\n\n  method: 'GET' | 'POST' | 'PATCH' | 'DELETE'\n\n  bodyExpr?: string\n\n  paramsExpr?: string\n}\n\nexport interface IActionMenuItemModalConfig {\n  component: ComponentType<{}> |  string\n}\n\n@Component({\n  selector: 'seam-datatable-action-menu-item',\n  templateUrl: './datatable-action-menu-item.component.html',\n  styleUrls: ['./datatable-action-menu-item.component.scss']\n})\nexport class DatatableActionMenuItemComponent implements OnInit, OnDestroy {\n\n  @HostBinding('class.list-group-item') _listGroupItem = true\n  @HostBinding('class.list-group-item-action') _listGroupItemAction = true\n\n  @Input() label: string\n\n  // tslint:disable-next-line:no-input-rename\n  @Input('attr.href') href: string\n  @Input() target: string\n\n  // Allow routerLink inputs on menu item\n  @Input() queryParams: {[k: string]: any}\n  @Input() fragment: string\n  // @Input() queryParamsHandling: QueryParamsHandling\n  @Input() queryParamsHandling: any\n  @Input() preserveFragment: boolean\n  @Input() skipLocationChange: boolean\n  @Input() replaceUrl: boolean\n  @Input() state: {[k: string]: any}\n  @Input() routerLink: string | any[]\n\n  @Input() confirmDialog\n\n  @Input()\n  get endpointConfig(): IActionMenuItemEndpointConfig { return this._endpointConfig }\n  set endpointConfig(value: IActionMenuItemEndpointConfig) {\n    this._endpointConfig = value\n    if (value) {\n      // TODO: Handle this in a way that can be canceled.\n      this._endpointConfigSub = this.click\n        .pipe(untilDestroyed(this))\n        .subscribe(e => this._handleEndpointAction())\n    } else {\n      if (this._endpointConfigSub) {\n        this._endpointConfigSub.unsubscribe()\n      }\n    }\n  }\n  private _endpointConfig: IActionMenuItemEndpointConfig\n  private _endpointConfigSub: Subscription\n\n  @Input()\n  get modalConfig(): IActionMenuItemModalConfig { return this._modalConfig }\n  set modalConfig(value: IActionMenuItemModalConfig) {\n    this._modalConfig = value\n    if (value) {\n      // TODO: Handle this in a way that can be canceled.\n      this._modalConfigSub = this.click\n        .pipe(untilDestroyed(this))\n        .subscribe(e => this._handleModalAction())\n    } else {\n      if (this._modalConfigSub) {\n        this._modalConfigSub.unsubscribe()\n      }\n    }\n  }\n  private _modalConfig: IActionMenuItemModalConfig\n  private _modalConfigSub: Subscription\n\n  @Input() row: IDynamicDatatableRow\n\n  @Output() click = new EventEmitter<any>()\n\n  constructor(\n    private _http: HttpClient,\n    private _modal: Modal,\n    private _dynamicComponentLoader: TheSeamDynamicComponentLoader\n  ) { }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { }\n\n  private _handleEndpointAction() {\n    // console.log('_handleEndpointAction')\n    // TODO: This should probably be done through a provider that uses the api.\n    if (isDevMode()) {\n      console.warn(`[DatatableActionMenuItemComponent] '_handleEndpointAction()' is not ready for production yet.`)\n    } else {\n      // I don't expect this to be attempted in prod before completed, so I am just adding a console warning.\n      console.warn(`Unable to complete request. Contact support for assistance.`)\n    }\n\n    let endpoint = ''\n    const method = this._endpointConfig.method\n    const context = { row: this.row }\n    // console.log('context', context)\n\n    if (this._endpointConfig.endpoint) {\n      endpoint = this._endpointConfig.endpoint\n    }\n\n    if (this._endpointConfig.endpointExpr) {\n      // TODO: Use async jexl.\n      endpoint = jexl.evalSync(this._endpointConfig.endpointExpr, context)\n    }\n\n    const url = `http://localhost:57648/api/${endpoint}`\n\n    const options: any = {}\n    if (this._endpointConfig.bodyExpr) {\n      // TODO: Use async jexl.\n      options.body = jexl.evalSync(this._endpointConfig.bodyExpr, context)\n    }\n    if (this._endpointConfig.paramsExpr) {\n      // TODO: Use async jexl.\n      options.params = jexl.evalSync(this._endpointConfig.paramsExpr, context)\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n\n    this._http.request<any>(method, url, { ...options, headers })\n      .subscribe()\n      // .subscribe(v => console.log('v', v))\n  }\n\n  private _handleModalAction() {\n    if (typeof this._modalConfig.component === 'string') {\n      this._dynamicComponentLoader.getComponentFactory('story-ex-modal')\n        .subscribe(componentFactory => {\n          const factoryResolver = (<any /* ComponentFactoryBoundToModule */>componentFactory).ngModule.componentFactoryResolver\n          this._modal.openFromComponent(componentFactory.componentType, undefined, factoryResolver)\n        })\n    } else {\n      this._modal.openFromComponent(this._modalConfig.component)\n    }\n  }\n\n}\n",
            "properties": [
                {
                    "name": "bodyExpr",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "endpoint",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Api endpoint.</p>\n",
                    "line": 22
                },
                {
                    "name": "endpointExpr",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "method",
                    "type": "\"GET\" | \"POST\" | \"PATCH\" | \"DELETE\"",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "paramsExpr",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IActionMenuItemModalConfig",
            "id": "interface-IActionMenuItemModalConfig-7fce2e518d118870c0ca7b841d34b0d0",
            "file": "projects/ui-common/src/lib/datatable/datatable-action-menu-item/datatable-action-menu-item.component.ts",
            "type": "interface",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, EventEmitter, HostBinding, Input, isDevMode, OnDestroy, OnInit, Output } from '@angular/core'\nimport { Subscription } from 'rxjs'\n\nimport jexl from 'jexl'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\n\nimport { IDynamicDatatableRow } from '../../datatable-dynamic/datatable-dynamic-def'\nimport { TheSeamDynamicComponentLoader } from '../../dynamic-component-loader/dynamic-component-loader.service'\nimport { Modal } from '../../modal/index'\n\n//\n// TODO: Move the dynamic datatable logic out of this component when refactoring.\n//\n\nexport interface IActionMenuItemEndpointConfig {\n  /**\n   * Api endpoint.\n   */\n  endpoint?: string\n\n  endpointExpr?: string\n\n  method: 'GET' | 'POST' | 'PATCH' | 'DELETE'\n\n  bodyExpr?: string\n\n  paramsExpr?: string\n}\n\nexport interface IActionMenuItemModalConfig {\n  component: ComponentType<{}> |  string\n}\n\n@Component({\n  selector: 'seam-datatable-action-menu-item',\n  templateUrl: './datatable-action-menu-item.component.html',\n  styleUrls: ['./datatable-action-menu-item.component.scss']\n})\nexport class DatatableActionMenuItemComponent implements OnInit, OnDestroy {\n\n  @HostBinding('class.list-group-item') _listGroupItem = true\n  @HostBinding('class.list-group-item-action') _listGroupItemAction = true\n\n  @Input() label: string\n\n  // tslint:disable-next-line:no-input-rename\n  @Input('attr.href') href: string\n  @Input() target: string\n\n  // Allow routerLink inputs on menu item\n  @Input() queryParams: {[k: string]: any}\n  @Input() fragment: string\n  // @Input() queryParamsHandling: QueryParamsHandling\n  @Input() queryParamsHandling: any\n  @Input() preserveFragment: boolean\n  @Input() skipLocationChange: boolean\n  @Input() replaceUrl: boolean\n  @Input() state: {[k: string]: any}\n  @Input() routerLink: string | any[]\n\n  @Input() confirmDialog\n\n  @Input()\n  get endpointConfig(): IActionMenuItemEndpointConfig { return this._endpointConfig }\n  set endpointConfig(value: IActionMenuItemEndpointConfig) {\n    this._endpointConfig = value\n    if (value) {\n      // TODO: Handle this in a way that can be canceled.\n      this._endpointConfigSub = this.click\n        .pipe(untilDestroyed(this))\n        .subscribe(e => this._handleEndpointAction())\n    } else {\n      if (this._endpointConfigSub) {\n        this._endpointConfigSub.unsubscribe()\n      }\n    }\n  }\n  private _endpointConfig: IActionMenuItemEndpointConfig\n  private _endpointConfigSub: Subscription\n\n  @Input()\n  get modalConfig(): IActionMenuItemModalConfig { return this._modalConfig }\n  set modalConfig(value: IActionMenuItemModalConfig) {\n    this._modalConfig = value\n    if (value) {\n      // TODO: Handle this in a way that can be canceled.\n      this._modalConfigSub = this.click\n        .pipe(untilDestroyed(this))\n        .subscribe(e => this._handleModalAction())\n    } else {\n      if (this._modalConfigSub) {\n        this._modalConfigSub.unsubscribe()\n      }\n    }\n  }\n  private _modalConfig: IActionMenuItemModalConfig\n  private _modalConfigSub: Subscription\n\n  @Input() row: IDynamicDatatableRow\n\n  @Output() click = new EventEmitter<any>()\n\n  constructor(\n    private _http: HttpClient,\n    private _modal: Modal,\n    private _dynamicComponentLoader: TheSeamDynamicComponentLoader\n  ) { }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { }\n\n  private _handleEndpointAction() {\n    // console.log('_handleEndpointAction')\n    // TODO: This should probably be done through a provider that uses the api.\n    if (isDevMode()) {\n      console.warn(`[DatatableActionMenuItemComponent] '_handleEndpointAction()' is not ready for production yet.`)\n    } else {\n      // I don't expect this to be attempted in prod before completed, so I am just adding a console warning.\n      console.warn(`Unable to complete request. Contact support for assistance.`)\n    }\n\n    let endpoint = ''\n    const method = this._endpointConfig.method\n    const context = { row: this.row }\n    // console.log('context', context)\n\n    if (this._endpointConfig.endpoint) {\n      endpoint = this._endpointConfig.endpoint\n    }\n\n    if (this._endpointConfig.endpointExpr) {\n      // TODO: Use async jexl.\n      endpoint = jexl.evalSync(this._endpointConfig.endpointExpr, context)\n    }\n\n    const url = `http://localhost:57648/api/${endpoint}`\n\n    const options: any = {}\n    if (this._endpointConfig.bodyExpr) {\n      // TODO: Use async jexl.\n      options.body = jexl.evalSync(this._endpointConfig.bodyExpr, context)\n    }\n    if (this._endpointConfig.paramsExpr) {\n      // TODO: Use async jexl.\n      options.params = jexl.evalSync(this._endpointConfig.paramsExpr, context)\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n\n    this._http.request<any>(method, url, { ...options, headers })\n      .subscribe()\n      // .subscribe(v => console.log('v', v))\n  }\n\n  private _handleModalAction() {\n    if (typeof this._modalConfig.component === 'string') {\n      this._dynamicComponentLoader.getComponentFactory('story-ex-modal')\n        .subscribe(componentFactory => {\n          const factoryResolver = (<any /* ComponentFactoryBoundToModule */>componentFactory).ngModule.componentFactoryResolver\n          this._modal.openFromComponent(componentFactory.componentType, undefined, factoryResolver)\n        })\n    } else {\n      this._modal.openFromComponent(this._modalConfig.component)\n    }\n  }\n\n}\n",
            "properties": [
                {
                    "name": "component",
                    "type": "ComponentType<literal type> | string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IActionRowExprContext",
            "id": "interface-IActionRowExprContext-b3f169553a45473bcf06529053f14b55",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.component.ts",
            "type": "interface",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\nimport { ChangeDetectionStrategy, Component, Inject, Input, OnInit } from '@angular/core'\nimport { BehaviorSubject, combineLatest, from, Observable, of } from 'rxjs'\nimport { concatMap, map, switchMap, take, tap, toArray } from 'rxjs/operators'\n\nimport jexl from 'jexl'\n\nimport { IDataExporter, THESEAM_DATA_EXPORTER } from '../data-exporter/index'\nimport { THESEAM_DATA_FILTER_DEF } from '../data-filters/data-filter-def'\nimport { IDataFilter } from '../data-filters/index'\nimport { notNullOrUndefined } from '../utils/index'\n\nimport { IDatatableDynamicDef, IDynamicDatatableRow, IDynamicDatatableRowActionDef } from './datatable-dynamic-def'\n\nexport function jexlObservable<R = any>(expression: string, context?: any): Observable<R> {\n  return from(jexl.eval(expression, context) as Promise<R>)\n}\n\nexport interface IFilterComponentRecord {\n  component: ComponentType<IDataFilter>\n  options?: any\n  order?: number\n}\n\nexport interface IActionRowExprContext {\n  row: IDynamicDatatableRow\n}\n\n@Component({\n  selector: 'seam-datatable-dynamic',\n  templateUrl: './datatable-dynamic.component.html',\n  styleUrls: ['./datatable-dynamic.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableDynamicComponent implements OnInit {\n\n  @Input()\n  set data(value: IDatatableDynamicDef | undefined | null) {\n    if (value) {\n      this._setDefaults(value)\n    }\n    this._data.next(value)\n  }\n  get data() { return this._data.value }\n  private _data = new BehaviorSubject<IDatatableDynamicDef | undefined | null>(undefined)\n\n  public data$ = this._data.asObservable()\n\n  _exporters$: Observable<IDataExporter[] | undefined>\n  _commonFilterComponents$: Observable<IFilterComponentRecord[]>\n  _hasFullSearch$: Observable<boolean>\n  _hasFilterMenu$: Observable<boolean>\n\n  constructor(\n    @Inject(THESEAM_DATA_EXPORTER) public _dataExporters: IDataExporter[],\n    @Inject(THESEAM_DATA_FILTER_DEF) public _dataFilters: { name: string, component: ComponentType<IDataFilter> }[]\n  ) { }\n\n  ngOnInit() {\n    this._exporters$ = this.data$.pipe(map(data => {\n      if (data && data.filterMenu && Array.isArray(data.filterMenu.exporters)) {\n        return data.filterMenu.exporters\n          .map(e => this._dataExporters.find(de => de.name === e))\n          .filter(notNullOrUndefined)\n      }\n      return undefined\n    }))\n\n    this._commonFilterComponents$ = this.data$.pipe(map(data => {\n      if (\n        data && data.filterMenu && Array.isArray(data.filterMenu.filters) &&\n        this._dataFilters && Array.isArray(this._dataFilters)\n      ) {\n        const commonFilters = data.filterMenu.filters.filter(f => f.type === 'common')\n\n        if (!commonFilters || commonFilters.length < 1) {\n          return []\n        }\n\n        const r = commonFilters\n          .map(cf => {\n            const _df = this._dataFilters.find(df => df.name === cf.name)\n            if (_df) {\n              const record: IFilterComponentRecord = {\n                component: _df.component,\n                options: cf.options,\n                order: cf.order || 0\n              }\n              return record\n            }\n            return null\n          })\n          .filter(notNullOrUndefined)\n\n        return r\n      }\n      return []\n    }))\n\n    this._hasFullSearch$ = this.data$.pipe(map(data => {\n      if (data && data.filterMenu && Array.isArray(data.filterMenu.filters)\n        && data.filterMenu.filters.findIndex(f => f.type === 'full-search') !== -1\n      ) {\n        return true\n      }\n      return false\n    }))\n\n    this._hasFilterMenu$ = this.data$.pipe(\n      switchMap(data => {\n        if (data && data.filterMenu) {\n          if (data.filterMenu.state === 'always-visible') {\n            return of(true)\n          } else if (data.filterMenu.state === 'hidden') {\n            return of(false)\n          }\n        }\n\n        return combineLatest([\n          this._exporters$.pipe(map(e => (e || []).length > 0)),\n          this._commonFilterComponents$.pipe(map(cfc => cfc.length > 0)),\n          this._hasFullSearch$\n        ]).pipe(map(v => v.indexOf(true) !== -1))\n      })\n    )\n  }\n\n  private _setDefaults(def: IDatatableDynamicDef): void {\n    for (const col of def.columns) {\n      if (!col.cellType) {\n        col.cellType = 'string'\n      }\n    }\n\n    if (def.filterMenu) {\n      if (!def.filterMenu.state) {\n        def.filterMenu.state = 'default'\n      }\n    }\n\n    if (def.options) {\n      if (def.options.virtualization === undefined || def.options.virtualization === null) {\n        def.options.virtualization = false\n      }\n    }\n  }\n\n  public _rowActions(row: IDynamicDatatableRow, rowActions: IDynamicDatatableRowActionDef[]): Observable<IDynamicDatatableRowActionDef[]> {\n    // TODO: Fix async eval.\n\n    if (!rowActions) { return of([]) }\n\n    return from(rowActions).pipe(\n      // concatMap(rowAction => rowAction.isHiddenExpr\n      //   ? jexlObservable(rowAction.isHiddenExpr).pipe(take(1), map(v => v ? rowAction : undefined))\n      //   : of(rowAction)\n      // ),\n\n      map(rowAction => {\n        if (rowAction.isHiddenExpr) {\n          const context = this._getActionRowContext(row, rowAction)\n          const isHidden = jexl.evalSync(rowAction.isHiddenExpr, context)\n          return isHidden ? undefined : rowAction\n        }\n        return rowAction\n      }),\n\n      toArray(),\n      map(v => v.filter(notNullOrUndefined)),\n      // tap(r => console.log('result', r)),\n    )\n  }\n\n  private _getActionRowContext(row: IDynamicDatatableRow, rowActionDef: IDynamicDatatableRowActionDef): IActionRowExprContext {\n    return {\n      row\n    }\n  }\n\n}\n",
            "properties": [
                {
                    "name": "row",
                    "type": "IDynamicDatatableRow",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IActivatedRouteWithData",
            "id": "interface-IActivatedRouteWithData-c01c248b2ce09f10f62825de082d58d6",
            "file": "projects/ui-common/src/lib/utils/router/operators/activatedRoutesWithDataProperty.ts",
            "type": "interface",
            "sourceCode": "import { ActivatedRoute, Data } from '@angular/router'\nimport { combineLatest, Observable } from 'rxjs'\nimport { map, switchMap } from 'rxjs/operators'\n\nimport { leafChildRoute } from '../leafChildRoute'\n\nexport interface IActivatedRouteWithData {\n  route: ActivatedRoute\n  data: Data\n}\n\nfunction hasRouteConfigDataProp(route: ActivatedRoute, prop: string) {\n  return !!(route && route.routeConfig && route.routeConfig.data && route.routeConfig.data.hasOwnProperty(prop))\n}\n\nfunction hasRouteConfigResolveProp(route: ActivatedRoute, prop: string) {\n  return !!(route && route.routeConfig && route.routeConfig.resolve && route.routeConfig.resolve.hasOwnProperty(prop))\n}\n\nexport function activatedRoutesWithDataProperty(prop: string, mustHaveDefined: boolean = false) {\n  const _data = (r: ActivatedRoute) => r.data.pipe(map(_d => ({ route: r, data: _d })))\n  return (source$: Observable<ActivatedRoute>): Observable<IActivatedRouteWithData[]> =>\n    source$.pipe(\n      map(route => leafChildRoute(route)),\n      map(route => route.pathFromRoot),\n      switchMap(routes => combineLatest(routes.map(r => _data(r)))),\n      map(v => v.filter(_v => _v.data.hasOwnProperty(prop))),\n      map(v => mustHaveDefined\n        ? v.filter(_v => hasRouteConfigDataProp(_v.route, prop) || hasRouteConfigResolveProp(_v.route, prop))\n        : v\n      )\n    )\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "Data",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "route",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ICalucatedValueContext",
            "id": "interface-ICalucatedValueContext-ccdc5503ec3977d847140eb9bccc0047",
            "file": "projects/ui-common/src/lib/table-cell-types/table-cell-types-models.ts",
            "type": "interface",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\n\nimport { ITableCellData } from '../table/index'\n\nexport interface ITableCellTypeManifest {\n  /**\n   * Name used to reference the cell type. Must be unique to avoid incorrect cell selection.\n   */\n  name: string\n  /**\n   * The cell type component.\n   *\n   * TODO: Add support for lazy loaded cells. This isn't important yet, but\n   * later on we may have many unused cell types or a large cell type that isn't\n   * used often.\n   */\n  component: ComponentType<{}> /* | string */ // TODO: Add string for lazy loaded cell support.\n}\n\nexport interface ICalucatedValueContext<R = any, V = any>\n  // TODO: When context usage is better known the Partial should be removed and\n  // to clearly define expected values in context.\n  extends Partial<ITableCellData<R, V>> {\n  [key: string]: any\n}\n\nexport type CalculatedValueContextFn = () => ICalucatedValueContext\n\nexport type CaluclatedValueContextType = ICalucatedValueContext | CalculatedValueContextFn\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-ccdc5503ec3977d847140eb9bccc0047",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "any",
                    "line": 23
                }
            ],
            "kind": 159,
            "methods": [],
            "extends": "Partial"
        },
        {
            "name": "ICanToggleEdit",
            "id": "interface-ICanToggleEdit-e5a83968703136334913b14ef91207fc",
            "file": "projects/ui-common/src/lib/toggle-edit/models/can-toggle-edit.ts",
            "type": "interface",
            "sourceCode": "export interface ICanToggleEdit {\n\n  isEditing(): boolean\n\n  toggleEditing(isEditing?: boolean): void\n\n  startEditing(): void\n\n  stopEditing(): void\n\n  keydownEvent(event: KeyboardEvent): void\n\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "isEditing",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 4
                },
                {
                    "name": "keydownEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startEditing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "stopEditing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                },
                {
                    "name": "toggleEditing",
                    "args": [
                        {
                            "name": "isEditing",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "isEditing",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ICellContext",
            "id": "interface-ICellContext-0914509fd948fbd67240e2a189b3b106",
            "file": "projects/ui-common/src/lib/datatable/datatable/datatable.component.ts",
            "type": "interface",
            "sourceCode": "import { animate, style, transition, trigger } from '@angular/animations'\nimport {\n  ChangeDetectionStrategy, Component, ContentChild, ContentChildren,\n  ElementRef, EventEmitter, forwardRef, InjectionToken, Input, OnInit, Output, QueryList, ViewChild\n} from '@angular/core'\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs'\nimport { switchMap } from 'rxjs/operators'\n\nimport { faChevronDown, faChevronRight, faEllipsisH, faSpinner } from '@fortawesome/free-solid-svg-icons'\nimport { ColumnMode, ContextmenuType, SelectionType, SortType, TreeStatus } from '@marklb/ngx-datatable'\nimport { DatatableComponent as NgxDatatableComponent } from '@marklb/ngx-datatable'\nimport { camelCase, deCamelCase, getterForProp, isNullOrUndefined } from '@marklb/ngx-datatable/release/utils'\n\nimport { composeDataFilters, IDataFilter } from '../../data-filters/index'\nimport { IElementResizedEvent } from '../../shared/index'\n\nimport { DatatableActionMenuComponent } from '../datatable-action-menu/datatable-action-menu.component'\nimport { DatatableColumnComponent } from '../datatable-column/datatable-column.component'\nimport { DatatableMenuBarComponent } from '../datatable-menu-bar/datatable-menu-bar.component'\nimport { DatatableRowActionItemDirective } from '../directives/datatable-row-action-item.directive'\nimport { ITheSeamDatatableColumn } from '../models/table-column'\n\n/**\n * NOTE: This is still being worked on. I am trying to figure out this model\n * because `ngx-datatable` just uses an untyped object and sets properties in\n * multiple places.\n */\nexport interface ICellContext {\n  allRowsSelected: false\n\n  selectFn: () => any\n  sortDir?: 'asc' | 'desc'\n  sortFn: () => any\n\n  expanded?: boolean\n\n  onCheckboxChangeFn?: any\n  activateFn?: any\n  row?: any\n  group?: any\n  value?: any\n  column?: ITheSeamDatatableColumn\n  rowHeight?: number\n  isSelected?: boolean\n  rowIndex?: number\n  treeStatus?: TreeStatus\n  onTreeAction?: any\n}\n\nexport interface IDatatableAccessor {\n  columns: ITheSeamDatatableColumn[]\n  rows$: Observable<any[]>\n}\n\n/**\n * Intended for internal classes declared by the `TheSeamDatatableModule`.\n */\nexport const THESEAM_DATATABLE = new InjectionToken<IDataFilter>('LibDatatable')\n\nexport const _THESEAM_DATATABLE: any = {\n  provide: THESEAM_DATATABLE,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DatatableComponent)\n}\n\n@Component({\n  selector: 'seam-datatable',\n  templateUrl: './datatable.component.html',\n  styleUrls: ['./datatable.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('slideDown', [\n      transition(':enter', [\n        style({ transform: 'translateY(-20%)', opacity: '0' }),\n        animate('250ms', style({ transform: 'translateY(0)', opacity: '1' })),\n      ]),\n      transition(':leave', [\n        style({ transform: 'translateY(0)', opacity: '1' }),\n        animate('250ms', style({ transform: 'translateY(-20%)', opacity: '0' })),\n      ])\n    ])\n  ],\n  providers: [ _THESEAM_DATATABLE ]\n})\nexport class DatatableComponent implements OnInit {\n\n  faEllipsisH = faEllipsisH\n  faChevronDown = faChevronDown\n  faChevronRight = faChevronRight\n  faSpinner = faSpinner\n\n  private _filtersSubject = new BehaviorSubject<IDataFilter[]>([])\n\n\n  @Input() targetMarkerTemplate: any\n\n  @Input()\n  get columns(): ITheSeamDatatableColumn[] { return this._columns }\n  set columns(value: ITheSeamDatatableColumn[]) {\n    if (value) {\n      // Need to call `setColumnDefaults` before ngx-datatable gets it because\n      // of how this wrapper is implemented.\n\n      // NOTE: Custom `this._setColumnDefaults` used because the\n      // `setColumnDefaults` imported from `ngx-datatable` is causing a circular\n      // dependency.\n      //\n      // TODO: Consider implementing differently to avoid maintaining defaults\n      // or having to remove the properties set by `setColumnDefaults` function\n      // in the `ngx-datatable` utilities that shouldn't be set yet.\n      this._setColumnDefaults(value)\n    }\n    this._columns = value\n  }\n  private _columns: ITheSeamDatatableColumn[]\n\n  @Input()\n  get rows(): any[] { return this._rows.value }\n  set rows(value: any[]) { this._rows.next(value || []) }\n  private _rows = new BehaviorSubject<any[]>([])\n\n  public rows$: Observable<any[]>\n\n  @Input() columnMode: ColumnMode = ColumnMode.force\n\n  @Input() groupRowsBy: string\n  @Input() groupedRows: any[]\n\n  @Input() selected: any[] = []\n\n  @Input() externalPaging = false\n  @Input() externalSorting = false\n\n  @Input() limit: number | undefined\n  @Input() count = 0\n  @Input() offset = 0\n\n  @Input() loadingIndicator = false\n\n  @Input() selectionType: SelectionType\n\n  @Input() reorderable = true\n  @Input() swapColumns = true\n  @Input() sortType: SortType = SortType.single\n  @Input() sorts: any[] = []\n\n  @Input() cssClasses: any = {\n    sortAscending: 'datatable-icon-up',\n    sortDescending: 'datatable-icon-down',\n    pagerLeftArrow: 'datatable-icon-left',\n    pagerRightArrow: 'datatable-icon-right',\n    pagerPrevious: 'datatable-icon-prev',\n    pagerNext: 'datatable-icon-skip'\n  }\n\n  @Input() messages: any = {\n    // Message to show when array is presented\n    // but contains no values\n    emptyMessage: 'No data to display',\n\n    // Footer total message\n    totalMessage: 'total',\n\n    // Footer selected message\n    selectedMessage: 'selected'\n  }\n\n  @Input() rowIdentity: (x: any) => any = ((x: any) => x)\n\n  @Input() rowClass: any\n\n  @Input() selectCheck: any\n  @Input() displayCheck: (row: any, column?: any, value?: any) => boolean\n\n  @Input() groupExpansionDefault = false\n\n  @Input() trackByProp: string\n\n  @Input() selectAllRowsOnPage = false\n\n  @Input() treeFromRelation: string\n  @Input() treeToRelation: string\n  @Input() summaryRow = false\n  @Input() summaryHeight = 30\n  @Input() summaryPosition = 'top'\n\n  @Input() virtualization = false\n\n  @Input() headerHeight = 50\n  @Input() rowHeight = 50\n  @Input() footerHeight = 40\n\n  @Input() scrollbarV = true\n  @Input() scrollbarH = true\n\n  @Output() scroll = new EventEmitter<any>()\n  @Output() activate = new EventEmitter<any>()\n  @Output() select = new EventEmitter<any>()\n  @Output() sort = new EventEmitter<any>()\n  @Output() page = new EventEmitter<any>()\n  @Output() reorder = new EventEmitter<any>()\n  @Output() resize = new EventEmitter<any>()\n  @Output() tableContextmenu = new EventEmitter<{ event: MouseEvent, type: ContextmenuType, content: any }>(false)\n  @Output() treeAction = new EventEmitter<any>()\n\n  @Output() readonly actionRefreshRequest = new EventEmitter<void>()\n\n  @ContentChildren(DatatableColumnComponent) columnComponents: QueryList<DatatableColumnComponent>\n\n  @ContentChild(DatatableActionMenuComponent, { static: true }) actionMenu: DatatableActionMenuComponent\n  @ContentChild(DatatableRowActionItemDirective, { static: true }) rowActionItem: DatatableRowActionItemDirective\n\n  @ContentChild(DatatableMenuBarComponent, { static: false })\n  get menuBarComponent(): DatatableMenuBarComponent { return this._menuBarComponent }\n  set menuBarComponent(value: DatatableMenuBarComponent) {\n    this._menuBarComponent = value\n\n    if (this._menuBarSub) { this._menuBarSub.unsubscribe() }\n\n    if (value) {\n      this._setMenuBarFilters(value.filters())\n\n      this._menuBarSub = this._menuBarComponent.filtersChanged\n        .subscribe(v => { this._setMenuBarFilters(value.filters()) })\n    }\n  }\n  private _menuBarComponent: DatatableMenuBarComponent\n  private _menuBarSub: Subscription\n\n  @ViewChild(NgxDatatableComponent, { static: false }) ngxDatatable: NgxDatatableComponent\n  @ViewChild(NgxDatatableComponent, { read: ElementRef, static: false }) ngxDatatableElement: ElementRef\n\n  constructor() {\n    this.rows$ = this._filtersSubject.asObservable()\n      .pipe(switchMap(filters => this._rows.asObservable()\n        .pipe(composeDataFilters(filters))\n      ))\n  }\n\n  ngOnInit() { }\n\n  private _setMenuBarFilters(filters: IDataFilter[]) {\n    this._filtersSubject.next(filters || [])\n  }\n\n  public getColumnComponent(propName: string): DatatableColumnComponent | null {\n    if (!this.columnComponents || this.columnComponents.length === 0) {\n      return null\n    }\n\n    const tpl = this.columnComponents.find(t => t.prop === propName)\n    if (tpl) {\n      return tpl\n    }\n\n    return null\n  }\n\n  _columnData(col: any): { col: any, comp: DatatableColumnComponent | null } {\n    const comp = this.getColumnComponent(col.prop)\n    return { col, comp }\n  }\n\n  public trackByFnColumn(index, item) {\n    return item.prop\n  }\n\n  public onDatatableResize(event: IElementResizedEvent) {\n    // console.log('onDatatableResize')\n    if (this.ngxDatatable && this.ngxDatatableElement && this.ngxDatatableElement.nativeElement) {\n      // TODO: Consider integrating this into the ngx-datatable library to avoid\n      // multiple resize calls when the table resizes itself.\n      this.ngxDatatable.recalculate()\n    }\n  }\n\n  /**\n   * This is just the `setColumnDefaults` function from\n   * '@marklb/ngx-datatable/release/utils' without the internally maintained\n   * properties( the props starting with '$$').\n   */\n  private _setColumnDefaults(columns: ITheSeamDatatableColumn[]) {\n    if (!columns) { return }\n\n    // Only one column should hold the tree view\n    // Thus if multiple columns are provided with\n    // isTreeColumn as true we take only the first one\n    let treeColumnFound = false\n\n    for (const column of columns) {\n\n      // prop can be numeric; zero is valid not a missing prop\n      // translate name => prop\n      if (isNullOrUndefined(column.prop) && column.name) {\n        column.prop = camelCase(column.name)\n      }\n\n      if (!column.$$valueGetter && column.prop) {\n        column.$$valueGetter = getterForProp(column.prop)\n      }\n\n      // format props if no name passed\n      if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n        column.name = deCamelCase(String(column.prop))\n      }\n\n      if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n        column.name = '' // Fixes IE and Edge displaying `null`\n      }\n\n      if (!column.hasOwnProperty('resizeable')) {\n        column.resizeable = true\n      }\n\n      if (!column.hasOwnProperty('sortable')) {\n        column.sortable = true\n      }\n\n      if (!column.hasOwnProperty('draggable')) {\n        column.draggable = true\n      }\n\n      if (!column.hasOwnProperty('canAutoResize')) {\n        column.canAutoResize = true\n      }\n\n      if (!column.hasOwnProperty('width')) {\n        column.width = 150\n      }\n\n      if (!column.hasOwnProperty('isTreeColumn')) {\n        column.isTreeColumn = false\n      } else {\n        if (column.isTreeColumn && !treeColumnFound) {\n          // If the first column with isTreeColumn is true found\n          // we mark that treeCoulmn is found\n          treeColumnFound = true\n        } else {\n          // After that isTreeColumn property for any other column\n          // will be set as false\n          column.isTreeColumn = false\n        }\n      }\n    }\n  }\n\n  _onTreeAction(event: any) {\n    const index = event.rowIndex\n    const row = event.row\n    if (row.treeStatus === 'collapsed') {\n      row.treeStatus = 'expanded'\n    } else {\n      row.treeStatus = 'collapsed'\n    }\n    this.rows = [ ...this.rows ]\n  }\n\n  public triggerActionRefreshRequest() {\n    this.actionRefreshRequest.emit(undefined)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "activateFn",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "allRowsSelected",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "column",
                    "type": "ITheSeamDatatableColumn",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "expanded",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "group",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "isSelected",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "onCheckboxChangeFn",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "onTreeAction",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "row",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "rowHeight",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "rowIndex",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "selectFn",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sortDir",
                    "type": "\"asc\" | \"desc\"",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "sortFn",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "treeStatus",
                    "type": "TreeStatus",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>NOTE: This is still being worked on. I am trying to figure out this model\nbecause <code>ngx-datatable</code> just uses an untyped object and sets properties in\nmultiple places.</p>\n",
            "methods": []
        },
        {
            "name": "IDashboardWidgetsColumnRecord",
            "id": "interface-IDashboardWidgetsColumnRecord-70f61bf9c2cdce65dc86c4e57f024d41",
            "file": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets-item.ts",
            "type": "interface",
            "sourceCode": "import { ComponentPortal, ComponentType } from '@angular/cdk/portal'\n\nexport interface IDashboardWidgetsItemDef<T = any> {\n  widgetId: number\n  col?: number\n  order?: number\n\n  componentFactoryResolver?: any\n  type: ComponentType<T>\n}\n\nexport interface IDashboardWidgetsItem<T = any> {\n  widgetId: number\n  col: number\n  order: number\n\n  portal: ComponentPortal<T>\n\n  __itemDef: IDashboardWidgetsItemDef\n}\n\nexport interface IDashboardWidgetsColumnRecord {\n  column: number\n  items: IDashboardWidgetsItem[]\n}\n",
            "properties": [
                {
                    "name": "column",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "items",
                    "type": "IDashboardWidgetsItem[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDashboardWidgetsItem",
            "id": "interface-IDashboardWidgetsItem-70f61bf9c2cdce65dc86c4e57f024d41",
            "file": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets-item.ts",
            "type": "interface",
            "sourceCode": "import { ComponentPortal, ComponentType } from '@angular/cdk/portal'\n\nexport interface IDashboardWidgetsItemDef<T = any> {\n  widgetId: number\n  col?: number\n  order?: number\n\n  componentFactoryResolver?: any\n  type: ComponentType<T>\n}\n\nexport interface IDashboardWidgetsItem<T = any> {\n  widgetId: number\n  col: number\n  order: number\n\n  portal: ComponentPortal<T>\n\n  __itemDef: IDashboardWidgetsItemDef\n}\n\nexport interface IDashboardWidgetsColumnRecord {\n  column: number\n  items: IDashboardWidgetsItem[]\n}\n",
            "properties": [
                {
                    "name": "__itemDef",
                    "type": "IDashboardWidgetsItemDef",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "portal",
                    "type": "ComponentPortal<T>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "widgetId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDashboardWidgetsItemDef",
            "id": "interface-IDashboardWidgetsItemDef-70f61bf9c2cdce65dc86c4e57f024d41",
            "file": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets-item.ts",
            "type": "interface",
            "sourceCode": "import { ComponentPortal, ComponentType } from '@angular/cdk/portal'\n\nexport interface IDashboardWidgetsItemDef<T = any> {\n  widgetId: number\n  col?: number\n  order?: number\n\n  componentFactoryResolver?: any\n  type: ComponentType<T>\n}\n\nexport interface IDashboardWidgetsItem<T = any> {\n  widgetId: number\n  col: number\n  order: number\n\n  portal: ComponentPortal<T>\n\n  __itemDef: IDashboardWidgetsItemDef\n}\n\nexport interface IDashboardWidgetsColumnRecord {\n  column: number\n  items: IDashboardWidgetsItem[]\n}\n",
            "properties": [
                {
                    "name": "col",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "componentFactoryResolver",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "type": "ComponentType<T>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "widgetId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDataExporter",
            "id": "interface-IDataExporter-f265139e92104003d6c50bda4aa73f92",
            "file": "projects/ui-common/src/lib/data-exporter/data-exporter.ts",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { switchMap } from 'rxjs/operators'\n\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\n\nexport type IDataExporterFunction = <T>(data: T[]) => Observable<T[]>\n\nexport interface IDataExporter {\n  /**\n   * Name to identify the exporter.\n   */\n  readonly name: string\n\n  /**\n   * Label to use for exporter in user visible text.\n   *\n   * default: `name`\n   */\n  label?: string\n\n  /**\n   * Icon to represent exporter.\n   */\n  icon?: string | IconProp\n\n  /**\n   * Export the data based on the data to some format.\n   */\n  export<T>(data: T[]): Observable<boolean>\n}\n\nexport const THESEAM_DATA_EXPORTER = new InjectionToken<IDataExporter>('TheSeamDataExporter')\n\nexport function exportOperator<T>(exportFn: IDataExporterFunction) {\n  return (source$: Observable<T[]>) =>\n    source$.pipe(switchMap(exportFn))\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "type": "string | IconProp",
                    "optional": true,
                    "description": "<p>Icon to represent exporter.</p>\n",
                    "line": 25
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Label to use for exporter in user visible text.</p>\n<p>default: <code>name</code></p>\n",
                    "line": 20
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name to identify the exporter.</p>\n",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 30,
                    "description": "<p>Export the data based on the data to some format.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IDataFilter",
            "id": "interface-IDataFilter-eeb36799c414fae6db68da345e352eda",
            "file": "projects/ui-common/src/lib/data-filters/data-filter.ts",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { switchMap } from 'rxjs/operators'\n\nexport type IDataFilterFunction = <T>(data: T[]) => Observable<T[]>\n\n// TODO: Consider adding something, such as a priority or order, to allow the\n// order the filter functions are called in to be declared/influenced\n// externally. This would allow the filters that will most likely filter out\n// many records quickly to be run before the heavy processing filters.\nexport interface IDataFilter {\n  /**\n   * Name used when referencing filter by string.\n   */\n  name: string\n  /**\n   * Unique value to prevent a filter being used more than once if it ends up\n   * being registered more than once.\n   */\n  uid: string\n  /**\n   * Filters the data based on the conditions of the filter.\n   */\n  filter<T>(data: T[]): Observable<T[]>\n}\n\nexport const THESEAM_DATA_FILTER = new InjectionToken<IDataFilter>('TheSeamDataFilter')\nexport const THESEAM_DATA_FILTER_OPTIONS = new InjectionToken<{}>('TheSeamDataFilterOptions')\n\nexport function filterOperator<T>(filterFn: IDataFilterFunction) {\n  return (source$: Observable<T[]>) =>\n    source$.pipe(switchMap(filterFn))\n}\n\nexport function composeDataFilters(filters: IDataFilter[]) {\n  const filterFunctions = filters.map(f => filterOperator(f.filter.bind(f)))\n  return (source$: Observable<any>) => {\n    let src$ = source$\n    for (const f of filterFunctions) {\n      src$ = src$.pipe(f)\n    }\n    return src$\n  }\n}\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name used when referencing filter by string.</p>\n",
                    "line": 15
                },
                {
                    "name": "uid",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Unique value to prevent a filter being used more than once if it ends up\nbeing registered more than once.</p>\n",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 24,
                    "description": "<p>Filters the data based on the conditions of the filter.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IDataFilterDef",
            "id": "interface-IDataFilterDef-5992c0029fa9c0dfb6f9f6e413c0151c",
            "file": "projects/ui-common/src/lib/data-filters/data-filter-def.ts",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core'\nimport { IDataFilter } from './data-filter'\n\nexport interface IDataFilterDef {\n  name: string\n  // TODO: Try to find a better way to type this to make sure it is clear that\n  // it should also be a component.\n  component: IDataFilter\n}\n\nexport const THESEAM_DATA_FILTER_DEF = new InjectionToken<IDataFilterDef[]>('TheSeamDataFilter')\n",
            "properties": [
                {
                    "name": "component",
                    "type": "IDataFilter",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDatatableAccessor",
            "id": "interface-IDatatableAccessor-0914509fd948fbd67240e2a189b3b106",
            "file": "projects/ui-common/src/lib/datatable/datatable/datatable.component.ts",
            "type": "interface",
            "sourceCode": "import { animate, style, transition, trigger } from '@angular/animations'\nimport {\n  ChangeDetectionStrategy, Component, ContentChild, ContentChildren,\n  ElementRef, EventEmitter, forwardRef, InjectionToken, Input, OnInit, Output, QueryList, ViewChild\n} from '@angular/core'\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs'\nimport { switchMap } from 'rxjs/operators'\n\nimport { faChevronDown, faChevronRight, faEllipsisH, faSpinner } from '@fortawesome/free-solid-svg-icons'\nimport { ColumnMode, ContextmenuType, SelectionType, SortType, TreeStatus } from '@marklb/ngx-datatable'\nimport { DatatableComponent as NgxDatatableComponent } from '@marklb/ngx-datatable'\nimport { camelCase, deCamelCase, getterForProp, isNullOrUndefined } from '@marklb/ngx-datatable/release/utils'\n\nimport { composeDataFilters, IDataFilter } from '../../data-filters/index'\nimport { IElementResizedEvent } from '../../shared/index'\n\nimport { DatatableActionMenuComponent } from '../datatable-action-menu/datatable-action-menu.component'\nimport { DatatableColumnComponent } from '../datatable-column/datatable-column.component'\nimport { DatatableMenuBarComponent } from '../datatable-menu-bar/datatable-menu-bar.component'\nimport { DatatableRowActionItemDirective } from '../directives/datatable-row-action-item.directive'\nimport { ITheSeamDatatableColumn } from '../models/table-column'\n\n/**\n * NOTE: This is still being worked on. I am trying to figure out this model\n * because `ngx-datatable` just uses an untyped object and sets properties in\n * multiple places.\n */\nexport interface ICellContext {\n  allRowsSelected: false\n\n  selectFn: () => any\n  sortDir?: 'asc' | 'desc'\n  sortFn: () => any\n\n  expanded?: boolean\n\n  onCheckboxChangeFn?: any\n  activateFn?: any\n  row?: any\n  group?: any\n  value?: any\n  column?: ITheSeamDatatableColumn\n  rowHeight?: number\n  isSelected?: boolean\n  rowIndex?: number\n  treeStatus?: TreeStatus\n  onTreeAction?: any\n}\n\nexport interface IDatatableAccessor {\n  columns: ITheSeamDatatableColumn[]\n  rows$: Observable<any[]>\n}\n\n/**\n * Intended for internal classes declared by the `TheSeamDatatableModule`.\n */\nexport const THESEAM_DATATABLE = new InjectionToken<IDataFilter>('LibDatatable')\n\nexport const _THESEAM_DATATABLE: any = {\n  provide: THESEAM_DATATABLE,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DatatableComponent)\n}\n\n@Component({\n  selector: 'seam-datatable',\n  templateUrl: './datatable.component.html',\n  styleUrls: ['./datatable.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('slideDown', [\n      transition(':enter', [\n        style({ transform: 'translateY(-20%)', opacity: '0' }),\n        animate('250ms', style({ transform: 'translateY(0)', opacity: '1' })),\n      ]),\n      transition(':leave', [\n        style({ transform: 'translateY(0)', opacity: '1' }),\n        animate('250ms', style({ transform: 'translateY(-20%)', opacity: '0' })),\n      ])\n    ])\n  ],\n  providers: [ _THESEAM_DATATABLE ]\n})\nexport class DatatableComponent implements OnInit {\n\n  faEllipsisH = faEllipsisH\n  faChevronDown = faChevronDown\n  faChevronRight = faChevronRight\n  faSpinner = faSpinner\n\n  private _filtersSubject = new BehaviorSubject<IDataFilter[]>([])\n\n\n  @Input() targetMarkerTemplate: any\n\n  @Input()\n  get columns(): ITheSeamDatatableColumn[] { return this._columns }\n  set columns(value: ITheSeamDatatableColumn[]) {\n    if (value) {\n      // Need to call `setColumnDefaults` before ngx-datatable gets it because\n      // of how this wrapper is implemented.\n\n      // NOTE: Custom `this._setColumnDefaults` used because the\n      // `setColumnDefaults` imported from `ngx-datatable` is causing a circular\n      // dependency.\n      //\n      // TODO: Consider implementing differently to avoid maintaining defaults\n      // or having to remove the properties set by `setColumnDefaults` function\n      // in the `ngx-datatable` utilities that shouldn't be set yet.\n      this._setColumnDefaults(value)\n    }\n    this._columns = value\n  }\n  private _columns: ITheSeamDatatableColumn[]\n\n  @Input()\n  get rows(): any[] { return this._rows.value }\n  set rows(value: any[]) { this._rows.next(value || []) }\n  private _rows = new BehaviorSubject<any[]>([])\n\n  public rows$: Observable<any[]>\n\n  @Input() columnMode: ColumnMode = ColumnMode.force\n\n  @Input() groupRowsBy: string\n  @Input() groupedRows: any[]\n\n  @Input() selected: any[] = []\n\n  @Input() externalPaging = false\n  @Input() externalSorting = false\n\n  @Input() limit: number | undefined\n  @Input() count = 0\n  @Input() offset = 0\n\n  @Input() loadingIndicator = false\n\n  @Input() selectionType: SelectionType\n\n  @Input() reorderable = true\n  @Input() swapColumns = true\n  @Input() sortType: SortType = SortType.single\n  @Input() sorts: any[] = []\n\n  @Input() cssClasses: any = {\n    sortAscending: 'datatable-icon-up',\n    sortDescending: 'datatable-icon-down',\n    pagerLeftArrow: 'datatable-icon-left',\n    pagerRightArrow: 'datatable-icon-right',\n    pagerPrevious: 'datatable-icon-prev',\n    pagerNext: 'datatable-icon-skip'\n  }\n\n  @Input() messages: any = {\n    // Message to show when array is presented\n    // but contains no values\n    emptyMessage: 'No data to display',\n\n    // Footer total message\n    totalMessage: 'total',\n\n    // Footer selected message\n    selectedMessage: 'selected'\n  }\n\n  @Input() rowIdentity: (x: any) => any = ((x: any) => x)\n\n  @Input() rowClass: any\n\n  @Input() selectCheck: any\n  @Input() displayCheck: (row: any, column?: any, value?: any) => boolean\n\n  @Input() groupExpansionDefault = false\n\n  @Input() trackByProp: string\n\n  @Input() selectAllRowsOnPage = false\n\n  @Input() treeFromRelation: string\n  @Input() treeToRelation: string\n  @Input() summaryRow = false\n  @Input() summaryHeight = 30\n  @Input() summaryPosition = 'top'\n\n  @Input() virtualization = false\n\n  @Input() headerHeight = 50\n  @Input() rowHeight = 50\n  @Input() footerHeight = 40\n\n  @Input() scrollbarV = true\n  @Input() scrollbarH = true\n\n  @Output() scroll = new EventEmitter<any>()\n  @Output() activate = new EventEmitter<any>()\n  @Output() select = new EventEmitter<any>()\n  @Output() sort = new EventEmitter<any>()\n  @Output() page = new EventEmitter<any>()\n  @Output() reorder = new EventEmitter<any>()\n  @Output() resize = new EventEmitter<any>()\n  @Output() tableContextmenu = new EventEmitter<{ event: MouseEvent, type: ContextmenuType, content: any }>(false)\n  @Output() treeAction = new EventEmitter<any>()\n\n  @Output() readonly actionRefreshRequest = new EventEmitter<void>()\n\n  @ContentChildren(DatatableColumnComponent) columnComponents: QueryList<DatatableColumnComponent>\n\n  @ContentChild(DatatableActionMenuComponent, { static: true }) actionMenu: DatatableActionMenuComponent\n  @ContentChild(DatatableRowActionItemDirective, { static: true }) rowActionItem: DatatableRowActionItemDirective\n\n  @ContentChild(DatatableMenuBarComponent, { static: false })\n  get menuBarComponent(): DatatableMenuBarComponent { return this._menuBarComponent }\n  set menuBarComponent(value: DatatableMenuBarComponent) {\n    this._menuBarComponent = value\n\n    if (this._menuBarSub) { this._menuBarSub.unsubscribe() }\n\n    if (value) {\n      this._setMenuBarFilters(value.filters())\n\n      this._menuBarSub = this._menuBarComponent.filtersChanged\n        .subscribe(v => { this._setMenuBarFilters(value.filters()) })\n    }\n  }\n  private _menuBarComponent: DatatableMenuBarComponent\n  private _menuBarSub: Subscription\n\n  @ViewChild(NgxDatatableComponent, { static: false }) ngxDatatable: NgxDatatableComponent\n  @ViewChild(NgxDatatableComponent, { read: ElementRef, static: false }) ngxDatatableElement: ElementRef\n\n  constructor() {\n    this.rows$ = this._filtersSubject.asObservable()\n      .pipe(switchMap(filters => this._rows.asObservable()\n        .pipe(composeDataFilters(filters))\n      ))\n  }\n\n  ngOnInit() { }\n\n  private _setMenuBarFilters(filters: IDataFilter[]) {\n    this._filtersSubject.next(filters || [])\n  }\n\n  public getColumnComponent(propName: string): DatatableColumnComponent | null {\n    if (!this.columnComponents || this.columnComponents.length === 0) {\n      return null\n    }\n\n    const tpl = this.columnComponents.find(t => t.prop === propName)\n    if (tpl) {\n      return tpl\n    }\n\n    return null\n  }\n\n  _columnData(col: any): { col: any, comp: DatatableColumnComponent | null } {\n    const comp = this.getColumnComponent(col.prop)\n    return { col, comp }\n  }\n\n  public trackByFnColumn(index, item) {\n    return item.prop\n  }\n\n  public onDatatableResize(event: IElementResizedEvent) {\n    // console.log('onDatatableResize')\n    if (this.ngxDatatable && this.ngxDatatableElement && this.ngxDatatableElement.nativeElement) {\n      // TODO: Consider integrating this into the ngx-datatable library to avoid\n      // multiple resize calls when the table resizes itself.\n      this.ngxDatatable.recalculate()\n    }\n  }\n\n  /**\n   * This is just the `setColumnDefaults` function from\n   * '@marklb/ngx-datatable/release/utils' without the internally maintained\n   * properties( the props starting with '$$').\n   */\n  private _setColumnDefaults(columns: ITheSeamDatatableColumn[]) {\n    if (!columns) { return }\n\n    // Only one column should hold the tree view\n    // Thus if multiple columns are provided with\n    // isTreeColumn as true we take only the first one\n    let treeColumnFound = false\n\n    for (const column of columns) {\n\n      // prop can be numeric; zero is valid not a missing prop\n      // translate name => prop\n      if (isNullOrUndefined(column.prop) && column.name) {\n        column.prop = camelCase(column.name)\n      }\n\n      if (!column.$$valueGetter && column.prop) {\n        column.$$valueGetter = getterForProp(column.prop)\n      }\n\n      // format props if no name passed\n      if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n        column.name = deCamelCase(String(column.prop))\n      }\n\n      if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n        column.name = '' // Fixes IE and Edge displaying `null`\n      }\n\n      if (!column.hasOwnProperty('resizeable')) {\n        column.resizeable = true\n      }\n\n      if (!column.hasOwnProperty('sortable')) {\n        column.sortable = true\n      }\n\n      if (!column.hasOwnProperty('draggable')) {\n        column.draggable = true\n      }\n\n      if (!column.hasOwnProperty('canAutoResize')) {\n        column.canAutoResize = true\n      }\n\n      if (!column.hasOwnProperty('width')) {\n        column.width = 150\n      }\n\n      if (!column.hasOwnProperty('isTreeColumn')) {\n        column.isTreeColumn = false\n      } else {\n        if (column.isTreeColumn && !treeColumnFound) {\n          // If the first column with isTreeColumn is true found\n          // we mark that treeCoulmn is found\n          treeColumnFound = true\n        } else {\n          // After that isTreeColumn property for any other column\n          // will be set as false\n          column.isTreeColumn = false\n        }\n      }\n    }\n  }\n\n  _onTreeAction(event: any) {\n    const index = event.rowIndex\n    const row = event.row\n    if (row.treeStatus === 'collapsed') {\n      row.treeStatus = 'expanded'\n    } else {\n      row.treeStatus = 'collapsed'\n    }\n    this.rows = [ ...this.rows ]\n  }\n\n  public triggerActionRefreshRequest() {\n    this.actionRefreshRequest.emit(undefined)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "columns",
                    "type": "ITheSeamDatatableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "rows$",
                    "type": "Observable<any[]>",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDatatableDynamicDef",
            "id": "interface-IDatatableDynamicDef-492961ef81d7bc84fb13a32a607a9517",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
            "type": "interface",
            "sourceCode": "import { ThemeTypes } from '../models/index'\n\nimport { IDynamicDatatableCellType } from './models/cell-type'\nimport { DynamicDatatableCellTypeConfig } from './models/cell-type-config'\nimport {\n  DynamicDatatableRowActionApi,\n  DynamicDatatableRowActionLink,\n  DynamicDatatableRowActionModal\n} from './models/row-action'\n\nexport interface IDynamicDatatableColumn<T = IDynamicDatatableCellType> {\n  prop: string\n  name: string\n  /**\n   * Default: 'string'\n   */\n  cellType?: T\n  /**\n   * Config passed to the cell type component.\n   */\n  cellTypeConfig?: DynamicDatatableCellTypeConfig<T>\n  /**\n   * String to display if the exporter uses a header.\n   */\n  exportHeader?: string\n  /**\n   * Expression to calculate export value.\n   * TODO: Implement. Jexl is most likely going to be used.\n   */\n  exportExpr?: string\n}\n\nexport interface IDynamicDatatableRow {\n  [prop: string]: any\n}\n\nexport interface IDynamicDatatableFilterMenuItemDef<O = any> {\n  name: string\n  /**\n   * Default: 'common'\n   */\n  type: 'common' | 'full-search'\n  /**\n   * Default: 0\n   */\n  order?: number\n  options?: O\n}\n\nexport interface IDynamicDatatableFilterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  filters?: IDynamicDatatableFilterMenuItemDef[]\n  exporters?: IDynamicDatatableExporter[]\n}\n\nexport type IDynamicDatatableFooterMenuItemType = 'button' | 'text'\n\nexport interface IDynamicDatatableFooterMenuItem<T = IDynamicDatatableFooterMenuItemType> {\n  type: T\n}\n\nexport interface IDynamicDatatableFooterMenuItemButton extends IDynamicDatatableFooterMenuItem<'button'> {\n  text: string\n  theme: ThemeTypes\n}\n\nexport interface IDynamicDatatableFooterMenuItemText extends IDynamicDatatableFooterMenuItem<'text'> {\n  text: string\n}\n\nexport interface IDynamicDatatableOptions {\n  /**\n   * Default: false\n   */\n  virtualization?: boolean\n}\n\nexport interface IDynamicDatatableFooterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  items?: IDynamicDatatableFooterMenuItem[]\n}\n\nexport type DynamicDatatableRowActionType =\n  DynamicDatatableRowActionLink\n  | DynamicDatatableRowActionApi\n  | DynamicDatatableRowActionModal\n\nexport interface IDynamicDatatableRowActionDef {\n  /**\n   * Label displayed on the menu item.\n   */\n  label: string\n  /**\n   * TODO: Decide on a good way to handle the actions configuration through json.\n   */\n  action?: DynamicDatatableRowActionType\n  /**\n   * Expression executed each row to decide if the action will be visible.\n   */\n  isHiddenExpr?: string\n}\n\n// TODO: Define object definition to allow extra exporter options.\nexport type IDynamicDatatableExporter = 'exporter:csv' | 'exporter:xlsx'\n\nexport interface IDatatableDynamicDef {\n  filterMenu?: IDynamicDatatableFilterMenu\n  columns: IDynamicDatatableColumn[]\n  rows: IDynamicDatatableRow[]\n  rowActions?: IDynamicDatatableRowActionDef[]\n  // footerMenu?: IDynamicDatatableFooterMenu\n  options?: IDynamicDatatableOptions\n}\n",
            "properties": [
                {
                    "name": "columns",
                    "type": "IDynamicDatatableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "filterMenu",
                    "type": "IDynamicDatatableFilterMenu",
                    "optional": true,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "options",
                    "type": "IDynamicDatatableOptions",
                    "optional": true,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "rowActions",
                    "type": "IDynamicDatatableRowActionDef[]",
                    "optional": true,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "rows",
                    "type": "IDynamicDatatableRow[]",
                    "optional": false,
                    "description": "",
                    "line": 115
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDynamicComponentManifest",
            "id": "interface-IDynamicComponentManifest-c9c9d9e8916f0bf9acb52d2c2e8f1067",
            "file": "projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-manifest.ts",
            "type": "interface",
            "sourceCode": "import { LoadChildrenCallback } from '@angular/router'\n\nexport interface IDynamicComponentManifest {\n\n  /** Unique identifier, used in the application to retrieve a ComponentFactory. */\n  componentId: string\n\n  /** Unique identifier, used internally by Angular. */\n  path: string\n\n  /** Component module import or Path to component module. */\n  loadChildren: string | LoadChildrenCallback\n}\n",
            "properties": [
                {
                    "name": "componentId",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Unique identifier, used in the application to retrieve a ComponentFactory. </p>\n",
                    "line": 6
                },
                {
                    "name": "loadChildren",
                    "type": "string | LoadChildrenCallback",
                    "optional": false,
                    "description": "<p>Component module import or Path to component module. </p>\n",
                    "line": 12
                },
                {
                    "name": "path",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Unique identifier, used internally by Angular. </p>\n",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDynamicDatatableColumn",
            "id": "interface-IDynamicDatatableColumn-492961ef81d7bc84fb13a32a607a9517",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
            "type": "interface",
            "sourceCode": "import { ThemeTypes } from '../models/index'\n\nimport { IDynamicDatatableCellType } from './models/cell-type'\nimport { DynamicDatatableCellTypeConfig } from './models/cell-type-config'\nimport {\n  DynamicDatatableRowActionApi,\n  DynamicDatatableRowActionLink,\n  DynamicDatatableRowActionModal\n} from './models/row-action'\n\nexport interface IDynamicDatatableColumn<T = IDynamicDatatableCellType> {\n  prop: string\n  name: string\n  /**\n   * Default: 'string'\n   */\n  cellType?: T\n  /**\n   * Config passed to the cell type component.\n   */\n  cellTypeConfig?: DynamicDatatableCellTypeConfig<T>\n  /**\n   * String to display if the exporter uses a header.\n   */\n  exportHeader?: string\n  /**\n   * Expression to calculate export value.\n   * TODO: Implement. Jexl is most likely going to be used.\n   */\n  exportExpr?: string\n}\n\nexport interface IDynamicDatatableRow {\n  [prop: string]: any\n}\n\nexport interface IDynamicDatatableFilterMenuItemDef<O = any> {\n  name: string\n  /**\n   * Default: 'common'\n   */\n  type: 'common' | 'full-search'\n  /**\n   * Default: 0\n   */\n  order?: number\n  options?: O\n}\n\nexport interface IDynamicDatatableFilterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  filters?: IDynamicDatatableFilterMenuItemDef[]\n  exporters?: IDynamicDatatableExporter[]\n}\n\nexport type IDynamicDatatableFooterMenuItemType = 'button' | 'text'\n\nexport interface IDynamicDatatableFooterMenuItem<T = IDynamicDatatableFooterMenuItemType> {\n  type: T\n}\n\nexport interface IDynamicDatatableFooterMenuItemButton extends IDynamicDatatableFooterMenuItem<'button'> {\n  text: string\n  theme: ThemeTypes\n}\n\nexport interface IDynamicDatatableFooterMenuItemText extends IDynamicDatatableFooterMenuItem<'text'> {\n  text: string\n}\n\nexport interface IDynamicDatatableOptions {\n  /**\n   * Default: false\n   */\n  virtualization?: boolean\n}\n\nexport interface IDynamicDatatableFooterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  items?: IDynamicDatatableFooterMenuItem[]\n}\n\nexport type DynamicDatatableRowActionType =\n  DynamicDatatableRowActionLink\n  | DynamicDatatableRowActionApi\n  | DynamicDatatableRowActionModal\n\nexport interface IDynamicDatatableRowActionDef {\n  /**\n   * Label displayed on the menu item.\n   */\n  label: string\n  /**\n   * TODO: Decide on a good way to handle the actions configuration through json.\n   */\n  action?: DynamicDatatableRowActionType\n  /**\n   * Expression executed each row to decide if the action will be visible.\n   */\n  isHiddenExpr?: string\n}\n\n// TODO: Define object definition to allow extra exporter options.\nexport type IDynamicDatatableExporter = 'exporter:csv' | 'exporter:xlsx'\n\nexport interface IDatatableDynamicDef {\n  filterMenu?: IDynamicDatatableFilterMenu\n  columns: IDynamicDatatableColumn[]\n  rows: IDynamicDatatableRow[]\n  rowActions?: IDynamicDatatableRowActionDef[]\n  // footerMenu?: IDynamicDatatableFooterMenu\n  options?: IDynamicDatatableOptions\n}\n",
            "properties": [
                {
                    "name": "cellType",
                    "type": "T",
                    "optional": true,
                    "description": "<p>Default: &#39;string&#39;</p>\n",
                    "line": 17
                },
                {
                    "name": "cellTypeConfig",
                    "type": "DynamicDatatableCellTypeConfig<T>",
                    "optional": true,
                    "description": "<p>Config passed to the cell type component.</p>\n",
                    "line": 21
                },
                {
                    "name": "exportExpr",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Expression to calculate export value.\nTODO: Implement. Jexl is most likely going to be used.</p>\n",
                    "line": 30
                },
                {
                    "name": "exportHeader",
                    "type": "string",
                    "optional": true,
                    "description": "<p>String to display if the exporter uses a header.</p>\n",
                    "line": 25
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "prop",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDynamicDatatableConfirmDialog",
            "id": "interface-IDynamicDatatableConfirmDialog-f96f5f6cbafd8061a85d4061e3cc9f64",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/confirm-dialog.ts",
            "type": "interface",
            "sourceCode": "import { ThemeTypes } from '../../models/index'\n\nexport interface IDynamicDatatableConfirmDialog {\n  /** Dialog message. */\n  message: string\n  /**\n   * Additional message to show in an alert below the message.\n   *\n   * Default alert type is 'warning'.\n   */\n  alert?: string | { message: string, type: ThemeTypes }\n}\n",
            "properties": [
                {
                    "name": "alert",
                    "type": "string | literal type",
                    "optional": true,
                    "description": "<p>Additional message to show in an alert below the message.</p>\n<p>Default alert type is &#39;warning&#39;.</p>\n",
                    "line": 11
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Dialog message. </p>\n",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDynamicDatatableFilterMenu",
            "id": "interface-IDynamicDatatableFilterMenu-492961ef81d7bc84fb13a32a607a9517",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
            "type": "interface",
            "sourceCode": "import { ThemeTypes } from '../models/index'\n\nimport { IDynamicDatatableCellType } from './models/cell-type'\nimport { DynamicDatatableCellTypeConfig } from './models/cell-type-config'\nimport {\n  DynamicDatatableRowActionApi,\n  DynamicDatatableRowActionLink,\n  DynamicDatatableRowActionModal\n} from './models/row-action'\n\nexport interface IDynamicDatatableColumn<T = IDynamicDatatableCellType> {\n  prop: string\n  name: string\n  /**\n   * Default: 'string'\n   */\n  cellType?: T\n  /**\n   * Config passed to the cell type component.\n   */\n  cellTypeConfig?: DynamicDatatableCellTypeConfig<T>\n  /**\n   * String to display if the exporter uses a header.\n   */\n  exportHeader?: string\n  /**\n   * Expression to calculate export value.\n   * TODO: Implement. Jexl is most likely going to be used.\n   */\n  exportExpr?: string\n}\n\nexport interface IDynamicDatatableRow {\n  [prop: string]: any\n}\n\nexport interface IDynamicDatatableFilterMenuItemDef<O = any> {\n  name: string\n  /**\n   * Default: 'common'\n   */\n  type: 'common' | 'full-search'\n  /**\n   * Default: 0\n   */\n  order?: number\n  options?: O\n}\n\nexport interface IDynamicDatatableFilterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  filters?: IDynamicDatatableFilterMenuItemDef[]\n  exporters?: IDynamicDatatableExporter[]\n}\n\nexport type IDynamicDatatableFooterMenuItemType = 'button' | 'text'\n\nexport interface IDynamicDatatableFooterMenuItem<T = IDynamicDatatableFooterMenuItemType> {\n  type: T\n}\n\nexport interface IDynamicDatatableFooterMenuItemButton extends IDynamicDatatableFooterMenuItem<'button'> {\n  text: string\n  theme: ThemeTypes\n}\n\nexport interface IDynamicDatatableFooterMenuItemText extends IDynamicDatatableFooterMenuItem<'text'> {\n  text: string\n}\n\nexport interface IDynamicDatatableOptions {\n  /**\n   * Default: false\n   */\n  virtualization?: boolean\n}\n\nexport interface IDynamicDatatableFooterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  items?: IDynamicDatatableFooterMenuItem[]\n}\n\nexport type DynamicDatatableRowActionType =\n  DynamicDatatableRowActionLink\n  | DynamicDatatableRowActionApi\n  | DynamicDatatableRowActionModal\n\nexport interface IDynamicDatatableRowActionDef {\n  /**\n   * Label displayed on the menu item.\n   */\n  label: string\n  /**\n   * TODO: Decide on a good way to handle the actions configuration through json.\n   */\n  action?: DynamicDatatableRowActionType\n  /**\n   * Expression executed each row to decide if the action will be visible.\n   */\n  isHiddenExpr?: string\n}\n\n// TODO: Define object definition to allow extra exporter options.\nexport type IDynamicDatatableExporter = 'exporter:csv' | 'exporter:xlsx'\n\nexport interface IDatatableDynamicDef {\n  filterMenu?: IDynamicDatatableFilterMenu\n  columns: IDynamicDatatableColumn[]\n  rows: IDynamicDatatableRow[]\n  rowActions?: IDynamicDatatableRowActionDef[]\n  // footerMenu?: IDynamicDatatableFooterMenu\n  options?: IDynamicDatatableOptions\n}\n",
            "properties": [
                {
                    "name": "exporters",
                    "type": "IDynamicDatatableExporter[]",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "filters",
                    "type": "IDynamicDatatableFilterMenuItemDef[]",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "state",
                    "type": "\"hidden\" | \"always-visible\" | \"default\"",
                    "optional": true,
                    "description": "<p>Default &#39;default&#39;</p>\n",
                    "line": 54
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDynamicDatatableFilterMenuItemDef",
            "id": "interface-IDynamicDatatableFilterMenuItemDef-492961ef81d7bc84fb13a32a607a9517",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
            "type": "interface",
            "sourceCode": "import { ThemeTypes } from '../models/index'\n\nimport { IDynamicDatatableCellType } from './models/cell-type'\nimport { DynamicDatatableCellTypeConfig } from './models/cell-type-config'\nimport {\n  DynamicDatatableRowActionApi,\n  DynamicDatatableRowActionLink,\n  DynamicDatatableRowActionModal\n} from './models/row-action'\n\nexport interface IDynamicDatatableColumn<T = IDynamicDatatableCellType> {\n  prop: string\n  name: string\n  /**\n   * Default: 'string'\n   */\n  cellType?: T\n  /**\n   * Config passed to the cell type component.\n   */\n  cellTypeConfig?: DynamicDatatableCellTypeConfig<T>\n  /**\n   * String to display if the exporter uses a header.\n   */\n  exportHeader?: string\n  /**\n   * Expression to calculate export value.\n   * TODO: Implement. Jexl is most likely going to be used.\n   */\n  exportExpr?: string\n}\n\nexport interface IDynamicDatatableRow {\n  [prop: string]: any\n}\n\nexport interface IDynamicDatatableFilterMenuItemDef<O = any> {\n  name: string\n  /**\n   * Default: 'common'\n   */\n  type: 'common' | 'full-search'\n  /**\n   * Default: 0\n   */\n  order?: number\n  options?: O\n}\n\nexport interface IDynamicDatatableFilterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  filters?: IDynamicDatatableFilterMenuItemDef[]\n  exporters?: IDynamicDatatableExporter[]\n}\n\nexport type IDynamicDatatableFooterMenuItemType = 'button' | 'text'\n\nexport interface IDynamicDatatableFooterMenuItem<T = IDynamicDatatableFooterMenuItemType> {\n  type: T\n}\n\nexport interface IDynamicDatatableFooterMenuItemButton extends IDynamicDatatableFooterMenuItem<'button'> {\n  text: string\n  theme: ThemeTypes\n}\n\nexport interface IDynamicDatatableFooterMenuItemText extends IDynamicDatatableFooterMenuItem<'text'> {\n  text: string\n}\n\nexport interface IDynamicDatatableOptions {\n  /**\n   * Default: false\n   */\n  virtualization?: boolean\n}\n\nexport interface IDynamicDatatableFooterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  items?: IDynamicDatatableFooterMenuItem[]\n}\n\nexport type DynamicDatatableRowActionType =\n  DynamicDatatableRowActionLink\n  | DynamicDatatableRowActionApi\n  | DynamicDatatableRowActionModal\n\nexport interface IDynamicDatatableRowActionDef {\n  /**\n   * Label displayed on the menu item.\n   */\n  label: string\n  /**\n   * TODO: Decide on a good way to handle the actions configuration through json.\n   */\n  action?: DynamicDatatableRowActionType\n  /**\n   * Expression executed each row to decide if the action will be visible.\n   */\n  isHiddenExpr?: string\n}\n\n// TODO: Define object definition to allow extra exporter options.\nexport type IDynamicDatatableExporter = 'exporter:csv' | 'exporter:xlsx'\n\nexport interface IDatatableDynamicDef {\n  filterMenu?: IDynamicDatatableFilterMenu\n  columns: IDynamicDatatableColumn[]\n  rows: IDynamicDatatableRow[]\n  rowActions?: IDynamicDatatableRowActionDef[]\n  // footerMenu?: IDynamicDatatableFooterMenu\n  options?: IDynamicDatatableOptions\n}\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "options",
                    "type": "O",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Default: 0</p>\n",
                    "line": 46
                },
                {
                    "name": "type",
                    "type": "\"common\" | \"full-search\"",
                    "optional": false,
                    "description": "<p>Default: &#39;common&#39;</p>\n",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDynamicDatatableFooterMenu",
            "id": "interface-IDynamicDatatableFooterMenu-492961ef81d7bc84fb13a32a607a9517",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
            "type": "interface",
            "sourceCode": "import { ThemeTypes } from '../models/index'\n\nimport { IDynamicDatatableCellType } from './models/cell-type'\nimport { DynamicDatatableCellTypeConfig } from './models/cell-type-config'\nimport {\n  DynamicDatatableRowActionApi,\n  DynamicDatatableRowActionLink,\n  DynamicDatatableRowActionModal\n} from './models/row-action'\n\nexport interface IDynamicDatatableColumn<T = IDynamicDatatableCellType> {\n  prop: string\n  name: string\n  /**\n   * Default: 'string'\n   */\n  cellType?: T\n  /**\n   * Config passed to the cell type component.\n   */\n  cellTypeConfig?: DynamicDatatableCellTypeConfig<T>\n  /**\n   * String to display if the exporter uses a header.\n   */\n  exportHeader?: string\n  /**\n   * Expression to calculate export value.\n   * TODO: Implement. Jexl is most likely going to be used.\n   */\n  exportExpr?: string\n}\n\nexport interface IDynamicDatatableRow {\n  [prop: string]: any\n}\n\nexport interface IDynamicDatatableFilterMenuItemDef<O = any> {\n  name: string\n  /**\n   * Default: 'common'\n   */\n  type: 'common' | 'full-search'\n  /**\n   * Default: 0\n   */\n  order?: number\n  options?: O\n}\n\nexport interface IDynamicDatatableFilterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  filters?: IDynamicDatatableFilterMenuItemDef[]\n  exporters?: IDynamicDatatableExporter[]\n}\n\nexport type IDynamicDatatableFooterMenuItemType = 'button' | 'text'\n\nexport interface IDynamicDatatableFooterMenuItem<T = IDynamicDatatableFooterMenuItemType> {\n  type: T\n}\n\nexport interface IDynamicDatatableFooterMenuItemButton extends IDynamicDatatableFooterMenuItem<'button'> {\n  text: string\n  theme: ThemeTypes\n}\n\nexport interface IDynamicDatatableFooterMenuItemText extends IDynamicDatatableFooterMenuItem<'text'> {\n  text: string\n}\n\nexport interface IDynamicDatatableOptions {\n  /**\n   * Default: false\n   */\n  virtualization?: boolean\n}\n\nexport interface IDynamicDatatableFooterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  items?: IDynamicDatatableFooterMenuItem[]\n}\n\nexport type DynamicDatatableRowActionType =\n  DynamicDatatableRowActionLink\n  | DynamicDatatableRowActionApi\n  | DynamicDatatableRowActionModal\n\nexport interface IDynamicDatatableRowActionDef {\n  /**\n   * Label displayed on the menu item.\n   */\n  label: string\n  /**\n   * TODO: Decide on a good way to handle the actions configuration through json.\n   */\n  action?: DynamicDatatableRowActionType\n  /**\n   * Expression executed each row to decide if the action will be visible.\n   */\n  isHiddenExpr?: string\n}\n\n// TODO: Define object definition to allow extra exporter options.\nexport type IDynamicDatatableExporter = 'exporter:csv' | 'exporter:xlsx'\n\nexport interface IDatatableDynamicDef {\n  filterMenu?: IDynamicDatatableFilterMenu\n  columns: IDynamicDatatableColumn[]\n  rows: IDynamicDatatableRow[]\n  rowActions?: IDynamicDatatableRowActionDef[]\n  // footerMenu?: IDynamicDatatableFooterMenu\n  options?: IDynamicDatatableOptions\n}\n",
            "properties": [
                {
                    "name": "items",
                    "type": "IDynamicDatatableFooterMenuItem[]",
                    "optional": true,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "state",
                    "type": "\"hidden\" | \"always-visible\" | \"default\"",
                    "optional": true,
                    "description": "<p>Default &#39;default&#39;</p>\n",
                    "line": 85
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDynamicDatatableFooterMenuItem",
            "id": "interface-IDynamicDatatableFooterMenuItem-492961ef81d7bc84fb13a32a607a9517",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
            "type": "interface",
            "sourceCode": "import { ThemeTypes } from '../models/index'\n\nimport { IDynamicDatatableCellType } from './models/cell-type'\nimport { DynamicDatatableCellTypeConfig } from './models/cell-type-config'\nimport {\n  DynamicDatatableRowActionApi,\n  DynamicDatatableRowActionLink,\n  DynamicDatatableRowActionModal\n} from './models/row-action'\n\nexport interface IDynamicDatatableColumn<T = IDynamicDatatableCellType> {\n  prop: string\n  name: string\n  /**\n   * Default: 'string'\n   */\n  cellType?: T\n  /**\n   * Config passed to the cell type component.\n   */\n  cellTypeConfig?: DynamicDatatableCellTypeConfig<T>\n  /**\n   * String to display if the exporter uses a header.\n   */\n  exportHeader?: string\n  /**\n   * Expression to calculate export value.\n   * TODO: Implement. Jexl is most likely going to be used.\n   */\n  exportExpr?: string\n}\n\nexport interface IDynamicDatatableRow {\n  [prop: string]: any\n}\n\nexport interface IDynamicDatatableFilterMenuItemDef<O = any> {\n  name: string\n  /**\n   * Default: 'common'\n   */\n  type: 'common' | 'full-search'\n  /**\n   * Default: 0\n   */\n  order?: number\n  options?: O\n}\n\nexport interface IDynamicDatatableFilterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  filters?: IDynamicDatatableFilterMenuItemDef[]\n  exporters?: IDynamicDatatableExporter[]\n}\n\nexport type IDynamicDatatableFooterMenuItemType = 'button' | 'text'\n\nexport interface IDynamicDatatableFooterMenuItem<T = IDynamicDatatableFooterMenuItemType> {\n  type: T\n}\n\nexport interface IDynamicDatatableFooterMenuItemButton extends IDynamicDatatableFooterMenuItem<'button'> {\n  text: string\n  theme: ThemeTypes\n}\n\nexport interface IDynamicDatatableFooterMenuItemText extends IDynamicDatatableFooterMenuItem<'text'> {\n  text: string\n}\n\nexport interface IDynamicDatatableOptions {\n  /**\n   * Default: false\n   */\n  virtualization?: boolean\n}\n\nexport interface IDynamicDatatableFooterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  items?: IDynamicDatatableFooterMenuItem[]\n}\n\nexport type DynamicDatatableRowActionType =\n  DynamicDatatableRowActionLink\n  | DynamicDatatableRowActionApi\n  | DynamicDatatableRowActionModal\n\nexport interface IDynamicDatatableRowActionDef {\n  /**\n   * Label displayed on the menu item.\n   */\n  label: string\n  /**\n   * TODO: Decide on a good way to handle the actions configuration through json.\n   */\n  action?: DynamicDatatableRowActionType\n  /**\n   * Expression executed each row to decide if the action will be visible.\n   */\n  isHiddenExpr?: string\n}\n\n// TODO: Define object definition to allow extra exporter options.\nexport type IDynamicDatatableExporter = 'exporter:csv' | 'exporter:xlsx'\n\nexport interface IDatatableDynamicDef {\n  filterMenu?: IDynamicDatatableFilterMenu\n  columns: IDynamicDatatableColumn[]\n  rows: IDynamicDatatableRow[]\n  rowActions?: IDynamicDatatableRowActionDef[]\n  // footerMenu?: IDynamicDatatableFooterMenu\n  options?: IDynamicDatatableOptions\n}\n",
            "properties": [
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDynamicDatatableFooterMenuItemButton",
            "id": "interface-IDynamicDatatableFooterMenuItemButton-492961ef81d7bc84fb13a32a607a9517",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
            "type": "interface",
            "sourceCode": "import { ThemeTypes } from '../models/index'\n\nimport { IDynamicDatatableCellType } from './models/cell-type'\nimport { DynamicDatatableCellTypeConfig } from './models/cell-type-config'\nimport {\n  DynamicDatatableRowActionApi,\n  DynamicDatatableRowActionLink,\n  DynamicDatatableRowActionModal\n} from './models/row-action'\n\nexport interface IDynamicDatatableColumn<T = IDynamicDatatableCellType> {\n  prop: string\n  name: string\n  /**\n   * Default: 'string'\n   */\n  cellType?: T\n  /**\n   * Config passed to the cell type component.\n   */\n  cellTypeConfig?: DynamicDatatableCellTypeConfig<T>\n  /**\n   * String to display if the exporter uses a header.\n   */\n  exportHeader?: string\n  /**\n   * Expression to calculate export value.\n   * TODO: Implement. Jexl is most likely going to be used.\n   */\n  exportExpr?: string\n}\n\nexport interface IDynamicDatatableRow {\n  [prop: string]: any\n}\n\nexport interface IDynamicDatatableFilterMenuItemDef<O = any> {\n  name: string\n  /**\n   * Default: 'common'\n   */\n  type: 'common' | 'full-search'\n  /**\n   * Default: 0\n   */\n  order?: number\n  options?: O\n}\n\nexport interface IDynamicDatatableFilterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  filters?: IDynamicDatatableFilterMenuItemDef[]\n  exporters?: IDynamicDatatableExporter[]\n}\n\nexport type IDynamicDatatableFooterMenuItemType = 'button' | 'text'\n\nexport interface IDynamicDatatableFooterMenuItem<T = IDynamicDatatableFooterMenuItemType> {\n  type: T\n}\n\nexport interface IDynamicDatatableFooterMenuItemButton extends IDynamicDatatableFooterMenuItem<'button'> {\n  text: string\n  theme: ThemeTypes\n}\n\nexport interface IDynamicDatatableFooterMenuItemText extends IDynamicDatatableFooterMenuItem<'text'> {\n  text: string\n}\n\nexport interface IDynamicDatatableOptions {\n  /**\n   * Default: false\n   */\n  virtualization?: boolean\n}\n\nexport interface IDynamicDatatableFooterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  items?: IDynamicDatatableFooterMenuItem[]\n}\n\nexport type DynamicDatatableRowActionType =\n  DynamicDatatableRowActionLink\n  | DynamicDatatableRowActionApi\n  | DynamicDatatableRowActionModal\n\nexport interface IDynamicDatatableRowActionDef {\n  /**\n   * Label displayed on the menu item.\n   */\n  label: string\n  /**\n   * TODO: Decide on a good way to handle the actions configuration through json.\n   */\n  action?: DynamicDatatableRowActionType\n  /**\n   * Expression executed each row to decide if the action will be visible.\n   */\n  isHiddenExpr?: string\n}\n\n// TODO: Define object definition to allow extra exporter options.\nexport type IDynamicDatatableExporter = 'exporter:csv' | 'exporter:xlsx'\n\nexport interface IDatatableDynamicDef {\n  filterMenu?: IDynamicDatatableFilterMenu\n  columns: IDynamicDatatableColumn[]\n  rows: IDynamicDatatableRow[]\n  rowActions?: IDynamicDatatableRowActionDef[]\n  // footerMenu?: IDynamicDatatableFooterMenu\n  options?: IDynamicDatatableOptions\n}\n",
            "properties": [
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "theme",
                    "type": "ThemeTypes",
                    "optional": false,
                    "description": "",
                    "line": 67
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IDynamicDatatableFooterMenuItem"
        },
        {
            "name": "IDynamicDatatableFooterMenuItemText",
            "id": "interface-IDynamicDatatableFooterMenuItemText-492961ef81d7bc84fb13a32a607a9517",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
            "type": "interface",
            "sourceCode": "import { ThemeTypes } from '../models/index'\n\nimport { IDynamicDatatableCellType } from './models/cell-type'\nimport { DynamicDatatableCellTypeConfig } from './models/cell-type-config'\nimport {\n  DynamicDatatableRowActionApi,\n  DynamicDatatableRowActionLink,\n  DynamicDatatableRowActionModal\n} from './models/row-action'\n\nexport interface IDynamicDatatableColumn<T = IDynamicDatatableCellType> {\n  prop: string\n  name: string\n  /**\n   * Default: 'string'\n   */\n  cellType?: T\n  /**\n   * Config passed to the cell type component.\n   */\n  cellTypeConfig?: DynamicDatatableCellTypeConfig<T>\n  /**\n   * String to display if the exporter uses a header.\n   */\n  exportHeader?: string\n  /**\n   * Expression to calculate export value.\n   * TODO: Implement. Jexl is most likely going to be used.\n   */\n  exportExpr?: string\n}\n\nexport interface IDynamicDatatableRow {\n  [prop: string]: any\n}\n\nexport interface IDynamicDatatableFilterMenuItemDef<O = any> {\n  name: string\n  /**\n   * Default: 'common'\n   */\n  type: 'common' | 'full-search'\n  /**\n   * Default: 0\n   */\n  order?: number\n  options?: O\n}\n\nexport interface IDynamicDatatableFilterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  filters?: IDynamicDatatableFilterMenuItemDef[]\n  exporters?: IDynamicDatatableExporter[]\n}\n\nexport type IDynamicDatatableFooterMenuItemType = 'button' | 'text'\n\nexport interface IDynamicDatatableFooterMenuItem<T = IDynamicDatatableFooterMenuItemType> {\n  type: T\n}\n\nexport interface IDynamicDatatableFooterMenuItemButton extends IDynamicDatatableFooterMenuItem<'button'> {\n  text: string\n  theme: ThemeTypes\n}\n\nexport interface IDynamicDatatableFooterMenuItemText extends IDynamicDatatableFooterMenuItem<'text'> {\n  text: string\n}\n\nexport interface IDynamicDatatableOptions {\n  /**\n   * Default: false\n   */\n  virtualization?: boolean\n}\n\nexport interface IDynamicDatatableFooterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  items?: IDynamicDatatableFooterMenuItem[]\n}\n\nexport type DynamicDatatableRowActionType =\n  DynamicDatatableRowActionLink\n  | DynamicDatatableRowActionApi\n  | DynamicDatatableRowActionModal\n\nexport interface IDynamicDatatableRowActionDef {\n  /**\n   * Label displayed on the menu item.\n   */\n  label: string\n  /**\n   * TODO: Decide on a good way to handle the actions configuration through json.\n   */\n  action?: DynamicDatatableRowActionType\n  /**\n   * Expression executed each row to decide if the action will be visible.\n   */\n  isHiddenExpr?: string\n}\n\n// TODO: Define object definition to allow extra exporter options.\nexport type IDynamicDatatableExporter = 'exporter:csv' | 'exporter:xlsx'\n\nexport interface IDatatableDynamicDef {\n  filterMenu?: IDynamicDatatableFilterMenu\n  columns: IDynamicDatatableColumn[]\n  rows: IDynamicDatatableRow[]\n  rowActions?: IDynamicDatatableRowActionDef[]\n  // footerMenu?: IDynamicDatatableFooterMenu\n  options?: IDynamicDatatableOptions\n}\n",
            "properties": [
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IDynamicDatatableFooterMenuItem"
        },
        {
            "name": "IDynamicDatatableOptions",
            "id": "interface-IDynamicDatatableOptions-492961ef81d7bc84fb13a32a607a9517",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
            "type": "interface",
            "sourceCode": "import { ThemeTypes } from '../models/index'\n\nimport { IDynamicDatatableCellType } from './models/cell-type'\nimport { DynamicDatatableCellTypeConfig } from './models/cell-type-config'\nimport {\n  DynamicDatatableRowActionApi,\n  DynamicDatatableRowActionLink,\n  DynamicDatatableRowActionModal\n} from './models/row-action'\n\nexport interface IDynamicDatatableColumn<T = IDynamicDatatableCellType> {\n  prop: string\n  name: string\n  /**\n   * Default: 'string'\n   */\n  cellType?: T\n  /**\n   * Config passed to the cell type component.\n   */\n  cellTypeConfig?: DynamicDatatableCellTypeConfig<T>\n  /**\n   * String to display if the exporter uses a header.\n   */\n  exportHeader?: string\n  /**\n   * Expression to calculate export value.\n   * TODO: Implement. Jexl is most likely going to be used.\n   */\n  exportExpr?: string\n}\n\nexport interface IDynamicDatatableRow {\n  [prop: string]: any\n}\n\nexport interface IDynamicDatatableFilterMenuItemDef<O = any> {\n  name: string\n  /**\n   * Default: 'common'\n   */\n  type: 'common' | 'full-search'\n  /**\n   * Default: 0\n   */\n  order?: number\n  options?: O\n}\n\nexport interface IDynamicDatatableFilterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  filters?: IDynamicDatatableFilterMenuItemDef[]\n  exporters?: IDynamicDatatableExporter[]\n}\n\nexport type IDynamicDatatableFooterMenuItemType = 'button' | 'text'\n\nexport interface IDynamicDatatableFooterMenuItem<T = IDynamicDatatableFooterMenuItemType> {\n  type: T\n}\n\nexport interface IDynamicDatatableFooterMenuItemButton extends IDynamicDatatableFooterMenuItem<'button'> {\n  text: string\n  theme: ThemeTypes\n}\n\nexport interface IDynamicDatatableFooterMenuItemText extends IDynamicDatatableFooterMenuItem<'text'> {\n  text: string\n}\n\nexport interface IDynamicDatatableOptions {\n  /**\n   * Default: false\n   */\n  virtualization?: boolean\n}\n\nexport interface IDynamicDatatableFooterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  items?: IDynamicDatatableFooterMenuItem[]\n}\n\nexport type DynamicDatatableRowActionType =\n  DynamicDatatableRowActionLink\n  | DynamicDatatableRowActionApi\n  | DynamicDatatableRowActionModal\n\nexport interface IDynamicDatatableRowActionDef {\n  /**\n   * Label displayed on the menu item.\n   */\n  label: string\n  /**\n   * TODO: Decide on a good way to handle the actions configuration through json.\n   */\n  action?: DynamicDatatableRowActionType\n  /**\n   * Expression executed each row to decide if the action will be visible.\n   */\n  isHiddenExpr?: string\n}\n\n// TODO: Define object definition to allow extra exporter options.\nexport type IDynamicDatatableExporter = 'exporter:csv' | 'exporter:xlsx'\n\nexport interface IDatatableDynamicDef {\n  filterMenu?: IDynamicDatatableFilterMenu\n  columns: IDynamicDatatableColumn[]\n  rows: IDynamicDatatableRow[]\n  rowActions?: IDynamicDatatableRowActionDef[]\n  // footerMenu?: IDynamicDatatableFooterMenu\n  options?: IDynamicDatatableOptions\n}\n",
            "properties": [
                {
                    "name": "virtualization",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Default: false</p>\n",
                    "line": 78
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDynamicDatatableRow",
            "id": "interface-IDynamicDatatableRow-492961ef81d7bc84fb13a32a607a9517",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
            "type": "interface",
            "sourceCode": "import { ThemeTypes } from '../models/index'\n\nimport { IDynamicDatatableCellType } from './models/cell-type'\nimport { DynamicDatatableCellTypeConfig } from './models/cell-type-config'\nimport {\n  DynamicDatatableRowActionApi,\n  DynamicDatatableRowActionLink,\n  DynamicDatatableRowActionModal\n} from './models/row-action'\n\nexport interface IDynamicDatatableColumn<T = IDynamicDatatableCellType> {\n  prop: string\n  name: string\n  /**\n   * Default: 'string'\n   */\n  cellType?: T\n  /**\n   * Config passed to the cell type component.\n   */\n  cellTypeConfig?: DynamicDatatableCellTypeConfig<T>\n  /**\n   * String to display if the exporter uses a header.\n   */\n  exportHeader?: string\n  /**\n   * Expression to calculate export value.\n   * TODO: Implement. Jexl is most likely going to be used.\n   */\n  exportExpr?: string\n}\n\nexport interface IDynamicDatatableRow {\n  [prop: string]: any\n}\n\nexport interface IDynamicDatatableFilterMenuItemDef<O = any> {\n  name: string\n  /**\n   * Default: 'common'\n   */\n  type: 'common' | 'full-search'\n  /**\n   * Default: 0\n   */\n  order?: number\n  options?: O\n}\n\nexport interface IDynamicDatatableFilterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  filters?: IDynamicDatatableFilterMenuItemDef[]\n  exporters?: IDynamicDatatableExporter[]\n}\n\nexport type IDynamicDatatableFooterMenuItemType = 'button' | 'text'\n\nexport interface IDynamicDatatableFooterMenuItem<T = IDynamicDatatableFooterMenuItemType> {\n  type: T\n}\n\nexport interface IDynamicDatatableFooterMenuItemButton extends IDynamicDatatableFooterMenuItem<'button'> {\n  text: string\n  theme: ThemeTypes\n}\n\nexport interface IDynamicDatatableFooterMenuItemText extends IDynamicDatatableFooterMenuItem<'text'> {\n  text: string\n}\n\nexport interface IDynamicDatatableOptions {\n  /**\n   * Default: false\n   */\n  virtualization?: boolean\n}\n\nexport interface IDynamicDatatableFooterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  items?: IDynamicDatatableFooterMenuItem[]\n}\n\nexport type DynamicDatatableRowActionType =\n  DynamicDatatableRowActionLink\n  | DynamicDatatableRowActionApi\n  | DynamicDatatableRowActionModal\n\nexport interface IDynamicDatatableRowActionDef {\n  /**\n   * Label displayed on the menu item.\n   */\n  label: string\n  /**\n   * TODO: Decide on a good way to handle the actions configuration through json.\n   */\n  action?: DynamicDatatableRowActionType\n  /**\n   * Expression executed each row to decide if the action will be visible.\n   */\n  isHiddenExpr?: string\n}\n\n// TODO: Define object definition to allow extra exporter options.\nexport type IDynamicDatatableExporter = 'exporter:csv' | 'exporter:xlsx'\n\nexport interface IDatatableDynamicDef {\n  filterMenu?: IDynamicDatatableFilterMenu\n  columns: IDynamicDatatableColumn[]\n  rows: IDynamicDatatableRow[]\n  rowActions?: IDynamicDatatableRowActionDef[]\n  // footerMenu?: IDynamicDatatableFooterMenu\n  options?: IDynamicDatatableOptions\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-492961ef81d7bc84fb13a32a607a9517",
                    "args": [
                        {
                            "name": "prop",
                            "type": "string"
                        }
                    ],
                    "returnType": "any",
                    "line": 33
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "IDynamicDatatableRowActionDef",
            "id": "interface-IDynamicDatatableRowActionDef-492961ef81d7bc84fb13a32a607a9517",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
            "type": "interface",
            "sourceCode": "import { ThemeTypes } from '../models/index'\n\nimport { IDynamicDatatableCellType } from './models/cell-type'\nimport { DynamicDatatableCellTypeConfig } from './models/cell-type-config'\nimport {\n  DynamicDatatableRowActionApi,\n  DynamicDatatableRowActionLink,\n  DynamicDatatableRowActionModal\n} from './models/row-action'\n\nexport interface IDynamicDatatableColumn<T = IDynamicDatatableCellType> {\n  prop: string\n  name: string\n  /**\n   * Default: 'string'\n   */\n  cellType?: T\n  /**\n   * Config passed to the cell type component.\n   */\n  cellTypeConfig?: DynamicDatatableCellTypeConfig<T>\n  /**\n   * String to display if the exporter uses a header.\n   */\n  exportHeader?: string\n  /**\n   * Expression to calculate export value.\n   * TODO: Implement. Jexl is most likely going to be used.\n   */\n  exportExpr?: string\n}\n\nexport interface IDynamicDatatableRow {\n  [prop: string]: any\n}\n\nexport interface IDynamicDatatableFilterMenuItemDef<O = any> {\n  name: string\n  /**\n   * Default: 'common'\n   */\n  type: 'common' | 'full-search'\n  /**\n   * Default: 0\n   */\n  order?: number\n  options?: O\n}\n\nexport interface IDynamicDatatableFilterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  filters?: IDynamicDatatableFilterMenuItemDef[]\n  exporters?: IDynamicDatatableExporter[]\n}\n\nexport type IDynamicDatatableFooterMenuItemType = 'button' | 'text'\n\nexport interface IDynamicDatatableFooterMenuItem<T = IDynamicDatatableFooterMenuItemType> {\n  type: T\n}\n\nexport interface IDynamicDatatableFooterMenuItemButton extends IDynamicDatatableFooterMenuItem<'button'> {\n  text: string\n  theme: ThemeTypes\n}\n\nexport interface IDynamicDatatableFooterMenuItemText extends IDynamicDatatableFooterMenuItem<'text'> {\n  text: string\n}\n\nexport interface IDynamicDatatableOptions {\n  /**\n   * Default: false\n   */\n  virtualization?: boolean\n}\n\nexport interface IDynamicDatatableFooterMenu {\n  /**\n   * Default 'default'\n   */\n  state?: 'hidden' | 'always-visible' | 'default'\n  items?: IDynamicDatatableFooterMenuItem[]\n}\n\nexport type DynamicDatatableRowActionType =\n  DynamicDatatableRowActionLink\n  | DynamicDatatableRowActionApi\n  | DynamicDatatableRowActionModal\n\nexport interface IDynamicDatatableRowActionDef {\n  /**\n   * Label displayed on the menu item.\n   */\n  label: string\n  /**\n   * TODO: Decide on a good way to handle the actions configuration through json.\n   */\n  action?: DynamicDatatableRowActionType\n  /**\n   * Expression executed each row to decide if the action will be visible.\n   */\n  isHiddenExpr?: string\n}\n\n// TODO: Define object definition to allow extra exporter options.\nexport type IDynamicDatatableExporter = 'exporter:csv' | 'exporter:xlsx'\n\nexport interface IDatatableDynamicDef {\n  filterMenu?: IDynamicDatatableFilterMenu\n  columns: IDynamicDatatableColumn[]\n  rows: IDynamicDatatableRow[]\n  rowActions?: IDynamicDatatableRowActionDef[]\n  // footerMenu?: IDynamicDatatableFooterMenu\n  options?: IDynamicDatatableOptions\n}\n",
            "properties": [
                {
                    "name": "action",
                    "type": "DynamicDatatableRowActionType",
                    "optional": true,
                    "description": "<p>TODO: Decide on a good way to handle the actions configuration through json.</p>\n",
                    "line": 102
                },
                {
                    "name": "isHiddenExpr",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Expression executed each row to decide if the action will be visible.</p>\n",
                    "line": 106
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Label displayed on the menu item.</p>\n",
                    "line": 98
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDynamicRouteDef",
            "id": "interface-IDynamicRouteDef-31bc3af204b51f8e5b38632cf6cb18ac",
            "file": "projects/ui-common/src/lib/framework/dynamic-router/dynamic-route-def.ts",
            "type": "interface",
            "sourceCode": "export interface IDynamicRouteDef {\n  path?: string\n  // pathMatch?: string\n  component?: string\n  // redirectTo?: string\n  // outlet?: string\n  // canActivate?: any[]\n  // canActivateChild?: any[]\n  // canDeactivate?: any[]\n  // canLoad?: any[]\n  data?: { [name: string]: any }\n  // resolve?: ResolveData\n\n  children?: IDynamicRouteDef[]\n\n  // runGuardsAndResolvers?: RunGuardsAndResolvers\n}\n",
            "properties": [
                {
                    "name": "children",
                    "type": "IDynamicRouteDef[]",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "component",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "data",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "path",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IElementResizedEvent",
            "id": "interface-IElementResizedEvent-469b90924b1ffe8f4b2e5c002cddd28e",
            "file": "projects/ui-common/src/lib/shared/directives/elem-resized.directive.ts",
            "type": "interface",
            "sourceCode": "import { AfterViewInit, Directive, ElementRef, EventEmitter, OnDestroy, Output } from '@angular/core'\n\nimport { ResizeSensor } from 'css-element-queries'\n\nexport interface IElementResizedEvent {\n  element: HTMLElement\n  size: { width: number, height: number }\n}\n\n@Directive({\n  selector: '[seamElemResized]'\n})\nexport class ElemResizedDirective implements OnDestroy, AfterViewInit {\n\n  @Output() seamElemResized = new EventEmitter<IElementResizedEvent>()\n\n  sensor: ResizeSensor\n\n  constructor(private elementRef: ElementRef) { }\n\n  ngAfterViewInit() {\n    this.sensor = new ResizeSensor(this.elementRef.nativeElement, (event) => {\n      this.seamElemResized.emit({ element: this.elementRef.nativeElement, size: event })\n    })\n  }\n\n  ngOnDestroy() {\n    this.sensor.detach()\n  }\n\n}\n",
            "properties": [
                {
                    "name": "element",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "size",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IErrorRecord",
            "id": "interface-IErrorRecord-c318c45a726435e417bade03793962fa",
            "file": "projects/ui-common/src/lib/form-field-error/form-field-error-list/form-field-error-list.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, ContentChildren, DoCheck, HostBinding, Input, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core'\nimport { AbstractControl, AbstractControlDirective, ValidationErrors } from '@angular/forms'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs'\nimport { distinctUntilChanged, map, shareReplay, startWith } from 'rxjs/operators'\n\nimport { FormFieldErrorListItemTplDirective } from './form-field-error-list-item-tpl.directive'\n\nexport interface IErrorRecord {\n  validatorName: string\n  error: any,\n  message?: string\n  template?: TemplateRef<any>\n\n  external?: boolean\n\n  _errors?: ValidationErrors\n}\n\n/**\n * NOTE: This class has some issues with filtering duplicate validators. The\n * inputs will be cleaned up soon to fix the input confusion.\n *\n * TODO: Cleanup remaining code from before refactor.\n */\n@Component({\n  selector: 'seam-form-field-error-list',\n  templateUrl: './form-field-error-list.component.html',\n  styleUrls: ['./form-field-error-list.component.scss']\n})\nexport class FormFieldErrorListComponent implements OnInit, OnDestroy, DoCheck {\n\n  @HostBinding('style.display') get _display() {\n    return this.showErrors ? 'block' : 'none'\n  }\n\n  private static readonly defaultMessages = {\n    // required: () => 'Required',\n    // minlength: (params) => 'The min number of characters is ' + params.requiredLength,\n    // maxlength: (params) => 'The max allowed number of characters is ' + params.requiredLength,\n    // pattern: (params) => 'The required pattern is: ' + params.requiredPattern\n  }\n\n  private readonly _defaultMessages = {\n    // required: () => 'Required',\n    // minlength: (params) => 'The min number of characters is ' + params.requiredLength,\n    // maxlength: (params) => 'The max allowed number of characters is ' + params.requiredLength,\n    // pattern: (params) => 'The required pattern is: ' + params.requiredPattern\n  }\n\n  private _errors: any[]\n\n  public _paddingErrors = []\n\n  @Input()\n  set errors(records: IErrorRecord[]) {\n    // if (val instanceof Array) {\n    //   this._errors = val\n    // } else {\n    //   const errs = []\n    //   for (const k in val) {\n    //     if (val[k]) {\n    //       const err = val[k]\n    //       const newErr = {\n    //         validatorName: k,\n    //         error: err,\n    //         message: '',\n    //         template: err.template,\n    //         external: !!err.external\n    //       }\n\n    //       if (err.message) {\n    //         const msgTmp = err.message\n    //         if (typeof msgTmp === 'string') {\n    //           newErr.message = msgTmp\n    //         } else if (typeof msgTmp === 'function') {\n    //           newErr.message = msgTmp(err)\n    //         }\n    //       } else if (FormFieldErrorListComponent.defaultMessages[k]) {\n    //         const defaultMsg = FormFieldErrorListComponent.defaultMessages[k]\n    //         if (typeof defaultMsg === 'string') {\n    //           newErr.message = defaultMsg\n    //         } else if (typeof defaultMsg === 'function') {\n    //           newErr.message = defaultMsg(err)\n    //         }\n    //       }\n\n    //       errs.push(newErr)\n    //     }\n    //   }\n    //   this._errors = errs\n    // }\n\n    this._initErrorInput(records)\n  }\n\n  // get errors() {\n  //   let errs = []\n\n  //   if (this._errors) {\n  //     if (!this.messages) {\n  //       errs = this._errors\n  //     } else {\n  //       errs = this._errors.map(err => {\n  //         if (this.messages && err.validatorName && this.messages[err.validatorName]) {\n  //           return Object.assign({}, err, {\n  //             message: this.messages[err.validatorName]\n  //           })\n  //         } else {\n  //           return err\n  //         }\n  //       })\n  //     }\n  //   }\n\n  //   if (this.control) {\n  //     for (const key in this.control.errors) {\n  //       if (this.control.errors[key]) {\n  //         const err = this.control.errors[key]\n\n  //         const newErr = {\n  //           validatorName: key,\n  //           error: err,\n  //           message: '',\n  //           external: false\n  //         }\n\n  //         if (FormFieldErrorListComponent.defaultMessages[key]) {\n  //           const defaultMsg = FormFieldErrorListComponent.defaultMessages[key]\n  //           if (typeof defaultMsg === 'string') {\n  //             newErr.message = defaultMsg\n  //           } else if (typeof defaultMsg === 'function') {\n  //             newErr.message = defaultMsg(err)\n  //           }\n  //         }\n\n  //         errs = [ ...errs, newErr ]\n  //       }\n  //     }\n  //   }\n\n  //   if (this.maxErrors >= 0) {\n  //     errs = errs.slice(0, this.maxErrors)\n  //   }\n\n  //   const count = this.showControlErrors ? this.numPaddingErrors - errs.length : this.numPaddingErrors\n  //   if (count > 0) {\n  //     this._paddingErrors = []\n  //     for (let i = 0; i < count; i++) {\n  //       this._paddingErrors.push({ validatorName: '__padding__', error: {}, message: '', external: false })\n  //     }\n  //   } else {\n  //     this._paddingErrors = []\n  //   }\n\n  //   return errs\n  // }\n\n  // @Input() messages: any = {}\n  @Input() showValidatorName = false\n\n  @Input() numPaddingErrors = 1\n\n  // private errorTpl: TemplateRef<any>\n\n  // private _listItemTpls: QueryList<FormFieldErrorListItemTplDirective>\n  // private listItemTplsObj = {}\n\n\n  @Input()\n  @ContentChildren(FormFieldErrorListItemTplDirective)\n  set listItemTpls(val: QueryList<FormFieldErrorListItemTplDirective>) {\n    this._initErrorTemplates(val)\n\n    // for (const v of val.toArray()) {\n    //   if (v.validatorName !== undefined) {\n    //     this.listItemTplsObj[v.validatorName] = v\n    //   }\n    // }\n\n    // const tmp = val.find(v => v.validatorName === undefined)\n    // if (tmp) {\n    //   this.errorTpl = tmp.template\n    // }\n\n    // this._listItemTpls = val\n  }\n\n  // get listItemTpls(): QueryList<FormFieldErrorListItemTplDirective> {\n  //   return this._listItemTpls\n  // }\n\n  @Input() maxErrors = -1\n\n  @Input()\n  get control(): AbstractControlDirective | AbstractControl { return this._control }\n  set control(value: AbstractControlDirective | AbstractControl) {\n    this._control = value\n    this._initControlListeners(value)\n  }\n  private _control: AbstractControlDirective | AbstractControl\n\n  private _valueChangeSub = Subscription.EMPTY\n  private _errorTplsChangeSub = Subscription.EMPTY\n\n  private _controlErrors = new BehaviorSubject<IErrorRecord[]>([])\n  private _errorTpls = new BehaviorSubject<IErrorRecord[]>([])\n  private _errorInput = new BehaviorSubject<IErrorRecord[]>([])\n\n  private _showControlErrorsSubject = new BehaviorSubject<boolean>(false)\n\n  public displayRecords$: Observable<IErrorRecord[]>\n  public showControlErrors$: Observable<boolean>\n\n  private _showErrors = true\n\n  @Input()\n  set showErrors(val: boolean) {\n    this._showErrors = val\n  }\n\n  get showErrors(): boolean {\n    let show = this._showErrors\n\n    if (show && this.control) {\n      if (this.numPaddingErrors > 0) {\n        show = true\n      } else {\n        show = !!(this.control.invalid && (this.control.dirty || this.control.touched))\n      }\n    }\n\n    return show\n  }\n\n  get showControlErrors(): boolean {\n    let show = false\n    if (this.control && this.showErrors) {\n      show = !!(this.control.invalid && (this.control.dirty || this.control.touched))\n    }\n\n    return show\n  }\n\n  public errorRecords$: Observable<IErrorRecord[]>\n\n  constructor() {\n    this.showControlErrors$ = this._showControlErrorsSubject.asObservable()\n      .pipe(distinctUntilChanged())\n      .pipe(shareReplay(1))\n\n    this.errorRecords$ = combineLatest([this._controlErrors, this._errorTpls, this._errorInput])\n      .pipe(map(([ctrlErrs, errTpls, errorInput]) => this._composeErrorInputs(ctrlErrs, errTpls, errorInput)))\n      .pipe(shareReplay(1))\n\n    this.displayRecords$ = this.errorRecords$\n      .pipe(map(records => {\n        let resultRecords: IErrorRecord[] = []\n\n        if (!this.showErrors) {\n\n        } else {\n          let errs = [ ...records ]\n\n          if (this.maxErrors >= 0) {\n            errs = errs.slice(0, this.maxErrors)\n          }\n\n          const count = this.showControlErrors ? this.numPaddingErrors - errs.length : this.numPaddingErrors\n          const paddingErrors: IErrorRecord[] = []\n          if (count > 0) {\n            for (let i = 0; i < count; i++) {\n              paddingErrors.push({ validatorName: '__padding__', error: {}, message: '', external: false })\n            }\n          }\n\n          if (this.showControlErrors) {\n            resultRecords = [ ...errs, ...paddingErrors ]\n          } else {\n            resultRecords = [ ...paddingErrors ]\n          }\n        }\n\n        return resultRecords\n      }))\n      .pipe(shareReplay(1))\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { }\n\n  ngDoCheck() {\n    this._showControlErrorsSubject.next(this.showControlErrors)\n  }\n\n  private _initControlListeners(control: AbstractControlDirective | AbstractControl): void {\n    // Unsubscribe from old control changes\n    if (this._valueChangeSub && !this._valueChangeSub.closed) {\n      this._valueChangeSub.unsubscribe()\n    }\n\n    if (control.valueChanges !== null) {\n      this._valueChangeSub = combineLatest([this.showControlErrors$, control.valueChanges.pipe(startWith(undefined))])\n        .pipe(\n          untilDestroyed(this),\n          startWith(undefined)\n        )\n        .subscribe(_ => this._updateControlErrors(control.errors))\n    } else {\n      this._setControlErrors([])\n    }\n  }\n\n  private _updateControlErrors(errors: ValidationErrors | null): void {\n    const errs: IErrorRecord[] = []\n    for (const validatorName in errors) {\n      if (errors.hasOwnProperty(validatorName)) {\n        const error = errors[validatorName]\n        const message = this._parseMessage(this._defaultMessages[validatorName], error)\n        const external = false\n        errs.push({ validatorName, error, message, external })\n      }\n    }\n    this._setControlErrors(errs)\n  }\n\n  private _setControlErrors(errors: IErrorRecord[]) {\n    this._controlErrors.next(errors)\n  }\n\n  private _parseMessage(message: any, error: any) {\n    if (!message) { return }\n\n    if (typeof message === 'string') {\n      return message\n    } else if (typeof message === 'function') {\n      return message(error)\n    }\n  }\n\n  private _initErrorTemplates(tplsQueryList: QueryList<FormFieldErrorListItemTplDirective>) {\n    if (this._errorTplsChangeSub && !this._errorTplsChangeSub.closed) {\n      this._errorTplsChangeSub.unsubscribe()\n    }\n\n    if (tplsQueryList) {\n      this._errorTplsChangeSub = tplsQueryList.changes\n        .pipe(\n          untilDestroyed(this),\n          startWith(undefined)\n        )\n        .subscribe(_ => this._updateErrorTemplates(tplsQueryList.toArray()))\n    } else {\n      this._setErrorTemplates([])\n    }\n  }\n\n  private _updateErrorTemplates(tplsList: FormFieldErrorListItemTplDirective[]): void {\n    const errs: IErrorRecord[] = []\n    for (const tpl of tplsList) {\n      if (tpl.validatorName !== undefined) {\n        errs.push({\n          validatorName: tpl.validatorName,\n          error: null,\n          template: tpl.template,\n          external: !!tpl.external\n        })\n      } else {\n        // this.errorTpl = tpl.template\n      }\n    }\n    this._setErrorTemplates(errs)\n  }\n\n  private _setErrorTemplates(errorTpls: IErrorRecord[]): void {\n    this._errorTpls.next(errorTpls)\n  }\n\n  private _initErrorInput(errors: IErrorRecord[]): void {\n    this._updateErrorInputs(errors)\n  }\n\n  private _updateErrorInputs(errors: IErrorRecord[]): void {\n    this._setErrorInput(errors)\n  }\n\n  private _setErrorInput(errors: IErrorRecord[]): void {\n    this._errorInput.next(errors)\n  }\n\n  private _composeErrorInputs(\n    controlErrors: IErrorRecord[],\n    errorTemplates: IErrorRecord[],\n    errorInput: IErrorRecord[]\n  ): IErrorRecord[] {\n    const errs: IErrorRecord[] = []\n\n    const errsMap = {}\n\n    for (const err of controlErrors) {\n      if (err.message || err.template) {\n        errsMap[err.validatorName] = err\n      }\n    }\n\n    for (const err of errorInput) {\n      if (err.message || err.template) {\n        errsMap[err.validatorName] = err\n      }\n    }\n\n    for (const err of errorTemplates) {\n      if (err.message || err.template) {\n        errsMap[err.validatorName] = err\n      }\n    }\n\n    for (const validatorName in errsMap) {\n      if (errsMap.hasOwnProperty(validatorName)) {\n        errs.push(errsMap[validatorName])\n      }\n    }\n\n    return errs\n      .filter(err => this._isErrorValidator(this.control.errors, err.validatorName))\n      .filter(err => !err.external)\n      .map(err => ({\n        ...err,\n        error: this.control.errors ? this.control.errors[err.validatorName] : null,\n        _errors: this.control.errors\n      } as IErrorRecord))\n  }\n\n  private _isErrorValidator(errors: ValidationErrors | null, validatorName: string): boolean {\n    if (!errors) {\n      return false\n    }\n    const arr = validatorName.split(' ').filter(v => v.trim().length > 0)\n    for (const item of arr) {\n      if (errors.hasOwnProperty(item)) {\n        return true\n      }\n    }\n    return false\n  }\n\n}\n",
            "properties": [
                {
                    "name": "_errors",
                    "type": "ValidationErrors",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "error",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "external",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "validatorName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IExporter",
            "id": "interface-IExporter-ab87d123a76f693ed714a42025a0c5e2",
            "file": "projects/ui-common/src/lib/datatable/exporters/exporter.ts",
            "type": "interface",
            "sourceCode": "export interface IExporter {\n  type: string\n}\n",
            "properties": [
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IFileData",
            "id": "interface-IFileData-fdf49aa3e1186f498e8c23017e3e52da",
            "file": "projects/ui-common/src/lib/utils/file-utils.ts",
            "type": "interface",
            "sourceCode": "import fileType from '@marklb/file-type'\n// import { Buffer } from 'buffer/'\nconst Buffer = require('buffer/').Buffer\n\nexport function readFileAsync(file: any): Promise<ArrayBuffer | null> {\n  return new Promise<ArrayBuffer | null>((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onload = () => {\n      resolve(reader.result as ArrayBuffer | null)\n    }\n    reader.readAsArrayBuffer(file)\n  })\n}\n\nexport async function readFileAsDataUrlAsync(file: Blob): Promise<string | null> {\n  return new Promise<string | null>((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onload = () => {\n      resolve(reader.result as string | null)\n    }\n    reader.readAsDataURL(file)\n  })\n}\n\nexport async function fileBufferToBlob(\n  fileBuffer: Buffer,\n  defaultMime: string = 'application/octet-stream'\n): Promise<Blob> {\n  const fType = fileType(fileBuffer)\n  const mime = (fType) ? fType.mime : defaultMime\n  const blob = new Blob([fileBuffer as any], { type: mime })\n  return blob\n}\n\nexport async function fileBufferToObjectUrl(\n  fileBuffer: Buffer,\n  defaultMime: string = 'application/octet-stream'\n): Promise<string> {\n  const file = await fileBufferToBlob(fileBuffer, defaultMime)\n  const fileURL = URL.createObjectURL(file)\n  return fileURL\n}\n\nexport interface IFileData {\n  ext?: string\n  mime?: string\n  blob: Blob\n}\n\nexport async function fileDataFromBuffer(\n  fileBuffer: Buffer | Uint8Array | ArrayBuffer,\n  defaultMime: string = 'application/octet-stream'\n): Promise<IFileData> {\n  const _fileBuffer = Buffer.from(fileBuffer)\n  const fType = fileType(_fileBuffer as any)\n  const ext = fType && fType.ext || undefined\n  const mime = fType ? fType.mime : defaultMime\n  const blob = new Blob([_fileBuffer as any], { type: mime })\n  const fileData: IFileData = { ext, mime, blob }\n  return fileData\n}\n\nexport function openBlob(blob: Blob, target?: string, filename?: string) {\n  // NOTE: IE and MSEdge do not allow Blob resources as a source for\n  // tabs or iframes. msSaveOrOpenBlob is used as a workaround. I\n  // haven't been able to find a way to just open the Blob file in\n  // another tab yet for IE or MSEdge.\n  if (window.navigator.msSaveOrOpenBlob) {\n    window.navigator.msSaveOrOpenBlob(blob, filename)\n  } else {\n    const url = URL.createObjectURL(blob)\n    const win = window.open(url, target)\n    // TODO: Consider if always setting opener to null is to restrictive\n    // if (win && target && target.toLowerCase() === '_blank') {\n    //   win.opener = null\n    // }\n\n  }\n}\n",
            "properties": [
                {
                    "name": "blob",
                    "type": "Blob",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "ext",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "mime",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 46
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IFilterComponentRecord",
            "id": "interface-IFilterComponentRecord-b3f169553a45473bcf06529053f14b55",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.component.ts",
            "type": "interface",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\nimport { ChangeDetectionStrategy, Component, Inject, Input, OnInit } from '@angular/core'\nimport { BehaviorSubject, combineLatest, from, Observable, of } from 'rxjs'\nimport { concatMap, map, switchMap, take, tap, toArray } from 'rxjs/operators'\n\nimport jexl from 'jexl'\n\nimport { IDataExporter, THESEAM_DATA_EXPORTER } from '../data-exporter/index'\nimport { THESEAM_DATA_FILTER_DEF } from '../data-filters/data-filter-def'\nimport { IDataFilter } from '../data-filters/index'\nimport { notNullOrUndefined } from '../utils/index'\n\nimport { IDatatableDynamicDef, IDynamicDatatableRow, IDynamicDatatableRowActionDef } from './datatable-dynamic-def'\n\nexport function jexlObservable<R = any>(expression: string, context?: any): Observable<R> {\n  return from(jexl.eval(expression, context) as Promise<R>)\n}\n\nexport interface IFilterComponentRecord {\n  component: ComponentType<IDataFilter>\n  options?: any\n  order?: number\n}\n\nexport interface IActionRowExprContext {\n  row: IDynamicDatatableRow\n}\n\n@Component({\n  selector: 'seam-datatable-dynamic',\n  templateUrl: './datatable-dynamic.component.html',\n  styleUrls: ['./datatable-dynamic.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableDynamicComponent implements OnInit {\n\n  @Input()\n  set data(value: IDatatableDynamicDef | undefined | null) {\n    if (value) {\n      this._setDefaults(value)\n    }\n    this._data.next(value)\n  }\n  get data() { return this._data.value }\n  private _data = new BehaviorSubject<IDatatableDynamicDef | undefined | null>(undefined)\n\n  public data$ = this._data.asObservable()\n\n  _exporters$: Observable<IDataExporter[] | undefined>\n  _commonFilterComponents$: Observable<IFilterComponentRecord[]>\n  _hasFullSearch$: Observable<boolean>\n  _hasFilterMenu$: Observable<boolean>\n\n  constructor(\n    @Inject(THESEAM_DATA_EXPORTER) public _dataExporters: IDataExporter[],\n    @Inject(THESEAM_DATA_FILTER_DEF) public _dataFilters: { name: string, component: ComponentType<IDataFilter> }[]\n  ) { }\n\n  ngOnInit() {\n    this._exporters$ = this.data$.pipe(map(data => {\n      if (data && data.filterMenu && Array.isArray(data.filterMenu.exporters)) {\n        return data.filterMenu.exporters\n          .map(e => this._dataExporters.find(de => de.name === e))\n          .filter(notNullOrUndefined)\n      }\n      return undefined\n    }))\n\n    this._commonFilterComponents$ = this.data$.pipe(map(data => {\n      if (\n        data && data.filterMenu && Array.isArray(data.filterMenu.filters) &&\n        this._dataFilters && Array.isArray(this._dataFilters)\n      ) {\n        const commonFilters = data.filterMenu.filters.filter(f => f.type === 'common')\n\n        if (!commonFilters || commonFilters.length < 1) {\n          return []\n        }\n\n        const r = commonFilters\n          .map(cf => {\n            const _df = this._dataFilters.find(df => df.name === cf.name)\n            if (_df) {\n              const record: IFilterComponentRecord = {\n                component: _df.component,\n                options: cf.options,\n                order: cf.order || 0\n              }\n              return record\n            }\n            return null\n          })\n          .filter(notNullOrUndefined)\n\n        return r\n      }\n      return []\n    }))\n\n    this._hasFullSearch$ = this.data$.pipe(map(data => {\n      if (data && data.filterMenu && Array.isArray(data.filterMenu.filters)\n        && data.filterMenu.filters.findIndex(f => f.type === 'full-search') !== -1\n      ) {\n        return true\n      }\n      return false\n    }))\n\n    this._hasFilterMenu$ = this.data$.pipe(\n      switchMap(data => {\n        if (data && data.filterMenu) {\n          if (data.filterMenu.state === 'always-visible') {\n            return of(true)\n          } else if (data.filterMenu.state === 'hidden') {\n            return of(false)\n          }\n        }\n\n        return combineLatest([\n          this._exporters$.pipe(map(e => (e || []).length > 0)),\n          this._commonFilterComponents$.pipe(map(cfc => cfc.length > 0)),\n          this._hasFullSearch$\n        ]).pipe(map(v => v.indexOf(true) !== -1))\n      })\n    )\n  }\n\n  private _setDefaults(def: IDatatableDynamicDef): void {\n    for (const col of def.columns) {\n      if (!col.cellType) {\n        col.cellType = 'string'\n      }\n    }\n\n    if (def.filterMenu) {\n      if (!def.filterMenu.state) {\n        def.filterMenu.state = 'default'\n      }\n    }\n\n    if (def.options) {\n      if (def.options.virtualization === undefined || def.options.virtualization === null) {\n        def.options.virtualization = false\n      }\n    }\n  }\n\n  public _rowActions(row: IDynamicDatatableRow, rowActions: IDynamicDatatableRowActionDef[]): Observable<IDynamicDatatableRowActionDef[]> {\n    // TODO: Fix async eval.\n\n    if (!rowActions) { return of([]) }\n\n    return from(rowActions).pipe(\n      // concatMap(rowAction => rowAction.isHiddenExpr\n      //   ? jexlObservable(rowAction.isHiddenExpr).pipe(take(1), map(v => v ? rowAction : undefined))\n      //   : of(rowAction)\n      // ),\n\n      map(rowAction => {\n        if (rowAction.isHiddenExpr) {\n          const context = this._getActionRowContext(row, rowAction)\n          const isHidden = jexl.evalSync(rowAction.isHiddenExpr, context)\n          return isHidden ? undefined : rowAction\n        }\n        return rowAction\n      }),\n\n      toArray(),\n      map(v => v.filter(notNullOrUndefined)),\n      // tap(r => console.log('result', r)),\n    )\n  }\n\n  private _getActionRowContext(row: IDynamicDatatableRow, rowActionDef: IDynamicDatatableRowActionDef): IActionRowExprContext {\n    return {\n      row\n    }\n  }\n\n}\n",
            "properties": [
                {
                    "name": "component",
                    "type": "ComponentType<IDataFilter>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "options",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IHoverClassToggleRecord",
            "id": "interface-IHoverClassToggleRecord-657d4290bfe339d515a283d60fe9cb3e",
            "file": "projects/ui-common/src/lib/shared/directives/hover-class-toggle.directive.ts",
            "type": "interface",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input } from '@angular/core'\n\ndeclare type _PointerEvent = PointerEvent | PointerEvent\n\nexport interface IHoverClassToggleRecord {\n  default: string\n  hover: string\n}\n\n/**\n * Don't use this directive unless there is a reason not to use css `:hover`,\n * because the accuracy of detecting the hover is not as good. If an element is\n * moved while the mouse is idle the hover class will remain until the mouse\n * enters and leaves again.\n *\n * I have tried multiple ways of detecting the mouse no longer hovering, but all\n * have introduced a slight performance issue that just builds for each element\n * containing this directive.\n */\n@Directive({\n  selector: '[seamHoverClassToggle]'\n})\nexport class HoverClassToggleDirective {\n\n  private _hovered = false\n  private _defaultClasses: string[] = []\n  private _hoverClasses: string[] = []\n\n  @HostListener('mouseover', ['$event']) onMouseOver($event: MouseEvent) {\n    this._setHovered(true)\n  }\n\n  @HostListener('mouseout', ['$event']) onMouseOut($event: MouseEvent) {\n    this._setHovered(false)\n  }\n\n  @HostListener('pointerover', ['$event']) onPointerOver($event: _PointerEvent) {\n    this._setHovered(true)\n  }\n\n  @HostListener('pointerout', ['$event']) onPointerOut($event: _PointerEvent) {\n    this._setHovered(false)\n  }\n\n  @Input()\n  set seamHoverClassToggle(value: IHoverClassToggleRecord) {\n    if (value) {\n      if (value.default) {\n        this._defaultClasses = value.default.split(' ').filter(c => c.length > 0)\n      }\n      if (value.hover) {\n        this._hoverClasses = value.hover.split(' ').filter(c => c.length > 0)\n      }\n    }\n\n    this._hoverClasses = this._hoverClasses.filter(v => !this._defaultClasses.find(_v => _v === v))\n\n    this._update()\n  }\n\n  constructor(\n    private _element: ElementRef\n  ) { }\n\n  private _update() {\n    for (const c of this._defaultClasses) {\n      this._hovered ?  this._removeClass(c) : this._addClass(c)\n    }\n    for (const c of this._hoverClasses) {\n      this._hovered ? this._addClass(c) : this._removeClass(c)\n    }\n  }\n\n  private _setHovered(hovered) {\n    const doUpdate = this._hovered !== hovered\n    this._hovered = hovered\n    if (doUpdate) {\n      this._update()\n    }\n  }\n\n  private _addClass(c: string) {\n    this._element.nativeElement.classList.add(c)\n  }\n\n  public _removeClass(c: string) {\n    this._element.nativeElement.classList.remove(c)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "default",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "hover",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IJexlExprDef",
            "id": "interface-IJexlExprDef-037a927fafee9fd55ff6e2f14ec20a2e",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/jexl-expr-def.ts",
            "type": "interface",
            "sourceCode": "export interface IJexlExprDef {\n  type: 'jexl'\n  expr: string\n}\n",
            "properties": [
                {
                    "name": "expr",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "type",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ILocalStorageService",
            "id": "interface-ILocalStorageService-a97f38f500c1ee4b9f6bc4b875d398fc",
            "file": "projects/ui-common/src/lib/services/local-storage.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { BehaviorSubject, fromEvent, Observable } from 'rxjs'\nimport { filter, map, tap } from 'rxjs/operators'\n\nimport * as localStorageMemory from 'localstorage-memory'\n\nimport { notNullOrUndefined } from '../utils/index'\n\n// NOTE: Temporary localStorage polyfill just to get the app running without localStorage for now.\nconst localStorage: Storage = 'localStorage' in window && window.localStorage != null ? window.localStorage : localStorageMemory\n\nexport interface ILocalStorageService {\n  select(key: string, defaultValue: string | null): Observable<string | null>\n  get(key: string, defaultValue: string | null): string | null\n  set(key: string, value: string): void\n  remove(key: string): void\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageService implements ILocalStorageService {\n  protected subjects: { [key: string]: BehaviorSubject<string | null> } = {}\n\n  /** This is only here for testing/debugging. */\n  private _localStorage = localStorage\n\n  constructor() {\n    fromEvent<StorageEvent>(window, 'storage')\n      .pipe(\n        map(e => e.key),\n        filter(notNullOrUndefined),\n        tap(key => {\n          const subjectValue = this.get(key)\n          const storedValue = this._localStorage.getItem(key)\n          if (subjectValue !== storedValue) {\n            if (storedValue) {\n              this.set(key, storedValue)\n            } else {\n              this.remove(key)\n            }\n          }\n        }),\n      )\n      .subscribe()\n  }\n\n  /**\n   * Observe a localStorage item.\n   *\n   * NOTE: Only emits changes if the item is changed with the set method of this\n   * class instance.\n   */\n  select(key: string, defaultValue: string | null = null): Observable<string | null> {\n    if (this.subjects.hasOwnProperty(key)) {\n      return this.subjects[key]\n    }\n\n    if (!this._localStorage.getItem(key) && defaultValue) {\n      this._localStorage.setItem(key, defaultValue)\n    }\n\n    const value = this._localStorage.getItem(key) || defaultValue\n\n    return (this.subjects[key] = new BehaviorSubject(value))\n  }\n\n  /** Get a localStorage item. */\n  get(key: string, defaultValue: string | null = null): string | null {\n    if (this.subjects.hasOwnProperty(key)) {\n      return this.subjects[key].value\n    }\n\n    if (!this._localStorage.getItem(key) && defaultValue) {\n      this._localStorage.setItem(key, defaultValue)\n    }\n\n    const value = this._localStorage.getItem(key) || defaultValue\n\n    return (this.subjects[key] = new BehaviorSubject(value)).value\n  }\n\n  /** Set a localStorage item. */\n  set(key: string, value: string): void {\n    this._localStorage.setItem(key, value)\n\n    if (this.subjects.hasOwnProperty(key)) {\n      this.subjects[key].next(value)\n    }\n  }\n\n  /** Remove a localStorage item. */\n  remove(key: string): void {\n    this._localStorage.removeItem(key)\n\n    if (this.subjects.hasOwnProperty(key)) {\n      this.subjects[key].next(null)\n    }\n  }\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "defaultValue",
                            "type": "string | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultValue",
                            "type": "string | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "defaultValue",
                            "type": "string | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string | null>",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultValue",
                            "type": "string | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "IModalContainer",
            "id": "interface-IModalContainer-fd74884493591fbca3962790a1a83629",
            "file": "projects/ui-common/src/lib/modal/modal.models.ts",
            "type": "interface",
            "sourceCode": "import { OverlayRef } from '@angular/cdk/overlay'\nimport { EventEmitter, InjectionToken } from '@angular/core'\nimport { FormGroup } from '@angular/forms'\n\nexport interface IModalContainer {\n\n  /**\n   * Modal will close if a key is pressed with any of these key codes.\n   *\n   * default: [ 27 ] // 27 = ESCAPE\n   */\n  closeOnKeyPressed: number[]\n\n  /** Emits when the modal has closed. */\n  modalClosed: EventEmitter<void>\n\n  /** Reference to the cdk OverlayRef. */\n  _overlayRef: OverlayRef\n\n  /** Makes the modal container a form with this formGroup. */\n  form: FormGroup\n\n  /** Emit the `(ngSubmit)` event. NOTE: Only if `form` is defined. */\n  formSubmit: EventEmitter<void>\n\n  /** Opens the modal. */\n  open(): void\n\n  /** Closes the modal. */\n  close(): void\n\n}\n\nexport const THESEAM_MODAL_CONTAINER = new InjectionToken<IModalContainer>('seamModalContainer')\n",
            "properties": [
                {
                    "name": "_overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "<p>Reference to the cdk OverlayRef. </p>\n",
                    "line": 18
                },
                {
                    "name": "closeOnKeyPressed",
                    "type": "number[]",
                    "optional": false,
                    "description": "<p>Modal will close if a key is pressed with any of these key codes.</p>\n<p>default: [ 27 ] // 27 = ESCAPE</p>\n",
                    "line": 12
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>Makes the modal container a form with this formGroup. </p>\n",
                    "line": 21
                },
                {
                    "name": "formSubmit",
                    "type": "EventEmitter<void>",
                    "optional": false,
                    "description": "<p>Emit the <code>(ngSubmit)</code> event. NOTE: Only if <code>form</code> is defined. </p>\n",
                    "line": 24
                },
                {
                    "name": "modalClosed",
                    "type": "EventEmitter<void>",
                    "optional": false,
                    "description": "<p>Emits when the modal has closed. </p>\n",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "description": "<p>Closes the modal. </p>\n"
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "description": "<p>Opens the modal. </p>\n"
                }
            ]
        },
        {
            "name": "IModalPosition",
            "id": "interface-IModalPosition-6774b4dd3913ea496a5c8eaef094284a",
            "file": "projects/ui-common/src/lib/modal/modal-config.ts",
            "type": "interface",
            "sourceCode": "import { Direction } from '@angular/cdk/bidi'\nimport { ComponentType } from '@angular/cdk/overlay'\nimport { InjectionToken, ViewContainerRef } from '@angular/core'\n\nimport { ModalContainerComponent } from './modal-container/modal-container.component'\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog'\n\n/** Possible overrides for a dialog's position. */\nexport interface IModalPosition {\n  top?: string\n  bottom?: string\n  left?: string\n  right?: string\n}\n\n// tslint:disable:no-inferrable-types\nexport class ModalConfig<D = any> {\n  /** Component to use as the container for the dialog. */\n  containerComponent?: ComponentType<ModalContainerComponent>\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef\n\n  /** The id of the dialog. */\n  id?: string\n\n  /** The ARIA role of the dialog. */\n  role?: DialogRole = 'dialog'\n\n  /** Custom class(es) for the overlay panel. */\n  panelClass?: string | string[] = ''\n\n  /** Whether the dialog has a background. */\n  hasBackdrop?: boolean = true\n\n  /** Custom class(es) for the backdrop. */\n  backdropClass?: string | undefined = ''\n\n  /** Whether the dialog can be closed by user interaction. */\n  disableClose?: boolean = false\n\n  /** The width of the dialog. */\n  width?: string = '100%'\n\n  /** The height of the dialog. */\n  height?: string = ''\n\n  /** The minimum width of the dialog. */\n  minWidth?: string | number = ''\n\n  /** The minimum height of the dialog. */\n  minHeight?: string | number = ''\n\n  /** The maximum width of the dialog. */\n  maxWidth?: string | number = ''\n\n  /** The maximum height of the dialog. */\n  maxHeight?: string | number = ''\n\n  /** The position of the dialog. */\n  position?: IModalPosition\n\n  /** Data to be injected into the dialog content. */\n  data?: D | null = null\n\n  /** The layout direction for the dialog content. */\n  direction?: Direction\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true\n\n  /** Duration of the enter animation. Has to be a valid CSS value (e.g. 100ms). */\n  enterAnimationDuration?: string = '225ms'\n\n  /** Duration of the exit animation. Has to be a valid CSS value (e.g. 50ms). */\n  exitAnimationDuration?: string = '225ms'\n\n  /** Bootstrap modal sizes */\n  modalSize?: 'sm' | 'lg' | 'xl'\n}\n// tslint:enable:no-inferrable-types\n\nexport function mergeModalConfigs(a: ModalConfig, b: ModalConfig) {\n  return { ...a, ...b }\n}\n\n\n/** Injection token that can be used to specify modal options. */\nexport const LIB_MODAL_CONFIG = new InjectionToken<ModalConfig>('seamModalConfig')\n",
            "properties": [
                {
                    "name": "bottom",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "left",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "right",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "top",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Possible overrides for a dialog&#39;s position. </p>\n",
            "methods": []
        },
        {
            "name": "ISideNavBasic",
            "id": "interface-ISideNavBasic-194fa975cccd542919c3dd9adb1ac94d",
            "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
            "type": "interface",
            "sourceCode": "import { SeamIcon } from '../../icon/index'\n\nexport interface ISideNavItemStatus {\n  active: boolean\n}\n\nexport interface ISideNavItemBase<T extends string> {\n  /**\n   * default: 'route'\n   */\n  itemType?: T\n\n  /** This prop is set by the nav bar. If manually set it may be overwritten. */\n  status?: ISideNavItemStatus\n}\n\nexport interface ISideNavTitle extends ISideNavItemBase<'title'> {\n  label?: string\n}\n\nexport interface ISideNavDivider extends ISideNavItemBase<'divider'> {\n  label?: string\n}\n\nexport interface ISideNavBasic extends ISideNavItemBase<'basic'> {\n  icon?: SeamIcon\n  label: string\n\n  children?: ISideNavItem[]\n}\n\nexport interface ISideNavLink extends ISideNavItemBase<'link'> {\n  icon?: SeamIcon\n  label: string\n\n  link?: any[]|string\n  queryParams?: { [k: string]: any }\n\n  children?: ISideNavItem[]\n}\n\nexport interface ISideNavButton extends ISideNavItemBase<'button'> {\n  onClick: (event) => void\n}\n\nexport type ISideNavItem = ISideNavTitle | ISideNavDivider | ISideNavBasic | ISideNavLink | ISideNavButton\n",
            "properties": [
                {
                    "name": "children",
                    "type": "ISideNavItem[]",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "icon",
                    "type": "SeamIcon",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ISideNavItemBase"
        },
        {
            "name": "ISideNavButton",
            "id": "interface-ISideNavButton-194fa975cccd542919c3dd9adb1ac94d",
            "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
            "type": "interface",
            "sourceCode": "import { SeamIcon } from '../../icon/index'\n\nexport interface ISideNavItemStatus {\n  active: boolean\n}\n\nexport interface ISideNavItemBase<T extends string> {\n  /**\n   * default: 'route'\n   */\n  itemType?: T\n\n  /** This prop is set by the nav bar. If manually set it may be overwritten. */\n  status?: ISideNavItemStatus\n}\n\nexport interface ISideNavTitle extends ISideNavItemBase<'title'> {\n  label?: string\n}\n\nexport interface ISideNavDivider extends ISideNavItemBase<'divider'> {\n  label?: string\n}\n\nexport interface ISideNavBasic extends ISideNavItemBase<'basic'> {\n  icon?: SeamIcon\n  label: string\n\n  children?: ISideNavItem[]\n}\n\nexport interface ISideNavLink extends ISideNavItemBase<'link'> {\n  icon?: SeamIcon\n  label: string\n\n  link?: any[]|string\n  queryParams?: { [k: string]: any }\n\n  children?: ISideNavItem[]\n}\n\nexport interface ISideNavButton extends ISideNavItemBase<'button'> {\n  onClick: (event) => void\n}\n\nexport type ISideNavItem = ISideNavTitle | ISideNavDivider | ISideNavBasic | ISideNavLink | ISideNavButton\n",
            "properties": [
                {
                    "name": "onClick",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ISideNavItemBase"
        },
        {
            "name": "ISideNavDivider",
            "id": "interface-ISideNavDivider-194fa975cccd542919c3dd9adb1ac94d",
            "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
            "type": "interface",
            "sourceCode": "import { SeamIcon } from '../../icon/index'\n\nexport interface ISideNavItemStatus {\n  active: boolean\n}\n\nexport interface ISideNavItemBase<T extends string> {\n  /**\n   * default: 'route'\n   */\n  itemType?: T\n\n  /** This prop is set by the nav bar. If manually set it may be overwritten. */\n  status?: ISideNavItemStatus\n}\n\nexport interface ISideNavTitle extends ISideNavItemBase<'title'> {\n  label?: string\n}\n\nexport interface ISideNavDivider extends ISideNavItemBase<'divider'> {\n  label?: string\n}\n\nexport interface ISideNavBasic extends ISideNavItemBase<'basic'> {\n  icon?: SeamIcon\n  label: string\n\n  children?: ISideNavItem[]\n}\n\nexport interface ISideNavLink extends ISideNavItemBase<'link'> {\n  icon?: SeamIcon\n  label: string\n\n  link?: any[]|string\n  queryParams?: { [k: string]: any }\n\n  children?: ISideNavItem[]\n}\n\nexport interface ISideNavButton extends ISideNavItemBase<'button'> {\n  onClick: (event) => void\n}\n\nexport type ISideNavItem = ISideNavTitle | ISideNavDivider | ISideNavBasic | ISideNavLink | ISideNavButton\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ISideNavItemBase"
        },
        {
            "name": "ISideNavItemBase",
            "id": "interface-ISideNavItemBase-194fa975cccd542919c3dd9adb1ac94d",
            "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
            "type": "interface",
            "sourceCode": "import { SeamIcon } from '../../icon/index'\n\nexport interface ISideNavItemStatus {\n  active: boolean\n}\n\nexport interface ISideNavItemBase<T extends string> {\n  /**\n   * default: 'route'\n   */\n  itemType?: T\n\n  /** This prop is set by the nav bar. If manually set it may be overwritten. */\n  status?: ISideNavItemStatus\n}\n\nexport interface ISideNavTitle extends ISideNavItemBase<'title'> {\n  label?: string\n}\n\nexport interface ISideNavDivider extends ISideNavItemBase<'divider'> {\n  label?: string\n}\n\nexport interface ISideNavBasic extends ISideNavItemBase<'basic'> {\n  icon?: SeamIcon\n  label: string\n\n  children?: ISideNavItem[]\n}\n\nexport interface ISideNavLink extends ISideNavItemBase<'link'> {\n  icon?: SeamIcon\n  label: string\n\n  link?: any[]|string\n  queryParams?: { [k: string]: any }\n\n  children?: ISideNavItem[]\n}\n\nexport interface ISideNavButton extends ISideNavItemBase<'button'> {\n  onClick: (event) => void\n}\n\nexport type ISideNavItem = ISideNavTitle | ISideNavDivider | ISideNavBasic | ISideNavLink | ISideNavButton\n",
            "properties": [
                {
                    "name": "itemType",
                    "type": "T",
                    "optional": true,
                    "description": "<p>default: &#39;route&#39;</p>\n",
                    "line": 11
                },
                {
                    "name": "status",
                    "type": "ISideNavItemStatus",
                    "optional": true,
                    "description": "<p>This prop is set by the nav bar. If manually set it may be overwritten. </p>\n",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ISideNavItemStatus",
            "id": "interface-ISideNavItemStatus-194fa975cccd542919c3dd9adb1ac94d",
            "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
            "type": "interface",
            "sourceCode": "import { SeamIcon } from '../../icon/index'\n\nexport interface ISideNavItemStatus {\n  active: boolean\n}\n\nexport interface ISideNavItemBase<T extends string> {\n  /**\n   * default: 'route'\n   */\n  itemType?: T\n\n  /** This prop is set by the nav bar. If manually set it may be overwritten. */\n  status?: ISideNavItemStatus\n}\n\nexport interface ISideNavTitle extends ISideNavItemBase<'title'> {\n  label?: string\n}\n\nexport interface ISideNavDivider extends ISideNavItemBase<'divider'> {\n  label?: string\n}\n\nexport interface ISideNavBasic extends ISideNavItemBase<'basic'> {\n  icon?: SeamIcon\n  label: string\n\n  children?: ISideNavItem[]\n}\n\nexport interface ISideNavLink extends ISideNavItemBase<'link'> {\n  icon?: SeamIcon\n  label: string\n\n  link?: any[]|string\n  queryParams?: { [k: string]: any }\n\n  children?: ISideNavItem[]\n}\n\nexport interface ISideNavButton extends ISideNavItemBase<'button'> {\n  onClick: (event) => void\n}\n\nexport type ISideNavItem = ISideNavTitle | ISideNavDivider | ISideNavBasic | ISideNavLink | ISideNavButton\n",
            "properties": [
                {
                    "name": "active",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ISideNavLink",
            "id": "interface-ISideNavLink-194fa975cccd542919c3dd9adb1ac94d",
            "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
            "type": "interface",
            "sourceCode": "import { SeamIcon } from '../../icon/index'\n\nexport interface ISideNavItemStatus {\n  active: boolean\n}\n\nexport interface ISideNavItemBase<T extends string> {\n  /**\n   * default: 'route'\n   */\n  itemType?: T\n\n  /** This prop is set by the nav bar. If manually set it may be overwritten. */\n  status?: ISideNavItemStatus\n}\n\nexport interface ISideNavTitle extends ISideNavItemBase<'title'> {\n  label?: string\n}\n\nexport interface ISideNavDivider extends ISideNavItemBase<'divider'> {\n  label?: string\n}\n\nexport interface ISideNavBasic extends ISideNavItemBase<'basic'> {\n  icon?: SeamIcon\n  label: string\n\n  children?: ISideNavItem[]\n}\n\nexport interface ISideNavLink extends ISideNavItemBase<'link'> {\n  icon?: SeamIcon\n  label: string\n\n  link?: any[]|string\n  queryParams?: { [k: string]: any }\n\n  children?: ISideNavItem[]\n}\n\nexport interface ISideNavButton extends ISideNavItemBase<'button'> {\n  onClick: (event) => void\n}\n\nexport type ISideNavItem = ISideNavTitle | ISideNavDivider | ISideNavBasic | ISideNavLink | ISideNavButton\n",
            "properties": [
                {
                    "name": "children",
                    "type": "ISideNavItem[]",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "icon",
                    "type": "SeamIcon",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "link",
                    "type": "any[] | string",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "queryParams",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ISideNavItemBase"
        },
        {
            "name": "ISideNavTitle",
            "id": "interface-ISideNavTitle-194fa975cccd542919c3dd9adb1ac94d",
            "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
            "type": "interface",
            "sourceCode": "import { SeamIcon } from '../../icon/index'\n\nexport interface ISideNavItemStatus {\n  active: boolean\n}\n\nexport interface ISideNavItemBase<T extends string> {\n  /**\n   * default: 'route'\n   */\n  itemType?: T\n\n  /** This prop is set by the nav bar. If manually set it may be overwritten. */\n  status?: ISideNavItemStatus\n}\n\nexport interface ISideNavTitle extends ISideNavItemBase<'title'> {\n  label?: string\n}\n\nexport interface ISideNavDivider extends ISideNavItemBase<'divider'> {\n  label?: string\n}\n\nexport interface ISideNavBasic extends ISideNavItemBase<'basic'> {\n  icon?: SeamIcon\n  label: string\n\n  children?: ISideNavItem[]\n}\n\nexport interface ISideNavLink extends ISideNavItemBase<'link'> {\n  icon?: SeamIcon\n  label: string\n\n  link?: any[]|string\n  queryParams?: { [k: string]: any }\n\n  children?: ISideNavItem[]\n}\n\nexport interface ISideNavButton extends ISideNavItemBase<'button'> {\n  onClick: (event) => void\n}\n\nexport type ISideNavItem = ISideNavTitle | ISideNavDivider | ISideNavBasic | ISideNavLink | ISideNavButton\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ISideNavItemBase"
        },
        {
            "name": "ITableCellData",
            "id": "interface-ITableCellData-f8afbb216cd350de36460428c361d95d",
            "file": "projects/ui-common/src/lib/table/table-cell.models.ts",
            "type": "interface",
            "sourceCode": "import { SimpleChanges } from '@angular/core'\nimport { Observable } from 'rxjs'\n\nimport { ITheSeamTableColumn } from './table-column'\n\nexport interface ITableCellDataChange {\n  data: ITableCellData\n  changes: SimpleChanges\n}\n\nexport interface ITableCellData<R = any, V = any> {\n  row: R\n  rowIndex: number\n  colData: ITheSeamTableColumn<R>\n  value: V\n  changed: Observable<ITableCellDataChange>\n}\n",
            "properties": [
                {
                    "name": "changed",
                    "type": "Observable<ITableCellDataChange>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "colData",
                    "type": "ITheSeamTableColumn<R>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "row",
                    "type": "R",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "rowIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "value",
                    "type": "V",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ITableCellDataChange",
            "id": "interface-ITableCellDataChange-f8afbb216cd350de36460428c361d95d",
            "file": "projects/ui-common/src/lib/table/table-cell.models.ts",
            "type": "interface",
            "sourceCode": "import { SimpleChanges } from '@angular/core'\nimport { Observable } from 'rxjs'\n\nimport { ITheSeamTableColumn } from './table-column'\n\nexport interface ITableCellDataChange {\n  data: ITableCellData\n  changes: SimpleChanges\n}\n\nexport interface ITableCellData<R = any, V = any> {\n  row: R\n  rowIndex: number\n  colData: ITheSeamTableColumn<R>\n  value: V\n  changed: Observable<ITableCellDataChange>\n}\n",
            "properties": [
                {
                    "name": "changes",
                    "type": "SimpleChanges",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "data",
                    "type": "ITableCellData",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ITableCellTypeManifest",
            "id": "interface-ITableCellTypeManifest-ccdc5503ec3977d847140eb9bccc0047",
            "file": "projects/ui-common/src/lib/table-cell-types/table-cell-types-models.ts",
            "type": "interface",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\n\nimport { ITableCellData } from '../table/index'\n\nexport interface ITableCellTypeManifest {\n  /**\n   * Name used to reference the cell type. Must be unique to avoid incorrect cell selection.\n   */\n  name: string\n  /**\n   * The cell type component.\n   *\n   * TODO: Add support for lazy loaded cells. This isn't important yet, but\n   * later on we may have many unused cell types or a large cell type that isn't\n   * used often.\n   */\n  component: ComponentType<{}> /* | string */ // TODO: Add string for lazy loaded cell support.\n}\n\nexport interface ICalucatedValueContext<R = any, V = any>\n  // TODO: When context usage is better known the Partial should be removed and\n  // to clearly define expected values in context.\n  extends Partial<ITableCellData<R, V>> {\n  [key: string]: any\n}\n\nexport type CalculatedValueContextFn = () => ICalucatedValueContext\n\nexport type CaluclatedValueContextType = ICalucatedValueContext | CalculatedValueContextFn\n",
            "properties": [
                {
                    "name": "component",
                    "type": "ComponentType<literal type>",
                    "optional": false,
                    "description": "<p>The cell type component.</p>\n<p>TODO: Add support for lazy loaded cells. This isn&#39;t important yet, but\nlater on we may have many unused cell types or a large cell type that isn&#39;t\nused often.</p>\n",
                    "line": 17
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name used to reference the cell type. Must be unique to avoid incorrect cell selection.</p>\n",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ITableCellTypeManifestProvider",
            "id": "interface-ITableCellTypeManifestProvider-9d6363bdabea09b7bf17e465b1bc4435",
            "file": "projects/ui-common/src/lib/table-cell-types/table-cell-type-manifest-provider.ts",
            "type": "interface",
            "sourceCode": "import { ITableCellTypeManifest } from './table-cell-types-models'\nimport { TABLE_CELL_TYPE_MANIFEST } from './table-cell-types-tokens'\n\nexport interface ITableCellTypeManifestProvider {\n  provide: typeof TABLE_CELL_TYPE_MANIFEST\n  useValue: ITableCellTypeManifest\n  multi: true\n}\n",
            "properties": [
                {
                    "name": "multi",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "provide",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "useValue",
                    "type": "ITableCellTypeManifest",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ITableColumn",
            "id": "interface-ITableColumn-7e89baee8ab1840c5037eaf4e84521e1",
            "file": "projects/ui-common/src/lib/table/table/table.component.ts",
            "type": "interface",
            "sourceCode": "import { coerceArray } from '@angular/cdk/coercion'\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core'\nimport { DomSanitizer } from '@angular/platform-browser'\n\n/**\n * An optional function passed into the `NgForOf` directive that defines how to track\n * changes for items in an iterable.\n * The function takes the iteration index and item ID.\n * When supplied, Angular tracks changes by the return value of the function.\n *\n * NOTE: Can't import the type from'@angular/core', because of a bug in angular-cli's\n * build that can't find exported types that only exist at compile time if there\n * are exports that exist at runtime in the same file.\n */\nexport type TrackByFunction<T> = (index: number, item: T) => any\n\nexport interface ITableColumn {\n  prop: string\n  name?: string\n}\n\n@Component({\n  selector: 'seam-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableComponent<T = any> implements OnInit {\n\n  @Input()\n  get columns() { return this._columns }\n  set columns(value: (string | ITableColumn)[]) {\n    this._columns = value\n    this._setColumns(value)\n  }\n  private _columns: (string | ITableColumn)[]\n\n  @Input()\n  get rows(): T[] { return this._rows }\n  set rows(value: T[]) {\n    this._rows = !!value ? coerceArray(value) : []\n\n    if (this._rows.length < 1) {\n      this._displayedRows = [\n        { _emptyDisplay: true } as any\n      ]\n    } else {\n      this._displayedRows = this._rows\n    }\n  }\n  private _rows: T[] = []\n\n  get displayedRows() { return this._displayedRows }\n  private _displayedRows: T[] & { _colSpan?: number } = []\n\n  @Input() trackBy: TrackByFunction<T>\n\n  @Input() size: 'sm' | 'md' | undefined | null\n\n  @Input() hasHeader = true\n\n  public displayedRecords: ITableColumn[]\n  public displayedColumns: string[]\n\n  @Output() readonly actionRefreshRequest = new EventEmitter<void>()\n\n  constructor(\n    private _sanitizer: DomSanitizer\n  ) { }\n\n  ngOnInit() { }\n\n  private _setColumns(cols: (string | ITableColumn)[]) {\n    const newCols: ITableColumn[] = []\n\n    for (const col of cols) {\n      if (typeof col === 'string') {\n        const newCol: ITableColumn = {\n          prop: col,\n          name: col\n        }\n        newCols.push(newCol)\n      } else {\n        let name = col.name\n        if (name === undefined || name === null) {\n          name = col.prop\n        }\n        const newCol: ITableColumn = {\n          ...col,\n          prop: col.prop,\n          name\n        }\n        newCols.push(newCol)\n      }\n    }\n\n    for (const col of newCols) {\n      const _col = col as any\n      if (_col && _col.cellTypeConfig && _col.cellTypeConfig.styles) {\n        _col.cellTypeConfig.styles = this._sanitizer.bypassSecurityTrustStyle(_col.cellTypeConfig.styles)\n      }\n    }\n\n    this.displayedRecords = newCols\n    this.displayedColumns = newCols.map(c => c.prop)\n  }\n\n  public triggerActionRefreshRequest() {\n    this.actionRefreshRequest.emit(undefined)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "prop",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ITextFilterOptions",
            "id": "interface-ITextFilterOptions-00408df12e15b38c4d18e42179776b27",
            "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/text-filter-options.ts",
            "type": "interface",
            "sourceCode": "export interface ITextFilterOptions {\n  /**\n   * Limits filtering to these properties only.\n   */\n  properties?: string[]\n  /**\n   * When all properties are used this will omit those properties. This option\n   * does nothing when `properties` option is defined.\n   */\n  omitProperties?: string[]\n  /**\n   * When using a loose matching, such as the default text filter that uses\n   * string contains, this will tell the filter to use exact matching.\n   *\n   * default: `false`\n   */\n  exact: boolean\n  /**\n   * When using a string filter this will tell the filter to use case sensitive\n   * matching.\n   *\n   * default: `false`\n   */\n  caseSensitive: boolean\n}\n",
            "properties": [
                {
                    "name": "caseSensitive",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>When using a string filter this will tell the filter to use case sensitive\nmatching.</p>\n<p>default: <code>false</code></p>\n",
                    "line": 24
                },
                {
                    "name": "exact",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>When using a loose matching, such as the default text filter that uses\nstring contains, this will tell the filter to use exact matching.</p>\n<p>default: <code>false</code></p>\n",
                    "line": 17
                },
                {
                    "name": "omitProperties",
                    "type": "string[]",
                    "optional": true,
                    "description": "<p>When all properties are used this will omit those properties. This option\ndoes nothing when <code>properties</code> option is defined.</p>\n",
                    "line": 10
                },
                {
                    "name": "properties",
                    "type": "string[]",
                    "optional": true,
                    "description": "<p>Limits filtering to these properties only.</p>\n",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ITheSeamBaseLayoutNav",
            "id": "interface-ITheSeamBaseLayoutNav-0a5a6c1e77e0c1d9627a06eca88e122e",
            "file": "projects/ui-common/src/lib/framework/base-layout/base-layout-nav.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs'\n\n/**\n * A class implementing this interface can be registered as a nav with the\n * `TheSeamBaseLayoutComponent`.\n *\n * A benefit to registering the nav is that the base layout can control the\n * expand state.\n */\nexport interface ITheSeamBaseLayoutNav {\n  /** Is nav expanded. */\n  expanded$: Observable<boolean>\n\n  /** Expand the nav. */\n  expand: () => void\n\n  /** Collapse the nav. */\n  collapse: () => void\n\n  /** Toggle the expand state. */\n  toggle: () => void\n}\n",
            "properties": [
                {
                    "name": "collapse",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Collapse the nav. </p>\n",
                    "line": 18
                },
                {
                    "name": "expand",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Expand the nav. </p>\n",
                    "line": 15
                },
                {
                    "name": "expanded$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "<p>Is nav expanded. </p>\n",
                    "line": 12
                },
                {
                    "name": "toggle",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Toggle the expand state. </p>\n",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>A class implementing this interface can be registered as a nav with the\n<code>TheSeamBaseLayoutComponent</code>.</p>\n<p>A benefit to registering the nav is that the base layout can control the\nexpand state.</p>\n",
            "methods": []
        },
        {
            "name": "ITheSeamBaseLayoutRef",
            "id": "interface-ITheSeamBaseLayoutRef-6b10bb4bb992d68c667c0343d03cf4d2",
            "file": "projects/ui-common/src/lib/framework/base-layout/base-layout-ref.ts",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs'\n\nimport { ITheSeamBaseLayoutNav } from './base-layout-nav'\n\nexport interface ITheSeamBaseLayoutRef {\n\n  readonly registeredNav: ITheSeamBaseLayoutNav | undefined\n\n  registeredNav$: Observable<ITheSeamBaseLayoutNav | undefined>\n\n  registerNav(nav: ITheSeamBaseLayoutNav): void\n\n  unregisterNav(nav: ITheSeamBaseLayoutNav): void\n\n}\n",
            "properties": [
                {
                    "name": "registeredNav",
                    "type": "ITheSeamBaseLayoutNav | undefined",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "registeredNav$",
                    "type": "Observable<ITheSeamBaseLayoutNav | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "registerNav",
                    "args": [
                        {
                            "name": "nav",
                            "type": "ITheSeamBaseLayoutNav"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "nav",
                            "type": "ITheSeamBaseLayoutNav",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unregisterNav",
                    "args": [
                        {
                            "name": "nav",
                            "type": "ITheSeamBaseLayoutNav"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "nav",
                            "type": "ITheSeamBaseLayoutNav",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "ITheSeamBreadcrumb",
            "id": "interface-ITheSeamBreadcrumb-4fafdffd4b536a0f111489c7de58e5b9",
            "file": "projects/ui-common/src/lib/breadcrumbs/breadcrumb.ts",
            "type": "interface",
            "sourceCode": "import { ActivatedRoute } from '@angular/router'\n\nexport interface ITheSeamBreadcrumb {\n  /** Value to display on breadcrumb. */\n  value: string\n  /** Path to the crumb. */\n  path: string\n  /** Route the crumb is from. */\n  route: ActivatedRoute\n}\n",
            "properties": [
                {
                    "name": "path",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path to the crumb. </p>\n",
                    "line": 7
                },
                {
                    "name": "route",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "<p>Route the crumb is from. </p>\n",
                    "line": 9
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Value to display on breadcrumb. </p>\n",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ITheSeamBreadcrumbsResolver",
            "id": "interface-ITheSeamBreadcrumbsResolver-b7a9bc16f4298b697e65abaf1b536840",
            "file": "projects/ui-common/src/lib/breadcrumbs/breadcrumbs-resolver.ts",
            "type": "interface",
            "sourceCode": "import { Resolve } from '@angular/router'\n\nexport interface ITheSeamBreadcrumbsResolver extends Resolve<string> { }\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Resolve"
        },
        {
            "name": "ITheSeamDatatableColumn",
            "id": "interface-ITheSeamDatatableColumn-b0829a6bf3dfe92eb4d1d1acd792d721",
            "file": "projects/ui-common/src/lib/datatable/models/table-column.ts",
            "type": "interface",
            "sourceCode": "import { TableColumn } from '@marklb/ngx-datatable'\n\nimport { TheSeamTableCellType, TheSeamTableColumnExportValueFn } from '../../table/index'\n\nexport interface ITheSeamDatatableColumn<D = any, P = any> extends TableColumn {\n\n  /**\n   * If undefined the value will be rendered as a string.\n   */\n  cellType?: TheSeamTableCellType\n\n  /**\n   * Properties to pass to the cell component.\n   */\n  cellProps?: P\n\n  /**\n   * Ignore column in export.\n   */\n  exportIgnore?: boolean\n\n  /**\n   * Column header in export.\n   */\n  exportHeader?: string\n\n  /**\n   * Transform function for column value in export.\n   */\n  exportValueFn?: TheSeamTableColumnExportValueFn<D>\n\n}\n",
            "properties": [
                {
                    "name": "cellProps",
                    "type": "P",
                    "optional": true,
                    "description": "<p>Properties to pass to the cell component.</p>\n",
                    "line": 15
                },
                {
                    "name": "cellType",
                    "type": "TheSeamTableCellType",
                    "optional": true,
                    "description": "<p>If undefined the value will be rendered as a string.</p>\n",
                    "line": 10
                },
                {
                    "name": "exportHeader",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Column header in export.</p>\n",
                    "line": 25
                },
                {
                    "name": "exportIgnore",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Ignore column in export.</p>\n",
                    "line": 20
                },
                {
                    "name": "exportValueFn",
                    "type": "TheSeamTableColumnExportValueFn<D>",
                    "optional": true,
                    "description": "<p>Transform function for column value in export.</p>\n",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "TableColumn"
        },
        {
            "name": "ITheSeamMenuPanel",
            "id": "interface-ITheSeamMenuPanel-b0116aa7d2e279b689a60897ba325579",
            "file": "projects/ui-common/src/lib/menu/menu-panel.ts",
            "type": "interface",
            "sourceCode": "import { FocusOrigin } from '@angular/cdk/a11y'\nimport { Direction } from '@angular/cdk/bidi'\nimport { EventEmitter, TemplateRef } from '@angular/core'\n\nimport { MenuFooterComponent } from './menu-footer/menu-footer.component'\n\n/**\n * Interface for a custom menu panel that can be used with `seamMenuToggle`.\n */\nexport interface ITheSeamMenuPanel<T = any> {\n  templateRef: TemplateRef<any>\n  closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>\n  parentMenu?: ITheSeamMenuPanel | undefined\n  direction?: Direction\n  focusFirstItem: (origin?: FocusOrigin) => void\n  resetActiveItem: () => void\n  addItem?: (item: T) => void\n  removeItem?: (item: T) => void\n  setFooter?: (footer?: MenuFooterComponent) => void\n}\n",
            "properties": [
                {
                    "name": "addItem",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "closed",
                    "type": "EventEmitter<void | \"click\" | \"keydown\" | \"tab\">",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "direction",
                    "type": "Direction",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "focusFirstItem",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "parentMenu",
                    "type": "ITheSeamMenuPanel | undefined",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "removeItem",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "resetActiveItem",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "setFooter",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>Interface for a custom menu panel that can be used with <code>seamMenuToggle</code>.</p>\n",
            "methods": []
        },
        {
            "name": "ITheSeamTableColumn",
            "id": "interface-ITheSeamTableColumn-6d4d9e5ee0b80b3b9c1739e50ff0cf08",
            "file": "projects/ui-common/src/lib/table/table-column.ts",
            "type": "interface",
            "sourceCode": "import { TableColumn } from '@marklb/ngx-datatable'\n\nexport type TheSeamTableColumnExportValueFn<D = any> = (row: D) => string\n\nexport type TheSeamTableCellType = 'date' | 'icon'\n\nexport interface ITheSeamTableColumn<D = any, P = any> extends TableColumn {\n\n  /**\n   * If undefined the value will be rendered as a string.\n   */\n  cellType?: TheSeamTableCellType\n\n  /**\n   * Properties to pass to the cell component.\n   */\n  cellProps?: P\n\n  /**\n   * Ignore column in export.\n   */\n  exportIgnore?: boolean\n\n  /**\n   * Column header in export.\n   */\n  exportHeader?: string\n\n  /**\n   * Transform function for column value in export.\n   */\n  exportValueFn?: TheSeamTableColumnExportValueFn<D>\n\n}\n",
            "properties": [
                {
                    "name": "cellProps",
                    "type": "P",
                    "optional": true,
                    "description": "<p>Properties to pass to the cell component.</p>\n",
                    "line": 17
                },
                {
                    "name": "cellType",
                    "type": "TheSeamTableCellType",
                    "optional": true,
                    "description": "<p>If undefined the value will be rendered as a string.</p>\n",
                    "line": 12
                },
                {
                    "name": "exportHeader",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Column header in export.</p>\n",
                    "line": 27
                },
                {
                    "name": "exportIgnore",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Ignore column in export.</p>\n",
                    "line": 22
                },
                {
                    "name": "exportValueFn",
                    "type": "TheSeamTableColumnExportValueFn<D>",
                    "optional": true,
                    "description": "<p>Transform function for column value in export.</p>\n",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "TableColumn"
        },
        {
            "name": "ITiledSelectItem",
            "id": "interface-ITiledSelectItem-1f8258d32ee7d2c908952539be97f0a0",
            "file": "projects/ui-common/src/lib/tiled-select/tiled-select.models.ts",
            "type": "interface",
            "sourceCode": "import { IconProp } from '@fortawesome/fontawesome-svg-core'\n\nexport interface ITiledSelectItem {\n  name?: string\n  value: string\n  label: string\n  icon?: string | IconProp\n  disabled?: boolean\n  hidden?: boolean\n}\n\nexport type TiledSelectLayout = 'grid' | 'list'\n",
            "properties": [
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "hidden",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "icon",
                    "type": "string | IconProp",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IToggleButton",
            "id": "interface-IToggleButton-a12cd33d0904591cae8799848ca73877",
            "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
            "type": "interface",
            "sourceCode": "import { coerceArray } from '@angular/cdk/coercion'\nimport { Component, forwardRef, Inject, Input, OnDestroy, OnInit, Optional } from '@angular/core'\nimport { FormControl } from '@angular/forms'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { Observable } from 'rxjs'\nimport { map, startWith } from 'rxjs/operators'\n\nimport { DatatableMenuBarComponent } from '../../../datatable/datatable-menu-bar/datatable-menu-bar.component'\nimport { isNullOrUndefined } from '../../../utils/index'\nimport { IDataFilter, THESEAM_DATA_FILTER, THESEAM_DATA_FILTER_OPTIONS } from '../../data-filter'\n\nimport { textDataFilter } from '../data-filter-text/data-filter-text.component'\nimport { ITextFilterOptions } from '../data-filter-text/text-filter-options'\n\n\nexport const DATA_FILTER_TOGGLE_BUTTON: any = {\n  provide: THESEAM_DATA_FILTER,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DataFilterToggleButtonsComponent),\n  multi: true,\n}\n\nexport interface IToggleButton {\n  name: string\n  value: string\n  comparator: (value, row, index) => -1 | 0 | 1\n}\n\nexport interface IToggleButtonsFilterOptions extends ITextFilterOptions {\n  selectionToggleable: boolean\n  multiple: boolean\n  buttons: IToggleButton[]\n}\n\nexport const DefaultToggleButtonsFilterOptions: IToggleButtonsFilterOptions = {\n  properties: undefined,\n  omitProperties: undefined,\n  multiple: false,\n  selectionToggleable: false,\n  buttons: [],\n  exact: false,\n  caseSensitive: false\n}\n\nexport function toggleButtonsFilter(data: any[], values: string[], options = DefaultToggleButtonsFilterOptions) {\n  if (!data || !values) {\n    return data\n  }\n\n  const customComparatorBtns: IToggleButton[] = []\n  for (const btn of options.buttons) {\n    if (btn.comparator) {\n      customComparatorBtns.push(btn)\n    }\n  }\n\n  let _data = data\n  for (const val of values) {\n    if (val === '') { continue }\n\n    let cmp\n    for (const btn of customComparatorBtns) {\n      if (btn.value === val) {\n        cmp = btn.comparator\n      }\n    }\n    if (cmp) {\n      const filtered: any[] = []\n      for (let i = 0; i < _data.length; i++) {\n        if (cmp(val, data[i], i) !== -1) {\n          filtered.push(data[i])\n        }\n      }\n      _data = filtered\n    } else {\n      _data = textDataFilter(_data, val, {\n        properties: options.properties,\n        omitProperties: options.omitProperties,\n        exact: options.exact,\n        caseSensitive: options.caseSensitive\n      })\n    }\n  }\n  return _data\n}\n\nlet _uid = 0\n\n@Component({\n  selector: 'seam-data-filter-toggle-buttons',\n  templateUrl: './data-filter-toggle-buttons.component.html',\n  styleUrls: ['./data-filter-toggle-buttons.component.scss'],\n  providers: [ DATA_FILTER_TOGGLE_BUTTON ]\n})\nexport class DataFilterToggleButtonsComponent implements OnInit, OnDestroy, IDataFilter {\n\n  public readonly name = 'toggle-buttons'\n  public readonly uid = `toggle-buttons__${_uid++}`\n\n  _control = new FormControl()\n\n  @Input() properties = this._optDefault('properties')\n  @Input() omitProperties = this._optDefault('omitProperties')\n  @Input() multiple = this._optDefault('multiple')\n  @Input() selectionToggleable = this._optDefault('selectionToggleable')\n  @Input() buttons = this._optDefault('buttons')\n  @Input() exact = this._optDefault('exact')\n  @Input() caseSensitive = this._optDefault('caseSensitive')\n\n  @Input()\n  set value(value: string | string[]) {\n    const _value = !isNullOrUndefined(value) ? coerceArray(value) : undefined\n    if (this._control.value !== _value) {\n      this._control.setValue(_value)\n    }\n  }\n\n  constructor(\n    private _menuBar: DatatableMenuBarComponent,\n    @Optional() @Inject(THESEAM_DATA_FILTER_OPTIONS) private _filterOptions: IToggleButtonsFilterOptions | null\n  ) { }\n\n  ngOnInit() { this._menuBar.addFilter(this) }\n\n  ngOnDestroy() { this._menuBar.removeFilter(this) }\n\n  private _optDefault<K extends keyof IToggleButtonsFilterOptions>(prop: K) {\n    if (this._filterOptions && this._filterOptions.hasOwnProperty(prop)) {\n      return this._filterOptions[prop]\n    }\n    return DefaultToggleButtonsFilterOptions[prop]\n  }\n\n  get options(): IToggleButtonsFilterOptions {\n    return {\n      properties: this.properties,\n      omitProperties: this.omitProperties,\n      multiple: this.multiple,\n      selectionToggleable: this.selectionToggleable,\n      buttons: this.buttons,\n      exact: this.exact,\n      caseSensitive: this.caseSensitive\n    }\n  }\n\n  public filter<T>(data: T[]): Observable<T[]> {\n    return this._control.valueChanges\n      .pipe(\n        untilDestroyed(this),\n        map(v => toggleButtonsFilter(data, coerceArray(v), this.options)),\n        startWith(toggleButtonsFilter(data, coerceArray(this._control.value), this.options)),\n      )\n  }\n\n}\n",
            "properties": [
                {
                    "name": "comparator",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IToggleButtonsFilterOptions",
            "id": "interface-IToggleButtonsFilterOptions-a12cd33d0904591cae8799848ca73877",
            "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
            "type": "interface",
            "sourceCode": "import { coerceArray } from '@angular/cdk/coercion'\nimport { Component, forwardRef, Inject, Input, OnDestroy, OnInit, Optional } from '@angular/core'\nimport { FormControl } from '@angular/forms'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { Observable } from 'rxjs'\nimport { map, startWith } from 'rxjs/operators'\n\nimport { DatatableMenuBarComponent } from '../../../datatable/datatable-menu-bar/datatable-menu-bar.component'\nimport { isNullOrUndefined } from '../../../utils/index'\nimport { IDataFilter, THESEAM_DATA_FILTER, THESEAM_DATA_FILTER_OPTIONS } from '../../data-filter'\n\nimport { textDataFilter } from '../data-filter-text/data-filter-text.component'\nimport { ITextFilterOptions } from '../data-filter-text/text-filter-options'\n\n\nexport const DATA_FILTER_TOGGLE_BUTTON: any = {\n  provide: THESEAM_DATA_FILTER,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DataFilterToggleButtonsComponent),\n  multi: true,\n}\n\nexport interface IToggleButton {\n  name: string\n  value: string\n  comparator: (value, row, index) => -1 | 0 | 1\n}\n\nexport interface IToggleButtonsFilterOptions extends ITextFilterOptions {\n  selectionToggleable: boolean\n  multiple: boolean\n  buttons: IToggleButton[]\n}\n\nexport const DefaultToggleButtonsFilterOptions: IToggleButtonsFilterOptions = {\n  properties: undefined,\n  omitProperties: undefined,\n  multiple: false,\n  selectionToggleable: false,\n  buttons: [],\n  exact: false,\n  caseSensitive: false\n}\n\nexport function toggleButtonsFilter(data: any[], values: string[], options = DefaultToggleButtonsFilterOptions) {\n  if (!data || !values) {\n    return data\n  }\n\n  const customComparatorBtns: IToggleButton[] = []\n  for (const btn of options.buttons) {\n    if (btn.comparator) {\n      customComparatorBtns.push(btn)\n    }\n  }\n\n  let _data = data\n  for (const val of values) {\n    if (val === '') { continue }\n\n    let cmp\n    for (const btn of customComparatorBtns) {\n      if (btn.value === val) {\n        cmp = btn.comparator\n      }\n    }\n    if (cmp) {\n      const filtered: any[] = []\n      for (let i = 0; i < _data.length; i++) {\n        if (cmp(val, data[i], i) !== -1) {\n          filtered.push(data[i])\n        }\n      }\n      _data = filtered\n    } else {\n      _data = textDataFilter(_data, val, {\n        properties: options.properties,\n        omitProperties: options.omitProperties,\n        exact: options.exact,\n        caseSensitive: options.caseSensitive\n      })\n    }\n  }\n  return _data\n}\n\nlet _uid = 0\n\n@Component({\n  selector: 'seam-data-filter-toggle-buttons',\n  templateUrl: './data-filter-toggle-buttons.component.html',\n  styleUrls: ['./data-filter-toggle-buttons.component.scss'],\n  providers: [ DATA_FILTER_TOGGLE_BUTTON ]\n})\nexport class DataFilterToggleButtonsComponent implements OnInit, OnDestroy, IDataFilter {\n\n  public readonly name = 'toggle-buttons'\n  public readonly uid = `toggle-buttons__${_uid++}`\n\n  _control = new FormControl()\n\n  @Input() properties = this._optDefault('properties')\n  @Input() omitProperties = this._optDefault('omitProperties')\n  @Input() multiple = this._optDefault('multiple')\n  @Input() selectionToggleable = this._optDefault('selectionToggleable')\n  @Input() buttons = this._optDefault('buttons')\n  @Input() exact = this._optDefault('exact')\n  @Input() caseSensitive = this._optDefault('caseSensitive')\n\n  @Input()\n  set value(value: string | string[]) {\n    const _value = !isNullOrUndefined(value) ? coerceArray(value) : undefined\n    if (this._control.value !== _value) {\n      this._control.setValue(_value)\n    }\n  }\n\n  constructor(\n    private _menuBar: DatatableMenuBarComponent,\n    @Optional() @Inject(THESEAM_DATA_FILTER_OPTIONS) private _filterOptions: IToggleButtonsFilterOptions | null\n  ) { }\n\n  ngOnInit() { this._menuBar.addFilter(this) }\n\n  ngOnDestroy() { this._menuBar.removeFilter(this) }\n\n  private _optDefault<K extends keyof IToggleButtonsFilterOptions>(prop: K) {\n    if (this._filterOptions && this._filterOptions.hasOwnProperty(prop)) {\n      return this._filterOptions[prop]\n    }\n    return DefaultToggleButtonsFilterOptions[prop]\n  }\n\n  get options(): IToggleButtonsFilterOptions {\n    return {\n      properties: this.properties,\n      omitProperties: this.omitProperties,\n      multiple: this.multiple,\n      selectionToggleable: this.selectionToggleable,\n      buttons: this.buttons,\n      exact: this.exact,\n      caseSensitive: this.caseSensitive\n    }\n  }\n\n  public filter<T>(data: T[]): Observable<T[]> {\n    return this._control.valueChanges\n      .pipe(\n        untilDestroyed(this),\n        map(v => toggleButtonsFilter(data, coerceArray(v), this.options)),\n        startWith(toggleButtonsFilter(data, coerceArray(this._control.value), this.options)),\n      )\n  }\n\n}\n",
            "properties": [
                {
                    "name": "buttons",
                    "type": "IToggleButton[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "multiple",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectionToggleable",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ITextFilterOptions"
        },
        {
            "name": "IToggleEditRef",
            "id": "interface-IToggleEditRef-956ff464ef1669ec7d9d296768d3ee93",
            "file": "projects/ui-common/src/lib/toggle-edit/models/toggle-edit-ref.ts",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core'\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms'\n\nexport interface IToggleEditRef {\n\n  cancelOnBlur: boolean\n  placeholder: string\n  editing: boolean\n  waitOnSubmit: boolean\n\n  changeAccepted: EventEmitter<IToggleEditRef>\n  changeDeclined: EventEmitter<IToggleEditRef>\n  editingChange: EventEmitter<boolean>\n\n  canSubmit(): boolean\n  isSubmitting(): boolean\n  submitComplete(error?: any): void\n  updateBeforeEditValue(): void\n  getValue(): string | null\n  resetValue(): void\n  isFormGroup(): boolean\n  getFormGroup(): FormGroup | null\n  isInFormField(): boolean\n  getFormControl(): FormControl | null\n  hasControl(): boolean\n  getControl(): AbstractControl | null\n  submitEdit(): void\n  cancelEdit(): void\n  hasFocus(): boolean\n  toggleEditing(isEditing?: boolean): void\n  isEditing(): boolean\n  startEditing(): void\n  stopEditing(): void\n}\n",
            "properties": [
                {
                    "name": "cancelOnBlur",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "changeAccepted",
                    "type": "EventEmitter<IToggleEditRef>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "changeDeclined",
                    "type": "EventEmitter<IToggleEditRef>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "editing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "editingChange",
                    "type": "EventEmitter<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "waitOnSubmit",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "cancelEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "canSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "getControl",
                    "args": [],
                    "optional": false,
                    "returnType": "AbstractControl | null",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "getFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "FormControl | null",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "getFormGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup | null",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "getValue",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "hasControl",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "hasFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "isEditing",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "isFormGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "isInFormField",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "isSubmitting",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "resetValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "startEditing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "stopEditing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "submitComplete",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submitEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "toggleEditing",
                    "args": [
                        {
                            "name": "isEditing",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "isEditing",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBeforeEditValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ]
        },
        {
            "name": "IWidgetRegistryRecord",
            "id": "interface-IWidgetRegistryRecord-b4e570ea108e85de582f29b2d004aedc",
            "file": "projects/ui-common/src/lib/widget/widget-registry.models.ts",
            "type": "interface",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\n\nexport interface IWidgetRegistryRecord<T = any, D = any> {\n  /**\n   * Unique identifier of a widget.\n   *\n   * This allows us to reference a widget with a string no matter how we\n   * register it.\n   */\n  widgetId: string\n\n  /**\n   * Component class or the component id for a lazy-loaded component.\n   */\n  componentOrComponentId: ComponentType<T> | string\n\n  /**\n   * NOTE: NOT IMPLEMENTED YET.\n   *\n   * Passed to the widget through the WidgetRef.\n   */\n  data?: D\n}\n",
            "properties": [
                {
                    "name": "componentOrComponentId",
                    "type": "ComponentType<T> | string",
                    "optional": false,
                    "description": "<p>Component class or the component id for a lazy-loaded component.</p>\n",
                    "line": 15
                },
                {
                    "name": "data",
                    "type": "D",
                    "optional": true,
                    "description": "<p>NOTE: NOT IMPLEMENTED YET.</p>\n<p>Passed to the widget through the WidgetRef.</p>\n",
                    "line": 22
                },
                {
                    "name": "widgetId",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Unique identifier of a widget.</p>\n<p>This allows us to reference a widget with a string no matter how we\nregister it.</p>\n",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IWidgetsGridItem",
            "id": "interface-IWidgetsGridItem-a4b63c9d7167bac5c8f84f96c65b6594",
            "file": "projects/ui-common/src/lib/widgets-grid/widgets-grid-item.ts",
            "type": "interface",
            "sourceCode": "import { ComponentPortal, ComponentType } from '@angular/cdk/portal'\n\nexport interface IWidgetsGridItemDef<T = any> {\n  cols?: number\n  rows?: number\n  y?: number\n  x?: number\n\n  componentFactoryResolver?: any\n\n  type: ComponentType<T>\n}\n\nexport interface IWidgetsGridItem<T = any> extends IWidgetsGridItemDef<T> {\n  portal: ComponentPortal<T>\n}\n",
            "properties": [
                {
                    "name": "portal",
                    "type": "ComponentPortal<T>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IWidgetsGridItemDef"
        },
        {
            "name": "IWidgetsGridItemDef",
            "id": "interface-IWidgetsGridItemDef-a4b63c9d7167bac5c8f84f96c65b6594",
            "file": "projects/ui-common/src/lib/widgets-grid/widgets-grid-item.ts",
            "type": "interface",
            "sourceCode": "import { ComponentPortal, ComponentType } from '@angular/cdk/portal'\n\nexport interface IWidgetsGridItemDef<T = any> {\n  cols?: number\n  rows?: number\n  y?: number\n  x?: number\n\n  componentFactoryResolver?: any\n\n  type: ComponentType<T>\n}\n\nexport interface IWidgetsGridItem<T = any> extends IWidgetsGridItemDef<T> {\n  portal: ComponentPortal<T>\n}\n",
            "properties": [
                {
                    "name": "cols",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "componentFactoryResolver",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "rows",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "type": "ComponentType<T>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "x",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "y",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DashboardWidgetsService",
            "id": "injectable-DashboardWidgetsService-9b3d4f9ade5552170b7593872c777e73",
            "file": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets.service.ts",
            "properties": [
                {
                    "name": "_widgets",
                    "defaultValue": "new BehaviorSubject<IDashboardWidgetsItemDef[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "defaultColumn",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Used for operations, such as &#39;addWidget&#39;, if the column is not specified. </p>\n",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "widgetColumns$",
                    "type": "Observable<IDashboardWidgetsColumnRecord[]>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "widgetItems$",
                    "type": "Observable<IDashboardWidgetsItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createWidgetItem",
                    "args": [
                        {
                            "name": "def",
                            "type": "IDashboardWidgetsItemDef"
                        }
                    ],
                    "optional": false,
                    "returnType": "IDashboardWidgetsItem",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "def",
                            "type": "IDashboardWidgetsItemDef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createWidgetPortal",
                    "args": [
                        {
                            "name": "def",
                            "type": "IDashboardWidgetsItemDef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentPortal<any>",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "def",
                            "type": "IDashboardWidgetsItemDef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateOrder",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { ComponentPortal } from '@angular/cdk/portal'\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject, Observable } from 'rxjs'\nimport { map, mapTo, take, tap } from 'rxjs/operators'\n\nimport { notNullOrUndefined } from '../../../utils/index'\n\nimport { IDashboardWidgetsColumnRecord, IDashboardWidgetsItem, IDashboardWidgetsItemDef } from './dashboard-widgets-item'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardWidgetsService {\n\n  get widgets(): IDashboardWidgetsItemDef[] { return this._widgets.value }\n  set widgets(value: IDashboardWidgetsItemDef[]) { this._widgets.next(value) }\n  private _widgets = new BehaviorSubject<IDashboardWidgetsItemDef[]>([])\n\n  public widgetItems$: Observable<IDashboardWidgetsItem[]>\n  public widgetColumns$: Observable<IDashboardWidgetsColumnRecord[]>\n\n  /** Used for operations, such as 'addWidget', if the column is not specified. */\n  public defaultColumn = 0\n\n  constructor() {\n    this.widgetItems$ = this._widgets\n      .pipe(\n        map(defs => defs.map(d => this.createWidgetItem(d)).filter(notNullOrUndefined))\n      )\n\n    this.widgetColumns$ = this.widgetItems$\n      .pipe(\n        // Distribute items into columns\n        map(items => {\n          const columns: IDashboardWidgetsColumnRecord[] = []\n\n          for (const item of items) {\n            const col: IDashboardWidgetsColumnRecord | undefined = columns.find(c => c.column === item.col)\n            if (!col) {\n              columns.push({ column: item.col, items: [ item ] })\n            } else {\n              col.items.push(item)\n            }\n          }\n\n          return columns\n        }),\n        // Sort columns\n        map(columns => columns.sort((a, b) => a.column - b.column)),\n        // Sort columns items\n        tap(columns => columns.forEach(col => col.items.sort((a, b) => a.order - b.order)))\n      )\n  }\n\n  public createWidgetItem(def: IDashboardWidgetsItemDef): IDashboardWidgetsItem {\n    const item: IDashboardWidgetsItem = {\n      ...def,\n      col: def.col || this.defaultColumn,\n      order: def.order || 0,\n      portal: this.createWidgetPortal(def),\n      __itemDef: def\n    }\n\n    return item\n  }\n\n  public createWidgetPortal(def: IDashboardWidgetsItemDef): ComponentPortal<any> {\n    let portal: ComponentPortal<any>\n    if (def.componentFactoryResolver) {\n      portal = new ComponentPortal(def.type, undefined, undefined, def.componentFactoryResolver)\n    } else {\n      portal = new ComponentPortal(def.type)\n    }\n    return portal\n  }\n\n  public updateOrder(): Observable<void> {\n    return this.widgetColumns$\n      .pipe(\n        take(1),\n        tap(columns => columns.forEach(col => {\n          let i = 0\n          col.items.forEach(itm => itm.order = i++)\n        })),\n        mapTo(undefined)\n      )\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "accessors": {
                "widgets": {
                    "name": "widgets",
                    "setSignature": {
                        "name": "widgets",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "widgets",
                        "type": "[]",
                        "returnType": "IDashboardWidgetsItemDef[]",
                        "line": 15
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-a97f38f500c1ee4b9f6bc4b875d398fc",
            "file": "projects/ui-common/src/lib/services/local-storage.service.ts",
            "properties": [
                {
                    "name": "_localStorage",
                    "defaultValue": "localStorage",
                    "type": "",
                    "optional": false,
                    "description": "<p>This is only here for testing/debugging. </p>\n",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "subjects",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "defaultValue",
                            "type": "string | null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 69,
                    "description": "<p>Get a localStorage item. </p>\n",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultValue",
                            "type": "string | null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "description": "<p>Remove a localStorage item. </p>\n",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "defaultValue",
                            "type": "string | null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string | null>",
                    "typeParameters": [],
                    "line": 54,
                    "description": "<p>Observe a localStorage item.</p>\n<p>NOTE: Only emits changes if the item is changed with the set method of this\nclass instance.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultValue",
                            "type": "string | null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "description": "<p>Set a localStorage item. </p>\n",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { BehaviorSubject, fromEvent, Observable } from 'rxjs'\nimport { filter, map, tap } from 'rxjs/operators'\n\nimport * as localStorageMemory from 'localstorage-memory'\n\nimport { notNullOrUndefined } from '../utils/index'\n\n// NOTE: Temporary localStorage polyfill just to get the app running without localStorage for now.\nconst localStorage: Storage = 'localStorage' in window && window.localStorage != null ? window.localStorage : localStorageMemory\n\nexport interface ILocalStorageService {\n  select(key: string, defaultValue: string | null): Observable<string | null>\n  get(key: string, defaultValue: string | null): string | null\n  set(key: string, value: string): void\n  remove(key: string): void\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageService implements ILocalStorageService {\n  protected subjects: { [key: string]: BehaviorSubject<string | null> } = {}\n\n  /** This is only here for testing/debugging. */\n  private _localStorage = localStorage\n\n  constructor() {\n    fromEvent<StorageEvent>(window, 'storage')\n      .pipe(\n        map(e => e.key),\n        filter(notNullOrUndefined),\n        tap(key => {\n          const subjectValue = this.get(key)\n          const storedValue = this._localStorage.getItem(key)\n          if (subjectValue !== storedValue) {\n            if (storedValue) {\n              this.set(key, storedValue)\n            } else {\n              this.remove(key)\n            }\n          }\n        }),\n      )\n      .subscribe()\n  }\n\n  /**\n   * Observe a localStorage item.\n   *\n   * NOTE: Only emits changes if the item is changed with the set method of this\n   * class instance.\n   */\n  select(key: string, defaultValue: string | null = null): Observable<string | null> {\n    if (this.subjects.hasOwnProperty(key)) {\n      return this.subjects[key]\n    }\n\n    if (!this._localStorage.getItem(key) && defaultValue) {\n      this._localStorage.setItem(key, defaultValue)\n    }\n\n    const value = this._localStorage.getItem(key) || defaultValue\n\n    return (this.subjects[key] = new BehaviorSubject(value))\n  }\n\n  /** Get a localStorage item. */\n  get(key: string, defaultValue: string | null = null): string | null {\n    if (this.subjects.hasOwnProperty(key)) {\n      return this.subjects[key].value\n    }\n\n    if (!this._localStorage.getItem(key) && defaultValue) {\n      this._localStorage.setItem(key, defaultValue)\n    }\n\n    const value = this._localStorage.getItem(key) || defaultValue\n\n    return (this.subjects[key] = new BehaviorSubject(value)).value\n  }\n\n  /** Set a localStorage item. */\n  set(key: string, value: string): void {\n    this._localStorage.setItem(key, value)\n\n    if (this.subjects.hasOwnProperty(key)) {\n      this.subjects[key].next(value)\n    }\n  }\n\n  /** Remove a localStorage item. */\n  remove(key: string): void {\n    this._localStorage.removeItem(key)\n\n    if (this.subjects.hasOwnProperty(key)) {\n      this.subjects[key].next(null)\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 26
            },
            "type": "injectable"
        },
        {
            "name": "Modal",
            "id": "injectable-Modal-d7f6fd2d06a6534c3d3cebb799a11382",
            "file": "projects/ui-common/src/lib/modal/modal.service.ts",
            "properties": [
                {
                    "name": "_afterAllClosedBase",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "_afterOpened",
                    "defaultValue": "new Subject()",
                    "type": "Subject<ModalRef<any>>",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "_openDialogs",
                    "defaultValue": "[]",
                    "type": "ModalRef<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "_scrollStrategy",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "afterAllClosed",
                    "defaultValue": "defer(() => this.openDialogs.length ?\n      this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)))",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methods": [
                {
                    "name": "_applyConfigDefaults",
                    "args": [
                        {
                            "name": "config",
                            "type": "ModalConfig",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalConfig",
                    "typeParameters": [],
                    "line": 344,
                    "description": "<p>Expands the provided configuration object to include the default values for properties which\nare undefined.</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ModalConfig",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_attachDialogContainer",
                    "args": [
                        {
                            "name": "overlay",
                            "type": "OverlayRef"
                        },
                        {
                            "name": "config",
                            "type": "ModalConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalContainerComponent",
                    "typeParameters": [],
                    "line": 234,
                    "description": "<p>Attaches an MatDialogContainer to a dialog&#39;s already-created overlay.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7422,
                                "end": 7429,
                                "flags": 0,
                                "escapedText": "overlay"
                            },
                            "type": "OverlayRef",
                            "tagName": {
                                "pos": 7416,
                                "end": 7421,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Reference to the dialog&#39;s underlying overlay.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7488,
                                "end": 7494,
                                "flags": 0,
                                "escapedText": "config"
                            },
                            "type": "ModalConfig",
                            "tagName": {
                                "pos": 7482,
                                "end": 7487,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The dialog configuration.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 7527,
                                "end": 7534,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A promise resolving to a ComponentRef for the attached container.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_attachDialogContentForComponent",
                    "args": [
                        {
                            "name": "componentOrTemplateRef",
                            "type": "ComponentType<T>"
                        },
                        {
                            "name": "dialogContainer",
                            "type": "ModalContainerComponent"
                        },
                        {
                            "name": "overlayRef",
                            "type": "OverlayRef"
                        },
                        {
                            "name": "config",
                            "type": "ModalConfig"
                        },
                        {
                            "name": "componentFactoryResolver",
                            "type": "ComponentFactoryResolver | null | undefined",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalRef<any>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 257,
                    "description": "<p>Attaches the user-provided component to the already-created MatDialogContainer.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8389,
                                "end": 8411,
                                "flags": 0,
                                "escapedText": "componentOrTemplateRef"
                            },
                            "type": "ComponentType<T>",
                            "tagName": {
                                "pos": 8383,
                                "end": 8388,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The type of component being loaded into the dialog,\nor a TemplateRef to instantiate as the content.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8533,
                                "end": 8548,
                                "flags": 0,
                                "escapedText": "dialogContainer"
                            },
                            "type": "ModalContainerComponent",
                            "tagName": {
                                "pos": 8527,
                                "end": 8532,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Reference to the wrapping MatDialogContainer.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8607,
                                "end": 8617,
                                "flags": 0,
                                "escapedText": "overlayRef"
                            },
                            "type": "OverlayRef",
                            "tagName": {
                                "pos": 8601,
                                "end": 8606,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Reference to the overlay in which the dialog resides.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8684,
                                "end": 8690,
                                "flags": 0,
                                "escapedText": "config"
                            },
                            "type": "ModalConfig",
                            "tagName": {
                                "pos": 8678,
                                "end": 8683,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The dialog configuration.</p>\n"
                        },
                        {
                            "name": "componentFactoryResolver",
                            "type": "ComponentFactoryResolver | null | undefined",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 8723,
                                "end": 8730,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A promise resolving to the MatDialogRef that should be returned to the user.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_attachDialogContentForTemplate",
                    "args": [
                        {
                            "name": "componentOrTemplateRef",
                            "type": "TemplateRef<T>"
                        },
                        {
                            "name": "dialogContainer",
                            "type": "ModalContainerComponent"
                        },
                        {
                            "name": "overlayRef",
                            "type": "OverlayRef"
                        },
                        {
                            "name": "config",
                            "type": "ModalConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalRef<any>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 289,
                    "description": "<p>Attaches the user-provided component to the already-created MatDialogContainer.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9920,
                                "end": 9942,
                                "flags": 0,
                                "escapedText": "componentOrTemplateRef"
                            },
                            "type": "TemplateRef<T>",
                            "tagName": {
                                "pos": 9914,
                                "end": 9919,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The type of component being loaded into the dialog,\nor a TemplateRef to instantiate as the content.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 10064,
                                "end": 10079,
                                "flags": 0,
                                "escapedText": "dialogContainer"
                            },
                            "type": "ModalContainerComponent",
                            "tagName": {
                                "pos": 10058,
                                "end": 10063,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Reference to the wrapping MatDialogContainer.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 10138,
                                "end": 10148,
                                "flags": 0,
                                "escapedText": "overlayRef"
                            },
                            "type": "OverlayRef",
                            "tagName": {
                                "pos": 10132,
                                "end": 10137,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Reference to the overlay in which the dialog resides.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 10215,
                                "end": 10221,
                                "flags": 0,
                                "escapedText": "config"
                            },
                            "type": "ModalConfig",
                            "tagName": {
                                "pos": 10209,
                                "end": 10214,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The dialog configuration.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 10254,
                                "end": 10261,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A promise resolving to the MatDialogRef that should be returned to the user.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_createInjector",
                    "args": [
                        {
                            "name": "config",
                            "type": "ModalConfig"
                        },
                        {
                            "name": "dialogRef",
                            "type": "ModalRef<T>"
                        },
                        {
                            "name": "dialogContainer",
                            "type": "ModalContainerComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "PortalInjector",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 317,
                    "description": "<p>Creates a custom injector to be used inside the dialog. This allows a component loaded inside\nof a dialog to close itself and, optionally, to return a value.</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11263,
                                "end": 11269,
                                "flags": 0,
                                "escapedText": "config"
                            },
                            "type": "ModalConfig",
                            "tagName": {
                                "pos": 11257,
                                "end": 11262,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Config object that is used to construct the dialog.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 11334,
                                "end": 11343,
                                "flags": 0,
                                "escapedText": "dialogRef"
                            },
                            "type": "ModalRef<T>",
                            "tagName": {
                                "pos": 11328,
                                "end": 11333,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Reference to the dialog.</p>\n"
                        },
                        {
                            "name": "dialogContainer",
                            "type": "ModalContainerComponent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 11454,
                                "end": 11461,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The custom injector that can be used inside the dialog.</p>\n"
                        }
                    ]
                },
                {
                    "name": "_createOverlay",
                    "args": [
                        {
                            "name": "config",
                            "type": "ModalConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayRef",
                    "typeParameters": [],
                    "line": 203,
                    "description": "<p>Creates an overlay config from a dialog config.</p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6441,
                                "end": 6447,
                                "flags": 0,
                                "escapedText": "config"
                            },
                            "type": "ModalConfig",
                            "tagName": {
                                "pos": 6435,
                                "end": 6440,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The dialog configuration.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 6480,
                                "end": 6487,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The overlay configuration.</p>\n"
                        }
                    ]
                },
                {
                    "name": "closeAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "description": "<p>Closes all open dialogs. </p>\n"
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalRef | undefined",
                    "typeParameters": [],
                    "line": 91,
                    "description": "<p>Gets an open dialog by id. </p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168
                },
                {
                    "name": "openFromComponent",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>"
                        },
                        {
                            "name": "config",
                            "type": "ModalConfig<D>",
                            "optional": true
                        },
                        {
                            "name": "componentFactoryResolver",
                            "type": "ComponentFactoryResolver | null | undefined",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalRef<T, D>",
                    "typeParameters": [
                        "T",
                        "D"
                    ],
                    "line": 101,
                    "description": "<p>Opens a dialog from a component. </p>\n",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "ModalConfig<D>",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "componentFactoryResolver",
                            "type": "ComponentFactoryResolver | null | undefined",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openFromLazyComponent",
                    "args": [
                        {
                            "name": "componentId",
                            "type": "string"
                        },
                        {
                            "name": "config",
                            "type": "ModalConfig<D>",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ModalRef<T, D>>",
                    "typeParameters": [
                        "T",
                        "D"
                    ],
                    "line": 144,
                    "description": "<p>Opens a dialog from a lazy-loaded component. </p>\n",
                    "jsdoctags": [
                        {
                            "name": "componentId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "ModalConfig<D>",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openFromTemplate",
                    "args": [
                        {
                            "name": "template",
                            "type": "TemplateRef<T>"
                        },
                        {
                            "name": "config",
                            "type": "ModalConfig",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalRef<any>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 125,
                    "description": "<p>Opens a dialog from a template. </p>\n",
                    "jsdoctags": [
                        {
                            "name": "template",
                            "type": "TemplateRef<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "ModalConfig",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerDialogRef",
                    "args": [
                        {
                            "name": "dialogRef",
                            "type": "ModalRef<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "description": "<p>Forwards emitting events for when dialogs are opened and all dialogs are closed.</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "dialogRef",
                            "type": "ModalRef<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "<p>Service to open modal dialogs.</p>\n",
            "sourceCode": "import { Directionality } from '@angular/cdk/bidi'\nimport {\n  ComponentType,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay'\nimport { ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal'\nimport { Location } from '@angular/common'\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  Type\n} from '@angular/core'\nimport { defer, Observable, of, of as observableOf, Subject } from 'rxjs'\nimport { startWith, switchMap } from 'rxjs/operators'\n\nimport { TheSeamDynamicComponentLoader } from '../dynamic-component-loader/index'\nimport { OverlayScrollbarsService } from '../scrollbar/index'\n\nimport { ModalConfig } from './modal-config'\nimport { ModalContainerComponent } from './modal-container/modal-container.component'\nimport {\n  MODAL_CONFIG,\n  MODAL_CONTAINER,\n  MODAL_DATA,\n  MODAL_REF,\n  MODAL_SCROLL_STRATEGY,\n} from './modal-injectors'\nimport { ModalRef } from './modal-ref'\n\n\n/**\n * Service to open modal dialogs.\n */\n@Injectable()\nexport class Modal implements OnDestroy {\n  private _scrollStrategy: () => ScrollStrategy\n\n  /** Stream that emits when all dialogs are closed. */\n  get _afterAllClosed(): Observable<void> {\n    return this._parentDialog ? this._parentDialog.afterAllClosed : this._afterAllClosedBase\n  }\n  _afterAllClosedBase = new Subject<void>()\n\n  afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed : this._afterAllClosed.pipe(startWith(undefined)))\n\n  /** Stream that emits when a dialog is opened. */\n  get afterOpened(): Subject<ModalRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpened\n  }\n  _afterOpened: Subject<ModalRef<any>> = new Subject()\n\n  /** Stream that emits when a dialog is opened. */\n  get openDialogs(): ModalRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogs\n  }\n  _openDialogs: ModalRef<any>[] = []\n\n  constructor(\n    private overlay: Overlay,\n    private injector: Injector,\n    @Inject(MODAL_REF) private dialogRefConstructor: Type<ModalRef<any>>,\n    @Inject(MODAL_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() @SkipSelf() private _parentDialog: Modal,\n    @Optional() location: Location,\n    private _scrollbars: OverlayScrollbarsService,\n    private _dynamicComponentLoaderModule: TheSeamDynamicComponentLoader\n  ) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && location) {\n      location.subscribe(() => this.closeAll())\n    }\n\n    this._scrollStrategy = scrollStrategy\n  }\n\n  /** Gets an open dialog by id. */\n  getById(id: string): ModalRef<any> | undefined {\n    return this._openDialogs.find(ref  => ref.id === id)\n  }\n\n  /** Closes all open dialogs. */\n  closeAll(): void {\n    this.openDialogs.forEach(ref => ref.close())\n  }\n\n  /** Opens a dialog from a component. */\n  openFromComponent<T, D = any>(\n    component: ComponentType<T>,\n    config?: ModalConfig<D>,\n    // NOTE: Should only be needed with the current implementation of `TheSeamDynamicComponentLoader`.\n    componentFactoryResolver?: ComponentFactoryResolver | null | undefined\n  ): ModalRef<T, D> {\n    config = this._applyConfigDefaults(config)\n\n    if (config.id && this.getById(config.id)) {\n      throw Error(`Modal with id \"${config.id}\" exists already. The modal id must be unique.`)\n    }\n\n    const overlayRef = this._createOverlay(config)\n    const dialogContainer = this._attachDialogContainer(overlayRef, config)\n    const dialogRef = this._attachDialogContentForComponent(component, dialogContainer,\n      overlayRef, config, componentFactoryResolver)\n\n    this._scrollbars.initializeInstance(overlayRef.overlayElement)\n\n    this.registerDialogRef(dialogRef)\n    return dialogRef\n  }\n\n  /** Opens a dialog from a template. */\n  openFromTemplate<T>(template: TemplateRef<T>, config?: ModalConfig): ModalRef<any> {\n    config = this._applyConfigDefaults(config)\n\n    if (config.id && this.getById(config.id)) {\n      throw Error(`Modal with id \"${config.id}\" exists already. The modal id must be unique.`)\n    }\n\n    const overlayRef = this._createOverlay(config)\n    const dialogContainer = this._attachDialogContainer(overlayRef, config)\n    const dialogRef = this._attachDialogContentForTemplate(template, dialogContainer,\n      overlayRef, config)\n\n    this._scrollbars.destroyInstance(overlayRef.overlayElement)\n\n    this.registerDialogRef(dialogRef)\n    return dialogRef\n  }\n\n  /** Opens a dialog from a lazy-loaded component. */\n  openFromLazyComponent<T, D = any>(\n    componentId: string,\n    config?: ModalConfig<D>\n  ): Observable<ModalRef<T, D>> {\n    config = this._applyConfigDefaults(config)\n\n    if (config.id && this.getById(config.id)) {\n      throw Error(`Modal with id \"${config.id}\" exists already. The modal id must be unique.`)\n    }\n\n    return this._dynamicComponentLoaderModule\n      .getComponentFactory<{}>(componentId)\n      .pipe(\n        switchMap(componentFactory => {\n          const modalRef = this.openFromComponent(\n            componentFactory.componentType,\n            config,\n            (<any /* ComponentFactoryBoundToModule */>componentFactory).ngModule.componentFactoryResolver\n          )\n          return of(modalRef)\n        })\n      )\n  }\n\n  ngOnDestroy() {\n    // Only close all the dialogs at this level.\n    this._openDialogs.forEach(ref => ref.close())\n  }\n\n  /**\n   * Forwards emitting events for when dialogs are opened and all dialogs are closed.\n   */\n  private registerDialogRef(dialogRef: ModalRef<any>): void {\n    this.openDialogs.push(dialogRef)\n\n    const dialogOpenSub = dialogRef.afterOpened().subscribe(() => {\n      this.afterOpened.next(dialogRef)\n      dialogOpenSub.unsubscribe()\n    })\n\n    const dialogCloseSub = dialogRef.afterClosed().subscribe(() => {\n      const dialogIndex = this._openDialogs.indexOf(dialogRef)\n\n      if (dialogIndex > -1) {\n        this._openDialogs.splice(dialogIndex, 1)\n      }\n\n      if (!this._openDialogs.length) {\n        this._afterAllClosedBase.next()\n        dialogCloseSub.unsubscribe()\n      }\n    })\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param config The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  protected _createOverlay(config: ModalConfig): OverlayRef {\n    let panelClass = (config.panelClass || [])\n    if (typeof panelClass === 'string') {\n      panelClass = [ panelClass ]\n    }\n    panelClass = [ ...panelClass, 'modal',  'd-block', 'overflow-auto' ]\n\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this.overlay.position().global(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: panelClass,\n      hasBackdrop: config.hasBackdrop,\n      direction: config.direction,\n      minWidth: config.minWidth,\n      minHeight: config.minHeight,\n      maxWidth: config.maxWidth,\n      maxHeight: config.maxHeight\n    })\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass\n    }\n    return this.overlay.create(overlayConfig)\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  protected _attachDialogContainer(overlay: OverlayRef, config: ModalConfig): ModalContainerComponent {\n    const container = config.containerComponent || this.injector.get(MODAL_CONTAINER)\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector\n    const injector = new PortalInjector(userInjector || this.injector, new WeakMap([\n      [ModalConfig, config]\n    ]))\n    const containerPortal = new ComponentPortal(container, config.viewContainerRef, injector)\n    const containerRef = <ComponentRef<ModalContainerComponent>>overlay.attach(containerPortal)\n    containerRef.instance._config = config\n\n    return containerRef.instance\n  }\n\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  protected _attachDialogContentForComponent<T>(\n      componentOrTemplateRef: ComponentType<T>,\n      dialogContainer: ModalContainerComponent,\n      overlayRef: OverlayRef,\n      config: ModalConfig,\n      componentFactoryResolver?: ComponentFactoryResolver | null | undefined): ModalRef<any> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new this.dialogRefConstructor(overlayRef, dialogContainer, config.id)\n    const injector = this._createInjector<T>(config, dialogRef, dialogContainer)\n    const contentRef = dialogContainer.attachComponentPortal(\n        new ComponentPortal(componentOrTemplateRef, undefined, injector, componentFactoryResolver))\n\n    dialogRef.componentInstance = contentRef.instance\n    dialogRef.disableClose = config.disableClose\n\n    dialogRef.updateSize({width: config.width, height: config.height})\n             .updatePosition(config.position)\n\n    return dialogRef\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  protected _attachDialogContentForTemplate<T>(\n      componentOrTemplateRef: TemplateRef<T>,\n      dialogContainer: ModalContainerComponent,\n      overlayRef: OverlayRef,\n      config: ModalConfig): ModalRef<any> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new this.dialogRefConstructor(overlayRef, dialogContainer, config.id)\n\n    dialogContainer.attachTemplatePortal(\n      new TemplatePortal<T>(componentOrTemplateRef, <any>null,\n        <any>{$implicit: config.data, dialogRef}))\n    dialogRef.updateSize({width: config.width, height: config.height})\n             .updatePosition(config.position)\n\n    return dialogRef\n  }\n\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: ModalConfig,\n      dialogRef: ModalRef<T>,\n      dialogContainer: ModalContainerComponent): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector\n    const injectionTokens = new WeakMap<any, any>([\n      [this.injector.get(MODAL_REF), dialogRef],\n      [this.injector.get(MODAL_CONTAINER), dialogContainer],\n      [MODAL_DATA, config.data]\n    ])\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      })\n    }\n\n    return new PortalInjector(userInjector || this.injector, injectionTokens)\n  }\n\n  /**\n   * Expands the provided configuration object to include the default values for properties which\n   * are undefined.\n   */\n  private _applyConfigDefaults(config?: ModalConfig): ModalConfig {\n    const dialogConfig = (<unknown>this.injector.get(MODAL_CONFIG)) as typeof ModalConfig\n    return {...new dialogConfig(), ...config}\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "injector",
                        "type": "Injector"
                    },
                    {
                        "name": "dialogRefConstructor",
                        "type": "Type<ModalRef<any>>"
                    },
                    {
                        "name": "scrollStrategy",
                        "type": "any"
                    },
                    {
                        "name": "_parentDialog",
                        "type": "Modal"
                    },
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "_scrollbars",
                        "type": "OverlayScrollbarsService"
                    },
                    {
                        "name": "_dynamicComponentLoaderModule",
                        "type": "TheSeamDynamicComponentLoader"
                    }
                ],
                "line": 67,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRefConstructor",
                        "type": "Type<ModalRef<any>>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scrollStrategy",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentDialog",
                        "type": "Modal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_scrollbars",
                        "type": "OverlayScrollbarsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dynamicComponentLoaderModule",
                        "type": "TheSeamDynamicComponentLoader",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "_afterAllClosed": {
                    "name": "_afterAllClosed",
                    "getSignature": {
                        "name": "_afterAllClosed",
                        "type": "",
                        "returnType": "Observable<void>",
                        "line": 49,
                        "description": "<p>Stream that emits when all dialogs are closed. </p>\n"
                    }
                },
                "afterOpened": {
                    "name": "afterOpened",
                    "getSignature": {
                        "name": "afterOpened",
                        "type": "",
                        "returnType": "Subject<ModalRef<any>>",
                        "line": 58,
                        "description": "<p>Stream that emits when a dialog is opened. </p>\n"
                    }
                },
                "openDialogs": {
                    "name": "openDialogs",
                    "getSignature": {
                        "name": "openDialogs",
                        "type": "[]",
                        "returnType": "ModalRef[]",
                        "line": 64,
                        "description": "<p>Stream that emits when a dialog is opened. </p>\n"
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "OverlayScrollbarsService",
            "id": "injectable-OverlayScrollbarsService-2270388a2d9219acb1d51573d7efad9d",
            "file": "projects/ui-common/src/lib/scrollbar/overlay-scrollbars.service.ts",
            "properties": [
                {
                    "name": "_inputEventSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_applyConfigDefaults",
                    "args": [
                        {
                            "name": "config",
                            "type": "IOverlayScrollbarsConfig",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "IOverlayScrollbarsConfig",
                    "typeParameters": [],
                    "line": 83,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IOverlayScrollbarsConfig",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isTextarea",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "description": "<p>Determines if the component host is a textarea. </p>\n",
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroyInstance",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInstance",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "OverlayScrollbars",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOptions",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "IOverlayScrollbarsConfig",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeInstance",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement"
                        },
                        {
                            "name": "options",
                            "type": "IOverlayScrollbarsConfig",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IOverlayScrollbarsConfig",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isInstanceEnabled",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOptions",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement"
                        },
                        {
                            "name": "options",
                            "type": "IOverlayScrollbarsConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IOverlayScrollbarsConfig",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Platform } from '@angular/cdk/platform'\nimport { forwardRef, inject, Injectable, InjectionToken, Injector, INJECTOR, NgZone } from '@angular/core'\nimport { fromEvent, Subscription } from 'rxjs'\n\nimport OverlayScrollbars from 'overlayscrollbars'\n\nimport { LIB_OVERLAY_SCROLLBARS_CONFIG } from './overlay-scrollbars-config'\nimport { IOverlayScrollbarsConfig } from './overlay-scrollbars-config-model'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OverlayScrollbarsService {\n\n  private _inputEventSubscription = Subscription.EMPTY\n\n  constructor(\n    private _ngZone: NgZone,\n    private injector: Injector,\n    private _platform: Platform\n  ) { }\n\n  public initializeInstance(element: HTMLElement, options?: IOverlayScrollbarsConfig): void {\n    if (!this.isInstanceEnabled(element) &&\n      // The 'overlayscrollbars' library is causing an issue on iOS. Since iOS\n      // already has native overlay scrollbars it shouldn't really effect the\n      // app layout.\n      !(this._isTextarea(element) && this._platform.IOS)\n    ) {\n      this._ngZone.runOutsideAngular(() => {\n        OverlayScrollbars(element, this._applyConfigDefaults(options))\n\n        if (this._isTextarea(element)) {\n          // TODO: Make this more accurate. Right now this is just relying on\n          // the fact that timing out for 100ms is usually enough time to wait\n          // for update to correctly calculate.\n          // NOTE: This may be fixed in a newer version to not need this hack.\n          fromEvent(element, 'change').subscribe(_ => {\n            this._ngZone.run(() => {\n              setTimeout(() => {\n                if (this.isInstanceEnabled(element)) {\n                  this.getInstance(element).update()\n                }\n              }, 100)\n            })\n          })\n        }\n      })\n    }\n  }\n\n  public destroyInstance(element: HTMLElement): void {\n    if (this.isInstanceEnabled(element)) {\n      this._ngZone.runOutsideAngular(() => {\n        this.getInstance(element).destroy()\n        if (this._inputEventSubscription && !this._inputEventSubscription.closed) {\n          this._inputEventSubscription.unsubscribe()\n        }\n      })\n    }\n  }\n\n  public getInstance(element: HTMLElement): OverlayScrollbars {\n    return OverlayScrollbars(element) as OverlayScrollbars\n  }\n\n  public isInstanceEnabled(element: HTMLElement): boolean {\n    return !!this.getInstance(element)\n  }\n\n  public setOptions(element: HTMLElement, options: IOverlayScrollbarsConfig): boolean {\n    if (!this.isInstanceEnabled(element)) { return false }\n\n    this.getInstance(element).options(this._applyConfigDefaults(options))\n\n    return true\n  }\n\n  public getOptions(element: HTMLElement): IOverlayScrollbarsConfig {\n    return this.getInstance(element).options()\n  }\n\n  private _applyConfigDefaults(config?: IOverlayScrollbarsConfig): IOverlayScrollbarsConfig {\n    const _config: IOverlayScrollbarsConfig = this.injector.get(LIB_OVERLAY_SCROLLBARS_CONFIG)\n    return {..._config, ...config}\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea(element: HTMLElement) {\n    return element.nodeName.toLowerCase() === 'textarea'\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_ngZone",
                        "type": "NgZone"
                    },
                    {
                        "name": "injector",
                        "type": "Injector"
                    },
                    {
                        "name": "_platform",
                        "type": "Platform"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_platform",
                        "type": "Platform",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RouterHelpersService",
            "id": "injectable-RouterHelpersService-f89791d87b0f40bb70cd5f522247a461",
            "file": "projects/ui-common/src/lib/services/router-helpers.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isActive",
                    "args": [
                        {
                            "name": "url",
                            "type": "string | UrlTree"
                        },
                        {
                            "name": "exact",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string | UrlTree",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "exact",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { NavigationEnd, Router, UrlTree } from '@angular/router'\nimport { Observable } from 'rxjs'\nimport { filter, map, startWith } from 'rxjs/operators'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RouterHelpersService {\n\n  constructor(\n    private _router: Router\n  ) { }\n\n  public isActive(url: string | UrlTree, exact: boolean): Observable<boolean> {\n    return this._router.events.pipe(\n      filter(event => event instanceof NavigationEnd),\n      map(event => this._router.isActive(url, exact)),\n      startWith(this._router.isActive(url, exact))\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SeamConfirmDialogService",
            "id": "injectable-SeamConfirmDialogService-17dfcfb88fbad152fa33401535cdd056",
            "file": "projects/ui-common/src/lib/confirm-dialog/confirm-dialog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "alert",
                            "type": "string | literal type",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ModalRef<ConfirmDialogComponent, \"confirm\" | undefined>",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "alert",
                            "type": "string | literal type",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\n\nimport { Modal, ModalRef } from '../modal/index'\nimport { ThemeTypes } from '../models/index'\n\nimport { ConfirmDialogComponent } from './confirm-dialog.component'\n\n@Injectable()\nexport class SeamConfirmDialogService {\n\n  constructor(\n    private modal: Modal\n  ) { }\n\n  public open(\n    message?: string,\n    alert?: string | { message: string, type: ThemeTypes }\n  ): ModalRef<ConfirmDialogComponent, 'confirm' | undefined> {\n    const modalRef = this.modal.openFromComponent(ConfirmDialogComponent)\n\n    if (!modalRef.componentInstance) {\n      throw new Error('ConfirmDialogComponent not created.')\n    }\n\n    const comp: ConfirmDialogComponent = modalRef.componentInstance\n\n    if (message) {\n      comp.message = message\n    }\n\n    if (alert) {\n      if (typeof alert === 'string') {\n        comp.alertMessage = alert\n      } else if (alert.message && alert.type) {\n        comp.alertMessage = alert.message\n        comp.alertType = alert.type\n      } else {\n        throw new Error('Invalid alert argument.')\n      }\n    }\n\n    return modalRef\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "Modal"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "Modal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StoryInitialRouteService",
            "id": "injectable-StoryInitialRouteService-322bfd1ca70aebb68e80295d01e88177",
            "file": "projects/ui-common/src/lib/story-helpers/initial-route-service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "setInitialRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, InjectionToken, Injector } from '@angular/core'\nimport { NavigationEnd, Router } from '@angular/router'\nimport { filter, take } from 'rxjs/operators'\n\nexport const STORY_INITIAL_ROUTE_URL = new InjectionToken<any>('STORY_INITIAL_ROUTE_URL')\n\nexport function storyInitialRouteFactory(_storyInitialRouteService: StoryInitialRouteService) {\n  return () => _storyInitialRouteService.setInitialRoute()\n}\n\n@Injectable()\nexport class StoryInitialRouteService {\n\n  constructor(\n    private _injector: Injector\n  ) { }\n\n  public setInitialRoute() {\n    const _router = this._injector.get(Router)\n    const url = this._injector.get(STORY_INITIAL_ROUTE_URL)\n    if (_router.navigated) {\n      _router.navigateByUrl(url)\n    } else {\n      _router.events.pipe(\n          filter(e => e instanceof NavigationEnd),\n          take(1)\n        )\n        .subscribe(() => { _router.navigateByUrl(url) })\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_injector",
                        "type": "Injector"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StoryInitialRouteService",
            "id": "injectable-StoryInitialRouteService-a4a54ad38fa73310ae8cb6666ec533a8-1",
            "file": "projects/ui-common/src/lib/story-helpers/initial-route.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "setInitialRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, InjectionToken, Injector } from '@angular/core'\nimport { NavigationEnd, Router } from '@angular/router'\nimport { filter, take } from 'rxjs/operators'\n\nexport const STORY_INITIAL_ROUTE_URL = new InjectionToken<any>('STORY_INITIAL_ROUTE_URL')\n\n@Injectable()\nexport class StoryInitialRouteService {\n\n  constructor(\n    private _injector: Injector\n  ) { }\n\n  public setInitialRoute() {\n    const _router = this._injector.get(Router)\n    const url = this._injector.get(STORY_INITIAL_ROUTE_URL)\n    if (_router.navigated) {\n      _router.navigateByUrl(url)\n    } else {\n      _router.events.pipe(\n          filter(e => e instanceof NavigationEnd),\n          take(1)\n        )\n        .subscribe(() => { _router.navigateByUrl(url) })\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_injector",
                        "type": "Injector"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "StoryInitialRouteService-1"
        },
        {
            "name": "StoryUserIdToNameResolver",
            "id": "injectable-StoryUserIdToNameResolver-185b61ffb7186cb7586e3dae747a99a8",
            "file": "projects/ui-common/src/lib/breadcrumbs/stories/story-userid-to-name.resolver.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot"
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | string",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router'\nimport { Observable } from 'rxjs'\nimport { map, take } from 'rxjs/operators'\n\nimport { StoryUsersDataService } from './story-user-data.service'\n\nimport { ITheSeamBreadcrumbsResolver } from '../breadcrumbs-resolver'\n\n@Injectable()\nexport class StoryUserIdToNameResolver implements ITheSeamBreadcrumbsResolver {\n\n  constructor(\n    private _users: StoryUsersDataService\n  ) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<string> | Promise<string> | string {\n    const UNKNOWN_USER = 'Unknown User'\n    const userId = route.paramMap.get('userId')\n\n    return userId !== null\n      ? this._users.users$.pipe(\n          // Find the user record\n          map(users => users.find(u => u.id === +userId)),\n          // Map the record to name\n          map(user => user ? user.name : UNKNOWN_USER),\n          // Ensure the observable completes\n          take(1)\n        )\n      : UNKNOWN_USER\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_users",
                        "type": "StoryUsersDataService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_users",
                        "type": "StoryUsersDataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StoryUsersDataService",
            "id": "injectable-StoryUsersDataService-a0d720899c60cce3b01d1d458d8a614b",
            "file": "projects/ui-common/src/lib/breadcrumbs/stories/story-user-data.service.ts",
            "properties": [
                {
                    "name": "users$",
                    "defaultValue": "of([\n    { id: 123, name: 'User 1' },\n    { id: 987, name: 'User 2' },\n    { id: 456, name: 'User 3' },\n    { id: 654, name: 'User 4' },\n  ])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { of } from 'rxjs'\n\n@Injectable()\nexport class StoryUsersDataService {\n  public users$ = of([\n    { id: 123, name: 'User 1' },\n    { id: 987, name: 'User 2' },\n    { id: 456, name: 'User 3' },\n    { id: 654, name: 'User 4' },\n  ])\n}\n",
            "type": "injectable"
        },
        {
            "name": "TabbedService",
            "id": "injectable-TabbedService-0a1638b0a564105360a38b93f9e9e621",
            "file": "projects/ui-common/src/lib/tabbed/tabbed.service.ts",
            "properties": [
                {
                    "name": "_tabGroups",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "registerTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabbedComponent"
                        },
                        {
                            "name": "groupName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabbedComponent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groupName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unregisterTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabbedComponent"
                        },
                        {
                            "name": "groupName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabbedComponent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "groupName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\n\nimport { TabbedComponent } from './tabbed.component'\n\nexport declare type TabsDirection = 'horizontal' | 'vertical'\n\n@Injectable()\nexport class TabbedService {\n\n  private _tabGroups = {}\n\n  constructor() { }\n\n  public registerTab(tab: TabbedComponent, groupName: string) {\n    if (!this._tabGroups[groupName]) {\n      this._tabGroups[groupName] = []\n    }\n\n    for (const t of this._tabGroups[groupName]) {\n      t.hideTabs = true\n    }\n\n    this._tabGroups[groupName].push(tab)\n  }\n\n  public unregisterTab(tab: TabbedComponent, groupName: string) {\n    if (this._tabGroups[groupName]) {\n      this._tabGroups[groupName] = this._tabGroups[groupName].filter(\n        t => t !== tab\n      )\n\n      if (this._tabGroups[groupName].length > 0) {\n        this._tabGroups[groupName][this._tabGroups[groupName].length - 1].hideTabs = false\n      }\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "TableCellTypesHelpersService",
            "id": "injectable-TableCellTypesHelpersService-80c8d8d885c74e0962e5d77642faa9a6",
            "file": "projects/ui-common/src/lib/table-cell-types/services/table-cell-types-helpers.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "_getModalResultAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "DynamicDatatableCellActionModal"
                        },
                        {
                            "name": "result",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 150,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "DynamicDatatableCellActionModal",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_handleModalAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "DynamicDatatableCellActionModal"
                        },
                        {
                            "name": "contextOrContextFn",
                            "type": "CaluclatedValueContextType"
                        },
                        {
                            "name": "resultSubject",
                            "type": "Subject<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 97,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "DynamicDatatableCellActionModal",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contextOrContextFn",
                            "type": "CaluclatedValueContextType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "resultSubject",
                            "type": "Subject<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_handleModalActionOpenModal",
                    "args": [
                        {
                            "name": "action",
                            "type": "DynamicDatatableCellActionModal"
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ModalRef<any, any>>",
                    "typeParameters": [],
                    "line": 121,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "DynamicDatatableCellActionModal",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_resolveValueContext",
                    "args": [
                        {
                            "name": "contextOrContextFn",
                            "type": "CaluclatedValueContextType"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "contextOrContextFn",
                            "type": "CaluclatedValueContextType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValueContext",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "data",
                            "type": "ITableCellData<any | string>",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "ICalucatedValueContext",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "ITableCellData<any | string>",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleModalAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "DynamicDatatableCellActionModal"
                        },
                        {
                            "name": "contextOrContextFn",
                            "type": "CaluclatedValueContextType"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "R"
                    ],
                    "line": 58,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "DynamicDatatableCellActionModal",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contextOrContextFn",
                            "type": "CaluclatedValueContextType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseValueProp",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "contextOrContextFn",
                            "type": "CaluclatedValueContextType"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contextOrContextFn",
                            "type": "CaluclatedValueContextType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\n\nimport jexl from 'jexl'\n\nimport { DynamicDatatableCellActionModal } from '../../datatable-dynamic/index'\nimport { TheSeamDynamicComponentLoader } from '../../dynamic-component-loader/index'\nimport { Modal, ModalConfig, ModalRef } from '../../modal/index'\nimport { ITableCellData } from '../../table/table-cell.models'\n\nimport { Observable, of, Subject, Subscriber } from 'rxjs'\nimport { switchMap, takeUntil } from 'rxjs/operators'\nimport { CaluclatedValueContextType, ICalucatedValueContext } from '../table-cell-types-models'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableCellTypesHelpersService {\n\n  constructor(\n    private _dynamicComponentLoaderModule: TheSeamDynamicComponentLoader,\n    private _modal: Modal,\n  ) { }\n\n  public parseValueProp(value: any, contextOrContextFn: CaluclatedValueContextType) {\n    if (value === undefined || value === null) {\n      return value\n    }\n\n    if (typeof value === 'string') {\n      return value\n    }\n\n    if (value.type === 'jexl') {\n      const context = this._resolveValueContext(contextOrContextFn)\n      return jexl.evalSync(value.expr, context)\n    }\n\n    return value\n  }\n\n  public getValueContext(value: any, data?: ITableCellData<any, string>): ICalucatedValueContext {\n    return {\n      row: data && data.row,\n      rowIndex: data && data.rowIndex,\n      colData: data && data.colData,\n      value: value\n    }\n  }\n\n  private _resolveValueContext(contextOrContextFn: CaluclatedValueContextType) {\n    let context = contextOrContextFn\n    if (typeof context === 'function') {\n      context = context()\n    }\n    return context\n  }\n\n  public handleModalAction<R = any>(\n    action: DynamicDatatableCellActionModal,\n    contextOrContextFn: CaluclatedValueContextType\n  ) {\n    // TODO: Try to simplify this observable. It seems fairly easy to read like\n    // this, but seems like it is doing more than it needs to with the multiple\n    // subjects.\n    return new Observable((subscriber: Subscriber<R>) => {\n      // Passed to helper function to emit results to subscriber.\n      const resultSubject = new Subject<any>()\n      // Used to stop observing.\n      const stopSubject = new Subject<any>()\n\n      // Observe results to emit to subscriber.\n      resultSubject\n        .pipe(takeUntil(stopSubject))\n        .subscribe(\n          result => subscriber.next(result),\n          err => subscriber.error(err),\n          () => stopSubject.complete()\n        )\n\n      // Handle the potentially deep chain of actions.\n      this._handleModalAction(action, contextOrContextFn, resultSubject)\n        .pipe(takeUntil(stopSubject))\n        .subscribe(\n          () => {},\n          err => subscriber.error(err),\n          () => subscriber.complete()\n        )\n\n      // Clean up on unsubscribe.\n      return () => {\n        stopSubject.next(undefined)\n        stopSubject.complete()\n      }\n    })\n  }\n\n  private _handleModalAction(\n    action: DynamicDatatableCellActionModal,\n    contextOrContextFn: CaluclatedValueContextType,\n    resultSubject: Subject<any>\n  ) {\n    const data = this.parseValueProp(action.data, contextOrContextFn)\n\n    return this._handleModalActionOpenModal(action, data).pipe(\n      switchMap(modalRef => modalRef.afterClosed().pipe(\n        switchMap(result => {\n          resultSubject.next(result)\n\n          const resultAction = this._getModalResultAction(action, result)\n          if (resultAction) {\n            return this._handleModalAction(resultAction, contextOrContextFn, resultSubject)\n          }\n\n          resultSubject.complete()\n          return of(undefined)\n        })\n      ))\n    )\n  }\n\n  private _handleModalActionOpenModal(action: DynamicDatatableCellActionModal, data?: any): Observable<ModalRef<any, any>> {\n    if (!action.component) {\n      throw new Error('Cell action type \"modal\" must have a component defined.')\n    }\n\n    const config: ModalConfig<any> = {\n      modalSize: 'lg',\n      data\n    }\n\n    if (typeof action.component === 'string') {\n      return this._dynamicComponentLoaderModule\n        .getComponentFactory<{}>(action.component)\n        .pipe(\n          switchMap(componentFactory => {\n            const modalRef = this._modal.openFromComponent(\n              componentFactory.componentType,\n              config,\n              (<any /* ComponentFactoryBoundToModule */>componentFactory).ngModule.componentFactoryResolver\n            )\n            return of(modalRef)\n          })\n        )\n    } else {\n      const modalRef = this._modal.openFromComponent(action.component, config)\n      return of(modalRef)\n    }\n  }\n\n  private _getModalResultAction(action: DynamicDatatableCellActionModal, result: any) {\n    if (\n      action.resultActions\n      && action.resultActions[result]\n      && action.resultActions[result].type === 'modal'\n    ) {\n      return action.resultActions[result]\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_dynamicComponentLoaderModule",
                        "type": "TheSeamDynamicComponentLoader"
                    },
                    {
                        "name": "_modal",
                        "type": "Modal"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_dynamicComponentLoaderModule",
                        "type": "TheSeamDynamicComponentLoader",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modal",
                        "type": "Modal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TheSeamBreadcrumbsService",
            "id": "injectable-TheSeamBreadcrumbsService-780d5cf6e375a36602166c7fcc885928",
            "file": "projects/ui-common/src/lib/breadcrumbs/breadcrumbs.service.ts",
            "properties": [
                {
                    "name": "breadcrumbDataKey",
                    "defaultValue": "'breadcrumb'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "crumbs$",
                    "type": "Observable<ITheSeamBreadcrumb[]>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_parseBreadcrumbData",
                    "args": [
                        {
                            "name": "routeWithData",
                            "type": "IActivatedRouteWithData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITheSeamBreadcrumb>",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "routeWithData",
                            "type": "IActivatedRouteWithData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router'\nimport { combineLatest, Observable, of } from 'rxjs'\nimport { filter, map, startWith, switchMap } from 'rxjs/operators'\n\nimport { activatedRoutesWithDataProperty, IActivatedRouteWithData, routeSnapshotPathFull } from '../utils/index'\n\nimport { ITheSeamBreadcrumb } from './breadcrumb'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TheSeamBreadcrumbsService {\n\n  public readonly breadcrumbDataKey = 'breadcrumb'\n\n  public crumbs$: Observable<ITheSeamBreadcrumb[]>\n\n  constructor(\n    private _router: Router,\n    private _activatedRoute: ActivatedRoute\n  ) {\n    this.crumbs$ = this._router.events.pipe(\n      filter(event => event instanceof NavigationEnd),\n      map(_ => this._activatedRoute),\n      startWith(this._activatedRoute),\n      activatedRoutesWithDataProperty(this.breadcrumbDataKey, true),\n      switchMap(rwdArr => combineLatest(rwdArr.map(rwd => this._parseBreadcrumbData(rwd))))\n    )\n  }\n\n  private _parseBreadcrumbData(routeWithData: IActivatedRouteWithData): Observable<ITheSeamBreadcrumb> {\n    const crumbValue = routeWithData.data[this.breadcrumbDataKey]\n    const route = routeWithData.route\n    const path = routeSnapshotPathFull(route.snapshot)\n    let value = ''\n\n    if (typeof crumbValue === 'string') {\n      value = crumbValue\n    } else {\n      console.warn(\n        '[TheSeamBreadcrumbsService] Only string breadcrumbs are supported currently. '\n        + 'Use a resolver if the value needs to be dynamically calculated.'\n      )\n    }\n\n    return of({ value, path, route })\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router"
                    },
                    {
                        "name": "_activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TheSeamDatatableScrollbarHelperService",
            "id": "injectable-TheSeamDatatableScrollbarHelperService-c909aec8c7a1488d10b24ee65d889f2d",
            "file": "projects/ui-common/src/lib/datatable/services/datatable-scrollbar-helper.service.ts",
            "properties": [
                {
                    "name": "animatedScrolling",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Animates programmatic scrolling, such as switching pages.</p>\n<p>NOTE: Animating the scrolling works, but the datatable may need changes\nbefore this is enabled, because it seems a little stuttery when it moves.</p>\n",
                    "line": 16
                },
                {
                    "name": "animatedScrollingTime",
                    "defaultValue": "250",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "width",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "onDestroyScroller",
                    "args": [
                        {
                            "name": "scroller",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "scroller",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInitScroller",
                    "args": [
                        {
                            "name": "scroller",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "scroller",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOffset",
                    "args": [
                        {
                            "name": "scroller",
                            "type": "any"
                        },
                        {
                            "name": "offsetY",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "scroller",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offsetY",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, NgZone } from '@angular/core'\n\nimport { OverlayScrollbarsService } from '../../scrollbar/index'\n\n@Injectable()\nexport class TheSeamDatatableScrollbarHelperService {\n\n  width = 0\n\n  /**\n   * Animates programmatic scrolling, such as switching pages.\n   *\n   * NOTE: Animating the scrolling works, but the datatable may need changes\n   * before this is enabled, because it seems a little stuttery when it moves.\n   */\n  animatedScrolling = false\n  animatedScrollingTime = 250\n\n  constructor(\n    private _ngZone: NgZone,\n    private _scrollbars: OverlayScrollbarsService\n  ) { }\n\n  onInitScroller(scroller: any): void {\n    this._scrollbars.initializeInstance(scroller.parentElement, {\n      callbacks: {\n        onScroll: (e) => {\n          this._ngZone.run(() => {\n            scroller.onScrolled(e)\n          })\n        }\n      }\n    })\n  }\n\n  onDestroyScroller(scroller: any): void {\n    this._scrollbars.destroyInstance(scroller.parentElement)\n  }\n\n  setOffset(scroller: any, offsetY: number): void {\n    // TODO: Move the NgZone decision to the service\n    this._ngZone.runOutsideAngular(() => {\n      if (this.animatedScrolling) {\n        this._scrollbars.getInstance(scroller.parentElement)\n          .scroll({ y: offsetY }, this.animatedScrollingTime)\n      } else {\n        this._scrollbars.getInstance(scroller.parentElement)\n          .scroll({ y: offsetY })\n      }\n    })\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_ngZone",
                        "type": "NgZone"
                    },
                    {
                        "name": "_scrollbars",
                        "type": "OverlayScrollbarsService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_scrollbars",
                        "type": "OverlayScrollbarsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TheSeamDynamicComponentLoader",
            "id": "injectable-TheSeamDynamicComponentLoader-aaea0511eceea31a79aabc232cea9993",
            "file": "projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-loader.service.ts",
            "properties": [
                {
                    "name": "_manifests",
                    "type": "IDynamicComponentManifest[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getComponentFactory",
                    "args": [
                        {
                            "name": "componentId",
                            "type": "string"
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ComponentFactory<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 33,
                    "description": "<p>Retrieve a ComponentFactory, based on the specified componentId (defined in the IDynamicComponentManifest array). </p>\n",
                    "jsdoctags": [
                        {
                            "name": "componentId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        },
                        {
                            "name": "componentId",
                            "type": "string"
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ComponentFactory<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "componentId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadFactory",
                    "args": [
                        {
                            "name": "ngModuleFactory",
                            "type": "NgModuleFactory<any>"
                        },
                        {
                            "name": "componentId",
                            "type": "string"
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ComponentFactory<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 70,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "ngModuleFactory",
                            "type": "NgModuleFactory<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "componentId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadModuleFactory",
                    "args": [
                        {
                            "name": "loadChildren",
                            "type": "LoadChildren"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<NgModuleFactory<any>>",
                    "typeParameters": [],
                    "line": 56,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "loadChildren",
                            "type": "LoadChildren",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Compiler, ComponentFactory, Inject, Injectable, Injector, NgModuleFactory, NgModuleFactoryLoader, Optional } from '@angular/core'\nimport { Observable, of } from 'rxjs'\nimport { from, throwError } from 'rxjs'\nimport { mergeMap, switchMap } from 'rxjs/operators'\n\nimport { LoadChildren } from '@angular/router'\nimport { IDynamicComponentManifest } from './dynamic-component-manifest'\nimport {\n  DYNAMIC_COMPONENT,\n  DYNAMIC_COMPONENT_MANIFESTS,\n  DYNAMIC_MODULE\n} from './dynamic-component-tokens'\n\nimport { wrapIntoObservable } from '../utils/index'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TheSeamDynamicComponentLoader {\n\n  private _manifests: IDynamicComponentManifest[]\n\n  constructor(\n    private compiler: Compiler,\n    private injector: Injector,\n    @Optional() @Inject(DYNAMIC_COMPONENT_MANIFESTS) manifests: IDynamicComponentManifest[],\n    // TODO: Remove the loader now that all our code should have updated from\n    // the string `loadChildren` by now.\n    @Optional() private _loader: NgModuleFactoryLoader\n  ) { this._manifests = manifests || [] }\n\n  /** Retrieve a ComponentFactory, based on the specified componentId (defined in the IDynamicComponentManifest array). */\n  getComponentFactory<T>(componentId: string, injector?: Injector): Observable<ComponentFactory<T>> {\n    const manifest = this._manifests\n      .find(m => m.componentId === componentId)\n    if (!manifest) {\n      return throwError(`TheSeamDynamicComponentLoader: Unknown componentId \"${componentId}\"`)\n    }\n\n    // const path = manifest.loadChildren\n\n    // const p = this.load<T>(path, componentId, injector)\n    // return from(p)\n\n    const moduleFactory$ = this.loadModuleFactory(manifest.loadChildren)\n\n    return moduleFactory$\n      .pipe(switchMap(m => from(this.loadFactory<any>(m, componentId, injector))))\n  }\n\n  load<T>(path: string, componentId: string, injector?: Injector): Promise<ComponentFactory<T>> {\n    return this._loader.load(path)\n      .then((ngModuleFactory) => this.loadFactory<T>(ngModuleFactory, componentId, injector))\n  }\n\n  private loadModuleFactory(loadChildren: LoadChildren): Observable<NgModuleFactory<any>> {\n    if (typeof loadChildren === 'string') {\n      return from(this._loader.load(loadChildren))\n    } else {\n      return wrapIntoObservable(loadChildren()).pipe(mergeMap((t: any) => {\n        if (t instanceof NgModuleFactory) {\n          return of(t)\n        } else {\n          return from(this.compiler.compileModuleAsync(t))\n        }\n      }))\n    }\n  }\n\n  private loadFactory<T>(ngModuleFactory: NgModuleFactory<any>, componentId: string, injector?: Injector): Promise<ComponentFactory<T>> {\n    const moduleRef = ngModuleFactory.create(injector || this.injector)\n    const dynamicComponentType = moduleRef.injector.get(DYNAMIC_COMPONENT, null)\n    if (!dynamicComponentType) {\n      const dynamicModule: IDynamicComponentManifest = moduleRef.injector.get(DYNAMIC_MODULE, null)\n\n      if (!dynamicModule) {\n        throw new Error(\n          'TheSeamDynamicComponentLoader: Dynamic module for'\n          + ` componentId \"${componentId}\" does not contain`\n          + ' DYNAMIC_COMPONENT or DYNAMIC_MODULE as a provider.',\n        )\n      }\n      if (dynamicModule.componentId !== componentId) {\n        throw new Error(\n          'TheSeamDynamicComponentLoader: Dynamic module for'\n          + `${componentId} does not match manifest.`,\n        )\n      }\n\n      const path = dynamicModule.loadChildren\n\n      if (!path) {\n        throw new Error(`${componentId} unknown!`)\n      }\n\n      // return this.load<T>(path, componentId, injector)\n      const moduleFactory$ = this.loadModuleFactory(dynamicModule.loadChildren)\n\n      return moduleFactory$\n        .pipe(switchMap(m => from(this.loadFactory<any>(m, componentId, injector))))\n        .toPromise()\n    }\n\n    return Promise.resolve(moduleRef.componentFactoryResolver.resolveComponentFactory<T>(dynamicComponentType))\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "compiler",
                        "type": "Compiler"
                    },
                    {
                        "name": "injector",
                        "type": "Injector"
                    },
                    {
                        "name": "manifests",
                        "type": "IDynamicComponentManifest[]"
                    },
                    {
                        "name": "_loader",
                        "type": "NgModuleFactoryLoader"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "compiler",
                        "type": "Compiler",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "manifests",
                        "type": "IDynamicComponentManifest[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_loader",
                        "type": "NgModuleFactoryLoader",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TheSeamLayoutService",
            "id": "injectable-TheSeamLayoutService-bbe0b85754e720edf3e9f229afed73c2",
            "file": "projects/ui-common/src/lib/layout/layout.service.ts",
            "properties": [
                {
                    "name": "isMobile$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "<p>Is app a mobile-like size.</p>\n",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "observe",
                    "args": [
                        {
                            "name": "alias",
                            "type": "MediaQueryAliases"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "alias",
                            "type": "MediaQueryAliases",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { inject, Injectable, InjectionToken } from '@angular/core'\nimport { MediaObserver } from '@angular/flex-layout'\nimport { Observable } from 'rxjs'\n\nimport { MediaQueryAliases } from './breakpoint-aliases'\nimport { observeMediaQuery } from './observe-media-query'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TheSeamLayoutService {\n\n  /**\n   * Is app a mobile-like size.\n   */\n  public isMobile$: Observable<boolean>\n\n  constructor(\n    private _media: MediaObserver\n  ) {\n    this.isMobile$ = this.observe('lt-sm')\n  }\n\n  public observe(alias: MediaQueryAliases): Observable<boolean> {\n    return observeMediaQuery(this._media, alias)\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_media",
                        "type": "MediaObserver"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_media",
                        "type": "MediaObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TheSeamLoadingOverlayService",
            "id": "injectable-TheSeamLoadingOverlayService-2f0352fac59f2978e25baf75ee19e6d8",
            "file": "projects/ui-common/src/lib/loading/loading-overlay.service.ts",
            "properties": [
                {
                    "name": "_enabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "disable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "enable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "enabled",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "enabled",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "while",
                    "args": [
                        {
                            "name": "source",
                            "type": "Observable<T>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 54,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Observable<T>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Overlay, OverlayRef } from '@angular/cdk/overlay'\nimport { ComponentPortal } from '@angular/cdk/portal'\nimport { Injectable } from '@angular/core'\nimport { Observable, throwError } from 'rxjs'\nimport { catchError, finalize, tap } from 'rxjs/operators'\n\nimport { LoadingComponent } from './loading/loading.component'\n\n@Injectable()\nexport class TheSeamLoadingOverlayService {\n\n  private _enabled = false\n\n  private _overlayRef: OverlayRef\n\n  constructor(\n    private _overlay: Overlay\n  ) { }\n\n  get enabled(): boolean {\n    return this._enabled\n  }\n\n  public toggle(enabled?: boolean) {\n    const enable = enabled === undefined ? !this.enabled : enabled\n    if (enable && !this.enabled) {\n      this.enable()\n    } else if (!enable && this.enabled) {\n      this.disable()\n    }\n  }\n\n  public enable() {\n    if (this.enabled) { return }\n\n    this._overlayRef = this._overlay.create({\n      hasBackdrop: false,\n      width: '100%',\n      height: '100%'\n    })\n    this._overlayRef.attach(new ComponentPortal(LoadingComponent))\n\n    this._enabled = true\n  }\n\n  public disable() {\n    if (!this.enabled) { return }\n\n    this._overlayRef.dispose()\n\n    this._enabled = false\n  }\n\n  public while<T = any>(source: Observable<T>): Observable<T> {\n    this.enable()\n    return source\n      .pipe(\n        tap(() => this.disable()),\n        catchError(err => {\n          this.disable()\n          return throwError(err)\n        }),\n        finalize(() => this.disable())\n      )\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "enabled": {
                    "name": "enabled",
                    "getSignature": {
                        "name": "enabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 20
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ToggleEditKeyboardListenerService",
            "id": "injectable-ToggleEditKeyboardListenerService-271c5c2fceaa3a979033ea5d47bffe72",
            "file": "projects/ui-common/src/lib/toggle-edit/toggle-edit-keyboard-listener.service.ts",
            "properties": [
                {
                    "name": "_document",
                    "type": "Document",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_elements",
                    "defaultValue": "[]",
                    "type": "ICanToggleEdit[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_isListening",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_keydownListener",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_startListening",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_stopListening",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "element",
                            "type": "ICanToggleEdit"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "ICanToggleEdit",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isListening",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "element",
                            "type": "ICanToggleEdit"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "ICanToggleEdit",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { DOCUMENT } from '@angular/common'\nimport { Inject, Injectable } from '@angular/core'\n\nimport { ICanToggleEdit } from './models'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToggleEditKeyboardListenerService {\n\n  private _elements: ICanToggleEdit[] = []\n\n  private _isListening = false\n\n  private _document: Document\n\n  constructor(\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this._document = document\n  }\n\n  public add(element: ICanToggleEdit): void {\n    this._elements.push(element)\n    this._startListening()\n  }\n\n  public remove(element: ICanToggleEdit): void {\n    this._elements = this._elements.filter(v => v !== element)\n    if (this._elements.length === 0) {\n      this._stopListening()\n    }\n  }\n\n  public isListening(): boolean {\n    return this._isListening\n  }\n\n  private _startListening(): void {\n    if (this.isListening()) {\n      return\n    }\n\n    this._document.body.addEventListener('keydown', this._keydownListener, true)\n\n    this._isListening = true\n  }\n\n  private _stopListening(): void {\n    if (!this.isListening()) {\n      return\n    }\n\n    this._document.body.removeEventListener('keydown', this._keydownListener, true)\n\n    this._isListening = false\n  }\n\n  private _keydownListener = (event: KeyboardEvent): boolean | void => {\n    for (const element of this._elements) {\n      if (element.isEditing()) {\n        element.keydownEvent(event)\n      }\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "document",
                        "type": "any"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "WidgetRegistryService",
            "id": "injectable-WidgetRegistryService-f36855f7c18109b614d66bdb0a796a7b",
            "file": "projects/ui-common/src/lib/widget/widget-registry.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createWidgetPortal",
                    "args": [
                        {
                            "name": "widgetId",
                            "type": "string"
                        },
                        {
                            "name": "viewContainerRef",
                            "type": "ViewContainerRef | null",
                            "optional": true
                        },
                        {
                            "name": "injector",
                            "type": "Injector | null",
                            "optional": true
                        },
                        {
                            "name": "componentFactoryResolver",
                            "type": "ComponentFactoryResolver | null | undefined",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ComponentPortal<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 26,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "widgetId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "viewContainerRef",
                            "type": "ViewContainerRef | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "type": "Injector | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "componentFactoryResolver",
                            "type": "ComponentFactoryResolver | null | undefined",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "<p>Registry is to provide a way to manage widgets in a way that we can load them\nthe same way throughout the app, whether the component itself is registered,\nthe component is lazy-loaded, or referenced by an id stored in the database.</p>\n",
            "sourceCode": "import { ComponentPortal } from '@angular/cdk/portal'\nimport { ComponentFactoryResolver, Inject, Injectable, Injector, ViewContainerRef } from '@angular/core'\nimport { Observable, of, throwError } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { TheSeamDynamicComponentLoader } from '../dynamic-component-loader/dynamic-component-loader.service'\n\nimport { IWidgetRegistryRecord } from './widget-registry.models'\nimport { THESEAM_WIDGETS } from './widget-token'\n\n/**\n * Registry is to provide a way to manage widgets in a way that we can load them\n * the same way throughout the app, whether the component itself is registered,\n * the component is lazy-loaded, or referenced by an id stored in the database.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class WidgetRegistryService {\n\n  constructor(\n    @Inject(THESEAM_WIDGETS) private _widgets: IWidgetRegistryRecord[],\n    private _dynamicComponentLoader: TheSeamDynamicComponentLoader\n  ) { }\n\n  public createWidgetPortal<T>(\n    widgetId: string,\n    viewContainerRef?: ViewContainerRef | null,\n    injector?: Injector | null,\n    componentFactoryResolver?: ComponentFactoryResolver | null | undefined\n  ): Observable<ComponentPortal<T>> {\n    const widgetDef = (this._widgets || []).find(w => w.widgetId === widgetId)\n\n    if (!widgetDef) {\n      return throwError(`WidgetRegstry: Unknown widgetId \"${widgetId}\"`)\n    }\n\n    if (typeof widgetDef.componentOrComponentId === 'string') {\n      return this._dynamicComponentLoader\n        .getComponentFactory<T>(widgetDef.componentOrComponentId)\n        .pipe(\n          map(componentFactory => {\n            let resolver: ComponentFactoryResolver | null | undefined = componentFactoryResolver\n            if (!resolver) {\n              const m = (<any /* ComponentFactoryBoundToModule */>componentFactory).ngModule\n              if (m && m.componentFactoryResolver) {\n                resolver = m.componentFactoryResolver\n              }\n            }\n\n            const portal = new ComponentPortal(\n              componentFactory.componentType,\n              viewContainerRef,\n              injector,\n              resolver\n            )\n\n            return portal\n          }\n        )\n      )\n    } else {\n      const portal = new ComponentPortal(\n        widgetDef.componentOrComponentId,\n        viewContainerRef,\n        injector,\n        componentFactoryResolver\n      )\n\n      return of(portal)\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_widgets",
                        "type": "IWidgetRegistryRecord[]"
                    },
                    {
                        "name": "_dynamicComponentLoader",
                        "type": "TheSeamDynamicComponentLoader"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "_widgets",
                        "type": "IWidgetRegistryRecord[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dynamicComponentLoader",
                        "type": "TheSeamDynamicComponentLoader",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-77becfacd3b5a63e2ec3b39dba167813",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor'\n\nexport class AppPage {\n  navigateTo() {\n    return browser.get(browser.baseUrl) as Promise<any>\n  }\n\n  getTitleText() {\n    return element(by.css('app-root h1')).getText() as Promise<string>\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColorDisp",
            "id": "class-ColorDisp-e8b203610b8eb751c00f298b782840bf",
            "file": "projects/ui-common/src/stories/mdx/components/color-preview.tsx",
            "type": "class",
            "sourceCode": "import * as React from 'react'\n\nimport { ColorItem } from '@storybook/addon-docs/blocks'\nimport { styled } from '@storybook/theming'\n\ninterface ColorDispProps {\n  title: string\n  subtitle: string\n  colorVars: string[]\n}\n\nexport class ColorDisp extends React.Component<ColorDispProps> {\n\n  render() {\n    const { title, subtitle, colorVars } = this.props\n\n    const colors: string[] = []\n    for (const c of colorVars) {\n      colors.push(getComputedStyle(document.documentElement).getPropertyValue(c))\n    }\n    return (\n      <ColorItem\n        title={title}\n        subtitle={subtitle}\n        colors={colors}\n      />\n    )\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CSVDataExporter",
            "id": "class-CSVDataExporter-4a9cac120250f6a8255d90885206fd62",
            "file": "projects/ui-common/src/lib/data-exporter/exporters/csv-exporter.ts",
            "type": "class",
            "sourceCode": "import { from, Observable, of } from 'rxjs'\nimport { mapTo, tap } from 'rxjs/operators'\n\nimport { faFileCsv } from '@fortawesome/free-solid-svg-icons'\n// import { Buffer } from 'buffer/'\nimport FileSaver from 'file-saver'\nimport XLSX from 'xlsx'\n\nimport { fileDataFromBuffer } from '../../utils/index'\n\nimport { IDataExporter } from '../data-exporter'\n\nexport class CSVDataExporter implements IDataExporter {\n\n  public readonly name = 'exporter:csv'\n\n  public label = 'CSV'\n\n  public icon = faFileCsv\n\n  public export<T>(data: T[]): Observable<boolean> {\n    const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet(data)\n\n    const out = XLSX.utils.sheet_to_csv(ws)\n\n    // NOTE: `out` should not be passed as a string, but the fileDataFromBuffer\n    // function happens to works with a string. When the build issue about the\n    // function argument is figured out then this should be fixed.\n    return from(fileDataFromBuffer(out as any))\n    // return from(fileDataFromBuffer(Buffer.from(out)))\n      .pipe(\n        tap(fileData => {\n          FileSaver.saveAs(fileData.blob, `Export.csv`)\n        }),\n        mapTo(true)\n      )\n  }\n\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "defaultValue": "faFileCsv",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "label",
                    "defaultValue": "'CSV'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "'exporter:csv'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 21,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDataExporter"
            ]
        },
        {
            "name": "DocAlert",
            "id": "class-DocAlert-6c089454c8bb1fe3d163b23f89e35a29",
            "file": "projects/ui-common/src/stories/mdx/components/doc-alert.tsx",
            "type": "class",
            "sourceCode": "import * as React from 'react'\n\nimport { styled } from '@storybook/theming'\n\nconst StyledDiv = styled.div({\n  'borderRadius': '0',\n  'borderLeftWidth': '5px !important'\n})\n\ninterface DocAlertProps {\n  kind: string\n  children: any\n}\n\nexport class DocAlert extends React.Component<DocAlertProps> {\n\n  render() {\n    const { children, kind } = this.props\n    const _kind = kind || 'warning'\n    const cssClasses = `alart alert-${_kind} border-left border-${_kind} p-2`\n    return (\n      <StyledDiv className={cssClasses} role='alert'>{children}</StyledDiv>\n    )\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicDatatableCellActionBase",
            "id": "class-DynamicDatatableCellActionBase-2909ad7841b246e55d950a179e070946",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/cell-action.ts",
            "type": "class",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\n\nimport { IJexlExprDef } from './jexl-expr-def'\n\n// tslint:disable:no-inferrable-types\n\nexport class DynamicDatatableCellActionBase<T = string> {\n  type: T\n\n  disabled?: boolean = false\n}\n\nexport class DynamicDatatableCellActionLink extends DynamicDatatableCellActionBase<'link'> {\n  link: string | IJexlExprDef\n\n  /**\n   * Make sure the application provides an `EncryptedAssetReader` that the\n   * datatable's injector can find if linking to encrypted data that needs\n   * additional information to access the link, such as our assets that require\n   * an additional header for decryption.\n   */\n  encrypted?: boolean = false\n\n  /**\n   * If the link is not going to get handled by the current applications router.\n   * If `encrypted` is true, then this may be ignored depending on the\n   * `EncryptedAssetReader` implementation.\n   */\n  external?: boolean = false\n}\n\nexport class DynamicDatatableCellActionModal extends DynamicDatatableCellActionBase<'modal'> {\n  component: string | ComponentType<{}>\n\n  data?: any\n\n  resultActions?: {\n    [result: string]: DynamicDatatableCellActionModal\n  }\n}\n",
            "properties": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicDatatableCellActionLink",
            "id": "class-DynamicDatatableCellActionLink-2909ad7841b246e55d950a179e070946",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/cell-action.ts",
            "type": "class",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\n\nimport { IJexlExprDef } from './jexl-expr-def'\n\n// tslint:disable:no-inferrable-types\n\nexport class DynamicDatatableCellActionBase<T = string> {\n  type: T\n\n  disabled?: boolean = false\n}\n\nexport class DynamicDatatableCellActionLink extends DynamicDatatableCellActionBase<'link'> {\n  link: string | IJexlExprDef\n\n  /**\n   * Make sure the application provides an `EncryptedAssetReader` that the\n   * datatable's injector can find if linking to encrypted data that needs\n   * additional information to access the link, such as our assets that require\n   * an additional header for decryption.\n   */\n  encrypted?: boolean = false\n\n  /**\n   * If the link is not going to get handled by the current applications router.\n   * If `encrypted` is true, then this may be ignored depending on the\n   * `EncryptedAssetReader` implementation.\n   */\n  external?: boolean = false\n}\n\nexport class DynamicDatatableCellActionModal extends DynamicDatatableCellActionBase<'modal'> {\n  component: string | ComponentType<{}>\n\n  data?: any\n\n  resultActions?: {\n    [result: string]: DynamicDatatableCellActionModal\n  }\n}\n",
            "properties": [
                {
                    "name": "encrypted",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Make sure the application provides an <code>EncryptedAssetReader</code> that the\ndatatable&#39;s injector can find if linking to encrypted data that needs\nadditional information to access the link, such as our assets that require\nan additional header for decryption.</p>\n",
                    "line": 22
                },
                {
                    "name": "external",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>If the link is not going to get handled by the current applications router.\nIf <code>encrypted</code> is true, then this may be ignored depending on the\n<code>EncryptedAssetReader</code> implementation.</p>\n",
                    "line": 29
                },
                {
                    "name": "link",
                    "type": "string | IJexlExprDef",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "DynamicDatatableCellActionBase"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "DynamicDatatableCellActionBase"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "DynamicDatatableCellActionBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicDatatableCellActionModal",
            "id": "class-DynamicDatatableCellActionModal-2909ad7841b246e55d950a179e070946",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/cell-action.ts",
            "type": "class",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\n\nimport { IJexlExprDef } from './jexl-expr-def'\n\n// tslint:disable:no-inferrable-types\n\nexport class DynamicDatatableCellActionBase<T = string> {\n  type: T\n\n  disabled?: boolean = false\n}\n\nexport class DynamicDatatableCellActionLink extends DynamicDatatableCellActionBase<'link'> {\n  link: string | IJexlExprDef\n\n  /**\n   * Make sure the application provides an `EncryptedAssetReader` that the\n   * datatable's injector can find if linking to encrypted data that needs\n   * additional information to access the link, such as our assets that require\n   * an additional header for decryption.\n   */\n  encrypted?: boolean = false\n\n  /**\n   * If the link is not going to get handled by the current applications router.\n   * If `encrypted` is true, then this may be ignored depending on the\n   * `EncryptedAssetReader` implementation.\n   */\n  external?: boolean = false\n}\n\nexport class DynamicDatatableCellActionModal extends DynamicDatatableCellActionBase<'modal'> {\n  component: string | ComponentType<{}>\n\n  data?: any\n\n  resultActions?: {\n    [result: string]: DynamicDatatableCellActionModal\n  }\n}\n",
            "properties": [
                {
                    "name": "component",
                    "type": "string | ComponentType<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "data",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "resultActions",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "DynamicDatatableCellActionBase"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "DynamicDatatableCellActionBase"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "DynamicDatatableCellActionBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicDatatableCellTypeConfig",
            "id": "class-DynamicDatatableCellTypeConfig-96498af886b990cd37b5c4f6f88edf05",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts",
            "type": "class",
            "sourceCode": "import { TheSeamIconType } from '../../icon/index'\n\nimport { DynamicDatatableCellActionLink, DynamicDatatableCellActionModal } from './cell-action'\nimport { IDynamicDatatableCellType } from './cell-type'\nimport { IJexlExprDef } from './jexl-expr-def'\n\n// tslint:disable:no-inferrable-types\n\nexport class DynamicDatatableCellTypeConfig<T = IDynamicDatatableCellType> {\n  type: T\n\n  /**\n   * Styles added to the root cell elements `style` attribute.\n   */\n  styles?: string | string[]\n\n  /**\n   * Classes added to the root cell elements `class` attribute.\n   */\n  cssClass?: string | string[]\n}\n\nexport class DynamicDatatableCellTypeConfigString extends DynamicDatatableCellTypeConfig<'string'> {\n  // truncate?: boolean = false\n}\n\nexport class DynamicDatatableCellTypeConfigInteger extends DynamicDatatableCellTypeConfig<'integer'> {\n\n}\n\nexport class DynamicDatatableCellTypeConfigDecimal extends DynamicDatatableCellTypeConfig<'decimal'> {\n\n}\n\nexport class DynamicDatatableCellTypeConfigDate extends DynamicDatatableCellTypeConfig<'date'> {\n  format?: string = 'MM-dd-yyyy h:mm aaa'\n}\n\nexport type DynamicDatatableCellTypeConfigIconAction = DynamicDatatableCellActionLink | DynamicDatatableCellActionModal\n\nexport class DynamicDatatableCellTypeConfigIcon extends DynamicDatatableCellTypeConfig<'icon'> {\n  action?: DynamicDatatableCellTypeConfigIconAction\n\n  /**\n   * Element title attribute.\n   */\n  titleAttr?: string | IJexlExprDef\n\n  /**\n   * Screen-reader text.\n   */\n  srOnly?: string | IJexlExprDef\n\n  /**\n   * Css class added to the link element.\n   */\n  linkClass?: string | IJexlExprDef\n\n  /**\n   * seam-icon `iconClass` input.\n   */\n  iconClass?: string | IJexlExprDef\n\n  /**\n   * Can apply pre-defined icon styles.\n   */\n  iconType?: TheSeamIconType\n}\n\n// export class DynamicDatatableCellTypeConfigUrl extends DynamicDatatableCellTypeConfig<'url'> {\n\n// }\n",
            "properties": [
                {
                    "name": "cssClass",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Classes added to the root cell elements <code>class</code> attribute.</p>\n",
                    "line": 20
                },
                {
                    "name": "styles",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Styles added to the root cell elements <code>style</code> attribute.</p>\n",
                    "line": 15
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicDatatableCellTypeConfigDate",
            "id": "class-DynamicDatatableCellTypeConfigDate-96498af886b990cd37b5c4f6f88edf05",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts",
            "type": "class",
            "sourceCode": "import { TheSeamIconType } from '../../icon/index'\n\nimport { DynamicDatatableCellActionLink, DynamicDatatableCellActionModal } from './cell-action'\nimport { IDynamicDatatableCellType } from './cell-type'\nimport { IJexlExprDef } from './jexl-expr-def'\n\n// tslint:disable:no-inferrable-types\n\nexport class DynamicDatatableCellTypeConfig<T = IDynamicDatatableCellType> {\n  type: T\n\n  /**\n   * Styles added to the root cell elements `style` attribute.\n   */\n  styles?: string | string[]\n\n  /**\n   * Classes added to the root cell elements `class` attribute.\n   */\n  cssClass?: string | string[]\n}\n\nexport class DynamicDatatableCellTypeConfigString extends DynamicDatatableCellTypeConfig<'string'> {\n  // truncate?: boolean = false\n}\n\nexport class DynamicDatatableCellTypeConfigInteger extends DynamicDatatableCellTypeConfig<'integer'> {\n\n}\n\nexport class DynamicDatatableCellTypeConfigDecimal extends DynamicDatatableCellTypeConfig<'decimal'> {\n\n}\n\nexport class DynamicDatatableCellTypeConfigDate extends DynamicDatatableCellTypeConfig<'date'> {\n  format?: string = 'MM-dd-yyyy h:mm aaa'\n}\n\nexport type DynamicDatatableCellTypeConfigIconAction = DynamicDatatableCellActionLink | DynamicDatatableCellActionModal\n\nexport class DynamicDatatableCellTypeConfigIcon extends DynamicDatatableCellTypeConfig<'icon'> {\n  action?: DynamicDatatableCellTypeConfigIconAction\n\n  /**\n   * Element title attribute.\n   */\n  titleAttr?: string | IJexlExprDef\n\n  /**\n   * Screen-reader text.\n   */\n  srOnly?: string | IJexlExprDef\n\n  /**\n   * Css class added to the link element.\n   */\n  linkClass?: string | IJexlExprDef\n\n  /**\n   * seam-icon `iconClass` input.\n   */\n  iconClass?: string | IJexlExprDef\n\n  /**\n   * Can apply pre-defined icon styles.\n   */\n  iconType?: TheSeamIconType\n}\n\n// export class DynamicDatatableCellTypeConfigUrl extends DynamicDatatableCellTypeConfig<'url'> {\n\n// }\n",
            "properties": [
                {
                    "name": "format",
                    "defaultValue": "'MM-dd-yyyy h:mm aaa'",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "cssClass",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Classes added to the root cell elements <code>class</code> attribute.</p>\n",
                    "line": 20,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                },
                {
                    "name": "styles",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Styles added to the root cell elements <code>style</code> attribute.</p>\n",
                    "line": 15,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "DynamicDatatableCellTypeConfig",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicDatatableCellTypeConfigDecimal",
            "id": "class-DynamicDatatableCellTypeConfigDecimal-96498af886b990cd37b5c4f6f88edf05",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts",
            "type": "class",
            "sourceCode": "import { TheSeamIconType } from '../../icon/index'\n\nimport { DynamicDatatableCellActionLink, DynamicDatatableCellActionModal } from './cell-action'\nimport { IDynamicDatatableCellType } from './cell-type'\nimport { IJexlExprDef } from './jexl-expr-def'\n\n// tslint:disable:no-inferrable-types\n\nexport class DynamicDatatableCellTypeConfig<T = IDynamicDatatableCellType> {\n  type: T\n\n  /**\n   * Styles added to the root cell elements `style` attribute.\n   */\n  styles?: string | string[]\n\n  /**\n   * Classes added to the root cell elements `class` attribute.\n   */\n  cssClass?: string | string[]\n}\n\nexport class DynamicDatatableCellTypeConfigString extends DynamicDatatableCellTypeConfig<'string'> {\n  // truncate?: boolean = false\n}\n\nexport class DynamicDatatableCellTypeConfigInteger extends DynamicDatatableCellTypeConfig<'integer'> {\n\n}\n\nexport class DynamicDatatableCellTypeConfigDecimal extends DynamicDatatableCellTypeConfig<'decimal'> {\n\n}\n\nexport class DynamicDatatableCellTypeConfigDate extends DynamicDatatableCellTypeConfig<'date'> {\n  format?: string = 'MM-dd-yyyy h:mm aaa'\n}\n\nexport type DynamicDatatableCellTypeConfigIconAction = DynamicDatatableCellActionLink | DynamicDatatableCellActionModal\n\nexport class DynamicDatatableCellTypeConfigIcon extends DynamicDatatableCellTypeConfig<'icon'> {\n  action?: DynamicDatatableCellTypeConfigIconAction\n\n  /**\n   * Element title attribute.\n   */\n  titleAttr?: string | IJexlExprDef\n\n  /**\n   * Screen-reader text.\n   */\n  srOnly?: string | IJexlExprDef\n\n  /**\n   * Css class added to the link element.\n   */\n  linkClass?: string | IJexlExprDef\n\n  /**\n   * seam-icon `iconClass` input.\n   */\n  iconClass?: string | IJexlExprDef\n\n  /**\n   * Can apply pre-defined icon styles.\n   */\n  iconType?: TheSeamIconType\n}\n\n// export class DynamicDatatableCellTypeConfigUrl extends DynamicDatatableCellTypeConfig<'url'> {\n\n// }\n",
            "properties": [
                {
                    "name": "cssClass",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Classes added to the root cell elements <code>class</code> attribute.</p>\n",
                    "line": 20,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                },
                {
                    "name": "styles",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Styles added to the root cell elements <code>style</code> attribute.</p>\n",
                    "line": 15,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "DynamicDatatableCellTypeConfig",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicDatatableCellTypeConfigIcon",
            "id": "class-DynamicDatatableCellTypeConfigIcon-96498af886b990cd37b5c4f6f88edf05",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts",
            "type": "class",
            "sourceCode": "import { TheSeamIconType } from '../../icon/index'\n\nimport { DynamicDatatableCellActionLink, DynamicDatatableCellActionModal } from './cell-action'\nimport { IDynamicDatatableCellType } from './cell-type'\nimport { IJexlExprDef } from './jexl-expr-def'\n\n// tslint:disable:no-inferrable-types\n\nexport class DynamicDatatableCellTypeConfig<T = IDynamicDatatableCellType> {\n  type: T\n\n  /**\n   * Styles added to the root cell elements `style` attribute.\n   */\n  styles?: string | string[]\n\n  /**\n   * Classes added to the root cell elements `class` attribute.\n   */\n  cssClass?: string | string[]\n}\n\nexport class DynamicDatatableCellTypeConfigString extends DynamicDatatableCellTypeConfig<'string'> {\n  // truncate?: boolean = false\n}\n\nexport class DynamicDatatableCellTypeConfigInteger extends DynamicDatatableCellTypeConfig<'integer'> {\n\n}\n\nexport class DynamicDatatableCellTypeConfigDecimal extends DynamicDatatableCellTypeConfig<'decimal'> {\n\n}\n\nexport class DynamicDatatableCellTypeConfigDate extends DynamicDatatableCellTypeConfig<'date'> {\n  format?: string = 'MM-dd-yyyy h:mm aaa'\n}\n\nexport type DynamicDatatableCellTypeConfigIconAction = DynamicDatatableCellActionLink | DynamicDatatableCellActionModal\n\nexport class DynamicDatatableCellTypeConfigIcon extends DynamicDatatableCellTypeConfig<'icon'> {\n  action?: DynamicDatatableCellTypeConfigIconAction\n\n  /**\n   * Element title attribute.\n   */\n  titleAttr?: string | IJexlExprDef\n\n  /**\n   * Screen-reader text.\n   */\n  srOnly?: string | IJexlExprDef\n\n  /**\n   * Css class added to the link element.\n   */\n  linkClass?: string | IJexlExprDef\n\n  /**\n   * seam-icon `iconClass` input.\n   */\n  iconClass?: string | IJexlExprDef\n\n  /**\n   * Can apply pre-defined icon styles.\n   */\n  iconType?: TheSeamIconType\n}\n\n// export class DynamicDatatableCellTypeConfigUrl extends DynamicDatatableCellTypeConfig<'url'> {\n\n// }\n",
            "properties": [
                {
                    "name": "action",
                    "type": "DynamicDatatableCellTypeConfigIconAction",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "iconClass",
                    "type": "string | IJexlExprDef",
                    "optional": true,
                    "description": "<p>seam-icon <code>iconClass</code> input.</p>\n",
                    "line": 62
                },
                {
                    "name": "iconType",
                    "type": "TheSeamIconType",
                    "optional": true,
                    "description": "<p>Can apply pre-defined icon styles.</p>\n",
                    "line": 67
                },
                {
                    "name": "linkClass",
                    "type": "string | IJexlExprDef",
                    "optional": true,
                    "description": "<p>Css class added to the link element.</p>\n",
                    "line": 57
                },
                {
                    "name": "srOnly",
                    "type": "string | IJexlExprDef",
                    "optional": true,
                    "description": "<p>Screen-reader text.</p>\n",
                    "line": 52
                },
                {
                    "name": "titleAttr",
                    "type": "string | IJexlExprDef",
                    "optional": true,
                    "description": "<p>Element title attribute.</p>\n",
                    "line": 47
                },
                {
                    "name": "cssClass",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Classes added to the root cell elements <code>class</code> attribute.</p>\n",
                    "line": 20,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                },
                {
                    "name": "styles",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Styles added to the root cell elements <code>style</code> attribute.</p>\n",
                    "line": 15,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "DynamicDatatableCellTypeConfig",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicDatatableCellTypeConfigInteger",
            "id": "class-DynamicDatatableCellTypeConfigInteger-96498af886b990cd37b5c4f6f88edf05",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts",
            "type": "class",
            "sourceCode": "import { TheSeamIconType } from '../../icon/index'\n\nimport { DynamicDatatableCellActionLink, DynamicDatatableCellActionModal } from './cell-action'\nimport { IDynamicDatatableCellType } from './cell-type'\nimport { IJexlExprDef } from './jexl-expr-def'\n\n// tslint:disable:no-inferrable-types\n\nexport class DynamicDatatableCellTypeConfig<T = IDynamicDatatableCellType> {\n  type: T\n\n  /**\n   * Styles added to the root cell elements `style` attribute.\n   */\n  styles?: string | string[]\n\n  /**\n   * Classes added to the root cell elements `class` attribute.\n   */\n  cssClass?: string | string[]\n}\n\nexport class DynamicDatatableCellTypeConfigString extends DynamicDatatableCellTypeConfig<'string'> {\n  // truncate?: boolean = false\n}\n\nexport class DynamicDatatableCellTypeConfigInteger extends DynamicDatatableCellTypeConfig<'integer'> {\n\n}\n\nexport class DynamicDatatableCellTypeConfigDecimal extends DynamicDatatableCellTypeConfig<'decimal'> {\n\n}\n\nexport class DynamicDatatableCellTypeConfigDate extends DynamicDatatableCellTypeConfig<'date'> {\n  format?: string = 'MM-dd-yyyy h:mm aaa'\n}\n\nexport type DynamicDatatableCellTypeConfigIconAction = DynamicDatatableCellActionLink | DynamicDatatableCellActionModal\n\nexport class DynamicDatatableCellTypeConfigIcon extends DynamicDatatableCellTypeConfig<'icon'> {\n  action?: DynamicDatatableCellTypeConfigIconAction\n\n  /**\n   * Element title attribute.\n   */\n  titleAttr?: string | IJexlExprDef\n\n  /**\n   * Screen-reader text.\n   */\n  srOnly?: string | IJexlExprDef\n\n  /**\n   * Css class added to the link element.\n   */\n  linkClass?: string | IJexlExprDef\n\n  /**\n   * seam-icon `iconClass` input.\n   */\n  iconClass?: string | IJexlExprDef\n\n  /**\n   * Can apply pre-defined icon styles.\n   */\n  iconType?: TheSeamIconType\n}\n\n// export class DynamicDatatableCellTypeConfigUrl extends DynamicDatatableCellTypeConfig<'url'> {\n\n// }\n",
            "properties": [
                {
                    "name": "cssClass",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Classes added to the root cell elements <code>class</code> attribute.</p>\n",
                    "line": 20,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                },
                {
                    "name": "styles",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Styles added to the root cell elements <code>style</code> attribute.</p>\n",
                    "line": 15,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "DynamicDatatableCellTypeConfig",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicDatatableCellTypeConfigString",
            "id": "class-DynamicDatatableCellTypeConfigString-96498af886b990cd37b5c4f6f88edf05",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts",
            "type": "class",
            "sourceCode": "import { TheSeamIconType } from '../../icon/index'\n\nimport { DynamicDatatableCellActionLink, DynamicDatatableCellActionModal } from './cell-action'\nimport { IDynamicDatatableCellType } from './cell-type'\nimport { IJexlExprDef } from './jexl-expr-def'\n\n// tslint:disable:no-inferrable-types\n\nexport class DynamicDatatableCellTypeConfig<T = IDynamicDatatableCellType> {\n  type: T\n\n  /**\n   * Styles added to the root cell elements `style` attribute.\n   */\n  styles?: string | string[]\n\n  /**\n   * Classes added to the root cell elements `class` attribute.\n   */\n  cssClass?: string | string[]\n}\n\nexport class DynamicDatatableCellTypeConfigString extends DynamicDatatableCellTypeConfig<'string'> {\n  // truncate?: boolean = false\n}\n\nexport class DynamicDatatableCellTypeConfigInteger extends DynamicDatatableCellTypeConfig<'integer'> {\n\n}\n\nexport class DynamicDatatableCellTypeConfigDecimal extends DynamicDatatableCellTypeConfig<'decimal'> {\n\n}\n\nexport class DynamicDatatableCellTypeConfigDate extends DynamicDatatableCellTypeConfig<'date'> {\n  format?: string = 'MM-dd-yyyy h:mm aaa'\n}\n\nexport type DynamicDatatableCellTypeConfigIconAction = DynamicDatatableCellActionLink | DynamicDatatableCellActionModal\n\nexport class DynamicDatatableCellTypeConfigIcon extends DynamicDatatableCellTypeConfig<'icon'> {\n  action?: DynamicDatatableCellTypeConfigIconAction\n\n  /**\n   * Element title attribute.\n   */\n  titleAttr?: string | IJexlExprDef\n\n  /**\n   * Screen-reader text.\n   */\n  srOnly?: string | IJexlExprDef\n\n  /**\n   * Css class added to the link element.\n   */\n  linkClass?: string | IJexlExprDef\n\n  /**\n   * seam-icon `iconClass` input.\n   */\n  iconClass?: string | IJexlExprDef\n\n  /**\n   * Can apply pre-defined icon styles.\n   */\n  iconType?: TheSeamIconType\n}\n\n// export class DynamicDatatableCellTypeConfigUrl extends DynamicDatatableCellTypeConfig<'url'> {\n\n// }\n",
            "properties": [
                {
                    "name": "cssClass",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Classes added to the root cell elements <code>class</code> attribute.</p>\n",
                    "line": 20,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                },
                {
                    "name": "styles",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Styles added to the root cell elements <code>style</code> attribute.</p>\n",
                    "line": 15,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "DynamicDatatableCellTypeConfig"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "DynamicDatatableCellTypeConfig",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicDatatableRowActionApi",
            "id": "class-DynamicDatatableRowActionApi-f1951c570fe37ffe5dc43505231d4c05",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/row-action.ts",
            "type": "class",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\nimport { IDynamicDatatableConfirmDialog } from './confirm-dialog'\n\n// tslint:disable:no-inferrable-types\n\nexport class DynamicDatatableRowActionBase<T = string> {\n  type: T\n\n  disabled?: boolean = false\n\n  /**\n   * Show a confirmation dialog before action is executed.\n   *\n   * NOTE: May not be supported by all types.\n   * TODO: Move to its own interface if class are refactored back to interfaces.\n   */\n  confirmDialog?: IDynamicDatatableConfirmDialog\n}\n\nexport class DynamicDatatableRowActionLink extends DynamicDatatableRowActionBase<'link'> {\n  link: string\n\n  /**\n   * Make sure the application provides an `EncryptedAssetReader` that the\n   * datatable's injector can find if linking to encrypted data that needs\n   * additional information to access the link, such as our assets that require\n   * an additional header for decryption.\n   */\n  encrypted?: boolean = false\n\n  /**\n   * If the link is not going to get handled by the current applications router.\n   * If `encrypted` is true, then this may be ignored depending on the\n   * `EncryptedAssetReader` implementation.\n   */\n  external?: boolean = false\n}\n\n/**\n * Call provided api endpoint.\n */\nexport class DynamicDatatableRowActionApi extends DynamicDatatableRowActionBase<'api'> {\n  /**\n   * Api endpoint.\n   */\n  endpoint?: string\n\n  endpointExpr?: string\n\n  method: 'GET' | 'POST' | 'PATCH' | 'DELETE'\n\n  bodyExpr?: string\n\n  paramsExpr?: string\n}\n\n/**\n * Call provided api endpoint.\n */\nexport class DynamicDatatableRowActionModal extends DynamicDatatableRowActionBase<'modal'> {\n  /**\n   * Modal Component.\n   *\n   * If the component class is provided it needs to be an entry component to\n   * allow the factory to be found.\n   *\n   * If passing a string it needs to be provided as a\n   * `IDynamicComponentManifest`. Check `TheSeamDynamicComponentLoader` for how\n   * to provide a manifest. The component that be lazy loaded this way.\n   */\n  component: ComponentType<{}> |  string\n}\n",
            "properties": [
                {
                    "name": "bodyExpr",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "endpoint",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Api endpoint.</p>\n",
                    "line": 46
                },
                {
                    "name": "endpointExpr",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "method",
                    "type": "\"GET\" | \"POST\" | \"PATCH\" | \"DELETE\"",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "paramsExpr",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "confirmDialog",
                    "type": "IDynamicDatatableConfirmDialog",
                    "optional": true,
                    "description": "<p>Show a confirmation dialog before action is executed.</p>\n<p>NOTE: May not be supported by all types.\nTODO: Move to its own interface if class are refactored back to interfaces.</p>\n",
                    "line": 17,
                    "inheritance": {
                        "file": "DynamicDatatableRowActionBase"
                    }
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "DynamicDatatableRowActionBase"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "DynamicDatatableRowActionBase"
                    }
                }
            ],
            "description": "<p>Call provided api endpoint.</p>\n",
            "rawdescription": "Call provided api endpoint.",
            "methods": [],
            "indexSignatures": [],
            "extends": "DynamicDatatableRowActionBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicDatatableRowActionBase",
            "id": "class-DynamicDatatableRowActionBase-f1951c570fe37ffe5dc43505231d4c05",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/row-action.ts",
            "type": "class",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\nimport { IDynamicDatatableConfirmDialog } from './confirm-dialog'\n\n// tslint:disable:no-inferrable-types\n\nexport class DynamicDatatableRowActionBase<T = string> {\n  type: T\n\n  disabled?: boolean = false\n\n  /**\n   * Show a confirmation dialog before action is executed.\n   *\n   * NOTE: May not be supported by all types.\n   * TODO: Move to its own interface if class are refactored back to interfaces.\n   */\n  confirmDialog?: IDynamicDatatableConfirmDialog\n}\n\nexport class DynamicDatatableRowActionLink extends DynamicDatatableRowActionBase<'link'> {\n  link: string\n\n  /**\n   * Make sure the application provides an `EncryptedAssetReader` that the\n   * datatable's injector can find if linking to encrypted data that needs\n   * additional information to access the link, such as our assets that require\n   * an additional header for decryption.\n   */\n  encrypted?: boolean = false\n\n  /**\n   * If the link is not going to get handled by the current applications router.\n   * If `encrypted` is true, then this may be ignored depending on the\n   * `EncryptedAssetReader` implementation.\n   */\n  external?: boolean = false\n}\n\n/**\n * Call provided api endpoint.\n */\nexport class DynamicDatatableRowActionApi extends DynamicDatatableRowActionBase<'api'> {\n  /**\n   * Api endpoint.\n   */\n  endpoint?: string\n\n  endpointExpr?: string\n\n  method: 'GET' | 'POST' | 'PATCH' | 'DELETE'\n\n  bodyExpr?: string\n\n  paramsExpr?: string\n}\n\n/**\n * Call provided api endpoint.\n */\nexport class DynamicDatatableRowActionModal extends DynamicDatatableRowActionBase<'modal'> {\n  /**\n   * Modal Component.\n   *\n   * If the component class is provided it needs to be an entry component to\n   * allow the factory to be found.\n   *\n   * If passing a string it needs to be provided as a\n   * `IDynamicComponentManifest`. Check `TheSeamDynamicComponentLoader` for how\n   * to provide a manifest. The component that be lazy loaded this way.\n   */\n  component: ComponentType<{}> |  string\n}\n",
            "properties": [
                {
                    "name": "confirmDialog",
                    "type": "IDynamicDatatableConfirmDialog",
                    "optional": true,
                    "description": "<p>Show a confirmation dialog before action is executed.</p>\n<p>NOTE: May not be supported by all types.\nTODO: Move to its own interface if class are refactored back to interfaces.</p>\n",
                    "line": 17
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicDatatableRowActionLink",
            "id": "class-DynamicDatatableRowActionLink-f1951c570fe37ffe5dc43505231d4c05",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/row-action.ts",
            "type": "class",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\nimport { IDynamicDatatableConfirmDialog } from './confirm-dialog'\n\n// tslint:disable:no-inferrable-types\n\nexport class DynamicDatatableRowActionBase<T = string> {\n  type: T\n\n  disabled?: boolean = false\n\n  /**\n   * Show a confirmation dialog before action is executed.\n   *\n   * NOTE: May not be supported by all types.\n   * TODO: Move to its own interface if class are refactored back to interfaces.\n   */\n  confirmDialog?: IDynamicDatatableConfirmDialog\n}\n\nexport class DynamicDatatableRowActionLink extends DynamicDatatableRowActionBase<'link'> {\n  link: string\n\n  /**\n   * Make sure the application provides an `EncryptedAssetReader` that the\n   * datatable's injector can find if linking to encrypted data that needs\n   * additional information to access the link, such as our assets that require\n   * an additional header for decryption.\n   */\n  encrypted?: boolean = false\n\n  /**\n   * If the link is not going to get handled by the current applications router.\n   * If `encrypted` is true, then this may be ignored depending on the\n   * `EncryptedAssetReader` implementation.\n   */\n  external?: boolean = false\n}\n\n/**\n * Call provided api endpoint.\n */\nexport class DynamicDatatableRowActionApi extends DynamicDatatableRowActionBase<'api'> {\n  /**\n   * Api endpoint.\n   */\n  endpoint?: string\n\n  endpointExpr?: string\n\n  method: 'GET' | 'POST' | 'PATCH' | 'DELETE'\n\n  bodyExpr?: string\n\n  paramsExpr?: string\n}\n\n/**\n * Call provided api endpoint.\n */\nexport class DynamicDatatableRowActionModal extends DynamicDatatableRowActionBase<'modal'> {\n  /**\n   * Modal Component.\n   *\n   * If the component class is provided it needs to be an entry component to\n   * allow the factory to be found.\n   *\n   * If passing a string it needs to be provided as a\n   * `IDynamicComponentManifest`. Check `TheSeamDynamicComponentLoader` for how\n   * to provide a manifest. The component that be lazy loaded this way.\n   */\n  component: ComponentType<{}> |  string\n}\n",
            "properties": [
                {
                    "name": "encrypted",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Make sure the application provides an <code>EncryptedAssetReader</code> that the\ndatatable&#39;s injector can find if linking to encrypted data that needs\nadditional information to access the link, such as our assets that require\nan additional header for decryption.</p>\n",
                    "line": 29
                },
                {
                    "name": "external",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>If the link is not going to get handled by the current applications router.\nIf <code>encrypted</code> is true, then this may be ignored depending on the\n<code>EncryptedAssetReader</code> implementation.</p>\n",
                    "line": 36
                },
                {
                    "name": "link",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "confirmDialog",
                    "type": "IDynamicDatatableConfirmDialog",
                    "optional": true,
                    "description": "<p>Show a confirmation dialog before action is executed.</p>\n<p>NOTE: May not be supported by all types.\nTODO: Move to its own interface if class are refactored back to interfaces.</p>\n",
                    "line": 17,
                    "inheritance": {
                        "file": "DynamicDatatableRowActionBase"
                    }
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "DynamicDatatableRowActionBase"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "DynamicDatatableRowActionBase"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "DynamicDatatableRowActionBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DynamicDatatableRowActionModal",
            "id": "class-DynamicDatatableRowActionModal-f1951c570fe37ffe5dc43505231d4c05",
            "file": "projects/ui-common/src/lib/datatable-dynamic/models/row-action.ts",
            "type": "class",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\nimport { IDynamicDatatableConfirmDialog } from './confirm-dialog'\n\n// tslint:disable:no-inferrable-types\n\nexport class DynamicDatatableRowActionBase<T = string> {\n  type: T\n\n  disabled?: boolean = false\n\n  /**\n   * Show a confirmation dialog before action is executed.\n   *\n   * NOTE: May not be supported by all types.\n   * TODO: Move to its own interface if class are refactored back to interfaces.\n   */\n  confirmDialog?: IDynamicDatatableConfirmDialog\n}\n\nexport class DynamicDatatableRowActionLink extends DynamicDatatableRowActionBase<'link'> {\n  link: string\n\n  /**\n   * Make sure the application provides an `EncryptedAssetReader` that the\n   * datatable's injector can find if linking to encrypted data that needs\n   * additional information to access the link, such as our assets that require\n   * an additional header for decryption.\n   */\n  encrypted?: boolean = false\n\n  /**\n   * If the link is not going to get handled by the current applications router.\n   * If `encrypted` is true, then this may be ignored depending on the\n   * `EncryptedAssetReader` implementation.\n   */\n  external?: boolean = false\n}\n\n/**\n * Call provided api endpoint.\n */\nexport class DynamicDatatableRowActionApi extends DynamicDatatableRowActionBase<'api'> {\n  /**\n   * Api endpoint.\n   */\n  endpoint?: string\n\n  endpointExpr?: string\n\n  method: 'GET' | 'POST' | 'PATCH' | 'DELETE'\n\n  bodyExpr?: string\n\n  paramsExpr?: string\n}\n\n/**\n * Call provided api endpoint.\n */\nexport class DynamicDatatableRowActionModal extends DynamicDatatableRowActionBase<'modal'> {\n  /**\n   * Modal Component.\n   *\n   * If the component class is provided it needs to be an entry component to\n   * allow the factory to be found.\n   *\n   * If passing a string it needs to be provided as a\n   * `IDynamicComponentManifest`. Check `TheSeamDynamicComponentLoader` for how\n   * to provide a manifest. The component that be lazy loaded this way.\n   */\n  component: ComponentType<{}> |  string\n}\n",
            "properties": [
                {
                    "name": "component",
                    "type": "ComponentType<literal type> | string",
                    "optional": false,
                    "description": "<p>Modal Component.</p>\n<p>If the component class is provided it needs to be an entry component to\nallow the factory to be found.</p>\n<p>If passing a string it needs to be provided as a\n<code>IDynamicComponentManifest</code>. Check <code>TheSeamDynamicComponentLoader</code> for how\nto provide a manifest. The component that be lazy loaded this way.</p>\n",
                    "line": 71
                },
                {
                    "name": "confirmDialog",
                    "type": "IDynamicDatatableConfirmDialog",
                    "optional": true,
                    "description": "<p>Show a confirmation dialog before action is executed.</p>\n<p>NOTE: May not be supported by all types.\nTODO: Move to its own interface if class are refactored back to interfaces.</p>\n",
                    "line": 17,
                    "inheritance": {
                        "file": "DynamicDatatableRowActionBase"
                    }
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "DynamicDatatableRowActionBase"
                    }
                },
                {
                    "name": "type",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "DynamicDatatableRowActionBase"
                    }
                }
            ],
            "description": "<p>Call provided api endpoint.</p>\n",
            "rawdescription": "Call provided api endpoint.",
            "methods": [],
            "indexSignatures": [],
            "extends": "DynamicDatatableRowActionBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EncryptedAssetReader",
            "id": "class-EncryptedAssetReader-3ee1ef55a33fdfc8e1a8077fab2a2765",
            "file": "projects/ui-common/src/lib/shared/models/encrypted-asset-reader.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs'\n\n/**\n *\n * THIS SHOULD BE IMPLEMENTED AND PROVIDED BY APPLICATION USING 'ui-common'.\n *\n * Example:\n * ```\n * @NgModule({\n *   imports: [ ... ],\n *   declarations: [ ... ]\n *   providers: [\n *      ...,\n *     { provide: IEncryptedAssetReaderService useClass: YourAssetService }\n *   ]\n * }\n * ```\n *\n */\n\nexport abstract class EncryptedAssetReader {\n\n  abstract getAssetBlobFromUrl(url: string, detectMimeFromContent: boolean): Observable<Blob>\n\n}\n",
            "properties": [],
            "description": "<p>THIS SHOULD BE IMPLEMENTED AND PROVIDED BY APPLICATION USING &#39;ui-common&#39;.</p>\n<p>Example:</p>\n<p>```</p>\n<ul>\n<li>@NgModule({</li>\n<li>imports: [ ... ],</li>\n<li>declarations: [ ... ]</li>\n<li>providers: [</li>\n<li>...,</li>\n<li>{ provide: IEncryptedAssetReaderService useClass: YourAssetService }</li>\n<li>]</li>\n<li>}</li>\n<li>```</li>\n</ul>\n",
            "rawdescription": "THIS SHOULD BE IMPLEMENTED AND PROVIDED BY APPLICATION USING 'ui-common'.\n\nExample:\n```\n * @NgModule({\n *   imports: [ ... ],\n *   declarations: [ ... ]\n *   providers: [\n *      ...,\n *     { provide: IEncryptedAssetReaderService useClass: YourAssetService }\n *   ]\n * }\n * ```",
            "methods": [
                {
                    "name": "getAssetBlobFromUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        },
                        {
                            "name": "detectMimeFromContent",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Blob>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detectMimeFromContent",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FakeTheSeamLoadingOverlayService",
            "id": "class-FakeTheSeamLoadingOverlayService-693b7b0598477ef20f025b60cbade998",
            "file": "projects/ui-common/src/lib/loading/fake-loading-overlay.ts",
            "type": "class",
            "sourceCode": "import { Observable, throwError } from 'rxjs'\nimport { catchError, finalize, tap } from 'rxjs/operators'\n\nexport class FakeTheSeamLoadingOverlayService {\n\n  private _enabled = false\n\n  constructor() { }\n\n  get enabled(): boolean {\n    return this._enabled\n  }\n\n  public toggle(enabled?: boolean) {\n    const enable = enabled === undefined ? !this.enabled : enabled\n    if (enable && !this.enabled) {\n      this.enable()\n    } else if (!enable && this.enabled) {\n      this.disable()\n    }\n  }\n\n  public enable() {\n    if (this.enabled) { return }\n\n    this._enabled = true\n  }\n\n  public disable() {\n    if (!this.enabled) { return }\n\n    this._enabled = false\n  }\n\n  public while(source: Observable<any>) {\n    this.enable()\n    return source\n      .pipe(\n        tap(() => this.disable()),\n        catchError(err => {\n          this.disable()\n          return throwError(err)\n        }),\n        finalize(() => this.disable())\n      )\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "properties": [
                {
                    "name": "_enabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "disable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "enable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "enabled",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "enabled",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "while",
                    "args": [
                        {
                            "name": "source",
                            "type": "Observable<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "Observable<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "enabled": {
                    "name": "enabled",
                    "getSignature": {
                        "name": "enabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 10
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FakeToastrService",
            "id": "class-FakeToastrService-264fc41e807d9714ca848928cee647a8",
            "file": "projects/ui-common/src/testing/fake-toastr.ts",
            "type": "class",
            "sourceCode": "import { ActiveToast, GlobalConfig, IndividualConfig, ToastContainerDirective } from 'ngx-toastr'\n\nexport class FakeToastrService {\n  toastrConfig: GlobalConfig\n  currentlyActive = 0\n  toasts: ActiveToast<any>[] = []\n  overlayContainer: ToastContainerDirective\n  previousToastMessage: string | undefined\n\n  /** show toast */\n  show(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {},\n    type = ''\n  ) { }\n\n  /** show successful toast */\n  success(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {}\n  ) { }\n\n  /** show error toast */\n  error(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {}\n  ) { }\n\n  /** show info toast */\n  info(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {}\n  ) { }\n\n  /** show warning toast */\n  warning(\n    message?: string,\n    title?: string,\n    override: Partial<IndividualConfig> = {}\n  ) { }\n\n  /**\n   * Remove all or a single toast by id\n   */\n  clear(toastId?: number) { }\n\n  /**\n   * Remove and destroy a single toast by id\n   */\n  remove(toastId: number) { }\n\n  /**\n   * Determines if toast message is already shown\n   */\n  findDuplicate(message: string, resetOnDuplicate: boolean, countDuplicates: boolean) { }\n\n}\n",
            "properties": [
                {
                    "name": "currentlyActive",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "overlayContainer",
                    "type": "ToastContainerDirective",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "previousToastMessage",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "toastrConfig",
                    "type": "GlobalConfig",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "toasts",
                    "defaultValue": "[]",
                    "type": "ActiveToast<any>[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "toastId",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "description": "<p>Remove all or a single toast by id</p>\n",
                    "jsdoctags": [
                        {
                            "name": "toastId",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "override",
                            "type": "Partial<IndividualConfig>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "description": "<p>show error toast </p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "override",
                            "type": "Partial<IndividualConfig>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findDuplicate",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "resetOnDuplicate",
                            "type": "boolean"
                        },
                        {
                            "name": "countDuplicates",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "description": "<p>Determines if toast message is already shown</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "resetOnDuplicate",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "countDuplicates",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "override",
                            "type": "Partial<IndividualConfig>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "description": "<p>show info toast </p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "override",
                            "type": "Partial<IndividualConfig>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "toastId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "description": "<p>Remove and destroy a single toast by id</p>\n",
                    "jsdoctags": [
                        {
                            "name": "toastId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "override",
                            "type": "Partial<IndividualConfig>",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "description": "<p>show toast </p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "override",
                            "type": "Partial<IndividualConfig>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "success",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "override",
                            "type": "Partial<IndividualConfig>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "description": "<p>show successful toast </p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "override",
                            "type": "Partial<IndividualConfig>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warning",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "override",
                            "type": "Partial<IndividualConfig>",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "description": "<p>show warning toast </p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "override",
                            "type": "Partial<IndividualConfig>",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IntervalTimer",
            "id": "class-IntervalTimer-1937a2e0de29600c18606805aec4c135",
            "file": "projects/ui-common/src/lib/utils/polling-ticker.ts",
            "type": "class",
            "sourceCode": "import { isObservable, Observable, Subscriber, Subscription } from 'rxjs'\n\nclass IntervalTimer {\n\n  private _intervalTime: number\n  private _intervalId: number | null = null\n\n  constructor(\n    private _callback: () => void,\n    intervalTime: number,\n    startOnInit: boolean = true\n  ) {\n    this._intervalTime = intervalTime\n    if (startOnInit) {\n      this.start()\n    }\n  }\n\n  set intervalTime(time: number) {\n    this._intervalTime = time\n  }\n\n  public start(): void {\n    if (this._intervalId === null) {\n      this._intervalId = window.setInterval(() => {\n        this._callback()\n      }, this._intervalTime)\n    }\n  }\n\n  public stop(): void {\n    if (this._intervalId !== null) {\n      clearInterval(this._intervalId)\n      this._intervalId = null\n    }\n  }\n\n  public reset(newIntervalTime?: number): void {\n    if (newIntervalTime) {\n      this.intervalTime = newIntervalTime\n    }\n    this.stop()\n    this.start()\n  }\n\n}\n\nexport type PollingActionFn<R> = () => R | Observable<R>\n\n// tslint:disable:no-inferrable-types\nexport class PollingTickerOptions {\n  emitOnInit?: boolean = true\n}\n// tslint:enable:no-inferrable-types\n\n// TODO: Simplify complexity.\n\n/**\n * Call an action and emits the result to its subscriber on an interval or when\n * ticker emits. When the ticker emits, the interval time will reset.\n *\n * When subscribed to, the action will be called and emitted right away unless\n * the `emitOnInit` option is set to false.\n */\nexport function pollingTicker<R>(\n  action: PollingActionFn<R>,\n  pollingInterval?: number,\n  ticker?: Observable<number | void>,\n  options?: PollingTickerOptions\n): Observable<R> {\n  return new Observable((subscriber: Subscriber<R>) => {\n    const _opts = { ...(new PollingTickerOptions()), ...(options || {}) }\n\n    let timer: IntervalTimer | null = null\n    let actionSub: Subscription | null = null\n    let tickerSub: Subscription | null = null\n\n    try {\n      const handleAction = () => {\n        if (timer) { timer.stop() }\n\n        const actionResult = action()\n\n        if (isObservable(actionResult)) {\n          if (actionSub) {\n            actionSub.unsubscribe()\n          }\n          actionSub = actionResult.subscribe(\n            (v: R) => { subscriber.next(v); if (timer) { timer.reset() } },\n            (err) => { subscriber.error(err) },\n            () => {\n              actionSub = null\n              if (timer) { timer.start() }\n            }\n          )\n        } else {\n          subscriber.next(actionResult)\n        }\n        if (timer) { timer.start() }\n      }\n\n      if (_opts.emitOnInit) {\n        handleAction()\n      }\n\n      if (pollingInterval) {\n        timer = new IntervalTimer(() => {\n          handleAction()\n        }, pollingInterval)\n      }\n\n      if (ticker) {\n        tickerSub = ticker.subscribe((newPollingInterval?: number) => {\n          if (newPollingInterval && timer) {\n            timer.stop()\n            if (newPollingInterval) {\n              timer.intervalTime = newPollingInterval\n            }\n          }\n          handleAction()\n          if (timer) { timer.reset() }\n        })\n      }\n    } catch (err) {\n      subscriber.error(err)\n    }\n\n    return () => {\n      if (timer) {\n        timer.stop()\n      }\n      if (actionSub) {\n        actionSub.unsubscribe()\n      }\n      if (tickerSub) {\n        tickerSub.unsubscribe()\n      }\n    }\n  })\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_callback",
                        "type": "function",
                        "function": []
                    },
                    {
                        "name": "intervalTime",
                        "type": "number"
                    },
                    {
                        "name": "startOnInit",
                        "type": "boolean",
                        "defaultValue": "true"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "_callback",
                        "type": "function",
                        "function": [],
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "intervalTime",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "startOnInit",
                        "type": "boolean",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_intervalId",
                    "defaultValue": "null",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_intervalTime",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "reset",
                    "args": [
                        {
                            "name": "newIntervalTime",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "newIntervalTime",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "start",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "intervalTime": {
                    "name": "intervalTime",
                    "setSignature": {
                        "name": "intervalTime",
                        "type": "void",
                        "args": [
                            {
                                "name": "time",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "jsdoctags": [
                            {
                                "name": "time",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ModalConfig",
            "id": "class-ModalConfig-6774b4dd3913ea496a5c8eaef094284a",
            "file": "projects/ui-common/src/lib/modal/modal-config.ts",
            "type": "class",
            "sourceCode": "import { Direction } from '@angular/cdk/bidi'\nimport { ComponentType } from '@angular/cdk/overlay'\nimport { InjectionToken, ViewContainerRef } from '@angular/core'\n\nimport { ModalContainerComponent } from './modal-container/modal-container.component'\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog'\n\n/** Possible overrides for a dialog's position. */\nexport interface IModalPosition {\n  top?: string\n  bottom?: string\n  left?: string\n  right?: string\n}\n\n// tslint:disable:no-inferrable-types\nexport class ModalConfig<D = any> {\n  /** Component to use as the container for the dialog. */\n  containerComponent?: ComponentType<ModalContainerComponent>\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef\n\n  /** The id of the dialog. */\n  id?: string\n\n  /** The ARIA role of the dialog. */\n  role?: DialogRole = 'dialog'\n\n  /** Custom class(es) for the overlay panel. */\n  panelClass?: string | string[] = ''\n\n  /** Whether the dialog has a background. */\n  hasBackdrop?: boolean = true\n\n  /** Custom class(es) for the backdrop. */\n  backdropClass?: string | undefined = ''\n\n  /** Whether the dialog can be closed by user interaction. */\n  disableClose?: boolean = false\n\n  /** The width of the dialog. */\n  width?: string = '100%'\n\n  /** The height of the dialog. */\n  height?: string = ''\n\n  /** The minimum width of the dialog. */\n  minWidth?: string | number = ''\n\n  /** The minimum height of the dialog. */\n  minHeight?: string | number = ''\n\n  /** The maximum width of the dialog. */\n  maxWidth?: string | number = ''\n\n  /** The maximum height of the dialog. */\n  maxHeight?: string | number = ''\n\n  /** The position of the dialog. */\n  position?: IModalPosition\n\n  /** Data to be injected into the dialog content. */\n  data?: D | null = null\n\n  /** The layout direction for the dialog content. */\n  direction?: Direction\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true\n\n  /** Duration of the enter animation. Has to be a valid CSS value (e.g. 100ms). */\n  enterAnimationDuration?: string = '225ms'\n\n  /** Duration of the exit animation. Has to be a valid CSS value (e.g. 50ms). */\n  exitAnimationDuration?: string = '225ms'\n\n  /** Bootstrap modal sizes */\n  modalSize?: 'sm' | 'lg' | 'xl'\n}\n// tslint:enable:no-inferrable-types\n\nexport function mergeModalConfigs(a: ModalConfig, b: ModalConfig) {\n  return { ...a, ...b }\n}\n\n\n/** Injection token that can be used to specify modal options. */\nexport const LIB_MODAL_CONFIG = new InjectionToken<ModalConfig>('seamModalConfig')\n",
            "properties": [
                {
                    "name": "ariaDescribedBy",
                    "defaultValue": "null",
                    "type": "string | null",
                    "optional": true,
                    "description": "<p>ID of the element that describes the dialog. </p>\n",
                    "line": 77
                },
                {
                    "name": "ariaLabel",
                    "defaultValue": "null",
                    "type": "string | null",
                    "optional": true,
                    "description": "<p>Aria label to assign to the dialog element </p>\n",
                    "line": 80
                },
                {
                    "name": "autoFocus",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Whether the dialog should focus the first focusable element on open. </p>\n",
                    "line": 83
                },
                {
                    "name": "backdropClass",
                    "defaultValue": "''",
                    "type": "string | undefined",
                    "optional": true,
                    "description": "<p>Custom class(es) for the backdrop. </p>\n",
                    "line": 44
                },
                {
                    "name": "containerComponent",
                    "type": "ComponentType<ModalContainerComponent>",
                    "optional": true,
                    "description": "<p>Component to use as the container for the dialog. </p>\n",
                    "line": 21
                },
                {
                    "name": "data",
                    "defaultValue": "null",
                    "type": "D | null",
                    "optional": true,
                    "description": "<p>Data to be injected into the dialog content. </p>\n",
                    "line": 71
                },
                {
                    "name": "direction",
                    "type": "Direction",
                    "optional": true,
                    "description": "<p>The layout direction for the dialog content. </p>\n",
                    "line": 74
                },
                {
                    "name": "disableClose",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Whether the dialog can be closed by user interaction. </p>\n",
                    "line": 47
                },
                {
                    "name": "enterAnimationDuration",
                    "defaultValue": "'225ms'",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Duration of the enter animation. Has to be a valid CSS value (e.g. 100ms). </p>\n",
                    "line": 86
                },
                {
                    "name": "exitAnimationDuration",
                    "defaultValue": "'225ms'",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Duration of the exit animation. Has to be a valid CSS value (e.g. 50ms). </p>\n",
                    "line": 89
                },
                {
                    "name": "hasBackdrop",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Whether the dialog has a background. </p>\n",
                    "line": 41
                },
                {
                    "name": "height",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": true,
                    "description": "<p>The height of the dialog. </p>\n",
                    "line": 53
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "<p>The id of the dialog. </p>\n",
                    "line": 32
                },
                {
                    "name": "maxHeight",
                    "defaultValue": "''",
                    "type": "string | number",
                    "optional": true,
                    "description": "<p>The maximum height of the dialog. </p>\n",
                    "line": 65
                },
                {
                    "name": "maxWidth",
                    "defaultValue": "''",
                    "type": "string | number",
                    "optional": true,
                    "description": "<p>The maximum width of the dialog. </p>\n",
                    "line": 62
                },
                {
                    "name": "minHeight",
                    "defaultValue": "''",
                    "type": "string | number",
                    "optional": true,
                    "description": "<p>The minimum height of the dialog. </p>\n",
                    "line": 59
                },
                {
                    "name": "minWidth",
                    "defaultValue": "''",
                    "type": "string | number",
                    "optional": true,
                    "description": "<p>The minimum width of the dialog. </p>\n",
                    "line": 56
                },
                {
                    "name": "modalSize",
                    "type": "\"sm\" | \"lg\" | \"xl\"",
                    "optional": true,
                    "description": "<p>Bootstrap modal sizes </p>\n",
                    "line": 92
                },
                {
                    "name": "panelClass",
                    "defaultValue": "''",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "<p>Custom class(es) for the overlay panel. </p>\n",
                    "line": 38
                },
                {
                    "name": "position",
                    "type": "IModalPosition",
                    "optional": true,
                    "description": "<p>The position of the dialog. </p>\n",
                    "line": 68
                },
                {
                    "name": "role",
                    "defaultValue": "'dialog'",
                    "type": "DialogRole",
                    "optional": true,
                    "description": "<p>The ARIA role of the dialog. </p>\n",
                    "line": 35
                },
                {
                    "name": "viewContainerRef",
                    "type": "ViewContainerRef",
                    "optional": true,
                    "description": "<p>Where the attached component should live in Angular&#39;s <em>logical</em> component tree.\nThis affects what is available for injection and the change detection order for the\ncomponent instantiated inside of the dialog. This does not affect where the dialog\ncontent will be rendered.</p>\n",
                    "line": 29
                },
                {
                    "name": "width",
                    "defaultValue": "'100%'",
                    "type": "string",
                    "optional": true,
                    "description": "<p>The width of the dialog. </p>\n",
                    "line": 50
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ModalRef",
            "id": "class-ModalRef-a0ea7e7db3a719595c209841e11e63c4",
            "file": "projects/ui-common/src/lib/modal/modal-ref.ts",
            "type": "class",
            "sourceCode": "import { ESCAPE } from '@angular/cdk/keycodes'\nimport { GlobalPositionStrategy, OverlayRef, OverlaySizeConfig } from '@angular/cdk/overlay'\nimport { Observable } from 'rxjs'\nimport { filter, map } from 'rxjs/operators'\n\nimport { IModalPosition } from './modal-config'\nimport { ModalContainerComponent } from './modal-container/modal-container.component'\n\n/** Unique id for the created dialog. */\nlet uniqueId = 0\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nexport class ModalRef<T, R = any> {\n  /** The instance of the component in the dialog. */\n  componentInstance: T | null\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined\n\n  constructor(\n    public _overlayRef: OverlayRef,\n    protected _containerInstance: ModalContainerComponent,\n    readonly id: string = `seam-modal-${uniqueId++}`) {\n    // Pass the id along to the container.\n    _containerInstance._id = id\n\n    const _bootstrapBackdropClickListener = (e) => {\n      if (!this.disableClose) {\n        this.close()\n      }\n    }\n\n    // If the dialog has a backdrop, handle clicks from the backdrop.\n    if (_containerInstance._config.hasBackdrop) {\n      _overlayRef.backdropClick().subscribe(() => {\n        if (!this.disableClose) {\n          this.close()\n        }\n      })\n\n      // NOTE: For current bootstrap style modal\n      _overlayRef.overlayElement.addEventListener('click', _bootstrapBackdropClickListener)\n    }\n\n    this.beforeClosed().subscribe(() => {\n      this._overlayRef.detachBackdrop()\n    })\n\n    this.afterClosed().subscribe(() => {\n      if (this._containerInstance._config.hasBackdrop) {\n        this._overlayRef.overlayElement.removeEventListener('click', _bootstrapBackdropClickListener)\n      }\n      this._overlayRef.detach()\n      this._overlayRef.dispose()\n      this.componentInstance = null\n    })\n\n    // Close when escape keydown event occurs\n    _overlayRef.keydownEvents()\n      // tslint:disable-next-line:deprecation\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close())\n  }\n\n  /** Gets an observable that emits when the overlay's backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick()\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult\n    this._containerInstance._startExiting()\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: IModalPosition): this {\n    const strategy = this._getPositionStrategy()\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right)\n    } else {\n      strategy.centerHorizontally()\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom)\n    } else {\n      strategy.centerVertically()\n    }\n\n    this._overlayRef.updatePosition()\n\n    return this\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents()\n  }\n\n  /**\n   * Updates the dialog's width and height, defined, min and max.\n   * @param size New size for the overlay.\n   */\n  updateSize(size: OverlaySizeConfig): this {\n    if (size.width) {\n      // tslint:disable-next-line:deprecation\n      this._getPositionStrategy().width(size.width.toString())\n    }\n    if (size.height) {\n      // tslint:disable-next-line:deprecation\n      this._getPositionStrategy().height(size.height.toString())\n    }\n    this._overlayRef.updateSize(size)\n    this._overlayRef.updatePosition()\n    return this\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy\n  }\n\n  /** Gets an observable that emits when dialog begins opening. */\n  beforeOpened(): Observable<void> {\n    return this._containerInstance._beforeEnter.asObservable()\n  }\n\n  /** Gets an observable that emits when dialog is finished opening. */\n  afterOpened(): Observable<void> {\n    return this._containerInstance._afterEnter.asObservable()\n  }\n\n  /** Gets an observable that emits when dialog begins closing. */\n  beforeClosed(): Observable<R | undefined> {\n    return this._containerInstance._beforeExit.pipe(map(() => this._result))\n  }\n\n  /** Gets an observable that emits when dialog is finished closing. */\n  afterClosed(): Observable<R | undefined> {\n    return this._containerInstance._afterExit.pipe(map(() => this._result))\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_overlayRef",
                        "type": "OverlayRef"
                    },
                    {
                        "name": "_containerInstance",
                        "type": "ModalContainerComponent"
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "defaultValue": "`seam-modal-${uniqueId++}`"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "_overlayRef",
                        "type": "OverlayRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_containerInstance",
                        "type": "ModalContainerComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "defaultValue": "`seam-modal-${uniqueId++}`",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_result",
                    "type": "R | undefined",
                    "optional": false,
                    "description": "<p>Result to be passed to afterClosed. </p>\n",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "componentInstance",
                    "type": "T | null",
                    "optional": false,
                    "description": "<p>The instance of the component in the dialog. </p>\n",
                    "line": 17
                },
                {
                    "name": "disableClose",
                    "type": "boolean | undefined",
                    "optional": false,
                    "description": "<p>Whether the user is allowed to close the dialog. </p>\n",
                    "line": 20
                }
            ],
            "description": "<p>Reference to a dialog opened via the Dialog service.</p>\n",
            "rawdescription": "Reference to a dialog opened via the Dialog service.",
            "methods": [
                {
                    "name": "_getPositionStrategy",
                    "args": [],
                    "optional": false,
                    "returnType": "GlobalPositionStrategy",
                    "typeParameters": [],
                    "line": 134,
                    "description": "<p>Fetches the position strategy object from the overlay ref. </p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "afterClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R | undefined>",
                    "typeParameters": [],
                    "line": 154,
                    "description": "<p>Gets an observable that emits when dialog is finished closing. </p>\n"
                },
                {
                    "name": "afterOpened",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 144,
                    "description": "<p>Gets an observable that emits when dialog is finished opening. </p>\n"
                },
                {
                    "name": "backdropClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MouseEvent>",
                    "typeParameters": [],
                    "line": 71,
                    "description": "<p>Gets an observable that emits when the overlay&#39;s backdrop has been clicked. </p>\n"
                },
                {
                    "name": "beforeClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R | undefined>",
                    "typeParameters": [],
                    "line": 149,
                    "description": "<p>Gets an observable that emits when dialog begins closing. </p>\n"
                },
                {
                    "name": "beforeOpened",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 139,
                    "description": "<p>Gets an observable that emits when dialog begins opening. </p>\n"
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "dialogResult",
                            "type": "R",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "description": "<p>Close the dialog.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2402,
                                "end": 2414,
                                "flags": 0,
                                "escapedText": "dialogResult"
                            },
                            "type": "R",
                            "optional": true,
                            "tagName": {
                                "pos": 2396,
                                "end": 2401,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional result to return to the dialog opener.</p>\n"
                        }
                    ]
                },
                {
                    "name": "keydownEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<KeyboardEvent>",
                    "typeParameters": [],
                    "line": 111,
                    "description": "<p>Gets an observable that emits when keydown events are targeted on the overlay.</p>\n"
                },
                {
                    "name": "updatePosition",
                    "args": [
                        {
                            "name": "position",
                            "type": "IModalPosition",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 88,
                    "description": "<p>Updates the dialog&#39;s position.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2638,
                                "end": 2646,
                                "flags": 0,
                                "escapedText": "position"
                            },
                            "type": "IModalPosition",
                            "optional": true,
                            "tagName": {
                                "pos": 2632,
                                "end": 2637,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>New dialog position.</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateSize",
                    "args": [
                        {
                            "name": "size",
                            "type": "OverlaySizeConfig"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 119,
                    "description": "<p>Updates the dialog&#39;s width and height, defined, min and max.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3503,
                                "end": 3507,
                                "flags": 0,
                                "escapedText": "size"
                            },
                            "type": "OverlaySizeConfig",
                            "tagName": {
                                "pos": 3497,
                                "end": 3502,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>New size for the overlay.</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PollingTickerOptions",
            "id": "class-PollingTickerOptions-1937a2e0de29600c18606805aec4c135",
            "file": "projects/ui-common/src/lib/utils/polling-ticker.ts",
            "type": "class",
            "sourceCode": "import { isObservable, Observable, Subscriber, Subscription } from 'rxjs'\n\nclass IntervalTimer {\n\n  private _intervalTime: number\n  private _intervalId: number | null = null\n\n  constructor(\n    private _callback: () => void,\n    intervalTime: number,\n    startOnInit: boolean = true\n  ) {\n    this._intervalTime = intervalTime\n    if (startOnInit) {\n      this.start()\n    }\n  }\n\n  set intervalTime(time: number) {\n    this._intervalTime = time\n  }\n\n  public start(): void {\n    if (this._intervalId === null) {\n      this._intervalId = window.setInterval(() => {\n        this._callback()\n      }, this._intervalTime)\n    }\n  }\n\n  public stop(): void {\n    if (this._intervalId !== null) {\n      clearInterval(this._intervalId)\n      this._intervalId = null\n    }\n  }\n\n  public reset(newIntervalTime?: number): void {\n    if (newIntervalTime) {\n      this.intervalTime = newIntervalTime\n    }\n    this.stop()\n    this.start()\n  }\n\n}\n\nexport type PollingActionFn<R> = () => R | Observable<R>\n\n// tslint:disable:no-inferrable-types\nexport class PollingTickerOptions {\n  emitOnInit?: boolean = true\n}\n// tslint:enable:no-inferrable-types\n\n// TODO: Simplify complexity.\n\n/**\n * Call an action and emits the result to its subscriber on an interval or when\n * ticker emits. When the ticker emits, the interval time will reset.\n *\n * When subscribed to, the action will be called and emitted right away unless\n * the `emitOnInit` option is set to false.\n */\nexport function pollingTicker<R>(\n  action: PollingActionFn<R>,\n  pollingInterval?: number,\n  ticker?: Observable<number | void>,\n  options?: PollingTickerOptions\n): Observable<R> {\n  return new Observable((subscriber: Subscriber<R>) => {\n    const _opts = { ...(new PollingTickerOptions()), ...(options || {}) }\n\n    let timer: IntervalTimer | null = null\n    let actionSub: Subscription | null = null\n    let tickerSub: Subscription | null = null\n\n    try {\n      const handleAction = () => {\n        if (timer) { timer.stop() }\n\n        const actionResult = action()\n\n        if (isObservable(actionResult)) {\n          if (actionSub) {\n            actionSub.unsubscribe()\n          }\n          actionSub = actionResult.subscribe(\n            (v: R) => { subscriber.next(v); if (timer) { timer.reset() } },\n            (err) => { subscriber.error(err) },\n            () => {\n              actionSub = null\n              if (timer) { timer.start() }\n            }\n          )\n        } else {\n          subscriber.next(actionResult)\n        }\n        if (timer) { timer.start() }\n      }\n\n      if (_opts.emitOnInit) {\n        handleAction()\n      }\n\n      if (pollingInterval) {\n        timer = new IntervalTimer(() => {\n          handleAction()\n        }, pollingInterval)\n      }\n\n      if (ticker) {\n        tickerSub = ticker.subscribe((newPollingInterval?: number) => {\n          if (newPollingInterval && timer) {\n            timer.stop()\n            if (newPollingInterval) {\n              timer.intervalTime = newPollingInterval\n            }\n          }\n          handleAction()\n          if (timer) { timer.reset() }\n        })\n      }\n    } catch (err) {\n      subscriber.error(err)\n    }\n\n    return () => {\n      if (timer) {\n        timer.stop()\n      }\n      if (actionSub) {\n        actionSub.unsubscribe()\n      }\n      if (tickerSub) {\n        tickerSub.unsubscribe()\n      }\n    }\n  })\n}\n",
            "properties": [
                {
                    "name": "emitOnInit",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 52
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Refreshable",
            "id": "class-Refreshable-cbded4ce54e97f2e31058f543918993e",
            "file": "projects/ui-common/src/lib/utils/refreshable.ts",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, isObservable, Observable, Subject } from 'rxjs'\nimport { distinctUntilChanged, mapTo, publishReplay, refCount, shareReplay, skip, take, tap } from 'rxjs/operators'\n\nimport { tapFirst } from './operators/tap-first'\nimport { pollingTicker } from './polling-ticker'\n\nexport class Refreshable<T> {\n\n  private _initialized = false\n  private _pollingInterval = new BehaviorSubject<number>(0)\n  private _ticker = new Subject<void>()\n  private _pending = new BehaviorSubject<boolean>(false)\n\n  public data$: Observable<T>\n  public pending$: Observable<boolean>\n\n  constructor(\n    action: () => (T | Observable<T>),\n    pollingInterval?: number\n  ) {\n    if (pollingInterval !== null && pollingInterval !== undefined) {\n      this._pollingInterval.next(pollingInterval)\n    }\n\n    this.pending$ = this._pending.asObservable()\n      .pipe(\n        distinctUntilChanged(),\n        shareReplay(1)\n      )\n\n    this.data$ = pollingTicker(this._actionHandler(action), pollingInterval, this._ticker)\n      .pipe(\n        tapFirst(() => this._initialized = true),\n        publishReplay(),\n        refCount()\n      )\n  }\n\n  get initialized(): boolean { return this._initialized }\n\n  /**\n   * Intercepts the action call to monitor pending state\n   */\n  private _actionHandler = (action: () => (T | Observable<T>)) => {\n    return () => {\n      this._pending.next(true)\n\n      const actionResult = action()\n      if (isObservable(actionResult)) {\n        return actionResult.pipe(tap(() => { this._pending.next(false) }))\n      } else {\n        this._pending.next(true)\n        return actionResult\n      }\n    }\n  }\n\n  /**\n   * Selects the data observable\n   */\n  public select(refresh?: boolean): Observable<T> {\n    if (refresh && this._initialized && !this._pending.value) { this._ticker.next() }\n    return this.data$\n  }\n\n  public refresh(): Observable<void> {\n    let result$: Observable<any>\n\n    if (this._initialized) {\n      // TODO: Add a test and maybe refactor this to be more clear. It worked in\n      //  my manual tests, but there may be some situations where this doesn't\n      //  work, since the ticker isn't the only way to trigger a refresh. Right\n      //  now it should be fine, but if an async operator is added to be run\n      //  each time `data$` is subscribed to, then this could fail if the data\n      //  emits one extra time before the ticker is triggered.\n      let _polled = false\n      result$ = this.data$\n        .pipe(\n          tap(_ => !_polled && (_polled = true) && this._ticker.next()),\n          skip(1)\n        )\n    } else {\n      result$ = this.data$\n    }\n\n    return result$\n      .pipe(\n        take(1),\n        mapTo(undefined)\n      )\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "action",
                        "type": "function",
                        "function": []
                    },
                    {
                        "name": "pollingInterval",
                        "type": "number",
                        "optional": true
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "action",
                        "type": "function",
                        "function": [],
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pollingInterval",
                        "type": "number",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_actionHandler",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "<p>Intercepts the action call to monitor pending state</p>\n",
                    "line": 44,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_initialized",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_pending",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_pollingInterval",
                    "defaultValue": "new BehaviorSubject<number>(0)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_ticker",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "data$",
                    "type": "Observable<T>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pending$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "refresh",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 61,
                    "description": "<p>Selects the data observable</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "refresh",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "initialized": {
                    "name": "initialized",
                    "getSignature": {
                        "name": "initialized",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 39
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TheSeamButtonBase",
            "id": "class-TheSeamButtonBase-91c78cdf906aa48f8d19b7a3f2c3a954",
            "file": "projects/ui-common/src/lib/buttons/button/button.component.ts",
            "type": "class",
            "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y'\nimport { ChangeDetectionStrategy, Component, ElementRef, Input, OnDestroy, Renderer2 } from '@angular/core'\n\nimport {\n  CanDisableCtor,\n  CanSizeCtor,\n  CanThemeCtor,\n  mixinDisabled,\n  mixinSize,\n  mixinTheme\n} from '../../core/common-behaviors'\n\nclass TheSeamButtonBase implements OnDestroy {\n  constructor(\n    public _elementRef: ElementRef,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    this._focusMonitor.monitor(this._elementRef, true)\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef)\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus()\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement\n  }\n}\n\nconst _TheSeamButtonMixinBase: CanDisableCtor & CanThemeCtor & CanSizeCtor &\n    typeof TheSeamButtonBase = mixinSize(mixinTheme(mixinDisabled(TheSeamButtonBase), 'btn'), 'btn')\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seamButton]',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  exportAs: 'seamButton',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled', 'theme', 'size' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    '[attr.type]': 'type',\n    'class': 'btn',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ButtonComponent extends _TheSeamButtonMixinBase implements OnDestroy {\n\n  /** ARIA type for the button. */\n  @Input() type: 'button' | 'submit' | 'reset' = 'button'\n\n  constructor(\n    _elementRef: ElementRef,\n    _focusMonitor: FocusMonitor,\n    _renderer: Renderer2\n  ) { super(_elementRef, _focusMonitor, _renderer) }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n}\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'a[seamButton]',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  exportAs: 'seamButton,seamButtonBaseAnchor',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled', 'theme', 'size' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    'class': 'btn',\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AnchorButtonComponent extends _TheSeamButtonMixinBase implements OnDestroy {\n\n  /** Tabindex of the button. */\n  @Input() tabIndex: number\n\n  // TODO: Consider adding dev warning for `window.opener` exploit. Could maybe\n  // add `rel` it if the href isn't on the current domain or not specified in an\n  // injected list. This probably isn't needed and may be to strict for our\n  // usage, so I am just adding this as a reminder to think about it.\n  //\n  // rel=\"noopener noreferrer\"\n\n  constructor(\n    _elementRef: ElementRef,\n    _focusMonitor: FocusMonitor,\n    _renderer: Renderer2\n  ) { super(_elementRef, _focusMonitor, _renderer) }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault()\n      event.stopImmediatePropagation()\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_focusMonitor",
                    "type": "FocusMonitor",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_renderer",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_getHostElement",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "description": "<p>Focuses the button. </p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "TheSeamCheckboxChange",
            "id": "class-TheSeamCheckboxChange-c52aee2ea827f077213f0d5b5bddac17",
            "file": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
            "type": "class",
            "sourceCode": "import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y'\nimport { coerceBooleanProperty } from '@angular/cdk/coercion'\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms'\n\nimport { CanDisable, CanDisableCtor, HasTabIndex, HasTabIndexCtor, mixinDisabled, mixinTabIndex } from '../core/common-behaviors/index'\n\n// NOTE: Partially based on mat-checkbox: https://github.com/angular/components/blob/master/src/material/checkbox/checkbox.ts\n\n/** Change event object emitted by TheSeamCheckboxComponent. */\nexport class TheSeamCheckboxChange {\n  /** The source TheSeamCheckboxComponent of the event. */\n  source: TheSeamCheckboxComponent\n  /** The new `checked` value of the checkbox. */\n  checked: boolean\n}\n\nexport const THESEAM_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => TheSeamCheckboxComponent),\n  multi: true\n}\n\nclass TheSeamCheckboxComponentBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatCheckboxMixinBase: HasTabIndexCtor & CanDisableCtor &\n  typeof TheSeamCheckboxComponentBase =\n    mixinTabIndex(mixinDisabled(TheSeamCheckboxComponentBase))\n\nlet _uid = 0\n\n/**\n * A Checkbox.\n */\n@Component({\n  selector: 'seam-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss'],\n  exportAs: 'seamCheckbox',\n  host: {\n    '[attr.tabindex]': 'null',\n    'class': 'custom-control custom-checkbox'\n  },\n  providers: [ THESEAM_CHECKBOX_CONTROL_VALUE_ACCESSOR ],\n  inputs: [ 'tabIndex' ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TheSeamCheckboxComponent extends _MatCheckboxMixinBase\n  implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor, CanDisable, HasTabIndex {\n\n  /** @ignore */\n  private _uid = `seam-chk-${_uid++}`\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id?: string = this._uid\n\n  /** Returns the unique id for the input. */\n  get inputId(): string { return `${this.id || this._uid}` }\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel?: string = ''\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby?: string | null = null\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value) }\n  /** @ignore */\n  private _required: boolean\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value\n      this._changeDetectorRef.markForCheck()\n    }\n  }\n  /** @ignore */\n  private _checked = false\n\n  /**\n   * Whether the checkbox is disabled.\n   */\n  // This fully overrides the implementation provided by mixinDisabled, but the\n  // mixin is still required because mixinTabIndex requires it.\n  @Input()\n  get disabled(): boolean { return this._disabled }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value)\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue\n      this._changeDetectorRef.markForCheck()\n    }\n  }\n  /** @ignore */\n  private _disabled = false\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate }\n  set indeterminate(value: boolean) {\n    const changed = value !== this._indeterminate\n    this._indeterminate = coerceBooleanProperty(value)\n\n    if (changed) {\n      this.indeterminateChange.emit(this._indeterminate)\n    }\n\n    this._syncIndeterminate(this._indeterminate)\n  }\n  /** @ignore */\n  private _indeterminate = false\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change = new EventEmitter<TheSeamCheckboxChange>()\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>()\n\n  /** The value attribute of the native input element */\n  @Input() value: string\n\n  /**\n   * The native `<input type=\"checkbox\">` element\n   * @ignore\n   */\n  @ViewChild('input', { static: true }) _inputElement: ElementRef<HTMLInputElement>\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @ignore\n   */\n  _onTouched: () => any = () => {}\n\n  /** @ignore */\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {}\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusMonitor: FocusMonitor,\n    private _ngZone: NgZone,\n    @Attribute('tabindex') tabIndex: string\n  ) {\n    super(elementRef)\n\n    this.tabIndex = parseInt(tabIndex, 10) || 0\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched()\n          _changeDetectorRef.markForCheck()\n        })\n      }\n    })\n  }\n\n  /** @ignore */\n  ngOnInit() { }\n\n  /** @ignore */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef)\n  }\n\n  /** @ignore */\n  ngAfterViewInit() {\n    this._syncIndeterminate(this._indeterminate)\n  }\n\n  /**\n   * Method being called whenever the label text changes.\n   * @ignore\n   */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges()\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  /** @ignore */\n  writeValue(value: any) {\n    this.checked = !!value\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  /** @ignore */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  /** @ignore */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  /** @ignore */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled\n  }\n\n  /** @ignore */\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false')\n  }\n\n  /** @ignore */\n  private _emitChangeEvent() {\n    const event = new TheSeamCheckboxChange()\n    event.source = this\n    event.checked = this.checked\n\n    this._controlValueAccessorChangeFn(this.checked)\n    this.change.emit(event)\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @ignore\n   */\n  _onInputClick(event: Event) {\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate) {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false\n          this.indeterminateChange.emit(this._indeterminate)\n        })\n      }\n\n      this.toggle()\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent()\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options)\n  }\n\n  /** @ignore */\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation()\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   * @ignore\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._inputElement\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value\n    }\n  }\n\n}\n",
            "properties": [
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>The new <code>checked</code> value of the checkbox. </p>\n",
                    "line": 30
                },
                {
                    "name": "source",
                    "type": "TheSeamCheckboxComponent",
                    "optional": false,
                    "description": "<p>The source TheSeamCheckboxComponent of the event. </p>\n",
                    "line": 28
                }
            ],
            "description": "<p>Change event object emitted by TheSeamCheckboxComponent. </p>\n",
            "rawdescription": "Change event object emitted by TheSeamCheckboxComponent. ",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TheSeamCheckboxComponentBase",
            "id": "class-TheSeamCheckboxComponentBase-c52aee2ea827f077213f0d5b5bddac17",
            "file": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
            "type": "class",
            "sourceCode": "import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y'\nimport { coerceBooleanProperty } from '@angular/cdk/coercion'\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms'\n\nimport { CanDisable, CanDisableCtor, HasTabIndex, HasTabIndexCtor, mixinDisabled, mixinTabIndex } from '../core/common-behaviors/index'\n\n// NOTE: Partially based on mat-checkbox: https://github.com/angular/components/blob/master/src/material/checkbox/checkbox.ts\n\n/** Change event object emitted by TheSeamCheckboxComponent. */\nexport class TheSeamCheckboxChange {\n  /** The source TheSeamCheckboxComponent of the event. */\n  source: TheSeamCheckboxComponent\n  /** The new `checked` value of the checkbox. */\n  checked: boolean\n}\n\nexport const THESEAM_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => TheSeamCheckboxComponent),\n  multi: true\n}\n\nclass TheSeamCheckboxComponentBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatCheckboxMixinBase: HasTabIndexCtor & CanDisableCtor &\n  typeof TheSeamCheckboxComponentBase =\n    mixinTabIndex(mixinDisabled(TheSeamCheckboxComponentBase))\n\nlet _uid = 0\n\n/**\n * A Checkbox.\n */\n@Component({\n  selector: 'seam-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss'],\n  exportAs: 'seamCheckbox',\n  host: {\n    '[attr.tabindex]': 'null',\n    'class': 'custom-control custom-checkbox'\n  },\n  providers: [ THESEAM_CHECKBOX_CONTROL_VALUE_ACCESSOR ],\n  inputs: [ 'tabIndex' ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TheSeamCheckboxComponent extends _MatCheckboxMixinBase\n  implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor, CanDisable, HasTabIndex {\n\n  /** @ignore */\n  private _uid = `seam-chk-${_uid++}`\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id?: string = this._uid\n\n  /** Returns the unique id for the input. */\n  get inputId(): string { return `${this.id || this._uid}` }\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel?: string = ''\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby?: string | null = null\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value) }\n  /** @ignore */\n  private _required: boolean\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value\n      this._changeDetectorRef.markForCheck()\n    }\n  }\n  /** @ignore */\n  private _checked = false\n\n  /**\n   * Whether the checkbox is disabled.\n   */\n  // This fully overrides the implementation provided by mixinDisabled, but the\n  // mixin is still required because mixinTabIndex requires it.\n  @Input()\n  get disabled(): boolean { return this._disabled }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value)\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue\n      this._changeDetectorRef.markForCheck()\n    }\n  }\n  /** @ignore */\n  private _disabled = false\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate }\n  set indeterminate(value: boolean) {\n    const changed = value !== this._indeterminate\n    this._indeterminate = coerceBooleanProperty(value)\n\n    if (changed) {\n      this.indeterminateChange.emit(this._indeterminate)\n    }\n\n    this._syncIndeterminate(this._indeterminate)\n  }\n  /** @ignore */\n  private _indeterminate = false\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change = new EventEmitter<TheSeamCheckboxChange>()\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>()\n\n  /** The value attribute of the native input element */\n  @Input() value: string\n\n  /**\n   * The native `<input type=\"checkbox\">` element\n   * @ignore\n   */\n  @ViewChild('input', { static: true }) _inputElement: ElementRef<HTMLInputElement>\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @ignore\n   */\n  _onTouched: () => any = () => {}\n\n  /** @ignore */\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {}\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusMonitor: FocusMonitor,\n    private _ngZone: NgZone,\n    @Attribute('tabindex') tabIndex: string\n  ) {\n    super(elementRef)\n\n    this.tabIndex = parseInt(tabIndex, 10) || 0\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched()\n          _changeDetectorRef.markForCheck()\n        })\n      }\n    })\n  }\n\n  /** @ignore */\n  ngOnInit() { }\n\n  /** @ignore */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef)\n  }\n\n  /** @ignore */\n  ngAfterViewInit() {\n    this._syncIndeterminate(this._indeterminate)\n  }\n\n  /**\n   * Method being called whenever the label text changes.\n   * @ignore\n   */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges()\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  /** @ignore */\n  writeValue(value: any) {\n    this.checked = !!value\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  /** @ignore */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  /** @ignore */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  /** @ignore */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled\n  }\n\n  /** @ignore */\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false')\n  }\n\n  /** @ignore */\n  private _emitChangeEvent() {\n    const event = new TheSeamCheckboxChange()\n    event.source = this\n    event.checked = this.checked\n\n    this._controlValueAccessorChangeFn(this.checked)\n    this.change.emit(event)\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @ignore\n   */\n  _onInputClick(event: Event) {\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate) {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false\n          this.indeterminateChange.emit(this._indeterminate)\n        })\n      }\n\n      this.toggle()\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent()\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options)\n  }\n\n  /** @ignore */\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation()\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   * @ignore\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._inputElement\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TheSeamMenuItemBase",
            "id": "class-TheSeamMenuItemBase-7b2ce95a0a5cbede81a2169734700158",
            "file": "projects/ui-common/src/lib/menu/menu-item.component.ts",
            "type": "class",
            "sourceCode": "import { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y'\nimport { DOCUMENT } from '@angular/common'\nimport { ChangeDetectionStrategy, Component, ElementRef, HostListener, Inject, Input, OnDestroy, OnInit, Optional } from '@angular/core'\nimport { Subject } from 'rxjs'\n\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\n\nimport { CanDisableCtor, mixinDisabled } from '../core/common-behaviors/disabled'\nimport { ITheSeamMenuPanel } from './menu-panel'\nimport { THESEAM_MENU_PANEL } from './menu-panel-token'\n\nclass TheSeamMenuItemBase {}\n\nconst _seamMenuItemMixinBase: CanDisableCtor & typeof TheSeamMenuItemBase =\n    mixinDisabled(TheSeamMenuItemBase)\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[seamMenuItem]',\n  templateUrl: './menu-item.component.html',\n  styleUrls: ['./menu-item.component.scss'],\n  exportAs: 'seamMenuItem',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    '[attr.role]': 'role',\n    'class': 'dropdown-item',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MenuItemComponent extends _seamMenuItemMixinBase implements OnInit, OnDestroy, FocusableOption {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem'\n\n  @Input() icon: IconProp | string\n  @Input() iconClass: string\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MenuItemComponent> = new Subject<MenuItemComponent>()\n\n  /** Whether the menu item is highlighted. */\n  _highlighted = false\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) public document: any,\n    private _focusMonitor: FocusMonitor,\n    @Inject(THESEAM_MENU_PANEL) @Optional() private _parentMenu?: ITheSeamMenuPanel<MenuItemComponent>\n  ) {\n    super()\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false)\n    }\n\n    // console.log(this._parentMenu)\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this)\n    }\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef)\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this)\n    }\n\n    this._hovered.complete()\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin)\n    } else {\n      this._getHostElement().focus()\n    }\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0'\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n  }\n\n  /** Emits to the hover stream. */\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this)\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement\n    const textNodeType = this.document ? this.document.TEXT_NODE : 3\n    let output = ''\n\n    if (element.childNodes) {\n      const length = element.childNodes.length\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent\n        }\n      }\n    }\n\n    return output.trim()\n  }\n\n}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TickHelper",
            "id": "class-TickHelper-1a84ab407396a6630495228a5ddc494f",
            "file": "projects/ui-common/src/lib/test-helpers/tick-helper.ts",
            "type": "class",
            "sourceCode": "import { tick } from '@angular/core/testing'\n\n/**\n * Helps advance tests to specific elapsed times.\n *\n * # When to use\n *\n * If a test needs to do something at 100 ticks, but expected values should\n * also be tested at multiple ticks before 100 ticks, then the previous tick\n * sum needs to be counted. If the elapsed can be easily counted by just\n * skimming the code you should just use `tick()`.\n *\n * The following example is simple enough that `tick()` is probably better, but\n * it shows how it is used.\n *\n * ## Example without\n *\n * ```ts\n * const thing = new Thing()\n * thing.dieAfterTicks(100)\n *\n * tick(25)\n * expect(thing.isAlive).toBe(true)\n *\n * tick(25)\n * expect(thing.isAlive).toBe(true)\n *\n * tick(25)\n * expect(thing.isAlive).toBe(true)\n *\n * tick(25)\n * expect(thing.isAlive).toBe(false)\n * ```\n *\n * ## Example with\n *\n * ```ts\n * const t = new TickHelper()\n * const thing = new Thing()\n * thing.dieAfterTicks(100)\n *\n * t.tickTo(25)\n * expect(thing.isAlive).toBe(true)\n *\n * t.tickTo(50)\n * expect(thing.isAlive).toBe(true)\n *\n * t.tickTo(75)\n * expect(thing.isAlive).toBe(true)\n *\n * t.tickTo(100)\n * expect(thing.isAlive).toBe(false)\n * ```\n */\nexport class TickHelper {\n\n  private _startTime = Date.now()\n\n  /**\n   * Returns the number of ticks that have elapsed since this class was\n   * initialized.\n   */\n  public get ticksElapsed() { return Date.now() - this._startTime }\n\n  /**\n   * Calls `tick()` for the remaining number of ticks to reach elapsed ticks.\n   *\n   * ```\n   * const t = new TickHelper()\n   * tick(3)\n   * t.tickTo(10) // Equivalent to `tick(7)` in this case to reach 10 ticks.\n   * ```\n   */\n  public tickTo(ticks: number) { tick(ticks - this.ticksElapsed) }\n\n}\n",
            "properties": [
                {
                    "name": "_startTime",
                    "defaultValue": "Date.now()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "description": "<p>Helps advance tests to specific elapsed times.</p>\n<h1 id=\"when-to-use\">When to use</h1>\n<p>If a test needs to do something at 100 ticks, but expected values should\nalso be tested at multiple ticks before 100 ticks, then the previous tick\nsum needs to be counted. If the elapsed can be easily counted by just\nskimming the code you should just use <code>tick()</code>.</p>\n<p>The following example is simple enough that <code>tick()</code> is probably better, but\nit shows how it is used.</p>\n<h2 id=\"example-without\">Example without</h2>\n<p>```ts</p>\n<ul>\n<li>const thing = new Thing()</li>\n<li>thing.dieAfterTicks(100)</li>\n<li></li>\n<li>tick(25)</li>\n<li>expect(thing.isAlive).toBe(true)</li>\n<li></li>\n<li>tick(25)</li>\n<li>expect(thing.isAlive).toBe(true)</li>\n<li></li>\n<li>tick(25)</li>\n<li>expect(thing.isAlive).toBe(true)</li>\n<li></li>\n<li>tick(25)</li>\n<li>expect(thing.isAlive).toBe(false)</li>\n<li><div><pre class=\"line-numbers\"><code class=\"language-none\"></code></pre></div></li>\n</ul>\n<h2 id=\"example-with\">Example with</h2>\n<p>```ts</p>\n<ul>\n<li>const t = new TickHelper()</li>\n<li>const thing = new Thing()</li>\n<li>thing.dieAfterTicks(100)</li>\n<li></li>\n<li>t.tickTo(25)</li>\n<li>expect(thing.isAlive).toBe(true)</li>\n<li></li>\n<li>t.tickTo(50)</li>\n<li>expect(thing.isAlive).toBe(true)</li>\n<li></li>\n<li>t.tickTo(75)</li>\n<li>expect(thing.isAlive).toBe(true)</li>\n<li></li>\n<li>t.tickTo(100)</li>\n<li>expect(thing.isAlive).toBe(false)</li>\n<li>```</li>\n</ul>\n",
            "rawdescription": "Helps advance tests to specific elapsed times.\n\n# When to use\n\nIf a test needs to do something at 100 ticks, but expected values should\nalso be tested at multiple ticks before 100 ticks, then the previous tick\nsum needs to be counted. If the elapsed can be easily counted by just\nskimming the code you should just use `tick()`.\n\nThe following example is simple enough that `tick()` is probably better, but\nit shows how it is used.\n\n## Example without\n\n```ts\n * const thing = new Thing()\n * thing.dieAfterTicks(100)\n *\n * tick(25)\n * expect(thing.isAlive).toBe(true)\n *\n * tick(25)\n * expect(thing.isAlive).toBe(true)\n *\n * tick(25)\n * expect(thing.isAlive).toBe(true)\n *\n * tick(25)\n * expect(thing.isAlive).toBe(false)\n * ```\n\n## Example with\n\n```ts\n * const t = new TickHelper()\n * const thing = new Thing()\n * thing.dieAfterTicks(100)\n *\n * t.tickTo(25)\n * expect(thing.isAlive).toBe(true)\n *\n * t.tickTo(50)\n * expect(thing.isAlive).toBe(true)\n *\n * t.tickTo(75)\n * expect(thing.isAlive).toBe(true)\n *\n * t.tickTo(100)\n * expect(thing.isAlive).toBe(false)\n * ```",
            "methods": [
                {
                    "name": "tickTo",
                    "args": [
                        {
                            "name": "ticks",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "description": "<p>Calls <code>tick()</code> for the remaining number of ticks to reach elapsed ticks.</p>\n<p>```</p>\n<ul>\n<li>const t = new TickHelper()</li>\n<li>tick(3)</li>\n<li>t.tickTo(10) // Equivalent to <code>tick(7)</code> in this case to reach 10 ticks.</li>\n<li>```</li>\n</ul>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "ticks",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "ticksElapsed": {
                    "name": "ticksElapsed",
                    "getSignature": {
                        "name": "ticksElapsed",
                        "type": "",
                        "returnType": "",
                        "line": 63,
                        "description": "<p>Returns the number of ticks that have elapsed since this class was\ninitialized.</p>\n"
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TopBarMenuButtonBase",
            "id": "class-TopBarMenuButtonBase-685c71bfd41154b89280941e9456338d",
            "file": "projects/ui-common/src/lib/framework/top-bar/top-bar-menu-button/top-bar-menu-button.component.ts",
            "type": "class",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit } from '@angular/core'\n\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons'\n\nimport { CanDisableCtor, mixinDisabled } from '../../../core/common-behaviors/index'\n\nclass TopBarMenuButtonBase {}\n\nconst _TopBarMenuButtonMixinBase: CanDisableCtor & typeof TopBarMenuButtonBase =\n  mixinDisabled(TopBarMenuButtonBase)\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seamTopBarMenuButton]',\n  templateUrl: './top-bar-menu-button.component.html',\n  styleUrls: ['./top-bar-menu-button.component.scss'],\n  exportAs: 'seamButton',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    'attr.type': 'button',\n    'class': 'btn btn-link border text-decoration-none',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TopBarMenuButtonComponent extends _TopBarMenuButtonMixinBase implements OnInit, OnDestroy {\n\n  faAngleDown = faAngleDown\n\n  @Input() displayName: string\n  @Input() organizationName?: string | null\n  @Input() originalDisplayName?: string | null\n\n  ngOnInit() { }\n\n  ngOnDestroy() { }\n\n}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UnsavedChangesCanDeactivate",
            "id": "class-UnsavedChangesCanDeactivate-ca09747a128d6e5a8340183a7f86c395",
            "file": "projects/ui-common/src/lib/unsaved-changes-dialog/unsaved-changes-can-deactivate.ts",
            "type": "class",
            "sourceCode": "import { HostListener, isDevMode } from '@angular/core'\n\nexport abstract class UnsavedChangesCanDeactivate {\n\n  abstract unsavedChangesCanDeactivate(): boolean\n\n    @HostListener('window:beforeunload', ['$event'])\n    __unloadNotification($event: any) {\n      if (isDevMode()) {\n        if (!this.unsavedChangesCanDeactivate) {\n          console.warn('Route Component with [UnsavedChangesDialogGuard] guard must extend [UnsavedChangesCanDeactivate] class.')\n        }\n\n        const w = window as any\n        // Avoid redirect prevention in Storybook\n        if (w && w.__STORYBOOK_CLIENT_API__) {\n          return true\n        }\n      }\n\n      if (!this.unsavedChangesCanDeactivate()) {\n        // $event.returnValue = true\n        $event.returnValue = 'You have unsaved changes! If you leave, your changes will be lost.'\n      }\n    }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "unsavedChangesCanDeactivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:beforeunload",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 8
                }
            ]
        },
        {
            "name": "WidgetHeaderBadgeBase",
            "id": "class-WidgetHeaderBadgeBase-a1b3557e40f4e81965cc04064ab16333",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-header-badge/widget-header-badge.component.ts",
            "type": "class",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, Input, OnInit, Renderer2 } from '@angular/core'\n\nimport {\n  CanThemeCtor,\n  mixinTheme\n} from '../../../core/common-behaviors'\n\nclass WidgetHeaderBadgeBase {\n\n  constructor(\n    public _elementRef: ElementRef\n  ) { }\n\n}\n\nconst _WidgetHeaderBadgeMixinBase:  CanThemeCtor &\n    typeof WidgetHeaderBadgeBase = mixinTheme(WidgetHeaderBadgeBase, 'badge')\n\n@Component({\n  selector: 'seam-widget-header-badge',\n  templateUrl: './widget-header-badge.component.html',\n  styleUrls: ['./widget-header-badge.component.scss'],\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'theme' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    'class': 'badge float-right'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetHeaderBadgeComponent extends _WidgetHeaderBadgeMixinBase implements OnInit {\n\n  constructor(\n    _elementRef: ElementRef\n  ) { super(_elementRef) }\n\n  ngOnInit() { }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "WidgetListGroupItemActionableBase",
            "id": "class-WidgetListGroupItemActionableBase-a0140dd57b70a68e1f1d5e7cdc18dfa4",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
            "type": "class",
            "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y'\nimport { ChangeDetectionStrategy, Component, ContentChild, ElementRef, Input, OnDestroy, OnInit, Renderer2 } from '@angular/core'\n\nimport {\n  CanBeActive,\n  CanBeActiveCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanTheme,\n  CanThemeCtor,\n  HasElementRef,\n  mixinActive,\n  mixinDisabled,\n  mixinTheme\n} from '../../../../core/common-behaviors/index'\nimport { SeamIcon } from '../../../../icon/index'\n\nimport { WidgetListGroupItemIconTplDirective } from './widget-list-group-item-icon-tpl.directive'\n\nconst WIDGET_LIST_GROUP_ITEM_INPUTS = [ 'disabled', 'theme', 'active', 'icon', 'iconClass', 'label' ]\n\nclass WidgetListGroupItemBase {\n\n  @ContentChild(WidgetListGroupItemIconTplDirective, { static: true }) iconTpl?: WidgetListGroupItemIconTplDirective\n\n  icon?: SeamIcon\n  iconClass?: string\n\n  label?: string\n\n  constructor(\n    public _elementRef: ElementRef,\n    public _renderer: Renderer2\n  ) { }\n\n  /** Focuses the element. */\n  focus(): void {\n    this._getHostElement().focus()\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement\n  }\n}\n\nclass WidgetListGroupItemActionableBase extends WidgetListGroupItemBase implements OnDestroy {\n  constructor(\n    public _elementRef: ElementRef,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _renderer)\n    this._focusMonitor.monitor(this._elementRef, true)\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef)\n  }\n}\n\n\nconst _WidgetListGroupItemBase: CanDisableCtor & CanThemeCtor & CanBeActiveCtor &\n  typeof WidgetListGroupItemBase = mixinActive(mixinTheme(mixinDisabled(WidgetListGroupItemBase), 'list-group-item'))\n\nconst _WidgetListGroupItemActionableBase: CanDisableCtor & CanThemeCtor & CanBeActiveCtor &\n  typeof WidgetListGroupItemActionableBase = mixinActive(mixinTheme(mixinDisabled(WidgetListGroupItemActionableBase), 'list-group-item'))\n\n@Component({\n  selector: 'seam-widget-list-group-item',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    'class': 'list-group-item',\n    '[class.active]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemComponent extends _WidgetListGroupItemBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive {\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _renderer)\n  }\n\n  ngOnInit() { }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seam-widget-list-group-item],button[seamWidgetListGroupItem]',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    '[attr.type]': 'type',\n    'class': 'list-group-item list-group-item-action',\n    '[class.active]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemButtonComponent extends _WidgetListGroupItemActionableBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive, OnDestroy {\n\n  /** ARIA type for the button. */\n  @Input() type: 'button' | 'submit' | 'reset' = 'button'\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _focusMonitor, _renderer)\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'a[seam-widget-list-group-item],a[seamWidgetListGroupItem]',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    'class': 'list-group-item list-group-item-action',\n    '[class.active]': 'active',\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemAnchorComponent extends _WidgetListGroupItemActionableBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive, OnDestroy {\n\n  /** Tabindex of the button. */\n  @Input() tabIndex: number\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _focusMonitor, _renderer)\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault()\n      event.stopImmediatePropagation()\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_focusMonitor",
                    "type": "FocusMonitor",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_renderer",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "WidgetListGroupItemBase"
                    }
                },
                {
                    "name": "_renderer",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "WidgetListGroupItemBase"
                    }
                },
                {
                    "name": "icon",
                    "type": "SeamIcon",
                    "optional": true,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "WidgetListGroupItemBase"
                    }
                },
                {
                    "name": "iconClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "WidgetListGroupItemBase"
                    }
                },
                {
                    "name": "iconTpl",
                    "type": "WidgetListGroupItemIconTplDirective",
                    "optional": true,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "WidgetListGroupItemIconTplDirective, {static: true}"
                        }
                    ],
                    "inheritance": {
                        "file": "WidgetListGroupItemBase"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "WidgetListGroupItemBase"
                    }
                }
            ],
            "methods": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "_getHostElement",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "inheritance": {
                        "file": "WidgetListGroupItemBase"
                    }
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "description": "<p>Focuses the element. </p>\n",
                    "inheritance": {
                        "file": "WidgetListGroupItemBase"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "WidgetListGroupItemBase",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "WidgetListGroupItemBase",
            "id": "class-WidgetListGroupItemBase-a0140dd57b70a68e1f1d5e7cdc18dfa4",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
            "type": "class",
            "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y'\nimport { ChangeDetectionStrategy, Component, ContentChild, ElementRef, Input, OnDestroy, OnInit, Renderer2 } from '@angular/core'\n\nimport {\n  CanBeActive,\n  CanBeActiveCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanTheme,\n  CanThemeCtor,\n  HasElementRef,\n  mixinActive,\n  mixinDisabled,\n  mixinTheme\n} from '../../../../core/common-behaviors/index'\nimport { SeamIcon } from '../../../../icon/index'\n\nimport { WidgetListGroupItemIconTplDirective } from './widget-list-group-item-icon-tpl.directive'\n\nconst WIDGET_LIST_GROUP_ITEM_INPUTS = [ 'disabled', 'theme', 'active', 'icon', 'iconClass', 'label' ]\n\nclass WidgetListGroupItemBase {\n\n  @ContentChild(WidgetListGroupItemIconTplDirective, { static: true }) iconTpl?: WidgetListGroupItemIconTplDirective\n\n  icon?: SeamIcon\n  iconClass?: string\n\n  label?: string\n\n  constructor(\n    public _elementRef: ElementRef,\n    public _renderer: Renderer2\n  ) { }\n\n  /** Focuses the element. */\n  focus(): void {\n    this._getHostElement().focus()\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement\n  }\n}\n\nclass WidgetListGroupItemActionableBase extends WidgetListGroupItemBase implements OnDestroy {\n  constructor(\n    public _elementRef: ElementRef,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _renderer)\n    this._focusMonitor.monitor(this._elementRef, true)\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef)\n  }\n}\n\n\nconst _WidgetListGroupItemBase: CanDisableCtor & CanThemeCtor & CanBeActiveCtor &\n  typeof WidgetListGroupItemBase = mixinActive(mixinTheme(mixinDisabled(WidgetListGroupItemBase), 'list-group-item'))\n\nconst _WidgetListGroupItemActionableBase: CanDisableCtor & CanThemeCtor & CanBeActiveCtor &\n  typeof WidgetListGroupItemActionableBase = mixinActive(mixinTheme(mixinDisabled(WidgetListGroupItemActionableBase), 'list-group-item'))\n\n@Component({\n  selector: 'seam-widget-list-group-item',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    'class': 'list-group-item',\n    '[class.active]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemComponent extends _WidgetListGroupItemBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive {\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _renderer)\n  }\n\n  ngOnInit() { }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seam-widget-list-group-item],button[seamWidgetListGroupItem]',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    '[attr.type]': 'type',\n    'class': 'list-group-item list-group-item-action',\n    '[class.active]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemButtonComponent extends _WidgetListGroupItemActionableBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive, OnDestroy {\n\n  /** ARIA type for the button. */\n  @Input() type: 'button' | 'submit' | 'reset' = 'button'\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _focusMonitor, _renderer)\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'a[seam-widget-list-group-item],a[seamWidgetListGroupItem]',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    'class': 'list-group-item list-group-item-action',\n    '[class.active]': 'active',\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemAnchorComponent extends _WidgetListGroupItemActionableBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive, OnDestroy {\n\n  /** Tabindex of the button. */\n  @Input() tabIndex: number\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _focusMonitor, _renderer)\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault()\n      event.stopImmediatePropagation()\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_renderer",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "icon",
                    "type": "SeamIcon",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "iconClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "iconTpl",
                    "type": "WidgetListGroupItemIconTplDirective",
                    "optional": true,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "WidgetListGroupItemIconTplDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                }
            ],
            "methods": [
                {
                    "name": "_getHostElement",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "description": "<p>Focuses the element. </p>\n"
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "XLSXDataExporter",
            "id": "class-XLSXDataExporter-c6fff5ffc6052e9464348b5e5ff46d5d",
            "file": "projects/ui-common/src/lib/data-exporter/exporters/xlsx-exporter.ts",
            "type": "class",
            "sourceCode": "import { from, Observable, of } from 'rxjs'\nimport { mapTo, tap } from 'rxjs/operators'\n\nimport { faFileExcel } from '@fortawesome/free-solid-svg-icons'\nimport { Buffer } from 'buffer/'\nimport FileSaver from 'file-saver'\nimport XLSX from 'xlsx'\n\nimport { fileDataFromBuffer } from '../../utils/index'\nimport { IDataExporter } from '../data-exporter'\n\nexport class XLSXDataExporter implements IDataExporter {\n\n  public readonly name = 'exporter:xlsx'\n\n  public label = 'XLSX'\n\n  public icon = faFileExcel\n\n  public export<T>(data: T[]): Observable<boolean> {\n    const ws: XLSX.WorkSheet = XLSX.utils.json_to_sheet(data)\n    const wb: XLSX.WorkBook = { Sheets: { 'data': ws }, SheetNames: ['data'] }\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\n\n    return from(fileDataFromBuffer(Buffer.from(excelBuffer)))\n      .pipe(\n        tap(fileData => {\n          FileSaver.saveAs(fileData.blob, `Export.xlsx`)\n        }),\n        mapTo(true)\n      )\n  }\n\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "defaultValue": "faFileExcel",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "label",
                    "defaultValue": "'XLSX'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "'exporter:xlsx'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 20,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IDataExporter"
            ]
        }
    ],
    "directives": [
        {
            "name": "AutoFocusDirective",
            "id": "directive-AutoFocusDirective-c37d713fb82fbaa5bd7a8dab3cec98b2",
            "file": "projects/ui-common/src/lib/shared/directives/auto-focus.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, Input, OnInit, Optional } from '@angular/core'\n\nimport { ModalRef } from '../../modal/modal-ref'\nimport { getClosestModal } from '../../modal/modal-utils'\nimport { Modal } from '../../modal/modal.service'\n\n@Directive({\n    selector: '[seamAutoFocus]',\n    exportAs: 'seamAutoFocus'\n})\nexport class AutoFocusDirective implements OnInit {\n  private _focus = true\n\n  public modalRef: ModalRef<any> | undefined | null\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _modal: Modal,\n    @Optional() private _modalRef: ModalRef<any>\n  ) {\n    this.modalRef = _modalRef\n  }\n\n  ngOnInit() {\n    if (!this.modalRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.modalRef = getClosestModal(this._elementRef, this._modal.openDialogs)\n    }\n\n    if (!this.modalRef) {\n      if (this._focus) {\n        setTimeout(() => { this.focus() })\n      }\n    } else {\n      this.modalRef.afterOpened().subscribe(() => {\n        setTimeout(() => { this.focus() })\n      })\n    }\n  }\n\n  @Input()\n  set seamAutoFocus(condition: boolean) {\n    this._focus = condition !== false\n  }\n\n  public focus() {\n    this._elementRef.nativeElement.focus()\n  }\n}\n",
            "selector": "[seamAutoFocus]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "seamAutoFocus",
                    "line": 46,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_focus",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "modalRef",
                    "type": "ModalRef<any> | undefined | null",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>"
                    },
                    {
                        "name": "_modal",
                        "type": "Modal"
                    },
                    {
                        "name": "_modalRef",
                        "type": "ModalRef<any>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modal",
                        "type": "Modal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modalRef",
                        "type": "ModalRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "seamAutoFocus": {
                    "name": "seamAutoFocus",
                    "setSignature": {
                        "name": "seamAutoFocus",
                        "type": "void",
                        "args": [
                            {
                                "name": "condition",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 46,
                        "jsdoctags": [
                            {
                                "name": "condition",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "BaseLayoutContentDirective",
            "id": "directive-BaseLayoutContentDirective-581d726079a1393b46044f2a15d185b0",
            "file": "projects/ui-common/src/lib/framework/base-layout/directives/base-layout-content.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef } from '@angular/core'\n\nimport { HasElementRef } from '../../../core/common-behaviors'\n\n@Directive({\n  selector: '[seamBaseLayoutContent]'\n})\nexport class BaseLayoutContentDirective implements HasElementRef {\n\n  constructor(\n    public _elementRef: ElementRef\n  ) { }\n\n}\n",
            "selector": "[seamBaseLayoutContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "HasElementRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BaseLayoutContentFooterDirective",
            "id": "directive-BaseLayoutContentFooterDirective-18836edfef74db4813322b89c0e1874b",
            "file": "projects/ui-common/src/lib/framework/base-layout/directives/base-layout-content-footer.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef } from '@angular/core'\n\nimport { HasElementRef } from '../../../core/common-behaviors'\n\n@Directive({\n  selector: '[seamBaseLayoutContentFooter]'\n})\nexport class BaseLayoutContentFooterDirective implements HasElementRef {\n\n  constructor(\n    public _elementRef: ElementRef\n  ) { }\n\n}\n",
            "selector": "[seamBaseLayoutContentFooter]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "HasElementRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BaseLayoutContentHeaderDirective",
            "id": "directive-BaseLayoutContentHeaderDirective-a1cec2a51c4934321d3eda8ef89c58ff",
            "file": "projects/ui-common/src/lib/framework/base-layout/directives/base-layout-content-header.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef } from '@angular/core'\n\nimport { HasElementRef } from '../../../core/common-behaviors'\n\n@Directive({\n  selector: '[seamBaseLayoutContentHeader]'\n})\nexport class BaseLayoutContentHeaderDirective implements HasElementRef {\n\n  constructor(\n    public _elementRef: ElementRef\n  ) { }\n\n}\n",
            "selector": "[seamBaseLayoutContentHeader]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "HasElementRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BaseLayoutNavToggleDirective",
            "id": "directive-BaseLayoutNavToggleDirective-19e2397f19497f8b9e747695f1e66243",
            "file": "projects/ui-common/src/lib/framework/base-layout/directives/base-layout-nav-toggle.directive.ts",
            "type": "directive",
            "description": "<p>Can be used to toggle the expand state of the registered nav.</p>\n",
            "sourceCode": "import { Directive, HostBinding, HostListener, Inject, Input, Optional } from '@angular/core'\n\nimport { ITheSeamBaseLayoutRef } from '../base-layout-ref'\nimport { THESEAM_BASE_LAYOUT_REF } from '../base-layout-tokens'\n\n/**\n * Can be used to toggle the expand state of the registered nav.\n */\n@Directive({\n  selector: 'button[seamBaseLayoutNavToggle]',\n  exportAs: 'seamBaseLayoutNavToggle'\n})\nexport class BaseLayoutNavToggleDirective {\n\n  public baseLayout: ITheSeamBaseLayoutRef | undefined\n\n  @HostBinding('attr.type')\n  get _attrType() { return this.type }\n\n  @Input() type = 'button'\n\n  @HostBinding('attr.aria-label')\n  get _attrAriaLabel() { return this.ariaLabel || null }\n\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel = 'Navigation toggle'\n\n  @HostListener('click')\n  _onClick() {\n    if (this.baseLayout && this.baseLayout.registeredNav) {\n      this.baseLayout.registeredNav.toggle()\n    }\n  }\n\n  constructor(\n    @Optional() @Inject(THESEAM_BASE_LAYOUT_REF) _baseLayout: ITheSeamBaseLayoutRef\n  ) {\n    this.baseLayout = _baseLayout\n  }\n\n}\n",
            "selector": "button[seamBaseLayoutNavToggle]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "aria-label",
                    "defaultValue": "'Navigation toggle'",
                    "description": "<p>Screenreader label for the button. </p>\n",
                    "line": 26
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "line": 20
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "attr.aria-label",
                    "line": 23
                },
                {
                    "name": "attr.type",
                    "line": 18
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 29
                }
            ],
            "propertiesClass": [
                {
                    "name": "baseLayout",
                    "type": "ITheSeamBaseLayoutRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_baseLayout",
                        "type": "ITheSeamBaseLayoutRef"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "_baseLayout",
                        "type": "ITheSeamBaseLayoutRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BaseLayoutSideBarDirective",
            "id": "directive-BaseLayoutSideBarDirective-d681322e796594a374ece51538ebeeaf",
            "file": "projects/ui-common/src/lib/framework/base-layout/directives/base-layout-side-bar.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef } from '@angular/core'\n\nimport { HasElementRef } from '../../../core/common-behaviors'\n\n@Directive({\n  selector: '[seamBaseLayoutSideBar]'\n})\nexport class BaseLayoutSideBarDirective implements HasElementRef {\n\n  constructor(\n    public _elementRef: ElementRef\n  ) { }\n\n}\n",
            "selector": "[seamBaseLayoutSideBar]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "HasElementRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BaseLayoutTopBarDirective",
            "id": "directive-BaseLayoutTopBarDirective-56b98e6448d8f60b804fb9c30244eb78",
            "file": "projects/ui-common/src/lib/framework/base-layout/directives/base-layout-top-bar.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef } from '@angular/core'\n\nimport { HasElementRef } from '../../../core/common-behaviors'\n\n@Directive({\n  selector: '[seamBaseLayoutTopBar]'\n})\nexport class BaseLayoutTopBarDirective implements HasElementRef {\n\n  constructor(\n    public _elementRef: ElementRef\n  ) { }\n\n}\n",
            "selector": "[seamBaseLayoutTopBar]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "implements": [
                "HasElementRef"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ClickOutsideDirective",
            "id": "directive-ClickOutsideDirective-799ed0ab165e924ee4aa4604af81d7b4",
            "file": "projects/ui-common/src/lib/shared/directives/click-outside.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core'\n\n@Directive({\n  selector: '[seamClickOutside]'\n})\nexport class ClickOutsideDirective {\n\n  @Input()\n  get seamClickOutsideActive(): boolean {\n    return this._active\n  }\n  set seamClickOutsideActive(value: boolean) {\n    if (this._active === value) { return }\n\n    if (value) {\n      // `setTimeout` is used to avoid the click event triggering when the value\n      // changes if the value was changed with a click.\n      setTimeout(() => { this._active = value })\n    } else {\n      this._active = value\n    }\n  }\n  private _active = true\n\n  @Output() seamClickOutside = new EventEmitter<MouseEvent>()\n\n  // NOTE: This should probably be changed from a `HostListener` to allow the\n  // subscription to be unsubscribed.\n  @HostListener('document:click', ['$event'])\n  public onDocumentClick(event: MouseEvent): void {\n    if (this._active) {\n      const targetElement = event.target as HTMLElement\n      // Check if the click was outside the element\n      if (targetElement && !this.elementRef.nativeElement.contains(targetElement)) {\n        this.seamClickOutside.emit(event)\n      }\n    }\n  }\n\n  constructor(private elementRef: ElementRef) { }\n\n}\n",
            "selector": "[seamClickOutside]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "seamClickOutsideActive",
                    "line": 9,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "seamClickOutside",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 30
                }
            ],
            "propertiesClass": [
                {
                    "name": "_active",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "seamClickOutsideActive": {
                    "name": "seamClickOutsideActive",
                    "setSignature": {
                        "name": "seamClickOutsideActive",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 12,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ConfirmClickDirective",
            "id": "directive-ConfirmClickDirective-2c189e3ec31f68612c56b1bfacbde2ab",
            "file": "projects/ui-common/src/lib/confirm-dialog/confirm-click.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, EventEmitter, HostBinding, HostListener, Input, OnDestroy, Output } from '@angular/core'\n\nimport { ThemeTypes } from '../models/index'\nimport { ModalRef } from './../modal/modal-ref'\n\nimport { ConfirmDialogComponent } from './confirm-dialog.component'\nimport { SeamConfirmDialogService } from './confirm-dialog.service'\n\n@Directive({\n  selector: '[seamConfirmClick]',\n  exportAs: 'seamConfirmClick'\n})\nexport class ConfirmClickDirective implements OnDestroy {\n\n  private _modalRef: ModalRef<ConfirmDialogComponent, 'confirm' | undefined> | undefined\n\n  @Input() libConfirmMsg: string\n  @Input() libConfirmAlert: string | { message: string, type: ThemeTypes }\n  @Input() libConfirmDisabled = false\n\n  @Output() seamConfirmClick = new EventEmitter<'confirm'>()\n\n  @HostBinding('class.lib-confirm-click-active')\n  get _confirmClickActiveCss() { return !!this._modalRef }\n\n  @HostListener('click', [ '$event' ])\n  _onClick(event: any) {\n    if (this.libConfirmDisabled) {\n      if (!!this._modalRef) {\n        this._modalRef.close()\n        this._modalRef = undefined\n      }\n    }\n\n    if (!!this._modalRef) { return }\n\n    this._modalRef = this._confirmService.open(this.libConfirmMsg, this.libConfirmAlert)\n\n    this._modalRef.afterClosed().subscribe(result => {\n      if (result === 'confirm') {\n        this.seamConfirmClick.emit(result)\n      }\n\n      this._modalRef = undefined\n    })\n  }\n\n  constructor(private _confirmService: SeamConfirmDialogService) { }\n\n  ngOnDestroy() {\n    if (this._modalRef) {\n      this._modalRef.close()\n    }\n  }\n\n  get modalRef() { return this._modalRef }\n\n  public close() {\n    if (this._modalRef) {\n      this._modalRef.close()\n    }\n  }\n\n}\n",
            "selector": "[seamConfirmClick]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "libConfirmAlert",
                    "line": 18,
                    "type": "string | literal type"
                },
                {
                    "name": "libConfirmDisabled",
                    "defaultValue": "false",
                    "line": 19
                },
                {
                    "name": "libConfirmMsg",
                    "line": 17,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "seamConfirmClick",
                    "defaultValue": "new EventEmitter<'confirm'>()",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [
                {
                    "name": "class.lib-confirm-click-active",
                    "line": 24
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 27
                }
            ],
            "propertiesClass": [
                {
                    "name": "_modalRef",
                    "type": "ModalRef<ConfirmDialogComponent | \"confirm\" | undefined> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_confirmService",
                        "type": "SeamConfirmDialogService"
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "_confirmService",
                        "type": "SeamConfirmDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "modalRef": {
                    "name": "modalRef",
                    "getSignature": {
                        "name": "modalRef",
                        "type": "",
                        "returnType": "",
                        "line": 56
                    }
                }
            }
        },
        {
            "name": "DatatableActionMenuToggleDirective",
            "id": "directive-DatatableActionMenuToggleDirective-88ff7482f377a05503e680d3d9901ad2",
            "file": "projects/ui-common/src/lib/datatable/directives/datatable-action-menu-toggle.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { ESCAPE } from '@angular/cdk/keycodes'\nimport { ConnectionPositionPair, Overlay, OverlayRef, PositionStrategy } from '@angular/cdk/overlay'\nimport { TemplatePortal } from '@angular/cdk/portal'\nimport { Directive, ElementRef, HostListener, Input, TemplateRef, ViewContainerRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamDatatableActionMenuToggle]',\n  exportAs: 'seamDatatableActionMenuToggle'\n})\nexport class DatatableActionMenuToggleDirective {\n\n  @Input() seamDatatableActionMenuToggle: TemplateRef<HTMLElement>\n\n  private _active = false\n  private _overlayRef: OverlayRef\n  private _actionDown = false\n\n  @HostListener('document:keydown', [ '$event' ])\n  _onKeydown(event: any) {\n    if (event.keyCode === ESCAPE) {\n      this.disable()\n    }\n  }\n\n  @HostListener('click', [ '$event' ])\n  _onClick(event: any) {\n    this.toggle()\n  }\n\n  @HostListener('mousedown', [ '$event' ]) _mouseDown(event: any) { this.onInputDown(event) }\n  @HostListener('pointerdown', [ '$event' ]) _pointerDown(event: any) { this.onInputDown(event) }\n\n  @HostListener('mouseup', [ '$event' ]) _mouseUp(event: any) { this.onInputUp(event) }\n  @HostListener('pointerup', [ '$event' ]) _pointerUp(event: any) { this.onInputUp(event) }\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _viewContainerRef: ViewContainerRef,\n    private _overlay: Overlay,\n  ) { }\n\n  public get active(): boolean { return this._active }\n\n  public toggle() {\n    if (this._active) {\n      this.disable()\n    } else {\n      this.enable()\n    }\n  }\n\n  public enable() {\n    if (this.active) { return }\n\n    this._overlayRef = this._overlay.create({\n      hasBackdrop: false,\n      positionStrategy: this.getOverlayPosition(this._elementRef.nativeElement),\n    })\n\n    this._overlayRef.attach(new TemplatePortal(this.seamDatatableActionMenuToggle, this._viewContainerRef))\n\n    this._active = true\n  }\n\n  public disable() {\n    if (!this.active) { return }\n\n    if (this._overlayRef.hasAttached()) {\n      this._overlayRef.detach()\n    }\n\n    this._active = false\n  }\n\n  private getOverlayPosition(origin: HTMLElement): PositionStrategy {\n    const positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(origin)\n      .withPositions(this.getPositions())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n\n    return positionStrategy\n  }\n\n  private getPositions(): ConnectionPositionPair[] {\n    return [\n      {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n      },\n      {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n      },\n    ]\n  }\n\n  onFocusChangeOverlay(event: any) {\n    if (event === null) {\n      if (!this._actionDown) {\n        this.disable()\n      }\n    }\n  }\n\n  onInputDown(event: any) {\n    this._actionDown = true\n  }\n\n  onInputUp(event: any) {\n    this._actionDown = false\n  }\n\n}\n",
            "selector": "[seamDatatableActionMenuToggle]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "seamDatatableActionMenuToggle",
                    "line": 12,
                    "type": "TemplateRef<HTMLElement>"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 26
                },
                {
                    "name": "document:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 19
                },
                {
                    "name": "mousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 30
                },
                {
                    "name": "mouseup",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 33
                },
                {
                    "name": "pointerdown",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 31
                },
                {
                    "name": "pointerup",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 34
                }
            ],
            "propertiesClass": [
                {
                    "name": "_actionDown",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_active",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "disable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "enable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getOverlayPosition",
                    "args": [
                        {
                            "name": "origin",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "PositionStrategy",
                    "typeParameters": [],
                    "line": 75,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPositions",
                    "args": [],
                    "optional": false,
                    "returnType": "ConnectionPositionPair[]",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onFocusChangeOverlay",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "active": {
                    "name": "active",
                    "getSignature": {
                        "name": "active",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 42
                    }
                }
            }
        },
        {
            "name": "DatatableCellTplDirective",
            "id": "directive-DatatableCellTplDirective-5bca2cbcc4314d5cc9d5707c412eb7a8",
            "file": "projects/ui-common/src/lib/datatable/directives/datatable-cell-tpl.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamDatatableCellTpl]'\n})\nexport class DatatableCellTplDirective {\n\n  constructor(public template: TemplateRef<any>) { }\n\n}\n",
            "selector": "[seamDatatableCellTpl]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DatatableFilterDirective",
            "id": "directive-DatatableFilterDirective-610ba64cdd183d4acf9e63652e46ac7c",
            "file": "projects/ui-common/src/lib/datatable/directives/datatable-filter.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, Inject, Self } from '@angular/core'\n\nimport { IDataFilter, THESEAM_DATA_FILTER } from '../../data-filters/data-filter'\n\n@Directive({\n  selector: '[seamDatatableFilter]'\n})\nexport class DatatableFilterDirective {\n\n  private _filter: IDataFilter\n\n  constructor(\n    @Self() @Inject(THESEAM_DATA_FILTER) dataFilters: IDataFilter[]\n  ) {\n    if (dataFilters && dataFilters.length > 0) {\n      this._filter = dataFilters[0]\n    }\n  }\n\n  get filter() {\n    return this._filter\n  }\n\n}\n",
            "selector": "[seamDatatableFilter]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_filter",
                    "type": "IDataFilter",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dataFilters",
                        "type": "IDataFilter[]"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dataFilters",
                        "type": "IDataFilter[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "filter": {
                    "name": "filter",
                    "getSignature": {
                        "name": "filter",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                }
            }
        },
        {
            "name": "DatatableRowActionItemDirective",
            "id": "directive-DatatableRowActionItemDirective-6e14f62624bde58c268dd3e0ecb7234c",
            "file": "projects/ui-common/src/lib/datatable/directives/datatable-row-action-item.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamDatatableRowActionItem]'\n})\nexport class DatatableRowActionItemDirective {\n\n  constructor(public template: TemplateRef<any>) { }\n\n}\n",
            "selector": "[seamDatatableRowActionItem]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DisableControlDirective",
            "id": "directive-DisableControlDirective-7f4264b1d9666e80304990dce0c94a46",
            "file": "projects/ui-common/src/lib/shared/directives/disable-control.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, Input } from '@angular/core'\nimport { NgControl } from '@angular/forms'\n\n// Source: https://netbasal.com/disabling-form-controls-when-working-with-reactive-forms-in-angular-549dd7b42110\n\n@Directive({\n  selector: '[seamDisableControl]'\n})\nexport class DisableControlDirective {\n\n  @Input() set seamDisableControl(condition: boolean) {\n    const action = condition ? 'disable' : 'enable'\n    const control = this.ngControl.control\n    if (control) {\n      control[action]()\n    }\n  }\n\n  constructor(private ngControl: NgControl) { }\n\n}\n",
            "selector": "[seamDisableControl]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "seamDisableControl",
                    "line": 11,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "seamDisableControl": {
                    "name": "seamDisableControl",
                    "setSignature": {
                        "name": "seamDisableControl",
                        "type": "void",
                        "args": [
                            {
                                "name": "condition",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 11,
                        "jsdoctags": [
                            {
                                "name": "condition",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ElemResizedDirective",
            "id": "directive-ElemResizedDirective-469b90924b1ffe8f4b2e5c002cddd28e",
            "file": "projects/ui-common/src/lib/shared/directives/elem-resized.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { AfterViewInit, Directive, ElementRef, EventEmitter, OnDestroy, Output } from '@angular/core'\n\nimport { ResizeSensor } from 'css-element-queries'\n\nexport interface IElementResizedEvent {\n  element: HTMLElement\n  size: { width: number, height: number }\n}\n\n@Directive({\n  selector: '[seamElemResized]'\n})\nexport class ElemResizedDirective implements OnDestroy, AfterViewInit {\n\n  @Output() seamElemResized = new EventEmitter<IElementResizedEvent>()\n\n  sensor: ResizeSensor\n\n  constructor(private elementRef: ElementRef) { }\n\n  ngAfterViewInit() {\n    this.sensor = new ResizeSensor(this.elementRef.nativeElement, (event) => {\n      this.seamElemResized.emit({ element: this.elementRef.nativeElement, size: event })\n    })\n  }\n\n  ngOnDestroy() {\n    this.sensor.detach()\n  }\n\n}\n",
            "selector": "[seamElemResized]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "seamElemResized",
                    "defaultValue": "new EventEmitter<IElementResizedEvent>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "sensor",
                    "type": "ResizeSensor",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "implements": [
                "OnDestroy",
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "EncryptedAssetLinkDirective",
            "id": "directive-EncryptedAssetLinkDirective-1661287c6db70de3b333a6ec1f9da58a",
            "file": "projects/ui-common/src/lib/shared/directives/encrypted-asset-link.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, HostBinding, HostListener, Input, isDevMode, Optional } from '@angular/core'\nimport { from, Observable, of, throwError } from 'rxjs'\nimport { catchError, map, mapTo, switchMap, tap } from 'rxjs/operators'\n\nimport { TheSeamLoadingOverlayService } from '../../loading/index'\nimport { EncryptedAssetReader } from '../../shared/models/index'\nimport { fileDataFromBuffer, openBlob, readFileAsync } from '../../utils/index'\n\n// TODO: Add a dev warning or handle both `seamEncryptedAssetLink` and `attr.href` being set on a single element.\n\n@Directive({\n  selector: '[seamEncryptedAssetLink]'\n})\nexport class EncryptedAssetLinkDirective {\n\n  @Input() seamEncryptedAssetLink: string\n  @Input() seamShowLoadingOverlay = true\n  @Input() seamDetectMimeFromContent = true\n\n  // TODO: Find out why I need this for buttons.\n  @HostBinding('attr.href') get _atrrHref() { return this.seamEncryptedAssetLink }\n\n  @HostListener('click', [ '$event' ])\n  _onClick(event) {\n    this.openLink(this.seamShowLoadingOverlay).subscribe()\n  }\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Optional() private _assetReader: EncryptedAssetReader,\n    private _loading: TheSeamLoadingOverlayService,\n  ) {\n    if (isDevMode() && !this._assetReader) {\n      console.warn(`[EncryptedAssetLinkDirective] Unable to get encrypted files unless an EncryptedAssetReader is provided.`)\n    }\n  }\n\n  public openLink(showLoadingOverlay: boolean = true): Observable<boolean> {\n    if (!(this.seamEncryptedAssetLink === undefined || this.seamEncryptedAssetLink === null)) {\n      if (!this._assetReader) {\n        // Fallback\n        const target = this._isAnchor() && this._hasTarget() ? this._getTarget() : undefined\n        const win = window.open(this.seamEncryptedAssetLink, target)\n        // TODO: Consider if always setting opener to null is to restrictive\n        // if (win && target && target.toLowerCase() === '_blank') {\n        //   win.opener = null\n        // }\n        return of(false)\n      }\n\n      const data$ = this._assetReader.getAssetBlobFromUrl(this.seamEncryptedAssetLink, this.seamDetectMimeFromContent)\n        .pipe(\n          switchMap(v => from(readFileAsync(v))\n            .pipe(\n              switchMap(_buf => !!_buf\n                ? from(fileDataFromBuffer(_buf))\n                : throwError('Unable to read file.')\n              ),\n              map(data => ({ ...data, blob: v }))\n            )\n          )\n        )\n\n      const open$ = data$\n        .pipe(\n          tap(data => {\n            if (!data || !data.blob) { throw new Error('File unsuccessfully read.') }\n            const target = this._isAnchor() && this._hasTarget() ? this._getTarget() : undefined\n            const filename = `Untitled${data.ext ? `.${data.ext}` : ''}`\n            openBlob(data.blob, target, filename)\n          }),\n          catchError(err => {\n            if (isDevMode()) { console.error('err', err) }\n            return of(false)\n          }),\n          mapTo(true)\n        )\n\n      if (showLoadingOverlay) {\n        return this._loading.while(open$)\n      } else {\n        return open$\n      }\n    }\n\n    return of(false)\n  }\n\n  /** Determines if the component host is an anchor. */\n  protected _isAnchor(): boolean {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'a'\n  }\n\n  /** Determines if the component host is an button. */\n  protected _isButton(): boolean {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'button'\n  }\n\n  protected _hasTarget(): boolean {\n    const elem = this._elementRef.nativeElement as HTMLAnchorElement\n    return !(elem.target === undefined || elem.target === null)\n  }\n\n  protected _getTarget(): string {\n    return (this._elementRef.nativeElement as HTMLAnchorElement).target\n  }\n\n}\n",
            "selector": "[seamEncryptedAssetLink]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "seamDetectMimeFromContent",
                    "defaultValue": "true",
                    "line": 18
                },
                {
                    "name": "seamEncryptedAssetLink",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "seamShowLoadingOverlay",
                    "defaultValue": "true",
                    "line": 17
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "attr.href",
                    "line": 21
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 24
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "_getTarget",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 104,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_hasTarget",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 99,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_isAnchor",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 90,
                    "description": "<p>Determines if the component host is an anchor. </p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_isButton",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 95,
                    "description": "<p>Determines if the component host is an button. </p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "openLink",
                    "args": [
                        {
                            "name": "showLoadingOverlay",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "showLoadingOverlay",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_assetReader",
                        "type": "EncryptedAssetReader"
                    },
                    {
                        "name": "_loading",
                        "type": "TheSeamLoadingOverlayService"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_assetReader",
                        "type": "EncryptedAssetReader",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_loading",
                        "type": "TheSeamLoadingOverlayService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FormFieldErrorDirective",
            "id": "directive-FormFieldErrorDirective-06c73abda726db7af162ac4a5cf02cfd",
            "file": "projects/ui-common/src/lib/form-field/form-field-error.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, Input, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamFormFieldError]'\n})\nexport class FormFieldErrorDirective {\n\n  @Input()\n  get validatorName(): string { return this._validatorName || this.seamFormFieldError }\n  set validatorName(value: string) { this._validatorName = value }\n  private _validatorName: string\n\n  @Input() seamFormFieldError: string\n\n  @Input() external = false\n\n  constructor(public template: TemplateRef<any>) {}\n\n}\n",
            "selector": "[seamFormFieldError]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "external",
                    "defaultValue": "false",
                    "line": 15
                },
                {
                    "name": "seamFormFieldError",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "validatorName",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_validatorName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "validatorName": {
                    "name": "validatorName",
                    "setSignature": {
                        "name": "validatorName",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 10,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "FormFieldErrorListItemDirective",
            "id": "directive-FormFieldErrorListItemDirective-cc984c4ec15b83bdad472b4ea961da6b",
            "file": "projects/ui-common/src/lib/form-field-error/form-field-error-list/form-field-error-list-item.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, Input, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamFormFieldErrorListItem]'\n})\nexport class FormFieldErrorListItemDirective {\n\n  @Input() validatorName: string\n\n  constructor(public template: TemplateRef<any>) {}\n\n}\n",
            "selector": "[seamFormFieldErrorListItem]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "validatorName",
                    "line": 8,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FormFieldErrorListItemTplDirective",
            "id": "directive-FormFieldErrorListItemTplDirective-5cd17fa83c2fc738a5a0a8c45a24f80d",
            "file": "projects/ui-common/src/lib/form-field-error/form-field-error-list/form-field-error-list-item-tpl.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, Input, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamFormFieldErrorListItemTpl]'\n})\nexport class FormFieldErrorListItemTplDirective {\n\n  @Input() validatorName: string\n\n  @Input() external = false\n\n  constructor(public template: TemplateRef<any>) {}\n\n}\n",
            "selector": "[seamFormFieldErrorListItemTpl]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "external",
                    "defaultValue": "false",
                    "line": 10
                },
                {
                    "name": "validatorName",
                    "line": 8,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FormFieldLabelTplDirective",
            "id": "directive-FormFieldLabelTplDirective-25d1e1de471818c747d993b874f03d7d",
            "file": "projects/ui-common/src/lib/form-field/form-field-label-tpl.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamFormFieldLabelTpl]'\n})\nexport class FormFieldLabelTplDirective {\n\n  constructor(public template: TemplateRef<any>) { }\n\n}\n",
            "selector": "[seamFormFieldLabelTpl]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "HoverClassDirective",
            "id": "directive-HoverClassDirective-476aa0df2dfeeadc2df2c71a8922ce7b",
            "file": "projects/ui-common/src/lib/shared/directives/hover-class.directive.ts",
            "type": "directive",
            "description": "<p>Don&#39;t use this directive unless there is a reason not to use css <code>:hover</code>,\nbecause the accuracy of detecting the hover is not as good. If an element is\nmoved while the mouse is idle the hover class will remain until the mouse\nenters and leaves again.</p>\n<p>I have tried multiple ways of detecting the mouse no longer hovering, but all\nhave introduced a slight performance issue that just builds for each element\ncontaining this directive.</p>\n",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input } from '@angular/core'\n\ndeclare type _PointerEvent = PointerEvent | PointerEvent\n\n/**\n * Don't use this directive unless there is a reason not to use css `:hover`,\n * because the accuracy of detecting the hover is not as good. If an element is\n * moved while the mouse is idle the hover class will remain until the mouse\n * enters and leaves again.\n *\n * I have tried multiple ways of detecting the mouse no longer hovering, but all\n * have introduced a slight performance issue that just builds for each element\n * containing this directive.\n */\n@Directive({\n  selector: '[seamHoverClass]'\n})\nexport class HoverClassDirective {\n\n  private _hovered = false\n  private _classes: string[] = []\n\n  @HostListener('mouseover', ['$event']) onMouseOver($event: MouseEvent) {\n    this._setHovered(true)\n  }\n\n  @HostListener('mouseout', ['$event']) onMouseOut($event: MouseEvent) {\n    this._setHovered(false)\n  }\n\n  @HostListener('pointerover', ['$event']) onPointerOver($event: _PointerEvent) {\n    this._setHovered(true)\n  }\n\n  @HostListener('pointerout', ['$event']) onPointerOut($event: _PointerEvent) {\n    this._setHovered(false)\n  }\n\n  @Input()\n  set seamHoverClass(classList: string) {\n    const newClasses = classList.split(' ').filter(c => c.length > 0)\n    for (const c of this._classes) {\n      if (newClasses.indexOf(c) !== 0) {\n        this._removeClass(c)\n      }\n    }\n    this._classes = newClasses\n    this._update()\n  }\n\n  constructor(\n    private _element: ElementRef\n  ) { }\n\n  private _update() {\n    for (const c of this._classes) {\n      this._hovered ? this._addClass(c) : this._removeClass(c)\n    }\n  }\n\n  private _setHovered(hovered) {\n    const doUpdate = this._hovered !== hovered\n    this._hovered = hovered\n    if (doUpdate) {\n      this._update()\n    }\n  }\n\n  private _addClass(c: string) {\n    this._element.nativeElement.classList.add(c)\n  }\n\n  public _removeClass(c: string) {\n    this._element.nativeElement.classList.remove(c)\n  }\n\n}\n",
            "selector": "[seamHoverClass]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "seamHoverClass",
                    "line": 40,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseout",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 27
                },
                {
                    "name": "mouseover",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 23
                },
                {
                    "name": "pointerout",
                    "args": [
                        {
                            "name": "$event",
                            "type": "_PointerEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 35
                },
                {
                    "name": "pointerover",
                    "args": [
                        {
                            "name": "$event",
                            "type": "_PointerEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 31
                }
            ],
            "propertiesClass": [
                {
                    "name": "_classes",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_hovered",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_addClass",
                    "args": [
                        {
                            "name": "c",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_removeClass",
                    "args": [
                        {
                            "name": "c",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setHovered",
                    "args": [
                        {
                            "name": "hovered",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_element",
                        "type": "ElementRef"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "seamHoverClass": {
                    "name": "seamHoverClass",
                    "setSignature": {
                        "name": "seamHoverClass",
                        "type": "void",
                        "args": [
                            {
                                "name": "classList",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "classList",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "HoverClassToggleDirective",
            "id": "directive-HoverClassToggleDirective-657d4290bfe339d515a283d60fe9cb3e",
            "file": "projects/ui-common/src/lib/shared/directives/hover-class-toggle.directive.ts",
            "type": "directive",
            "description": "<p>Don&#39;t use this directive unless there is a reason not to use css <code>:hover</code>,\nbecause the accuracy of detecting the hover is not as good. If an element is\nmoved while the mouse is idle the hover class will remain until the mouse\nenters and leaves again.</p>\n<p>I have tried multiple ways of detecting the mouse no longer hovering, but all\nhave introduced a slight performance issue that just builds for each element\ncontaining this directive.</p>\n",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input } from '@angular/core'\n\ndeclare type _PointerEvent = PointerEvent | PointerEvent\n\nexport interface IHoverClassToggleRecord {\n  default: string\n  hover: string\n}\n\n/**\n * Don't use this directive unless there is a reason not to use css `:hover`,\n * because the accuracy of detecting the hover is not as good. If an element is\n * moved while the mouse is idle the hover class will remain until the mouse\n * enters and leaves again.\n *\n * I have tried multiple ways of detecting the mouse no longer hovering, but all\n * have introduced a slight performance issue that just builds for each element\n * containing this directive.\n */\n@Directive({\n  selector: '[seamHoverClassToggle]'\n})\nexport class HoverClassToggleDirective {\n\n  private _hovered = false\n  private _defaultClasses: string[] = []\n  private _hoverClasses: string[] = []\n\n  @HostListener('mouseover', ['$event']) onMouseOver($event: MouseEvent) {\n    this._setHovered(true)\n  }\n\n  @HostListener('mouseout', ['$event']) onMouseOut($event: MouseEvent) {\n    this._setHovered(false)\n  }\n\n  @HostListener('pointerover', ['$event']) onPointerOver($event: _PointerEvent) {\n    this._setHovered(true)\n  }\n\n  @HostListener('pointerout', ['$event']) onPointerOut($event: _PointerEvent) {\n    this._setHovered(false)\n  }\n\n  @Input()\n  set seamHoverClassToggle(value: IHoverClassToggleRecord) {\n    if (value) {\n      if (value.default) {\n        this._defaultClasses = value.default.split(' ').filter(c => c.length > 0)\n      }\n      if (value.hover) {\n        this._hoverClasses = value.hover.split(' ').filter(c => c.length > 0)\n      }\n    }\n\n    this._hoverClasses = this._hoverClasses.filter(v => !this._defaultClasses.find(_v => _v === v))\n\n    this._update()\n  }\n\n  constructor(\n    private _element: ElementRef\n  ) { }\n\n  private _update() {\n    for (const c of this._defaultClasses) {\n      this._hovered ?  this._removeClass(c) : this._addClass(c)\n    }\n    for (const c of this._hoverClasses) {\n      this._hovered ? this._addClass(c) : this._removeClass(c)\n    }\n  }\n\n  private _setHovered(hovered) {\n    const doUpdate = this._hovered !== hovered\n    this._hovered = hovered\n    if (doUpdate) {\n      this._update()\n    }\n  }\n\n  private _addClass(c: string) {\n    this._element.nativeElement.classList.add(c)\n  }\n\n  public _removeClass(c: string) {\n    this._element.nativeElement.classList.remove(c)\n  }\n\n}\n",
            "selector": "[seamHoverClassToggle]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "seamHoverClassToggle",
                    "line": 46,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseout",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 33
                },
                {
                    "name": "mouseover",
                    "args": [
                        {
                            "name": "$event",
                            "type": "MouseEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 29
                },
                {
                    "name": "pointerout",
                    "args": [
                        {
                            "name": "$event",
                            "type": "_PointerEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 41
                },
                {
                    "name": "pointerover",
                    "args": [
                        {
                            "name": "$event",
                            "type": "_PointerEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 37
                }
            ],
            "propertiesClass": [
                {
                    "name": "_defaultClasses",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_hoverClasses",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_hovered",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_addClass",
                    "args": [
                        {
                            "name": "c",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_removeClass",
                    "args": [
                        {
                            "name": "c",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "c",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setHovered",
                    "args": [
                        {
                            "name": "hovered",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "hovered",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_element",
                        "type": "ElementRef"
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "seamHoverClassToggle": {
                    "name": "seamHoverClassToggle",
                    "setSignature": {
                        "name": "seamHoverClassToggle",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 46,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "InputDirective",
            "id": "directive-InputDirective-256c0b1d9e9d9f2ee205b9423d235b6f",
            "file": "projects/ui-common/src/lib/form-field/input.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { coerceBooleanProperty } from '@angular/cdk/coercion'\nimport { Directive, DoCheck, ElementRef, HostBinding, Input, Optional, Self } from '@angular/core'\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms'\nimport { Subject } from 'rxjs'\n\nimport { NgSelectComponent } from '@ng-select/ng-select'\n\nimport { toggleAttribute } from '../utils/index'\n\n// NOTE: Partially based on mat-input: https://github.com/angular/material2/blob/master/src/lib/input/input.ts\n\nlet nextUniqueId = 0\n\n@Directive({\n  selector: 'input[seamInput], textarea[seamInput], ng-select[seamInput]',\n  exportAs: 'seamInput',\n})\nexport class InputDirective implements DoCheck {\n\n  protected _uid = `lib-input-${nextUniqueId++}`\n\n  @HostBinding('class.form-control') _isFormControl = true\n  @HostBinding('class.form-control-sm') get _isFormControlSmall() {\n    return this.seamInputSize === 'sm'\n  }\n  @HostBinding('class.is-invalid') get _isInvalid() {\n    return this.ngControl.invalid && (this.ngControl.dirty || this.ngControl.touched)\n  }\n\n  @HostBinding('attr.id') get _attrId() { return this._isNgSelect() ? undefined : this.id }\n  @HostBinding('attr.placeholder') get _attrPlaceholder() { return this.placeholder }\n\n  @Input() seamInputSize: 'sm' | 'normal' = 'normal'\n\n  @Input()\n  get id(): string { return this._id }\n  set id(value: string) { this._id = value || this._uid }\n  protected _id: string\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type }\n  set type(value: string) {\n    this._type = value || 'text'\n    // this._validateType()\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if ((!this._isTextarea() && !this._isNgSelect()) /* && getSupportedInputTypes().has(this._type) */) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type\n    }\n  }\n  protected _type = 'text'\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value) }\n  protected _required = false\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled\n    }\n    return this._disabled\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value)\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false\n      this.stateChanges.next()\n    }\n  }\n  protected _disabled = false\n\n  focused = false\n\n  readonly stateChanges: Subject<void> = new Subject<void>()\n\n  // @Input()\n  // get value(): string { return this._inputValueAccessor.value; }\n  // set value(value: string) {\n  //   if (value !== this.value) {\n  //     this._inputValueAccessor.value = value;\n  //     this.stateChanges.next();\n  //   }\n  // }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value) }\n  private _readonly = false\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() private _parentForm: NgForm,\n    @Optional() private _parentFormGroup: FormGroupDirective,\n    // 3rd party support\n    @Optional() private _ngSelect: NgSelectComponent\n  ) {\n    // Force setter to be called in case id was not specified.\n    this.id = this.id\n  }\n\n  ngDoCheck() {\n    if (this._isNgSelect()) {\n      this._ngSelect.labelForId = this.id\n      this._ngSelect.disabled = this.disabled\n    } else {\n      toggleAttribute(this._elementRef.nativeElement, 'required', this.required)\n      toggleAttribute(this._elementRef.nativeElement, 'disabled', this.disabled)\n    }\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea'\n  }\n\n  /** Determines if the component host is a ng-select. */\n  protected _isNgSelect() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'ng-select'\n  }\n\n  /** Make sure the input is a supported type. */\n  // protected _validateType() {\n  //   if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n  //     throw getMatInputUnsupportedTypeError(this._type)\n  //   }\n  // }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus()\n  }\n\n  /** Unfocuses the input. */\n  blur(): void {\n    this._elementRef.nativeElement.blur()\n  }\n\n  setValue(value: any) {\n    if (this.ngControl) {\n      const control = this.ngControl.control\n      if (control) {\n        control.setValue(value)\n      }\n    }\n  }\n\n}\n",
            "selector": "input[seamInput], textarea[seamInput], ng-select[seamInput]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "description": "<p>Implemented as part of MatFormFieldControl.</p>\n",
                    "line": 76,
                    "type": "boolean"
                },
                {
                    "name": "id",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "placeholder",
                    "description": "<p>Implemented as part of MatFormFieldControl.</p>\n",
                    "line": 60,
                    "type": "string"
                },
                {
                    "name": "readonly",
                    "description": "<p>Whether the element is readonly. </p>\n",
                    "line": 109,
                    "type": "boolean"
                },
                {
                    "name": "required",
                    "description": "<p>Implemented as part of MatFormFieldControl.</p>\n",
                    "line": 67,
                    "type": "boolean"
                },
                {
                    "name": "seamInputSize",
                    "defaultValue": "'normal'",
                    "line": 33,
                    "type": "\"sm\" | \"normal\""
                },
                {
                    "name": "type",
                    "description": "<p>Input type of the element. </p>\n",
                    "line": 42,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "attr.id",
                    "line": 30
                },
                {
                    "name": "attr.placeholder",
                    "line": 31
                },
                {
                    "name": "class.form-control",
                    "defaultValue": "true",
                    "line": 22
                },
                {
                    "name": "class.form-control-sm",
                    "line": 23
                },
                {
                    "name": "class.is-invalid",
                    "line": 26
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_elementRef",
                    "type": "ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>",
                    "optional": false,
                    "description": "",
                    "line": 114,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_readonly",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_required",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_type",
                    "defaultValue": "'text'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_uid",
                    "defaultValue": "`lib-input-${nextUniqueId++}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "focused",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "ngControl",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "stateChanges",
                    "defaultValue": "new Subject<void>()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_isNgSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 141,
                    "description": "<p>Determines if the component host is a ng-select. </p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_isTextarea",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 136,
                    "description": "<p>Determines if the component host is a textarea. </p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "description": "<p>Unfocuses the input. </p>\n"
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "description": "<p>Make sure the input is a supported type. </p>\n"
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125
                },
                {
                    "name": "setValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "DoCheck"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>"
                    },
                    {
                        "name": "ngControl",
                        "type": "NgControl"
                    },
                    {
                        "name": "_parentForm",
                        "type": "NgForm"
                    },
                    {
                        "name": "_parentFormGroup",
                        "type": "FormGroupDirective"
                    },
                    {
                        "name": "_ngSelect",
                        "type": "NgSelectComponent"
                    }
                ],
                "line": 111,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentForm",
                        "type": "NgForm",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentFormGroup",
                        "type": "FormGroupDirective",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngSelect",
                        "type": "NgSelectComponent",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "id": {
                    "name": "id",
                    "setSignature": {
                        "name": "id",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "type": {
                    "name": "type",
                    "setSignature": {
                        "name": "type",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                        "name": "required",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 68,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 82,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "readonly": {
                    "name": "readonly",
                    "setSignature": {
                        "name": "readonly",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 110,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "MenuToggleDirective",
            "id": "directive-MenuToggleDirective-f16c53f5d49234d27107fa42cc2ac585",
            "file": "projects/ui-common/src/lib/menu/menu-toggle.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y'\nimport { DOWN_ARROW, ESCAPE, UP_ARROW } from '@angular/cdk/keycodes'\nimport { ConnectionPositionPair, Overlay, OverlayRef, PositionStrategy } from '@angular/cdk/overlay'\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform'\nimport { TemplatePortal } from '@angular/cdk/portal'\nimport { Directive, ElementRef, HostListener, Inject, Input, OnDestroy, Optional, ViewContainerRef } from '@angular/core'\nimport { merge, of, Subscription } from 'rxjs'\n\nimport { MenuItemComponent } from './menu-item.component'\nimport { ITheSeamMenuPanel } from './menu-panel'\nimport { THESEAM_MENU_PANEL } from './menu-panel-token'\nimport { MenuComponent } from './menu.component'\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true})\n\n@Directive({\n  selector: '[seamMenuToggle]',\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen() || null'\n  },\n  exportAs: 'seamMenuToggle'\n})\nexport class MenuToggleDirective implements OnDestroy {\n\n  private _active = false\n  private _overlayRef: OverlayRef\n  private _menuClosedSubscription = Subscription.EMPTY\n  private _closingActionsSubscription = Subscription.EMPTY\n\n  public restoreFocus = true\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null\n\n  @Input() seamMenuToggle: MenuComponent\n\n  @HostListener('mousedown', [ '$event' ])\n  _onMouseDown(event: MouseEvent) {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      // if (this.triggersSubmenu()) {\n      //   event.preventDefault();\n      // }\n    }\n  }\n\n  @HostListener('keydown', [ '$event' ])\n  _onKeydown(event: any) {\n    this._openedBy = null\n\n    // tslint:disable-next-line:deprecation\n    const keyCode = event.keyCode\n\n    if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n      if (this.menuOpen()) {\n        this.seamMenuToggle.focusFirstItem(this._openedBy || 'program')\n      }\n    }\n  }\n\n  @HostListener('click', [ '$event' ])\n  _onClick(event: any) {\n    this.toggle()\n  }\n\n  @HostListener('document:keydown', [ '$event' ])\n  _onDocumentKeydown(event: any) {\n    if (event.keyCode === ESCAPE) {\n      this.closeMenu()\n    }\n  }\n\n  // @HostListener('document:mousedown', [ '$event' ])\n  // _onDocumentMouseDown(event: any) {\n  //   console.log('outside click')\n  // }\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _viewContainerRef: ViewContainerRef,\n    private _overlay: Overlay,\n    private _focusMonitor: FocusMonitor,\n    // @Inject(THESEAM_MENU_PANEL) @Optional() private _parentMenu?: ITheSeamMenuPanel<MenuItemComponent>\n  ) {\n    this._elementRef.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions)\n  }\n\n  ngOnDestroy() {\n    this.closeMenu()\n\n    this._elementRef.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions)\n\n    this._menuClosedSubscription.unsubscribe()\n    this._closingActionsSubscription.unsubscribe()\n  }\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch'\n\n  public toggle(): void {\n    if (this._active) {\n      this.closeMenu()\n    } else {\n      this.openMenu()\n    }\n  }\n\n  public openMenu(): void {\n    if (this._active || !this.seamMenuToggle) { return }\n    this._active = true\n\n    this._overlayRef = this._overlay.create({\n      hasBackdrop: true,\n      backdropClass: 'transparent',\n      positionStrategy: this.getOverlayPosition(this._elementRef.nativeElement),\n    })\n\n    this._overlayRef.attach(new TemplatePortal(this.seamMenuToggle.templateRef, this._viewContainerRef))\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu())\n    this._initMenu()\n\n    this._menuClosedSubscription = this.seamMenuToggle.closed.subscribe(v => {\n      // console.log('closed', v)\n      this.closeMenu()\n    })\n\n    // this._overlayRef.backdropClick().subscribe(v => {\n    //   console.log('backdropClick', v)\n    // })\n  }\n\n  public closeMenu(): void {\n    if (!this._active) { return }\n\n    if (this._overlayRef.hasAttached()) {\n      this._overlayRef.detach()\n    }\n\n    this._resetMenu()\n\n    this._menuClosedSubscription.unsubscribe()\n    this._closingActionsSubscription.unsubscribe()\n\n    this._active = false\n  }\n\n  public menuOpen(): boolean {\n    return this._overlayRef && this._overlayRef.hasAttached()\n  }\n\n  private getOverlayPosition(origin: HTMLElement): PositionStrategy {\n    const positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(origin)\n      .withPositions(this.getPositions())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n\n    return positionStrategy\n  }\n\n  private getPositions(): ConnectionPositionPair[] {\n    return [\n      {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n      },\n      {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top',\n      },\n      {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n      },\n      {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n      },\n    ]\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._elementRef, origin)\n    } else {\n      this._elementRef.nativeElement.focus()\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    // this.seamMenuToggle.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined\n    // this.seamMenuToggle.direction = this.dir\n    // this._setMenuElevation()\n    // this._setIsMenuOpen(true)\n    // this.seamMenuToggle.focusFirstItem(this._openedBy || 'program')\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    // this._setIsMenuOpen(false)\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus()\n      }\n      // else if (!this.triggersSubmenu()) {\n      //   this.focus(this._openedBy)\n      // }\n    }\n\n    this._openedBy = null\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef.backdropClick()\n    const detachments = this._overlayRef.detachments()\n    // const parentClose = this._parentMenu ? this._parentMenu.closed : of()\n    const parentClose = of()\n    // const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n    //   filter(active => active !== this._menuItemInstance),\n    //   filter(() => this._menuOpen)\n    // ) : of()\n    const hover = of()\n\n    return merge(backdrop, parentClose, hover, detachments)\n  }\n\n}\n",
            "selector": "[seamMenuToggle]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "seamMenuToggle",
                    "line": 39,
                    "type": "MenuComponent"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 72
                },
                {
                    "name": "document:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 77
                },
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 58
                },
                {
                    "name": "mousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 42
                }
            ],
            "propertiesClass": [
                {
                    "name": "_active",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_closingActionsSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_handleTouchStart",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "<p>Handles touch start events on the trigger.\nNeeds to be an arrow function so we can easily use addEventListener and removeEventListener.</p>\n",
                    "line": 113,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_menuClosedSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_openedBy",
                    "defaultValue": "null",
                    "type": "\"mouse\" | \"touch\" | null",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "_overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "restoreFocus",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_initMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "description": "<p>This method sets the menu state to open and focuses the first item if\nthe menu was opened via the keyboard.</p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_menuClosingActions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 255,
                    "description": "<p>Returns a stream that emits whenever an action that should close the menu occurs. </p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_resetMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "description": "<p>This method resets the menu when it&#39;s closed, most importantly restoring\nfocus to the menu trigger if the menu was opened via the keyboard.</p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "defaultValue": "'program'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "description": "<p>Focuses the menu trigger.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6151,
                                "end": 6157,
                                "flags": 0,
                                "escapedText": "origin"
                            },
                            "type": "FocusOrigin",
                            "defaultValue": "'program'",
                            "tagName": {
                                "pos": 6145,
                                "end": 6150,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Source of the menu trigger&#39;s focus.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getOverlayPosition",
                    "args": [
                        {
                            "name": "origin",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "PositionStrategy",
                    "typeParameters": [],
                    "line": 167,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPositions",
                    "args": [],
                    "optional": false,
                    "returnType": "ConnectionPositionPair[]",
                    "typeParameters": [],
                    "line": 177,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "menuOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99
                },
                {
                    "name": "openMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor"
                    }
                ],
                "line": 81,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ModalCloseDirective",
            "id": "directive-ModalCloseDirective-6f6b869171cba9d19cce0a6740294fe1",
            "file": "projects/ui-common/src/lib/modal/directives/modal-close.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, HostBinding, HostListener, Input, OnInit, Optional } from '@angular/core'\n\nimport { ModalRef } from '../modal-ref'\nimport { getClosestModal } from '../modal-utils'\nimport { Modal } from '../modal.service'\n\n@Directive({\n  selector: 'button[seamModalClose]',\n  exportAs: 'seamModalClose'\n})\nexport class ModalCloseDirective implements OnInit {\n\n  public modalRef: ModalRef<any> | undefined | null\n\n  // @HostBinding('class.close') _closeCss = true\n\n  @HostBinding('attr.type')\n  get _attrType() { return this.type }\n\n  @Input() type = 'button'\n\n  @HostBinding('attr.aria-label')\n  get _attrAriaLabel() { return this.ariaLabel || null }\n\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string\n\n  @Input() seamModalClose: any\n\n  // NOTE: This will most likely be temporary.\n  @Input() seamModalNext: any\n  @Input() seamModalNextConfig: any\n\n  @HostListener('click')\n  _onClick() {\n    if (this.modalRef) {\n      if (this.seamModalNext) {\n        this.modalRef.afterClosed().subscribe(() => {\n          if (typeof this.seamModalNext === 'string') {\n            this._modal.openFromLazyComponent(this.seamModalNext, this.seamModalNextConfig).subscribe()\n          } else {\n            this._modal.openFromComponent(this.seamModalNext, this.seamModalNextConfig)\n          }\n        })\n      }\n      this.modalRef.close(this.seamModalClose)\n    }\n  }\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _modal: Modal,\n    @Optional() private _modalRef?: ModalRef<any>\n  ) {\n    this.modalRef = _modalRef\n  }\n\n  ngOnInit() {\n    if (!this.modalRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.modalRef = getClosestModal(this._elementRef, this._modal.openDialogs)\n    }\n  }\n\n}\n",
            "selector": "button[seamModalClose]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "aria-label",
                    "description": "<p>Screenreader label for the button. </p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "seamModalClose",
                    "line": 28,
                    "type": "any"
                },
                {
                    "name": "seamModalNext",
                    "line": 31,
                    "type": "any"
                },
                {
                    "name": "seamModalNextConfig",
                    "line": 32,
                    "type": "any"
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "line": 20
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "attr.aria-label",
                    "line": 23
                },
                {
                    "name": "attr.type",
                    "line": 18
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 35
                }
            ],
            "propertiesClass": [
                {
                    "name": "modalRef",
                    "type": "ModalRef<any> | undefined | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>"
                    },
                    {
                        "name": "_modal",
                        "type": "Modal"
                    },
                    {
                        "name": "_modalRef",
                        "type": "ModalRef<any>",
                        "optional": true
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modal",
                        "type": "Modal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modalRef",
                        "type": "ModalRef<any>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ModalDirective",
            "id": "directive-ModalDirective-ffa578a8a6f26414663b7a1a7ad191f1",
            "file": "projects/ui-common/src/lib/modal/directives/modal.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\nimport { ModalRef } from '../modal-ref'\nimport { Modal } from '../modal.service'\n\n@Directive({\n  selector: '[seamModal]',\n  exportAs: 'seamModal'\n})\nexport class ModalDirective {\n\n  constructor(\n    public template: TemplateRef<HTMLElement>,\n    public modal: Modal\n  ) { }\n\n  open(): void {\n    console.log('[ModalDirective] open')\n    const ref = this.modal.openFromTemplate(this.template)\n    ref.backdropClick().subscribe(e => console.log('backdropClick', e))\n  }\n\n}\n",
            "selector": "[seamModal]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "modal",
                    "type": "Modal",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "template",
                    "type": "TemplateRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<HTMLElement>"
                    },
                    {
                        "name": "modal",
                        "type": "Modal"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modal",
                        "type": "Modal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ModalFooterTplDirective",
            "id": "directive-ModalFooterTplDirective-08868bc367cb0dade3909f570accc656",
            "file": "projects/ui-common/src/lib/modal/directives/modal-footer-tpl.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamModalFooterTpl]'\n})\nexport class ModalFooterTplDirective {\n\n  constructor(public template: TemplateRef<any>) { }\n\n}\n",
            "selector": "[seamModalFooterTpl]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ModalHeaderIconTplDirective",
            "id": "directive-ModalHeaderIconTplDirective-80e9cd48808f7ed624c1641da2ffe8b9",
            "file": "projects/ui-common/src/lib/modal/directives/modal-header-icon-tpl.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamModalHeaderIconTpl]'\n})\nexport class ModalHeaderIconTplDirective {\n\n  constructor(public template: TemplateRef<any>) { }\n\n}\n",
            "selector": "[seamModalHeaderIconTpl]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ModalHeaderTitleTplDirective",
            "id": "directive-ModalHeaderTitleTplDirective-91556eee009e78461e449eee7aefd631",
            "file": "projects/ui-common/src/lib/modal/directives/modal-header-title-tpl.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamModalHeaderTitleTpl]'\n})\nexport class ModalHeaderTitleTplDirective {\n\n  constructor(public template: TemplateRef<any>) { }\n\n}\n",
            "selector": "[seamModalHeaderTitleTpl]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ModalTitleDirective",
            "id": "directive-ModalTitleDirective-adccff49a14d7d337a14b828a35e88d7",
            "file": "projects/ui-common/src/lib/modal/directives/modal-title.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, HostBinding, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamModalTitle]'\n})\nexport class ModalTitleDirective {\n\n  @HostBinding('class.modal-title') _modalTitleCss = true\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>\n  ) { }\n\n}\n",
            "selector": "[seamModalTitle]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "class.modal-title",
                    "defaultValue": "true",
                    "line": 8
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "NgSelectExtraDirective",
            "id": "directive-NgSelectExtraDirective-509e808850efdfe22490a79e4c02ba76",
            "file": "projects/ui-common/src/lib/shared/directives/ng-select-extra.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { AfterViewChecked, Directive, ElementRef, HostBinding, HostListener,\n  NgZone, OnDestroy, OnInit, Optional, Self } from '@angular/core'\nimport { NgControl } from '@angular/forms'\nimport { NgOption, NgSelectComponent } from '@ng-select/ng-select'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { Subscription } from 'rxjs'\nimport { filter } from 'rxjs/operators'\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: 'ng-select'\n})\nexport class NgSelectExtraDirective implements OnInit, AfterViewChecked, OnDestroy {\n\n  private _labelForId: string\n\n  private _markedItem: NgOption | null = null\n  private _checkMarked = false\n  private _keyPressWorkaroundSub: Subscription | null = null\n\n  /**\n   * Set the tab index to `-1` to allow the root element of the ng-select\n   * component to receive `focus` event from javascript, but not get focused by\n   * keyboard navigation.\n   */\n  @HostBinding('attr.tabIndex')\n  get _tabIndex() { return this.ngSelect.disabled ? undefined : -1 }\n\n  /**\n   * Listening for focus event on root of component to allow javascript\n   * `focus()` function to trigger the components focus.\n   */\n  @HostListener('focus', ['$event']) onFocus($event: FocusEvent) {\n    const target = $event.target as HTMLElement\n    if (target === this.elementRef.nativeElement && !this.ngSelect.disabled) {\n      this.ngSelect.focus()\n    }\n\n    // Disables the labelForId on focus to avoid the browser autofill popup.\n    this._labelForId = this.ngSelect.labelForId\n    this.ngSelect.labelForId = null\n  }\n\n  @HostListener('blur', ['$event']) onBlur($event: any) {\n    // Timeout to avoid `ExpressionChangedAfterItHasBeenCheckedError`\n    setTimeout(() => {\n      // Re-enable the labelForId on blur to enable autofill to work if triggered\n      // outside the ng-select component and allow the label to focus input on\n      // click again.\n      this.ngSelect.labelForId = this._labelForId\n    })\n  }\n\n  @HostBinding('class.is-invalid') get _isInvalid() {\n    return this.ngControl ? this.ngControl.invalid && (this.ngControl.dirty || this.ngControl.touched) : false\n  }\n\n  @HostBinding('class.ng-empty-string-value') get _isEmptyStringValue() {\n    return this.ngControl ? this.ngControl.value === '' ? true : false : false\n  }\n\n  constructor(\n    private elementRef: ElementRef,\n    private _ngZone: NgZone,\n    private ngSelect: NgSelectComponent,\n    @Optional() @Self() public ngControl: NgControl\n  ) { }\n\n  ngOnInit() {\n    this.ngSelect.focusEvent\n      .subscribe(v => this._enableKeyPressWorkaround())\n\n    this.ngSelect.blurEvent\n      .subscribe(v => this._disableKeyPressWorkaround())\n\n    this._patch_ngSelect_open()\n  }\n\n  ngOnDestroy() { }\n\n  ngAfterViewChecked() {\n    if (this.ngSelect.dropdownPanel) {\n      if (this._checkMarked) {\n        if (this.ngSelect.dropdownPanel && this._markedItem !== null) {\n          if (this._markedItem.index !== this.ngSelect.dropdownPanel.markedItem.index) {\n            this.ngSelect.dropdownPanel.scrollInto(this.ngSelect.dropdownPanel.markedItem)\n          }\n        }\n      }\n    }\n    this._checkMarked = false\n  }\n\n  /**\n   * Temp fix for: https://github.com/ng-select/ng-select/issues/1122\n   */\n  private _patch_ngSelect_open() {\n    const original = this.ngSelect.open\n    const _self = this\n    this.ngSelect.open = function() {\n      original.apply(this, arguments)\n      _self._patch_ngSelectDropdownPanel_updateDropdownPosition()\n    }\n  }\n\n  /** Should ONLY be called by `_patch_ngSelect_open`. */\n  private _patch_ngSelectDropdownPanel_updateDropdownPosition() {\n    if (!this.ngSelect.dropdownPanel) { return }\n    const drop: any = this.ngSelect.dropdownPanel\n    // Only needed once, to update the position before the timeout in\n    // `updateDropdownPosition()`. So, using this variable to check if I already called\n    // `_updateAppendedDropdownPosition()`.\n    if (!drop.__libPatched) {\n      drop.__libPatched = 'patched'\n      const original = drop.updateDropdownPosition\n      const _self = this\n      drop.updateDropdownPosition = function() {\n        original.apply(this, arguments)\n        if (!!_self.ngSelect.appendTo) {\n          drop._updateAppendedDropdownPosition()\n        }\n      }\n    }\n  }\n\n  private _enableKeyPressWorkaround() {\n    if (this._keyPressWorkaroundSub) { return }\n    const _ngSelect = <any>this.ngSelect\n\n    this._keyPressWorkaroundSub = _ngSelect._keyPress$\n      .pipe(untilDestroyed(this))\n      .pipe(filter(v => !this.ngSelect.searchable))\n      .subscribe(v => {\n        this._ngZone.runOutsideAngular(() => {\n          window.requestAnimationFrame(() => {\n            if (this.ngSelect.dropdownPanel) {\n              this._markedItem = this.ngSelect.dropdownPanel.markedItem\n            }\n            this._checkMarked = true\n          })\n        })\n      })\n  }\n\n  private _disableKeyPressWorkaround() {\n    if (this._keyPressWorkaroundSub) {\n      this._keyPressWorkaroundSub.unsubscribe()\n      this._keyPressWorkaroundSub = null\n    }\n  }\n\n}\n",
            "selector": "ng-select",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "attr.tabIndex",
                    "description": "<p>Set the tab index to <code>-1</code> to allow the root element of the ng-select\ncomponent to receive <code>focus</code> event from javascript, but not get focused by\nkeyboard navigation.</p>\n",
                    "line": 27
                },
                {
                    "name": "class.is-invalid",
                    "line": 54
                },
                {
                    "name": "class.ng-empty-string-value",
                    "line": 58
                }
            ],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 44
                },
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "$event",
                            "type": "FocusEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "description": "<p>Listening for focus event on root of component to allow javascript\n<code>focus()</code> function to trigger the components focus.</p>\n",
                    "line": 33
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checkMarked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_keyPressWorkaroundSub",
                    "defaultValue": "null",
                    "type": "Subscription | null",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_labelForId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_markedItem",
                    "defaultValue": "null",
                    "type": "NgOption | null",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngControl",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_disableKeyPressWorkaround",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_enableKeyPressWorkaround",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_patch_ngSelect_open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "description": "<p>Temp fix for: <a href=\"https://github.com/ng-select/ng-select/issues/1122\">https://github.com/ng-select/ng-select/issues/1122</a></p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_patch_ngSelectDropdownPanel_updateDropdownPosition",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "description": "<p>Should ONLY be called by <code>_patch_ngSelect_open</code>. </p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69
                }
            ],
            "implements": [
                "OnInit",
                "AfterViewChecked",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone"
                    },
                    {
                        "name": "ngSelect",
                        "type": "NgSelectComponent"
                    },
                    {
                        "name": "ngControl",
                        "type": "NgControl"
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngSelect",
                        "type": "NgSelectComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "OverlayScrollbarDirective",
            "id": "directive-OverlayScrollbarDirective-e0769e9441d8695bf8de056d1d767fee",
            "file": "projects/ui-common/src/lib/scrollbar/overlay-scrollbar.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { coerceBooleanProperty } from '@angular/cdk/coercion'\nimport { AfterViewInit, Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core'\n\nimport OverlayScrollbars from 'overlayscrollbars'\n\nimport { OverlayScrollbarsService } from './overlay-scrollbars.service'\n\nimport { IOverlayScrollbarsConfig } from './overlay-scrollbars-config-model'\n\n@Directive({\n  selector: '[seamOverlayScrollbar]',\n  exportAs: 'seamOverlayScrollbar'\n})\nexport class OverlayScrollbarDirective implements OnInit, AfterViewInit, OnDestroy {\n\n  private _disabled = false\n\n  @Input()\n  set seamOverlayScrollbar(value: IOverlayScrollbarsConfig) { this.options = value }\n\n  @Input()\n  get overlayScrollbarEnabled(): boolean {\n    return this._scrollbars.isInstanceEnabled(this._ref.nativeElement)\n  }\n  set overlayScrollbarEnabled(value: boolean) {\n    this._disabled = !coerceBooleanProperty(value)\n    if (!this._disabled) {\n      this._scrollbars.initializeInstance(this._ref.nativeElement)\n    } else {\n      this._scrollbars.destroyInstance(this._ref.nativeElement)\n    }\n  }\n\n  set options(value: IOverlayScrollbarsConfig) {\n    this._options = value || {}\n    this._scrollbars.setOptions(this._ref.nativeElement, this._options)\n  }\n  get options() {\n    if (this._scrollbars.isInstanceEnabled(this._ref.nativeElement)) {\n      return this._scrollbars.getOptions(this._ref.nativeElement)\n    }\n    return this._options\n  }\n  private _options: IOverlayScrollbarsConfig = {}\n\n  constructor(\n    private _ref: ElementRef,\n    private _scrollbars: OverlayScrollbarsService\n  ) { }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {\n    if (!this._disabled) {\n      this._scrollbars.initializeInstance(this._ref.nativeElement, this._options)\n    }\n  }\n\n  ngOnDestroy() {\n    this._scrollbars.destroyInstance(this._ref.nativeElement)\n  }\n\n  get instance(): OverlayScrollbars {\n    return this._scrollbars.getInstance(this._ref.nativeElement)\n  }\n\n}\n",
            "selector": "[seamOverlayScrollbar]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "overlayScrollbarEnabled",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "seamOverlayScrollbar",
                    "line": 19,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_options",
                    "defaultValue": "{}",
                    "type": "IOverlayScrollbarsConfig",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                }
            ],
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_ref",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_scrollbars",
                        "type": "OverlayScrollbarsService"
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "_ref",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_scrollbars",
                        "type": "OverlayScrollbarsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "seamOverlayScrollbar": {
                    "name": "seamOverlayScrollbar",
                    "setSignature": {
                        "name": "seamOverlayScrollbar",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "overlayScrollbarEnabled": {
                    "name": "overlayScrollbarEnabled",
                    "setSignature": {
                        "name": "overlayScrollbarEnabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "options": {
                    "name": "options",
                    "setSignature": {
                        "name": "options",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                },
                "instance": {
                    "name": "instance",
                    "getSignature": {
                        "name": "instance",
                        "type": "",
                        "returnType": "OverlayScrollbars",
                        "line": 63
                    }
                }
            }
        },
        {
            "name": "StoryNavToggleDirective",
            "id": "directive-StoryNavToggleDirective-4cbcd31b091dda298ac3924cffc7833d",
            "file": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.stories.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF } from '@angular/common'\nimport { Component, Directive, Input } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { Router, RouterModule } from '@angular/router'\n\nimport { faBuilding, faCompass } from '@fortawesome/free-regular-svg-icons'\nimport { faSignature } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamSideNavModule } from '../side-nav.module'\n\n@Component({ template: `Url: {{ router.url }}` })\nclass StoryRoutePlacholderComponent {\n  constructor(public router: Router) { }\n}\n\n// tslint:disable-next-line:directive-selector\n@Directive({ selector: '[storyNavToggle]' })\nclass StoryNavToggleDirective {\n  @Input() set storyNavToggle(value: string) { this._router.navigateByUrl(value) }\n  constructor(private _router: Router) { }\n}\n\nstoriesOf('Framework/SideNav/Item/Basic', module)\n  .addDecorator(withKnobs)\n\n  .add('No Children', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryRoutePlacholderComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        RouterModule.forRoot([], { useHash: true }),\n        TheSeamSideNavModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ]\n    },\n    props: {\n      itemType: 'basic',\n      label: 'Example 1',\n      icon: faBuilding\n    },\n    template: `\n      <div class=\"d-flex flex-row vh-100\">\n        <div style=\"width: 260px; background-color: #e9ecef;\" class=\"h-100\">\n          <seam-side-nav-item\n            [itemType]=\"itemType\"\n            [icon]=\"icon\"\n            [label]=\"label\">\n          </seam-side-nav-item>\n        </div>\n      </div>\n    `\n  }))\n\n  .add('With Children', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryRoutePlacholderComponent,\n        StoryNavToggleDirective\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        RouterModule.forRoot([\n          { path: 'example1', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.1', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.2', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.3', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.2.1', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.2.2', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.2.3', component: StoryRoutePlacholderComponent },\n          { path: 'example2', component: StoryRoutePlacholderComponent }\n        ], { useHash: true }),\n        TheSeamSideNavModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ]\n    },\n    props: {\n      currentUrl: 'example1',\n\n      itemType: 'basic',\n      label: 'Example 1',\n      icon: faBuilding,\n      children: [\n        {\n          itemType: 'link',\n          label: 'Example 1.1',\n          icon: faSignature,\n          link: 'example1/example1.1'\n        },\n        // {\n        //   itemType: 'link',\n        //   label: 'Example 1.2',\n        //   icon: faBuilding,\n        //   link: 'example1/example1.2',\n        // },\n        {\n          itemType: 'basic',\n          label: 'Example 1.2',\n          icon: faBuilding,\n          children: [\n            {\n              itemType: 'link',\n              label: 'Example 1.1',\n              icon: faSignature,\n              link: 'example1/example1.2.1'\n            },\n            {\n              itemType: 'link',\n              label: 'Example 1.2',\n              icon: faBuilding,\n              link: 'example1/example1.2.2'\n            },\n            {\n              itemType: 'link',\n              label: 'Example 1.3',\n              link: 'example1/example1.2.3'\n            },\n          ]\n        },\n        {\n          itemType: 'link',\n          label: 'Example 1.3',\n          link: 'example1/example1.3'\n        },\n      ]\n    },\n    template: `\n      <div class=\"d-flex flex-row vh-100\" [storyNavToggle]=\"currentUrl\">\n        <div style=\"width: 260px; background-color: #e9ecef;\" class=\"h-100\">\n          <seam-side-nav-item\n            [itemType]=\"itemType\"\n            [icon]=\"icon\"\n            [label]=\"label\"\n            [children]=\"children\">\n          </seam-side-nav-item>\n        </div>\n\n\n        <div class=\"p-4\">\n          <router-outlet></router-outlet>\n          <div>\n            <a routerLink=\"/example1\">Set Route: '/example1'</a><br>\n            <a routerLink=\"/example1/example1.1\">Set Route: '/example1/example1.1'</a><br>\n            <a routerLink=\"/example1/example1.2\">Set Route: '/example1/example1.2'</a><br>\n            <a routerLink=\"/example1/example1.3\">Set Route: '/example1/example1.3'</a><br>\n          </div>\n        </div>\n      </div>\n    `\n  }))\n\n\nstoriesOf('Framework/SideNav/Item/Link', module)\n  .addDecorator(withKnobs)\n\n  .add('No Children', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryRoutePlacholderComponent,\n        StoryNavToggleDirective\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        RouterModule.forRoot([\n          { path: 'example1', component: StoryRoutePlacholderComponent },\n          { path: 'example2', component: StoryRoutePlacholderComponent }\n        ], { useHash: true }),\n        TheSeamSideNavModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ]\n    },\n    props: {\n      currentUrl: 'example2',\n\n      itemType: 'link',\n      label: 'Example 1',\n      icon: faBuilding,\n      link: 'example1',\n      queryParams: [],\n      children: []\n    },\n    template: `\n      <div class=\"d-flex flex-row vh-100\" [storyNavToggle]=\"currentUrl\">\n        <div style=\"width: 260px; background-color: #e9ecef;\" class=\"h-100\">\n          <seam-side-nav-item\n            [itemType]=\"itemType\"\n            [icon]=\"icon\"\n            [label]=\"label\"\n            [link]=\"link\"\n            [queryParams]=\"queryParams\"\n            [children]=\"children\">\n          </seam-side-nav-item>\n        </div>\n\n\n        <div class=\"p-4\">\n          <router-outlet></router-outlet>\n          <div>\n            <a routerLink=\"/example1\">Set Active</a><br>\n            <a routerLink=\"/example2\">Set Inactive</a>\n          </div>\n        </div>\n      </div>\n    `\n  }))\n\n  .add('With Children', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryRoutePlacholderComponent,\n        StoryNavToggleDirective\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        RouterModule.forRoot([\n          { path: 'example1', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.1', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.2', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.3', component: StoryRoutePlacholderComponent },\n          { path: 'example2', component: StoryRoutePlacholderComponent },\n        ], { useHash: true }),\n        TheSeamSideNavModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ]\n    },\n    props: {\n      currentUrl: 'example1',\n\n      itemType: 'link',\n      label: 'Example 1',\n      icon: faBuilding,\n      link: 'example1',\n      children: [\n        {\n          itemType: 'link',\n          label: 'Example 1.1',\n          icon: faSignature,\n          link: 'example1/example1.1'\n        },\n        {\n          itemType: 'link',\n          label: 'Example 1.2',\n          icon: faBuilding,\n          link: 'example1/example1.2'\n        },\n        {\n          itemType: 'link',\n          label: 'Example 1.3',\n          link: 'example1/example1.3'\n        },\n      ]\n    },\n    template: `\n      <div class=\"d-flex flex-row vh-100\" [storyNavToggle]=\"currentUrl\">\n        <div style=\"width: 260px; background-color: #e9ecef;\" class=\"h-100\">\n          <seam-side-nav-item\n            [itemType]=\"itemType\"\n            [icon]=\"icon\"\n            [label]=\"label\"\n            [link]=\"link\"\n            [children]=\"children\">\n          </seam-side-nav-item>\n        </div>\n\n\n        <div class=\"p-4\">\n          <router-outlet></router-outlet>\n          <div>\n            <a routerLink=\"/example1\">Set Route: '/example1'</a><br>\n            <a routerLink=\"/example1/example1.1\">Set Route: '/example1/example1.1'</a><br>\n            <a routerLink=\"/example1/example1.2\">Set Route: '/example1/example1.2'</a><br>\n            <a routerLink=\"/example1/example1.3\">Set Route: '/example1/example1.3'</a><br>\n            <a routerLink=\"/example2\">Set Route: '/example2'</a><br>\n          </div>\n        </div>\n      </div>\n    `\n  }))\n",
            "selector": "[storyNavToggle]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "storyNavToggle",
                    "line": 22,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "storyNavToggle": {
                    "name": "storyNavToggle",
                    "setSignature": {
                        "name": "storyNavToggle",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "TabbedTabContentDirective",
            "id": "directive-TabbedTabContentDirective-5022b8d952c4fa78c809f93a2d675245",
            "file": "projects/ui-common/src/lib/tabbed/directives/tabbed-tab-content.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive } from '@angular/core'\n\n@Directive({\n  selector: '[seamTabbedTabContent]',\n  exportAs: 'seamTabbedTabContent'\n})\nexport class TabbedTabContentDirective {\n\n  public isActive = false\n\n  constructor() { }\n\n}\n",
            "selector": "[seamTabbedTabContent]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            }
        },
        {
            "name": "TabbedTabDirective",
            "id": "directive-TabbedTabDirective-6edfc3d61cd22d41028dbb390a3b1c91",
            "file": "projects/ui-common/src/lib/tabbed/directives/tabbed-tab.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, HostBinding, OnInit } from '@angular/core'\n\nimport { TabbedComponent } from '../tabbed.component'\nimport { TabbedService } from '../tabbed.service'\n\n@Directive({\n  selector: '[seamTabbedTab]',\n  exportAs: 'seamTabbedTab'\n})\nexport class TabbedTabDirective implements OnInit {\n\n  // @HostBinding('class.custom-invalid')\n  // get customInvalid() { return this.control.invalid }\n\n  public isActive = false\n\n  constructor(\n    public elementRef: ElementRef,\n    // public host: TabbedComponent,\n    public tabbedService: TabbedService\n  ) { }\n\n  ngOnInit() {\n    // this.tabbedService.selectedTab.subscribe(tab => {\n    //   console.log('tab: ', tab)\n    //   console.log('tab.tabbedTabTpl.elementRef: ', tab.tabbedTabTpl.elementRef)\n    //   console.log('this.elementRef: ', this.elementRef)\n    //   if (tab.tabbedTabTpl.elementRef.na === this.elementRef) {\n    //     this.isActive = true\n    //   } else {\n    //     this.isActive = false\n    //   }\n    // })\n  }\n\n}\n",
            "selector": "[seamTabbedTab]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tabbedService",
                    "type": "TabbedService",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "tabbedService",
                        "type": "TabbedService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tabbedService",
                        "type": "TabbedService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TiledSelectTileIconTplDirective",
            "id": "directive-TiledSelectTileIconTplDirective-1ad469d2994ebfc92f4b8d7cda462b16",
            "file": "projects/ui-common/src/lib/tiled-select/directives/tiled-select-tile-icon-tpl.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamTiledSelectTileIconTpl]',\n  exportAs: 'seamTiledSelectTileIconTpl'\n})\nexport class TiledSelectTileIconTplDirective {\n\n  constructor(public template: TemplateRef<any>) { }\n\n}\n",
            "selector": "[seamTiledSelectTileIconTpl]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TiledSelectTileLabelTplDirective",
            "id": "directive-TiledSelectTileLabelTplDirective-697ff6de4ceb1fb4d7a4a4078f9d2025",
            "file": "projects/ui-common/src/lib/tiled-select/directives/tiled-select-tile-label-tpl.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamTiledSelectTileLabelTpl]'\n})\nexport class TiledSelectTileLabelTplDirective {\n\n  constructor(public template: TemplateRef<any>) { }\n\n}\n",
            "selector": "[seamTiledSelectTileLabelTpl]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TiledSelectTileOverlayDirective",
            "id": "directive-TiledSelectTileOverlayDirective-0772212dde68714277f50c18fe8d2612",
            "file": "projects/ui-common/src/lib/tiled-select/directives/tiled-select-tile-overlay.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, Input, TemplateRef } from '@angular/core'\n\nimport { ITiledSelectItem } from '../tiled-select.models'\n\n@Directive({\n  selector: '[seamTiledSelectTileOverlay]',\n  exportAs: 'seamTiledSelectTileOverlay'\n})\nexport class TiledSelectTileOverlayDirective {\n\n  @Input() record: ITiledSelectItem\n\n  constructor(public template: TemplateRef<any>) { }\n\n}\n",
            "selector": "[seamTiledSelectTileOverlay]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "record",
                    "line": 11,
                    "type": "ITiledSelectItem"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ToggleEditDisplayTplDirective",
            "id": "directive-ToggleEditDisplayTplDirective-949bc1dd28dcf48a35d37aa323b217f2",
            "file": "projects/ui-common/src/lib/toggle-edit/toggle-edit-display-tpl.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamToggleEditDisplayTpl]'\n})\nexport class ToggleEditDisplayTplDirective {\n\n  constructor(public template: TemplateRef<any>) {}\n\n}\n",
            "selector": "[seamToggleEditDisplayTpl]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ToggleGroupDirective",
            "id": "directive-ToggleGroupDirective-eb376fbe97013f47173b0ee7c038e12e",
            "file": "projects/ui-common/src/lib/toggle-group/toggle-group.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { coerceArray } from '@angular/cdk/coercion'\nimport { AfterViewInit, ContentChildren, Directive, EventEmitter, forwardRef, Input, OnDestroy, Output, QueryList } from '@angular/core'\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { combineLatest, from, Observable, of } from 'rxjs'\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators'\n\nimport { ToggleGroupOptionDirective } from './toggle-group-option.directive'\n\nexport const TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => ToggleGroupDirective),\n  multi: true,\n}\n\n@Directive({\n  selector: '[seamToggleGroup]',\n  exportAs: 'seamToggleGroup',\n  providers: [ TOGGLE_GROUP_VALUE_ACCESSOR ]\n})\nexport class ToggleGroupDirective implements OnDestroy, AfterViewInit, ControlValueAccessor {\n\n  // tslint:disable-next-line:no-input-rename\n  @Input('value') val: string | string[] | undefined\n  @Input() disabled: boolean\n  @Input() multiple = false\n  @Input() selectionToggleable = true\n\n  // TODO: Add min/max selected inputs to make toggling better for multi select\n\n  @Output() readonly change = new EventEmitter<string | string[] | undefined>()\n\n  @ContentChildren(ToggleGroupOptionDirective) optionDirectives: QueryList<ToggleGroupOptionDirective>\n\n  public options: Observable<ToggleGroupOptionDirective[]>\n\n  onChange: any\n  onTouched: any\n\n  constructor() { }\n\n  ngOnDestroy() { }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this._updateDirectiveStates()\n\n      this.options = this.optionDirectives.changes\n        .pipe(untilDestroyed(this))\n        .pipe(startWith(this.optionDirectives))\n        .pipe(map(v => v.toArray() as ToggleGroupOptionDirective[]))\n\n      this.options\n        .pipe(switchMap(opts => {\n          const _tmp = of(undefined)\n          if (opts) {\n            const _v: Observable<boolean>[] = []\n            for (const opt of opts) {\n              _v.push(opt.selectionChange.pipe(\n                filter(v => opt.selected !== this.isSelected(opt.value)),\n                tap(v => {\n                  if (this.isSelected(opt.value)) {\n                    this.unselectValue(opt.value)\n                  } else {\n                    this.selectValue(opt.value)\n                  }\n                })\n              ))\n            }\n            return combineLatest(_v)\n          }\n          return _tmp\n        }))\n        .subscribe()\n\n      this.change\n        .pipe(switchMap(_ => from(this.optionDirectives.toArray())\n          .pipe(tap(opt => { this._updateDirectiveState(opt) }))\n        ))\n        .subscribe()\n    })\n  }\n\n  get value(): string | string[] | undefined {\n    return this.val\n  }\n\n  set value(value: string | string[] | undefined) {\n    const _value = this.multiple\n      ? value !== null && value !== undefined\n        ? coerceArray(value)\n        : value\n      : value\n\n    this.val = (this.multiple) ? [ ...(<string[]>_value || []) ] : _value || ''\n    this.change.emit(this.val)\n    if (this.onChange) { this.onChange(_value) }\n    if (this.onTouched) { this.onTouched() }\n  }\n\n  writeValue(value: any): void {\n    this.value = value\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled\n  }\n\n  isSelected(value: string | undefined) {\n    if (this.multiple) {\n      const idx = (<string[]>this.value || []).findIndex(v => v === value)\n      return idx !== -1\n    } else {\n      // TODO: Clean this up when the directive no longer allows array value type when multiple is false\n      const v = Array.isArray(this.value) && this.value.length === 1\n        ? this.value[0]\n        : this.value\n      return v === value\n    }\n  }\n\n  unselectValue(value: string | undefined) {\n    if (this.multiple) {\n      this.value = (<string[]>this.value || []).filter(v => v !== value)\n    } else {\n      this.value = undefined\n    }\n  }\n\n  selectValue(value: string | undefined) {\n    if (this.multiple) {\n      const _value = [ ...(<string[]>this.value || []) ]\n      this.value = value ? [ ..._value, value ] : _value\n    } else {\n      this.value = value\n    }\n  }\n\n  getOptionDirectiveByValue(value: string) {\n    if (!this.optionDirectives || this.optionDirectives.length < 1) {\n      return null\n    }\n\n    return this.optionDirectives.toArray()\n      .find(opt => opt.value === value)\n  }\n\n  private _updateDirectiveStates(): void {\n    if (this.optionDirectives) {\n      for (const opt of this.optionDirectives.toArray()) {\n        this._updateDirectiveState(opt)\n      }\n    }\n  }\n\n  private _updateDirectiveState(opt: ToggleGroupOptionDirective): void {\n    const selected = this.isSelected(opt.value)\n    if (opt.selected !== selected) {\n      if (!opt._canUnselect) {\n        opt._canUnselect = true\n      }\n      opt.selected = selected\n    }\n    if (!this.selectionToggleable) {\n      if (!this.multiple || (this.value && this.value.length <= 1)) {\n        if (opt.selected) {\n          if (opt._canUnselect) {\n            opt._canUnselect = false\n          }\n        } else {\n          if (!opt._canUnselect) {\n            opt._canUnselect = true\n          }\n        }\n      } else {\n        if (!opt._canUnselect) {\n          opt._canUnselect = true\n        }\n      }\n    }\n  }\n\n}\n",
            "selector": "[seamToggleGroup]",
            "providers": [
                {
                    "name": "TOGGLE_GROUP_VALUE_ACCESSOR"
                }
            ],
            "inputsClass": [
                {
                    "name": "disabled",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "line": 27
                },
                {
                    "name": "selectionToggleable",
                    "defaultValue": "true",
                    "line": 28
                },
                {
                    "name": "value",
                    "line": 25,
                    "type": "string | string[] | undefined"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<string | string[] | undefined>()",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "onTouched",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "optionDirectives",
                    "type": "QueryList<ToggleGroupOptionDirective>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "ToggleGroupOptionDirective"
                        }
                    ]
                },
                {
                    "name": "options",
                    "type": "Observable<ToggleGroupOptionDirective[]>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_updateDirectiveState",
                    "args": [
                        {
                            "name": "opt",
                            "type": "ToggleGroupOptionDirective"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "opt",
                            "type": "ToggleGroupOptionDirective",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_updateDirectiveStates",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getOptionDirectiveByValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 148,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 118,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unselectValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnDestroy",
                "AfterViewInit",
                "ControlValueAccessor"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 39
            },
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 89,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "string | [] | undefined",
                        "line": 85
                    }
                }
            }
        },
        {
            "name": "ToggleGroupOptionDirective",
            "id": "directive-ToggleGroupOptionDirective-5caf185725e13d6b810a7259876c6878",
            "file": "projects/ui-common/src/lib/toggle-group/toggle-group-option.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { coerceBooleanProperty } from '@angular/cdk/coercion'\nimport { Directive, EventEmitter, HostBinding, Input, Output } from '@angular/core'\n\n@Directive({\n  selector: '[seamToggleGroupOption]',\n  exportAs: 'seamToggleGroupOption'\n})\nexport class ToggleGroupOptionDirective {\n\n  @Input() seamToggleGroupOption: string\n\n  @Input()\n  get selected(): boolean { return this._selected }\n  set selected(value: boolean) {\n    if (!this._canUnselect && !value) { return }\n    this._selected = coerceBooleanProperty(value)\n    this.selectionChange.emit(this._selected)\n  }\n  private _selected = false\n\n  /** Internal use only for now. */\n  _canUnselect = true\n\n  @Output() selectionChange = new EventEmitter<boolean>()\n\n  @HostBinding('class.lib-toggle-group-option-selected') get _checkioSelectedClass() {\n    return this._selected\n  }\n\n  constructor() { }\n\n  get value(): string {\n    return this.seamToggleGroupOption\n  }\n\n}\n",
            "selector": "[seamToggleGroupOption]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "seamToggleGroupOption",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "selected",
                    "line": 13,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectionChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [
                {
                    "name": "class.lib-toggle-group-option-selected",
                    "line": 26
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_canUnselect",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "<p>Internal use only for now. </p>\n",
                    "line": 22
                },
                {
                    "name": "_selected",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 28
            },
            "accessors": {
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "string",
                        "returnType": "string",
                        "line": 32
                    }
                }
            }
        },
        {
            "name": "TopBarItemDirective",
            "id": "directive-TopBarItemDirective-c5ad660d3bfea3fbed41bd03ad8141f2",
            "file": "projects/ui-common/src/lib/framework/top-bar/top-bar-item.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamTopBarItem]'\n})\nexport class TopBarItemDirective {\n\n  constructor(public template: TemplateRef<any>) { }\n\n}\n",
            "selector": "[seamTopBarItem]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TopBarMenuDirective",
            "id": "directive-TopBarMenuDirective-981c04458201d329971dd1143de41ba4",
            "file": "projects/ui-common/src/lib/framework/top-bar/top-bar-menu.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, Self } from '@angular/core'\n\nimport { MenuComponent } from '../../menu/menu.component'\n\n@Directive({\n  selector: 'seam-menu[seamTopBarMenu]'\n})\nexport class TopBarMenuDirective {\n\n  constructor(\n    @Self() public menu: MenuComponent\n  ) { }\n\n}\n",
            "selector": "seam-menu[seamTopBarMenu]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "type": "MenuComponent",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "Self",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "menu",
                        "type": "MenuComponent"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "menu",
                        "type": "MenuComponent",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "WidgetDragHandleDirective",
            "id": "directive-WidgetDragHandleDirective-16f997dead8d6be4e7d1c3bba414d95e",
            "file": "projects/ui-common/src/lib/widget/directives/widget-drag-handle.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { coerceBooleanProperty } from '@angular/cdk/coercion'\nimport { CdkDragHandle, ɵb as CDK_DRAG_PARENT } from '@angular/cdk/drag-drop'\nimport { AfterViewInit, Directive, ElementRef, Inject, Input, NgZone, OnDestroy, OnInit, Optional } from '@angular/core'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { Subject } from 'rxjs'\nimport { take } from 'rxjs/operators'\n\n\n//\n// NOTE: This will probably NOT be used long term, unless more of the\n// CdkDragDrop code is rewritten.\n//\n// This directive is meant to be a HACK replacement directive for CdkDragHandle.\n// The reason this was made is because CdkDragHandle doesn't work in child\n// components, since it uses ContentChildren to query for the handles.\n//\n// This could easily break, because I am forcing the handles query list to emit\n// changes manually. So, if the query list actually changes, then my changes\n// will be broken.\n//\n\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] }\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string\n  MozUserSelect: string // For some reason the Firefox property is in PascalCase.\n}\n\nexport function extendStyles(\n  dest: Writeable<CSSStyleDeclaration>,\n  source: Partial<DragCSSStyleDeclaration>\n) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration]\n    }\n  }\n\n  return dest\n}\n\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none'\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  })\n}\n\n@Directive({\n  selector: '[seamWidgetDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class WidgetDragHandleDirective implements OnDestroy, AfterViewInit {\n\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined\n\n  /** Emits when the state of the handle has changed. */\n  _stateChanges = new Subject<CdkDragHandle>()\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value)\n    this._stateChanges.next(<any>this)\n  }\n  private _disabled = false\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any\n  ) {\n    this._parentDrag = parentDrag\n    toggleNativeDragInteractions(element.nativeElement, false)\n  }\n\n  ngAfterViewInit() {\n    if (this._parentDrag) {\n      // HACK: This is a hack to allow the `CdkDrag` directive to manage a\n      // handle that is not visible to `ContentChildren` query.\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1), untilDestroyed(this))\n        .subscribe(() => {\n          const parent = <any>this._parentDrag\n          parent._handles.reset([ ...parent._handles._results, this ])\n          parent._handles.notifyOnChanges()\n          parent._dragRef.enableHandle(this.element.nativeElement)\n        })\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete()\n  }\n\n}\n",
            "selector": "[seamWidgetDragHandle]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "cdkDragHandleDisabled",
                    "description": "<p>Whether starting to drag through this handle is disabled. </p>\n",
                    "line": 81,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_parentDrag",
                    "type": "literal type | undefined",
                    "optional": false,
                    "description": "<p>Closest parent draggable instance. </p>\n",
                    "line": 74
                },
                {
                    "name": "_stateChanges",
                    "defaultValue": "new Subject<CdkDragHandle>()",
                    "type": "",
                    "optional": false,
                    "description": "<p>Emits when the state of the handle has changed. </p>\n",
                    "line": 77
                },
                {
                    "name": "element",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112
                }
            ],
            "implements": [
                "OnDestroy",
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef<HTMLElement>"
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone"
                    },
                    {
                        "name": "parentDrag",
                        "type": "any",
                        "optional": true
                    }
                ],
                "line": 86,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parentDrag",
                        "type": "any",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 82,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "WidgetIconTplDirective",
            "id": "directive-WidgetIconTplDirective-4940e0b087bc3ae6c0e1e29b6e17e3f8",
            "file": "projects/ui-common/src/lib/widget/directives/widget-icon-tpl.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamWidgetIconTpl]'\n})\nexport class WidgetIconTplDirective {\n\n  constructor(public template: TemplateRef<any>) { }\n\n}\n",
            "selector": "[seamWidgetIconTpl]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "WidgetListGroupItemIconTplDirective",
            "id": "directive-WidgetListGroupItemIconTplDirective-ad2a1cba9f68840bc358c2d32d576204",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item-icon-tpl.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamWidgetListGroupItemIconTpl]',\n  exportAs: 'seamWidgetListGroupItemIconTpl'\n})\nexport class WidgetListGroupItemIconTplDirective {\n\n  constructor(public template: TemplateRef<any>) { }\n\n}\n",
            "selector": "[seamWidgetListGroupItemIconTpl]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "WidgetTileSecondaryIconDirective",
            "id": "directive-WidgetTileSecondaryIconDirective-58b773320206cf9d318a10a8be50c9c9",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-tile/widget-tile-secondary-icon.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamWidgetTileSecondaryIcon]',\n  exportAs: 'seamWidgetTileSecondaryIcon'\n})\nexport class WidgetTileSecondaryIconDirective {\n\n  constructor(public template: TemplateRef<any>) { }\n\n}\n",
            "selector": "[seamWidgetTileSecondaryIcon]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "WidgetTitleTplDirective",
            "id": "directive-WidgetTitleTplDirective-7582ecfb870a68b1c389df5fa252c59e",
            "file": "projects/ui-common/src/lib/widget/directives/widget-title-tpl.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[seamWidgetTitleTpl]'\n})\nexport class WidgetTitleTplDirective {\n\n  constructor(public template: TemplateRef<any>) { }\n\n}\n",
            "selector": "[seamWidgetTitleTpl]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AnchorBadgeButtonComponent",
            "id": "component-AnchorBadgeButtonComponent-af102541275470375b2d3869e46fcdff",
            "file": "projects/ui-common/src/lib/buttons/badge-button/badge-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "seamBadgeButton,seamBadgeButtonAnchor",
            "host": {},
            "inputs": [
                "disabled",
                "theme",
                "size"
            ],
            "outputs": [],
            "providers": [],
            "selector": "a[seamBadgeButton]",
            "styleUrls": [
                "./badge-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./badge-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "badgeText",
                    "defaultValue": "''",
                    "line": 63
                },
                {
                    "name": "badgeTheme",
                    "defaultValue": "'light'",
                    "line": 62,
                    "type": "ThemeTypes"
                },
                {
                    "name": "tabIndex",
                    "description": "<p>Tabindex of the button. </p>\n",
                    "line": 94,
                    "type": "number",
                    "inheritance": {
                        "file": "AnchorButtonComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "_haltDisabledEvents",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AnchorButtonComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "inheritance": {
                        "file": "AnchorButtonComponent"
                    }
                }
            ],
            "hostBindings": [
                {
                    "name": "class.text-nowrap",
                    "defaultValue": "true",
                    "line": 60
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y'\nimport { Component, ElementRef, HostBinding, Input, OnDestroy, Renderer2 } from '@angular/core'\n\nimport { ThemeTypes } from '../../models/index'\nimport { AnchorButtonComponent, ButtonComponent } from '../button/button.component'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seamBadgeButton]',\n  templateUrl: './badge-button.component.html',\n  styleUrls: ['./badge-button.component.scss'],\n  exportAs: 'seamBadgeButton',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled', 'theme', 'size' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    '[attr.type]': 'type',\n    'class': 'btn',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null'\n  },\n})\nexport class BadgeButtonComponent extends ButtonComponent implements OnDestroy {\n\n  @HostBinding('class.text-nowrap') _textNoWrap = true\n\n  @Input() badgeTheme: ThemeTypes = 'light'\n  @Input() badgeText = ''\n\n  constructor(\n    _elementRef: ElementRef,\n    _focusMonitor: FocusMonitor,\n    _renderer: Renderer2\n  ) { super(_elementRef, _focusMonitor, _renderer) }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n}\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'a[seamBadgeButton]',\n  templateUrl: './badge-button.component.html',\n  styleUrls: ['./badge-button.component.scss'],\n  exportAs: 'seamBadgeButton,seamBadgeButtonAnchor',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled', 'theme', 'size' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    'class': 'btn',\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n})\nexport class AnchorBadgeButtonComponent extends AnchorButtonComponent implements OnDestroy {\n\n  @HostBinding('class.text-nowrap') _textNoWrap = true\n\n  @Input() badgeTheme: ThemeTypes = 'light'\n  @Input() badgeText = ''\n\n  constructor(\n    _elementRef: ElementRef,\n    _focusMonitor: FocusMonitor,\n    _renderer: Renderer2\n  ) { super(_elementRef, _focusMonitor, _renderer) }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./badge-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AnchorButtonComponent",
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<ng-content></ng-content>\n<span class=\"ml-2 badge badge-{{ badgeTheme }}\">{{ badgeText }}</span>\n"
        },
        {
            "name": "AnchorButtonComponent",
            "id": "component-AnchorButtonComponent-91c78cdf906aa48f8d19b7a3f2c3a954",
            "file": "projects/ui-common/src/lib/buttons/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "seamButton,seamButtonBaseAnchor",
            "host": {},
            "inputs": [
                "disabled",
                "theme",
                "size"
            ],
            "outputs": [],
            "providers": [],
            "selector": "a[seamButton]",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tabIndex",
                    "description": "<p>Tabindex of the button. </p>\n",
                    "line": 94,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "_haltDisabledEvents",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y'\nimport { ChangeDetectionStrategy, Component, ElementRef, Input, OnDestroy, Renderer2 } from '@angular/core'\n\nimport {\n  CanDisableCtor,\n  CanSizeCtor,\n  CanThemeCtor,\n  mixinDisabled,\n  mixinSize,\n  mixinTheme\n} from '../../core/common-behaviors'\n\nclass TheSeamButtonBase implements OnDestroy {\n  constructor(\n    public _elementRef: ElementRef,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    this._focusMonitor.monitor(this._elementRef, true)\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef)\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus()\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement\n  }\n}\n\nconst _TheSeamButtonMixinBase: CanDisableCtor & CanThemeCtor & CanSizeCtor &\n    typeof TheSeamButtonBase = mixinSize(mixinTheme(mixinDisabled(TheSeamButtonBase), 'btn'), 'btn')\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seamButton]',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  exportAs: 'seamButton',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled', 'theme', 'size' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    '[attr.type]': 'type',\n    'class': 'btn',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ButtonComponent extends _TheSeamButtonMixinBase implements OnDestroy {\n\n  /** ARIA type for the button. */\n  @Input() type: 'button' | 'submit' | 'reset' = 'button'\n\n  constructor(\n    _elementRef: ElementRef,\n    _focusMonitor: FocusMonitor,\n    _renderer: Renderer2\n  ) { super(_elementRef, _focusMonitor, _renderer) }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n}\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'a[seamButton]',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  exportAs: 'seamButton,seamButtonBaseAnchor',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled', 'theme', 'size' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    'class': 'btn',\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AnchorButtonComponent extends _TheSeamButtonMixinBase implements OnDestroy {\n\n  /** Tabindex of the button. */\n  @Input() tabIndex: number\n\n  // TODO: Consider adding dev warning for `window.opener` exploit. Could maybe\n  // add `rel` it if the href isn't on the current domain or not specified in an\n  // injected list. This probably isn't needed and may be to strict for our\n  // usage, so I am just adding this as a reminder to think about it.\n  //\n  // rel=\"noopener noreferrer\"\n\n  constructor(\n    _elementRef: ElementRef,\n    _focusMonitor: FocusMonitor,\n    _renderer: Renderer2\n  ) { super(_elementRef, _focusMonitor, _renderer) }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault()\n      event.stopImmediatePropagation()\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 94,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "_TheSeamButtonMixinBase",
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-e4dbd4fed76640de754550c79da3023e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'theseam-ui-common'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'theseam-ui-common'\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-example-lazy-loaded-widgets></app-example-lazy-loaded-widgets>\n"
        },
        {
            "name": "BadgeButtonComponent",
            "id": "component-BadgeButtonComponent-af102541275470375b2d3869e46fcdff",
            "file": "projects/ui-common/src/lib/buttons/badge-button/badge-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "seamBadgeButton",
            "host": {},
            "inputs": [
                "disabled",
                "theme",
                "size"
            ],
            "outputs": [],
            "providers": [],
            "selector": "button[seamBadgeButton]",
            "styleUrls": [
                "./badge-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./badge-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "badgeText",
                    "defaultValue": "''",
                    "line": 28
                },
                {
                    "name": "badgeTheme",
                    "defaultValue": "'light'",
                    "line": 27,
                    "type": "ThemeTypes"
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "description": "<p>ARIA type for the button. </p>\n",
                    "line": 60,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                }
            ],
            "hostBindings": [
                {
                    "name": "class.text-nowrap",
                    "defaultValue": "true",
                    "line": 25
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y'\nimport { Component, ElementRef, HostBinding, Input, OnDestroy, Renderer2 } from '@angular/core'\n\nimport { ThemeTypes } from '../../models/index'\nimport { AnchorButtonComponent, ButtonComponent } from '../button/button.component'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seamBadgeButton]',\n  templateUrl: './badge-button.component.html',\n  styleUrls: ['./badge-button.component.scss'],\n  exportAs: 'seamBadgeButton',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled', 'theme', 'size' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    '[attr.type]': 'type',\n    'class': 'btn',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null'\n  },\n})\nexport class BadgeButtonComponent extends ButtonComponent implements OnDestroy {\n\n  @HostBinding('class.text-nowrap') _textNoWrap = true\n\n  @Input() badgeTheme: ThemeTypes = 'light'\n  @Input() badgeText = ''\n\n  constructor(\n    _elementRef: ElementRef,\n    _focusMonitor: FocusMonitor,\n    _renderer: Renderer2\n  ) { super(_elementRef, _focusMonitor, _renderer) }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n}\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'a[seamBadgeButton]',\n  templateUrl: './badge-button.component.html',\n  styleUrls: ['./badge-button.component.scss'],\n  exportAs: 'seamBadgeButton,seamBadgeButtonAnchor',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled', 'theme', 'size' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    'class': 'btn',\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n})\nexport class AnchorBadgeButtonComponent extends AnchorButtonComponent implements OnDestroy {\n\n  @HostBinding('class.text-nowrap') _textNoWrap = true\n\n  @Input() badgeTheme: ThemeTypes = 'light'\n  @Input() badgeText = ''\n\n  constructor(\n    _elementRef: ElementRef,\n    _focusMonitor: FocusMonitor,\n    _renderer: Renderer2\n  ) { super(_elementRef, _focusMonitor, _renderer) }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./badge-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ButtonComponent",
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<ng-content></ng-content>\n<span class=\"ml-2 badge badge-{{ badgeTheme }}\">{{ badgeText }}</span>\n"
        },
        {
            "name": "BreadcrumbsComponent",
            "id": "component-BreadcrumbsComponent-cbfc4cff3bac7aa91021e6e73f2cb70a",
            "file": "projects/ui-common/src/lib/breadcrumbs/breadcrumbs/breadcrumbs.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-breadcrumbs",
            "styleUrls": [
                "./breadcrumbs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumbs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "crumbs$",
                    "type": "Observable<ITheSeamBreadcrumb[]>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core'\nimport { Observable } from 'rxjs'\n\nimport { ITheSeamBreadcrumb } from '../breadcrumb'\nimport { TheSeamBreadcrumbsService } from '../breadcrumbs.service'\n\n@Component({\n  selector: 'seam-breadcrumbs',\n  templateUrl: './breadcrumbs.component.html',\n  styleUrls: ['./breadcrumbs.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BreadcrumbsComponent implements OnInit {\n\n  public crumbs$: Observable<ITheSeamBreadcrumb[]>\n\n  constructor(\n    private _breadcrumbs: TheSeamBreadcrumbsService\n  ) {\n    this.crumbs$ = this._breadcrumbs.crumbs$\n  }\n\n  ngOnInit() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./breadcrumbs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_breadcrumbs",
                        "type": "TheSeamBreadcrumbsService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_breadcrumbs",
                        "type": "TheSeamBreadcrumbsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav aria-label=\"breadcrumb\">\n  <ol class=\"breadcrumb mb-0\">\n    <li *ngFor=\"let crumb of crumbs$ | async; last as isLast\"\n      class=\"breadcrumb-item\"\n      [ngClass]=\"{ 'active': isLast }\"\n      [attr.aria-current]=\"isLast ? 'page' : undefined\">\n      <a *ngIf=\"!isLast; else notLink\" [routerLink]=\"crumb.path\">{{ crumb.value }}</a>\n      <ng-template #notLink>{{ crumb.value }}</ng-template>\n    </li>\n  </ol>\n</nav>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-91c78cdf906aa48f8d19b7a3f2c3a954",
            "file": "projects/ui-common/src/lib/buttons/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "seamButton",
            "host": {},
            "inputs": [
                "disabled",
                "theme",
                "size"
            ],
            "outputs": [],
            "providers": [],
            "selector": "button[seamButton]",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "description": "<p>ARIA type for the button. </p>\n",
                    "line": 60,
                    "type": "\"button\" | \"submit\" | \"reset\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y'\nimport { ChangeDetectionStrategy, Component, ElementRef, Input, OnDestroy, Renderer2 } from '@angular/core'\n\nimport {\n  CanDisableCtor,\n  CanSizeCtor,\n  CanThemeCtor,\n  mixinDisabled,\n  mixinSize,\n  mixinTheme\n} from '../../core/common-behaviors'\n\nclass TheSeamButtonBase implements OnDestroy {\n  constructor(\n    public _elementRef: ElementRef,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    this._focusMonitor.monitor(this._elementRef, true)\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef)\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus()\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement\n  }\n}\n\nconst _TheSeamButtonMixinBase: CanDisableCtor & CanThemeCtor & CanSizeCtor &\n    typeof TheSeamButtonBase = mixinSize(mixinTheme(mixinDisabled(TheSeamButtonBase), 'btn'), 'btn')\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seamButton]',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  exportAs: 'seamButton',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled', 'theme', 'size' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    '[attr.type]': 'type',\n    'class': 'btn',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ButtonComponent extends _TheSeamButtonMixinBase implements OnDestroy {\n\n  /** ARIA type for the button. */\n  @Input() type: 'button' | 'submit' | 'reset' = 'button'\n\n  constructor(\n    _elementRef: ElementRef,\n    _focusMonitor: FocusMonitor,\n    _renderer: Renderer2\n  ) { super(_elementRef, _focusMonitor, _renderer) }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n}\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'a[seamButton]',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n  exportAs: 'seamButton,seamButtonBaseAnchor',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled', 'theme', 'size' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    'class': 'btn',\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AnchorButtonComponent extends _TheSeamButtonMixinBase implements OnDestroy {\n\n  /** Tabindex of the button. */\n  @Input() tabIndex: number\n\n  // TODO: Consider adding dev warning for `window.opener` exploit. Could maybe\n  // add `rel` it if the href isn't on the current domain or not specified in an\n  // injected list. This probably isn't needed and may be to strict for our\n  // usage, so I am just adding this as a reminder to think about it.\n  //\n  // rel=\"noopener noreferrer\"\n\n  constructor(\n    _elementRef: ElementRef,\n    _focusMonitor: FocusMonitor,\n    _renderer: Renderer2\n  ) { super(_elementRef, _focusMonitor, _renderer) }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault()\n      event.stopImmediatePropagation()\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "_TheSeamButtonMixinBase",
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "CardActionComponent",
            "id": "component-CardActionComponent-d70f9f3863c8747fa905b234121a747e",
            "file": "projects/ui-common/src/lib/card/card-action/card-action.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-card-action",
            "styleUrls": [
                "./card-action.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-action.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isLastAction",
                    "defaultValue": "false",
                    "line": 18
                },
                {
                    "name": "theme",
                    "defaultValue": "'lightgray'",
                    "line": 14,
                    "type": "ThemeTypes"
                },
                {
                    "name": "title",
                    "line": 16,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [
                {
                    "name": "class.border-left",
                    "defaultValue": "true",
                    "line": 12
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input, OnInit } from '@angular/core'\n\nimport { ThemeTypes } from './../../models/theme-types'\n\n@Component({\n  selector: 'seam-card-action',\n  templateUrl: './card-action.component.html',\n  styleUrls: ['./card-action.component.scss']\n})\nexport class CardActionComponent implements OnInit {\n\n  @HostBinding('class.border-left') _cssClassBorderLeft = true\n\n  @Input() theme: ThemeTypes = 'lightgray'\n\n  @Input() title: string\n\n  @Input() isLastAction = false\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/utilities';\n\n:host {\n  display: block;\n}\n\n.btn {\n  transition: 500ms ease-in-out;\n\n  &:not([data-last-action='true']) {\n    @include border-radius(0);\n  }\n\n  &[data-last-action='true'] {\n    @include border-radius();\n    @include border-top-radius(0);\n    @include border-left-radius(0);\n  }\n}\n\n// .btn:not(:last-child) {\n//   @include border-radius(0);\n// }\n\n// .btn:last-child {\n//   @include border-radius();\n//   @include border-top-radius(0);\n//   @include border-left-radius(0);\n// }\n",
                    "styleUrl": "./card-action.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button type=\"button\"\n  class=\"btn border-0 h-100\"\n  [seamHoverClassToggle]=\"{ default: 'btn-outline-lightgray', hover: 'btn-outline-' + theme }\"\n  [attr.title]=\"title\"\n  [attr.data-last-action]=\"isLastAction ? 'true' : 'false'\">\n  <ng-content></ng-content>\n</button>\n"
        },
        {
            "name": "CardBodyComponent",
            "id": "component-CardBodyComponent-7a6132b271a86c5ae8409ac96775a514",
            "file": "projects/ui-common/src/lib/card/card-body/card-body.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-card-body",
            "styleUrls": [
                "./card-body.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-body.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardActionComponents",
                    "type": "QueryList<CardActionComponent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "CardActionComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [
                {
                    "name": "class.card-body",
                    "defaultValue": "true",
                    "line": 14
                },
                {
                    "name": "class.p-0",
                    "defaultValue": "true",
                    "line": 15
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ContentChildren, HostBinding, OnDestroy, OnInit, QueryList } from '@angular/core'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { filter, map, startWith, tap } from 'rxjs/operators'\n\nimport { CardActionComponent } from './../card-action/card-action.component'\n\n@Component({\n  selector: 'seam-card-body',\n  templateUrl: './card-body.component.html',\n  styleUrls: ['./card-body.component.scss']\n})\nexport class CardBodyComponent implements OnInit, OnDestroy, AfterViewInit {\n\n  @HostBinding('class.card-body') _cssClassCardBody = true\n  @HostBinding('class.p-0') _cssClassP0 = true\n\n  @ContentChildren(CardActionComponent) cardActionComponents: QueryList<CardActionComponent>\n\n  constructor() { }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { }\n\n  ngAfterViewInit() {\n    this.cardActionComponents.changes\n      .pipe(\n        untilDestroyed(this),\n        startWith(this.cardActionComponents),\n        filter(v => !!v),\n        map(v => v.toArray() as CardActionComponent[]),\n        filter(v => v && v.length > 0),\n        tap(v => setTimeout(_ => v[v.length - 1].isLastAction = true))\n      )\n      .subscribe()\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/utilities';\n\n:host {\n  display: flex;\n  flex-direction: row;\n}\n\n.card-content {\n  flex: 1 1 auto;\n  display: flex;\n  flex-direction: row;\n}\n\n.card--actions {\n  display: flex;\n  flex-direction: row;\n}\n",
                    "styleUrl": "./card-body.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"card-content p-2\">\n  <ng-content></ng-content>\n</div>\n<div class=\"card--actions\">\n  <ng-content select=\"seam-card-action\"></ng-content>\n</div>\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-b5bd544e8c3a7e746e8ad6e5664ebd41",
            "file": "projects/ui-common/src/lib/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [
                {
                    "name": "class.card",
                    "defaultValue": "true",
                    "line": 10
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss']\n})\nexport class CardComponent implements OnInit {\n\n  @HostBinding('class.card') _cssClassCard = true\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/utilities';\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content select=\"seam-card-header\"></ng-content>\n<ng-content select=\"seam-card-body\"></ng-content>\n"
        },
        {
            "name": "CardFooterComponent",
            "id": "component-CardFooterComponent-ad516b3c00d1ceaff0ae0b7f8049ef4d",
            "file": "projects/ui-common/src/lib/card/card-footer/card-footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-card-footer",
            "styleUrls": [
                "./card-footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-card-footer',\n  templateUrl: './card-footer.component.html',\n  styleUrls: ['./card-footer.component.scss']\n})\nexport class CardFooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./card-footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  card-footer works!\n</p>\n"
        },
        {
            "name": "CardHeaderComponent",
            "id": "component-CardHeaderComponent-e68f85110a1ddd0b08716727ade64210",
            "file": "projects/ui-common/src/lib/card/card-header/card-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-card-header",
            "styleUrls": [
                "./card-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [
                {
                    "name": "class.card-header",
                    "defaultValue": "true",
                    "line": 10
                },
                {
                    "name": "class.py-0",
                    "defaultValue": "true",
                    "line": 11
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-card-header',\n  templateUrl: './card-header.component.html',\n  styleUrls: ['./card-header.component.scss']\n})\nexport class CardHeaderComponent implements OnInit {\n\n  @HostBinding('class.card-header') _cssClassCardHeader = true\n  @HostBinding('class.py-0') _cssClassPY0 = true\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./card-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "ConfirmDialogComponent",
            "id": "component-ConfirmDialogComponent-e3b834bf96737dfca556249514c11da6",
            "file": "projects/ui-common/src/lib/confirm-dialog/confirm-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-confirm-dialog",
            "styleUrls": [
                "./confirm-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alertMessage",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "alertType",
                    "defaultValue": "'warning'",
                    "line": 14,
                    "type": "ThemeTypes"
                },
                {
                    "name": "message",
                    "defaultValue": "'Are you sure you want to continue?'",
                    "line": 12
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\nimport { ThemeTypes } from '../models/index'\n\n@Component({\n  selector: 'seam-confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.scss']\n})\nexport class ConfirmDialogComponent {\n\n  @Input() message = 'Are you sure you want to continue?'\n  @Input() alertMessage: string\n  @Input() alertType: ThemeTypes = 'warning'\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./confirm-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<seam-modal-body>\n  <h5>{{ message }}</h5>\n\n  <div *ngIf=\"alertMessage\" class=\"alert {{ alertType ? 'alert-' + alertType : '' }} mb-0\">\n    {{ alertMessage }}\n  </div>\n</seam-modal-body>\n<seam-modal-footer>\n  <button class=\"btn btn-primary\" seamModalClose=\"confirm\">Yes</button>\n  <button class=\"btn btn-lightgray\" data-dismiss=\"modal\" seamModalClose=\"cancel\" seamAutoFocus>No</button>\n</seam-modal-footer>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-14e6b2f16f7db0e61ebe6304e3f37cd3",
            "file": "projects/ui-common/src/lib/framework/dashboard/dashboard.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "widgets",
                    "line": 13,
                    "type": "IDashboardWidgetsItemDef[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core'\n\nimport { IDashboardWidgetsItemDef } from './dashboard-widgets/dashboard-widgets-item'\n\n@Component({\n  selector: 'seam-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DashboardComponent implements OnInit {\n\n  @Input() widgets: IDashboardWidgetsItemDef[]\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<seam-dashboard-widgets [widgets]=\"widgets\"></seam-dashboard-widgets>\n"
        },
        {
            "name": "DashboardWidgetsComponent",
            "id": "component-DashboardWidgetsComponent-c7363aab57ba1ce18108041c65425383",
            "file": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-dashboard-widgets",
            "styleUrls": [
                "./dashboard-widgets.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard-widgets.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "gapSize",
                    "defaultValue": "60",
                    "line": 16
                },
                {
                    "name": "widgets",
                    "line": 19,
                    "type": "IDashboardWidgetsItemDef[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "widgetColumns$",
                    "type": "Observable<IDashboardWidgetsColumnRecord[]>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "widgetItems$",
                    "type": "Observable<IDashboardWidgetsItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop'\nimport { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit } from '@angular/core'\nimport { Observable } from 'rxjs'\n\nimport { IDashboardWidgetsColumnRecord, IDashboardWidgetsItem, IDashboardWidgetsItemDef } from './dashboard-widgets-item'\nimport { DashboardWidgetsService } from './dashboard-widgets.service'\n\n@Component({\n  selector: 'seam-dashboard-widgets',\n  templateUrl: './dashboard-widgets.component.html',\n  styleUrls: ['./dashboard-widgets.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DashboardWidgetsComponent implements OnInit, OnDestroy {\n\n  @Input() gapSize = 60\n\n  @Input()\n  get widgets(): IDashboardWidgetsItemDef[] { return this._dashboardWidgets.widgets }\n  set widgets(value: IDashboardWidgetsItemDef[]) { this._dashboardWidgets.widgets = value }\n\n  public widgetItems$: Observable<IDashboardWidgetsItem[]>\n  public widgetColumns$: Observable<IDashboardWidgetsColumnRecord[]>\n\n  constructor(\n    private _dashboardWidgets: DashboardWidgetsService\n  ) { }\n\n  ngOnInit() {\n    this.widgetItems$ = this._dashboardWidgets.widgetItems$\n    this.widgetColumns$ = this._dashboardWidgets.widgetColumns$\n\n    this.widgetItems$.subscribe()\n  }\n\n  ngOnDestroy() { }\n\n  drop(event: CdkDragDrop<string[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex)\n      this._dashboardWidgets.updateOrder().subscribe()\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      )\n      this._dashboardWidgets.updateOrder().subscribe()\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/utilities';\n\n:host {\n  display: block;\n}\n\n.cdk-drag-preview {\n  box-sizing: border-box;\n\n  div {\n    border-radius: $border-radius;\n    box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),\n                0 8px 10px 1px rgba(0, 0, 0, 0.14),\n                0 3px 14px 2px rgba(0, 0, 0, 0.12);\n  }\n}\n\n.cdk-drag-placeholder {\n  opacity: 0;\n}\n\n.cdk-drag-animating {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n.dashboard-widgets-list.cdk-drop-list-dragging .dashboard-widgets-list-item:not(.cdk-drag-placeholder) {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n",
                    "styleUrl": "./dashboard-widgets.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_dashboardWidgets",
                        "type": "DashboardWidgetsService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "_dashboardWidgets",
                        "type": "DashboardWidgetsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "widgets": {
                    "name": "widgets",
                    "setSignature": {
                        "name": "widgets",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"d-flex flex-row mx-auto\"\n  style=\"max-width: 1400px;\"\n  [style.padding.px]=\"gapSize / 2\"\n  cdkDropListGroup>\n  <div *ngFor=\"let col of widgetColumns$ | async\"\n    class=\"d-flex flex-column flex-grow-1 dashboard-widgets-list\"\n    style=\"width: 446.67px;\"\n    cdkDropList\n    [cdkDropListData]=\"col.items\"\n    (cdkDropListDropped)=\"drop($event)\">\n    <div *ngFor=\"let item of col.items\"\n      class=\"dashboard-widgets-list-item\"\n      cdkDrag>\n      <div [style.margin.px]=\"gapSize / 2\">\n        <ng-template [cdkPortalOutlet]=\"item.portal\"></ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "DataFilterSearchComponent",
            "id": "component-DataFilterSearchComponent-b73d68ab27c13325a0ca19e4f2ad1802",
            "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DATA_FILTER_SEARCH"
                }
            ],
            "selector": "seam-data-filter-search",
            "styleUrls": [
                "./data-filter-search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data-filter-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "caseSensitive",
                    "defaultValue": "this._optDefault('caseSensitive')",
                    "line": 57
                },
                {
                    "name": "exact",
                    "defaultValue": "this._optDefault('exact')",
                    "line": 56
                },
                {
                    "name": "icon",
                    "defaultValue": "faSearch",
                    "line": 60,
                    "type": "SeamIcon"
                },
                {
                    "name": "iconTpl",
                    "line": 61,
                    "type": "TemplateRef<HTMLElement>"
                },
                {
                    "name": "omitProperties",
                    "defaultValue": "this._optDefault('omitProperties')",
                    "line": 55
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Search...'",
                    "line": 59
                },
                {
                    "name": "properties",
                    "defaultValue": "this._optDefault('properties')",
                    "line": 54
                },
                {
                    "name": "value",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_control",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "name",
                    "defaultValue": "'search'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "uid",
                    "defaultValue": "`search__${_uid++}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_optDefault",
                    "args": [
                        {
                            "name": "prop",
                            "type": "K"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "K"
                    ],
                    "line": 80,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "prop",
                            "type": "K",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 96,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, forwardRef, Inject, Input, OnDestroy, OnInit, Optional, TemplateRef } from '@angular/core'\nimport { FormControl } from '@angular/forms'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { Observable } from 'rxjs'\nimport { map, startWith } from 'rxjs/operators'\n\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\nimport { DatatableMenuBarComponent } from '../../../datatable/datatable-menu-bar/datatable-menu-bar.component'\nimport { SeamIcon } from '../../../icon/index'\nimport { isNullOrUndefined } from '../../../utils/index'\n\nimport { IDataFilter, THESEAM_DATA_FILTER, THESEAM_DATA_FILTER_OPTIONS } from '../../data-filter'\nimport { textDataFilter } from '../data-filter-text/data-filter-text.component'\nimport { ITextFilterOptions } from '../data-filter-text/text-filter-options'\n\nimport { ISearchFilterOptions } from './search-filter-options'\n\n\nexport const DATA_FILTER_SEARCH: any = {\n  provide: THESEAM_DATA_FILTER,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DataFilterSearchComponent),\n  multi: true,\n}\n\nexport const DefaultSearchFilterOptions: ISearchFilterOptions = {\n  properties: undefined,\n  omitProperties: undefined,\n  exact: false,\n  caseSensitive: false\n}\n\nexport function searchDataFilter(data: any[], values: string, options = DefaultSearchFilterOptions) {\n  return textDataFilter(data, values, options)\n}\n\nlet _uid = 0\n\n@Component({\n  selector: 'seam-data-filter-search',\n  templateUrl: './data-filter-search.component.html',\n  styleUrls: ['./data-filter-search.component.scss'],\n  providers: [ DATA_FILTER_SEARCH ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataFilterSearchComponent implements OnInit, OnDestroy, IDataFilter {\n\n  public readonly name = 'search'\n  public readonly uid = `search__${_uid++}`\n\n  _control = new FormControl()\n\n  @Input() properties = this._optDefault('properties')\n  @Input() omitProperties = this._optDefault('omitProperties')\n  @Input() exact = this._optDefault('exact')\n  @Input() caseSensitive = this._optDefault('caseSensitive')\n\n  @Input() placeholder = 'Search...'\n  @Input() icon: SeamIcon = faSearch\n  @Input() iconTpl: TemplateRef<HTMLElement>\n\n  @Input()\n  set value(value: string | string[]) {\n    const _value = !isNullOrUndefined(value) ? `${value}` : ''\n    if (this._control.value !== _value) {\n      this._control.setValue(_value)\n    }\n  }\n\n  constructor(\n    private _menuBar: DatatableMenuBarComponent,\n    @Optional() @Inject(THESEAM_DATA_FILTER_OPTIONS) private _filterOptions: ISearchFilterOptions | null\n  ) { }\n\n  ngOnInit() { this._menuBar.addFilter(this) }\n\n  ngOnDestroy() { this._menuBar.removeFilter(this) }\n\n  private _optDefault<K extends keyof ISearchFilterOptions>(prop: K) {\n    if (this._filterOptions && this._filterOptions.hasOwnProperty(prop)) {\n      return this._filterOptions[prop]\n    }\n    return DefaultSearchFilterOptions[prop]\n  }\n\n  get options(): ISearchFilterOptions {\n    return {\n      properties: this.properties,\n      omitProperties: this.omitProperties,\n      exact: this.exact,\n      caseSensitive: this.caseSensitive\n    }\n  }\n\n  public filter<T>(data: T[]): Observable<T[]> {\n    return this._control.valueChanges\n      .pipe(\n        untilDestroyed(this),\n        map(v => searchDataFilter(data, v, this.options)),\n        startWith(searchDataFilter(data, this._control.value, this.options)),\n      )\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  width: 300px;\n}\n\n.data-filter-search-has-icon {\n  > input {\n    padding-left: 30px;\n  }\n\n  // ::ng-deep {\n    .data-filter-search--icon-wrapper {\n      position: absolute;\n      top: 3px;\n      left: 10px;\n      bottom: 0px;\n\n      ::ng-deep {\n        .svg-inline--fa {\n          vertical-align: middle;\n        }\n      }\n    }\n  // }\n}\n",
                    "styleUrl": "./data-filter-search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_menuBar",
                        "type": "DatatableMenuBarComponent"
                    },
                    {
                        "name": "_filterOptions",
                        "type": "ISearchFilterOptions | null"
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "_menuBar",
                        "type": "DatatableMenuBarComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_filterOptions",
                        "type": "ISearchFilterOptions | null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "IDataFilter"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 64,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "ISearchFilterOptions",
                        "line": 87
                    }
                }
            },
            "templateData": "<div class=\"position-relative\"\n  [class.data-filter-search-has-icon]=\"iconTpl || icon\"\n  (click)=\"inp.focus()\">\n  <label [attr.for]=\"inp.id\" class=\"sr-only\">Search filter</label>\n  <input seamInput #inp=\"seamInput\" seamInputSize=\"sm\" [formControl]=\"_control\" [placeholder]=\"placeholder\">\n  <ng-container *ngIf=\"iconTpl; else searchIconTpl\">\n    <div class=\"data-filter-search--icon-wrapper\">\n      <ng-container *ngTemplateOutlet=\"iconTpl\"></ng-container>\n    </div>\n  </ng-container>\n  <ng-template #searchIconTpl>\n    <ng-container *ngIf=\"icon\">\n      <div class=\"data-filter-search--icon-wrapper\">\n        <seam-icon [icon]=\"icon\" class=\"text-muted\"></seam-icon>\n      </div>\n    </ng-container>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "DataFilterTextComponent",
            "id": "component-DataFilterTextComponent-a43bd935fa5786ef1fdcbb59883a4870",
            "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DATA_FILTER_TEXT"
                }
            ],
            "selector": "seam-data-filter-text",
            "styleUrls": [
                "./data-filter-text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data-filter-text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "caseSensitive",
                    "defaultValue": "this._optDefault('caseSensitive')",
                    "line": 90
                },
                {
                    "name": "exact",
                    "defaultValue": "this._optDefault('exact')",
                    "line": 89
                },
                {
                    "name": "iconTpl",
                    "line": 93,
                    "type": "TemplateRef<HTMLElement>"
                },
                {
                    "name": "omitProperties",
                    "defaultValue": "this._optDefault('omitProperties')",
                    "line": 88
                },
                {
                    "name": "placeholder",
                    "line": 92,
                    "type": "string"
                },
                {
                    "name": "properties",
                    "defaultValue": "this._optDefault('properties')",
                    "line": 87
                },
                {
                    "name": "value",
                    "line": 96,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_control",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "name",
                    "defaultValue": "'text'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "uid",
                    "defaultValue": "`text__${_uid++}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_optDefault",
                    "args": [
                        {
                            "name": "prop",
                            "type": "K"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "K"
                    ],
                    "line": 112,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "prop",
                            "type": "K",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 128,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, Inject, Input, OnDestroy, OnInit, Optional, TemplateRef } from '@angular/core'\nimport { FormControl } from '@angular/forms'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { Observable } from 'rxjs'\nimport { map, startWith } from 'rxjs/operators'\n\nimport { DatatableMenuBarComponent } from '../../../datatable/datatable-menu-bar/datatable-menu-bar.component'\nimport { isNullOrUndefined } from '../../../utils/index'\nimport { IDataFilter, THESEAM_DATA_FILTER, THESEAM_DATA_FILTER_OPTIONS } from '../../data-filter'\n\nimport { ITextFilterOptions } from './text-filter-options'\n\nexport const DATA_FILTER_TEXT: any = {\n  provide: THESEAM_DATA_FILTER,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DataFilterTextComponent),\n  multi: true,\n}\n\nexport const DefaultTextFilterOptions: ITextFilterOptions = {\n  properties: undefined,\n  omitProperties: undefined,\n  exact: false,\n  caseSensitive: false,\n}\n\nexport function textDataFilter(data: any[], text: string, options = DefaultTextFilterOptions) {\n  if (!data || !text) {\n    return data\n  }\n\n  if (data.length <= 0) {\n    return data\n  }\n\n  let props = options ? options.properties : undefined\n  if (!props) {\n    props = []\n    let keys = Object.keys(data[0])\n    if (options && options.omitProperties) {\n      keys = keys.filter(key => !(options.omitProperties || []).find(p => p === key))\n    }\n    for (const key of keys) {\n      if (data[0].hasOwnProperty(key)) {\n        props.push(key)\n      }\n    }\n  }\n\n  const filtered: any[] = []\n\n  for (const item of data) {\n    for (const p of props) {\n      let value1 = `${item[p]}`\n      let value2 = text\n\n      if (!options.caseSensitive) {\n        value1 = value1.toLowerCase()\n        value2 = value2.toLowerCase()\n      }\n\n      if (item[p] && value1.indexOf(value2) !== (options.exact ? 0 : -1)) {\n        filtered.push(item)\n        break\n      }\n    }\n  }\n\n  return filtered\n}\n\nlet _uid = 0\n\n@Component({\n  selector: 'seam-data-filter-text',\n  templateUrl: './data-filter-text.component.html',\n  styleUrls: ['./data-filter-text.component.scss'],\n  providers: [ DATA_FILTER_TEXT ]\n})\nexport class DataFilterTextComponent implements OnInit, OnDestroy, IDataFilter {\n\n  public readonly name = 'text'\n  public readonly uid = `text__${_uid++}`\n\n  _control = new FormControl()\n\n  @Input() properties = this._optDefault('properties')\n  @Input() omitProperties = this._optDefault('omitProperties')\n  @Input() exact = this._optDefault('exact')\n  @Input() caseSensitive = this._optDefault('caseSensitive')\n\n  @Input() placeholder: string\n  @Input() iconTpl: TemplateRef<HTMLElement>\n\n  @Input()\n  set value(value: string | string[]) {\n    const _value = !isNullOrUndefined(value) ? `${value}` : ''\n    if (this._control.value !== _value) {\n      this._control.setValue(_value)\n    }\n  }\n\n  constructor(\n    private _menuBar: DatatableMenuBarComponent,\n    @Optional() @Inject(THESEAM_DATA_FILTER_OPTIONS) private _filterOptions: ITextFilterOptions | null\n  ) { }\n\n  ngOnInit() { this._menuBar.addFilter(this) }\n\n  ngOnDestroy() { this._menuBar.removeFilter(this) }\n\n  private _optDefault<K extends keyof ITextFilterOptions>(prop: K) {\n    if (this._filterOptions && this._filterOptions.hasOwnProperty(prop)) {\n      return this._filterOptions[prop]\n    }\n    return DefaultTextFilterOptions[prop]\n  }\n\n  get options(): ITextFilterOptions {\n    return {\n      properties: this.properties,\n      omitProperties: this.omitProperties,\n      exact: this.exact,\n      caseSensitive: this.caseSensitive\n    }\n  }\n\n  public filter<T>(data: T[]): Observable<T[]> {\n    return this._control.valueChanges\n      .pipe(\n        untilDestroyed(this),\n        map(v => textDataFilter(data, v, this.options)),\n        startWith(textDataFilter(data, this._control.value, this.options)),\n      )\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n\n.data-filter-text-has-icon {\n  > input {\n    padding-left: 30px;\n  }\n\n  ::ng-deep {\n    fa-icon {\n      position: absolute;\n      top: 3px;\n      left: 10px;\n      bottom: 0px;\n\n      .svg-inline--fa {\n        vertical-align: middle;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./data-filter-text.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_menuBar",
                        "type": "DatatableMenuBarComponent"
                    },
                    {
                        "name": "_filterOptions",
                        "type": "ITextFilterOptions | null"
                    }
                ],
                "line": 101,
                "jsdoctags": [
                    {
                        "name": "_menuBar",
                        "type": "DatatableMenuBarComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_filterOptions",
                        "type": "ITextFilterOptions | null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "IDataFilter"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 96,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "ITextFilterOptions",
                        "line": 119
                    }
                }
            },
            "templateData": "<div class=\"position-relative\"\n  [class.data-filter-text-has-icon]=\"iconTpl\"\n  (click)=\"inp.focus()\">\n  <label [attr.for]=\"inp.id\" class=\"sr-only\">Text filter</label>\n  <input seamInput #inp=\"seamInput\" seamInputSize=\"sm\" [formControl]=\"_control\" [placeholder]=\"placeholder\">\n  <ng-container *ngIf=\"iconTpl\">\n    <ng-container *ngTemplateOutlet=\"iconTpl\"></ng-container>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "DataFilterToggleButtonsComponent",
            "id": "component-DataFilterToggleButtonsComponent-a12cd33d0904591cae8799848ca73877",
            "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DATA_FILTER_TOGGLE_BUTTON"
                }
            ],
            "selector": "seam-data-filter-toggle-buttons",
            "styleUrls": [
                "./data-filter-toggle-buttons.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data-filter-toggle-buttons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttons",
                    "defaultValue": "this._optDefault('buttons')",
                    "line": 106
                },
                {
                    "name": "caseSensitive",
                    "defaultValue": "this._optDefault('caseSensitive')",
                    "line": 108
                },
                {
                    "name": "exact",
                    "defaultValue": "this._optDefault('exact')",
                    "line": 107
                },
                {
                    "name": "multiple",
                    "defaultValue": "this._optDefault('multiple')",
                    "line": 104
                },
                {
                    "name": "omitProperties",
                    "defaultValue": "this._optDefault('omitProperties')",
                    "line": 103
                },
                {
                    "name": "properties",
                    "defaultValue": "this._optDefault('properties')",
                    "line": 102
                },
                {
                    "name": "selectionToggleable",
                    "defaultValue": "this._optDefault('selectionToggleable')",
                    "line": 105
                },
                {
                    "name": "value",
                    "line": 111,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_control",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "name",
                    "defaultValue": "'toggle-buttons'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "uid",
                    "defaultValue": "`toggle-buttons__${_uid++}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_optDefault",
                    "args": [
                        {
                            "name": "prop",
                            "type": "K"
                        }
                    ],
                    "optional": false,
                    "returnType": "IToggleButtonsFilterOptions[K]",
                    "typeParameters": [
                        "K"
                    ],
                    "line": 127,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "prop",
                            "type": "K",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filter",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 146,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { coerceArray } from '@angular/cdk/coercion'\nimport { Component, forwardRef, Inject, Input, OnDestroy, OnInit, Optional } from '@angular/core'\nimport { FormControl } from '@angular/forms'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { Observable } from 'rxjs'\nimport { map, startWith } from 'rxjs/operators'\n\nimport { DatatableMenuBarComponent } from '../../../datatable/datatable-menu-bar/datatable-menu-bar.component'\nimport { isNullOrUndefined } from '../../../utils/index'\nimport { IDataFilter, THESEAM_DATA_FILTER, THESEAM_DATA_FILTER_OPTIONS } from '../../data-filter'\n\nimport { textDataFilter } from '../data-filter-text/data-filter-text.component'\nimport { ITextFilterOptions } from '../data-filter-text/text-filter-options'\n\n\nexport const DATA_FILTER_TOGGLE_BUTTON: any = {\n  provide: THESEAM_DATA_FILTER,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DataFilterToggleButtonsComponent),\n  multi: true,\n}\n\nexport interface IToggleButton {\n  name: string\n  value: string\n  comparator: (value, row, index) => -1 | 0 | 1\n}\n\nexport interface IToggleButtonsFilterOptions extends ITextFilterOptions {\n  selectionToggleable: boolean\n  multiple: boolean\n  buttons: IToggleButton[]\n}\n\nexport const DefaultToggleButtonsFilterOptions: IToggleButtonsFilterOptions = {\n  properties: undefined,\n  omitProperties: undefined,\n  multiple: false,\n  selectionToggleable: false,\n  buttons: [],\n  exact: false,\n  caseSensitive: false\n}\n\nexport function toggleButtonsFilter(data: any[], values: string[], options = DefaultToggleButtonsFilterOptions) {\n  if (!data || !values) {\n    return data\n  }\n\n  const customComparatorBtns: IToggleButton[] = []\n  for (const btn of options.buttons) {\n    if (btn.comparator) {\n      customComparatorBtns.push(btn)\n    }\n  }\n\n  let _data = data\n  for (const val of values) {\n    if (val === '') { continue }\n\n    let cmp\n    for (const btn of customComparatorBtns) {\n      if (btn.value === val) {\n        cmp = btn.comparator\n      }\n    }\n    if (cmp) {\n      const filtered: any[] = []\n      for (let i = 0; i < _data.length; i++) {\n        if (cmp(val, data[i], i) !== -1) {\n          filtered.push(data[i])\n        }\n      }\n      _data = filtered\n    } else {\n      _data = textDataFilter(_data, val, {\n        properties: options.properties,\n        omitProperties: options.omitProperties,\n        exact: options.exact,\n        caseSensitive: options.caseSensitive\n      })\n    }\n  }\n  return _data\n}\n\nlet _uid = 0\n\n@Component({\n  selector: 'seam-data-filter-toggle-buttons',\n  templateUrl: './data-filter-toggle-buttons.component.html',\n  styleUrls: ['./data-filter-toggle-buttons.component.scss'],\n  providers: [ DATA_FILTER_TOGGLE_BUTTON ]\n})\nexport class DataFilterToggleButtonsComponent implements OnInit, OnDestroy, IDataFilter {\n\n  public readonly name = 'toggle-buttons'\n  public readonly uid = `toggle-buttons__${_uid++}`\n\n  _control = new FormControl()\n\n  @Input() properties = this._optDefault('properties')\n  @Input() omitProperties = this._optDefault('omitProperties')\n  @Input() multiple = this._optDefault('multiple')\n  @Input() selectionToggleable = this._optDefault('selectionToggleable')\n  @Input() buttons = this._optDefault('buttons')\n  @Input() exact = this._optDefault('exact')\n  @Input() caseSensitive = this._optDefault('caseSensitive')\n\n  @Input()\n  set value(value: string | string[]) {\n    const _value = !isNullOrUndefined(value) ? coerceArray(value) : undefined\n    if (this._control.value !== _value) {\n      this._control.setValue(_value)\n    }\n  }\n\n  constructor(\n    private _menuBar: DatatableMenuBarComponent,\n    @Optional() @Inject(THESEAM_DATA_FILTER_OPTIONS) private _filterOptions: IToggleButtonsFilterOptions | null\n  ) { }\n\n  ngOnInit() { this._menuBar.addFilter(this) }\n\n  ngOnDestroy() { this._menuBar.removeFilter(this) }\n\n  private _optDefault<K extends keyof IToggleButtonsFilterOptions>(prop: K) {\n    if (this._filterOptions && this._filterOptions.hasOwnProperty(prop)) {\n      return this._filterOptions[prop]\n    }\n    return DefaultToggleButtonsFilterOptions[prop]\n  }\n\n  get options(): IToggleButtonsFilterOptions {\n    return {\n      properties: this.properties,\n      omitProperties: this.omitProperties,\n      multiple: this.multiple,\n      selectionToggleable: this.selectionToggleable,\n      buttons: this.buttons,\n      exact: this.exact,\n      caseSensitive: this.caseSensitive\n    }\n  }\n\n  public filter<T>(data: T[]): Observable<T[]> {\n    return this._control.valueChanges\n      .pipe(\n        untilDestroyed(this),\n        map(v => toggleButtonsFilter(data, coerceArray(v), this.options)),\n        startWith(toggleButtonsFilter(data, coerceArray(this._control.value), this.options)),\n      )\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./data-filter-toggle-buttons.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_menuBar",
                        "type": "DatatableMenuBarComponent"
                    },
                    {
                        "name": "_filterOptions",
                        "type": "IToggleButtonsFilterOptions | null"
                    }
                ],
                "line": 116,
                "jsdoctags": [
                    {
                        "name": "_menuBar",
                        "type": "DatatableMenuBarComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_filterOptions",
                        "type": "IToggleButtonsFilterOptions | null",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "IDataFilter"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 111,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "options": {
                    "name": "options",
                    "getSignature": {
                        "name": "options",
                        "type": "",
                        "returnType": "IToggleButtonsFilterOptions",
                        "line": 134
                    }
                }
            },
            "templateData": "<div class=\"btn-group\" role=\"group\" aria-label=\"Progress Filter\"\n  *ngIf=\"options as opts\"\n  [formControl]=\"_control\"\n  seamToggleGroup\n  [multiple]=\"opts.multiple\"\n  [selectionToggleable]=\"opts.selectionToggleable\">\n  <ng-container *ngFor=\"let btn of buttons\">\n    <button type=\"button\" class=\"btn btn-sm px-4\"\n      [seamToggleGroupOption]=\"btn.value\"\n      #opt=\"seamToggleGroupOption\"\n      [class.btn-lightgray]=\"!opt.selected\"\n      [class.btn-primary]=\"opt.selected\"\n      (click)=\"opt.selected=!opt.selected\">\n      {{ btn.name || btn.value }}\n    </button>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "DatatableActionMenuComponent",
            "id": "component-DatatableActionMenuComponent-1061d15a1614e486cc49388460586320",
            "file": "projects/ui-common/src/lib/datatable/datatable-action-menu/datatable-action-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-datatable-action-menu",
            "styleUrls": [
                "./datatable-action-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datatable-action-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "row",
                    "line": 14
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "type": "QueryList<DatatableActionMenuItemComponent>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "DatatableActionMenuItemComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "activateItem",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "item",
                            "type": "DatatableActionMenuItemComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "DatatableActionMenuItemComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, ContentChildren, Input, QueryList, Renderer2 } from '@angular/core'\nimport { NavigationExtras, Router } from '@angular/router'\n\nimport { SeamConfirmDialogService } from '../../confirm-dialog/index'\nimport { DatatableActionMenuItemComponent } from '../datatable-action-menu-item/datatable-action-menu-item.component'\n\n@Component({\n  selector: 'seam-datatable-action-menu',\n  templateUrl: './datatable-action-menu.component.html',\n  styleUrls: ['./datatable-action-menu.component.scss']\n})\nexport class DatatableActionMenuComponent {\n\n  @Input() row\n\n  @ContentChildren(DatatableActionMenuItemComponent) items: QueryList<DatatableActionMenuItemComponent>\n\n  constructor(\n    private _renderer: Renderer2,\n    private _confirmDialog: SeamConfirmDialogService,\n    private _router: Router\n  ) { }\n\n  activateItem(event: any, item: DatatableActionMenuItemComponent) {\n    if (item.confirmDialog) {\n      this._confirmDialog.open(item.confirmDialog.message, item.confirmDialog.alert)\n        .afterClosed()\n        .subscribe(v => {\n          if (v === 'confirm') {\n            item.click.emit(event)\n            if (item.href) {\n              const win = window.open(item.href, item.target)\n              // TODO: Consider if always setting opener to null is to restrictive\n              // if (win && item.target && item.target.toLowerCase() === '_blank') {\n              //   win.opener = null\n              // }\n            } else {\n              const extras: NavigationExtras = {}\n              if (item.queryParams) { extras.queryParams = item.queryParams }\n              if (item.fragment) { extras.fragment = item.fragment }\n              if (item.queryParamsHandling) { extras.queryParamsHandling = item.queryParamsHandling }\n              if (item.preserveFragment) { extras.preserveFragment = item.preserveFragment }\n              if (item.skipLocationChange) { extras.skipLocationChange = item.skipLocationChange }\n              if (item.replaceUrl) { extras.replaceUrl = item.replaceUrl }\n              if (item.state) { extras.state = item.state }\n\n              const commands = Array.isArray(item.routerLink) ? item.routerLink : [item.routerLink]\n              this._router.navigate(commands, extras)\n            }\n          }\n        })\n    } else {\n      item.click.emit(event)\n    }\n\n\n    // HACK: This is only here until the action events are emitting to a place\n    // the toggler can listen for them.\n    this._renderer.setAttribute(event.view.document.body, 'tabindex', '-1')\n    event.view.document.body.focus()\n    this._renderer.removeAttribute(event.view.document.body, 'tabindex')\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  position: relative;\n}\n",
                    "styleUrl": "./datatable-action-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "_confirmDialog",
                        "type": "SeamConfirmDialogService"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_confirmDialog",
                        "type": "SeamConfirmDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ul class=\"list-group\">\n  <ng-container *ngFor=\"let item of items\">\n    <ng-container *ngIf=\"(item.routerLink || item.href) && !item.confirmDialog; else noRouterLink\">\n      <a *ngIf=\"item.href; else noHref\"\n        class=\"list-group-item list-group-item-action py-1\"\n        [attr.href]=\"item.href\"\n        [target]=\"item.target\"\n        (click)=\"activateItem($event, item)\">\n        {{ item.label }}\n      </a>\n      <ng-template #noHref>\n        <a\n          class=\"list-group-item list-group-item-action py-1\"\n          [queryParams]=\"item.queryParams\"\n          [fragment]=\"item.fragment\"\n          [queryParamsHandling]=\"item.queryParamsHandling\"\n          [preserveFragment]=\"item.preserveFragment\"\n          [skipLocationChange]=\"item.skipLocationChange\"\n          [replaceUrl]=\"item.replaceUrl\"\n          [state]=\"item.state\"\n          [routerLink]=\"item.routerLink\"\n          [target]=\"item.target\"\n          (click)=\"activateItem($event, item)\">\n          {{ item.label }}\n        </a>\n      </ng-template>\n    </ng-container>\n    <ng-template #noRouterLink>\n      <button\n        type=\"button\"\n        class=\"list-group-item list-group-item-action py-1\"\n        (click)=\"activateItem($event, item)\">\n        {{ item.label }}\n      </button>\n    </ng-template>\n  </ng-container>\n</ul>\n"
        },
        {
            "name": "DatatableActionMenuItemComponent",
            "id": "component-DatatableActionMenuItemComponent-7fce2e518d118870c0ca7b841d34b0d0",
            "file": "projects/ui-common/src/lib/datatable/datatable-action-menu-item/datatable-action-menu-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-datatable-action-menu-item",
            "styleUrls": [
                "./datatable-action-menu-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datatable-action-menu-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "attr.href",
                    "line": 50,
                    "type": "string"
                },
                {
                    "name": "confirmDialog",
                    "line": 64
                },
                {
                    "name": "endpointConfig",
                    "line": 67,
                    "type": "IActionMenuItemEndpointConfig"
                },
                {
                    "name": "fragment",
                    "line": 55,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 47,
                    "type": "string"
                },
                {
                    "name": "modalConfig",
                    "line": 85,
                    "type": "IActionMenuItemModalConfig"
                },
                {
                    "name": "preserveFragment",
                    "line": 58,
                    "type": "boolean"
                },
                {
                    "name": "queryParams",
                    "line": 54,
                    "type": "literal type"
                },
                {
                    "name": "queryParamsHandling",
                    "line": 57,
                    "type": "any"
                },
                {
                    "name": "replaceUrl",
                    "line": 60,
                    "type": "boolean"
                },
                {
                    "name": "routerLink",
                    "line": 62,
                    "type": "string | any[]"
                },
                {
                    "name": "row",
                    "line": 102,
                    "type": "IDynamicDatatableRow"
                },
                {
                    "name": "skipLocationChange",
                    "line": 59,
                    "type": "boolean"
                },
                {
                    "name": "state",
                    "line": 61,
                    "type": "literal type"
                },
                {
                    "name": "target",
                    "line": 51,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "click",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 104,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_endpointConfig",
                    "type": "IActionMenuItemEndpointConfig",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_endpointConfigSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_modalConfig",
                    "type": "IActionMenuItemModalConfig",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_modalConfigSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_handleEndpointAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_handleModalAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112
                }
            ],
            "hostBindings": [
                {
                    "name": "class.list-group-item",
                    "defaultValue": "true",
                    "line": 44
                },
                {
                    "name": "class.list-group-item-action",
                    "defaultValue": "true",
                    "line": 45
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Component, EventEmitter, HostBinding, Input, isDevMode, OnDestroy, OnInit, Output } from '@angular/core'\nimport { Subscription } from 'rxjs'\n\nimport jexl from 'jexl'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\n\nimport { IDynamicDatatableRow } from '../../datatable-dynamic/datatable-dynamic-def'\nimport { TheSeamDynamicComponentLoader } from '../../dynamic-component-loader/dynamic-component-loader.service'\nimport { Modal } from '../../modal/index'\n\n//\n// TODO: Move the dynamic datatable logic out of this component when refactoring.\n//\n\nexport interface IActionMenuItemEndpointConfig {\n  /**\n   * Api endpoint.\n   */\n  endpoint?: string\n\n  endpointExpr?: string\n\n  method: 'GET' | 'POST' | 'PATCH' | 'DELETE'\n\n  bodyExpr?: string\n\n  paramsExpr?: string\n}\n\nexport interface IActionMenuItemModalConfig {\n  component: ComponentType<{}> |  string\n}\n\n@Component({\n  selector: 'seam-datatable-action-menu-item',\n  templateUrl: './datatable-action-menu-item.component.html',\n  styleUrls: ['./datatable-action-menu-item.component.scss']\n})\nexport class DatatableActionMenuItemComponent implements OnInit, OnDestroy {\n\n  @HostBinding('class.list-group-item') _listGroupItem = true\n  @HostBinding('class.list-group-item-action') _listGroupItemAction = true\n\n  @Input() label: string\n\n  // tslint:disable-next-line:no-input-rename\n  @Input('attr.href') href: string\n  @Input() target: string\n\n  // Allow routerLink inputs on menu item\n  @Input() queryParams: {[k: string]: any}\n  @Input() fragment: string\n  // @Input() queryParamsHandling: QueryParamsHandling\n  @Input() queryParamsHandling: any\n  @Input() preserveFragment: boolean\n  @Input() skipLocationChange: boolean\n  @Input() replaceUrl: boolean\n  @Input() state: {[k: string]: any}\n  @Input() routerLink: string | any[]\n\n  @Input() confirmDialog\n\n  @Input()\n  get endpointConfig(): IActionMenuItemEndpointConfig { return this._endpointConfig }\n  set endpointConfig(value: IActionMenuItemEndpointConfig) {\n    this._endpointConfig = value\n    if (value) {\n      // TODO: Handle this in a way that can be canceled.\n      this._endpointConfigSub = this.click\n        .pipe(untilDestroyed(this))\n        .subscribe(e => this._handleEndpointAction())\n    } else {\n      if (this._endpointConfigSub) {\n        this._endpointConfigSub.unsubscribe()\n      }\n    }\n  }\n  private _endpointConfig: IActionMenuItemEndpointConfig\n  private _endpointConfigSub: Subscription\n\n  @Input()\n  get modalConfig(): IActionMenuItemModalConfig { return this._modalConfig }\n  set modalConfig(value: IActionMenuItemModalConfig) {\n    this._modalConfig = value\n    if (value) {\n      // TODO: Handle this in a way that can be canceled.\n      this._modalConfigSub = this.click\n        .pipe(untilDestroyed(this))\n        .subscribe(e => this._handleModalAction())\n    } else {\n      if (this._modalConfigSub) {\n        this._modalConfigSub.unsubscribe()\n      }\n    }\n  }\n  private _modalConfig: IActionMenuItemModalConfig\n  private _modalConfigSub: Subscription\n\n  @Input() row: IDynamicDatatableRow\n\n  @Output() click = new EventEmitter<any>()\n\n  constructor(\n    private _http: HttpClient,\n    private _modal: Modal,\n    private _dynamicComponentLoader: TheSeamDynamicComponentLoader\n  ) { }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { }\n\n  private _handleEndpointAction() {\n    // console.log('_handleEndpointAction')\n    // TODO: This should probably be done through a provider that uses the api.\n    if (isDevMode()) {\n      console.warn(`[DatatableActionMenuItemComponent] '_handleEndpointAction()' is not ready for production yet.`)\n    } else {\n      // I don't expect this to be attempted in prod before completed, so I am just adding a console warning.\n      console.warn(`Unable to complete request. Contact support for assistance.`)\n    }\n\n    let endpoint = ''\n    const method = this._endpointConfig.method\n    const context = { row: this.row }\n    // console.log('context', context)\n\n    if (this._endpointConfig.endpoint) {\n      endpoint = this._endpointConfig.endpoint\n    }\n\n    if (this._endpointConfig.endpointExpr) {\n      // TODO: Use async jexl.\n      endpoint = jexl.evalSync(this._endpointConfig.endpointExpr, context)\n    }\n\n    const url = `http://localhost:57648/api/${endpoint}`\n\n    const options: any = {}\n    if (this._endpointConfig.bodyExpr) {\n      // TODO: Use async jexl.\n      options.body = jexl.evalSync(this._endpointConfig.bodyExpr, context)\n    }\n    if (this._endpointConfig.paramsExpr) {\n      // TODO: Use async jexl.\n      options.params = jexl.evalSync(this._endpointConfig.paramsExpr, context)\n    }\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n\n    this._http.request<any>(method, url, { ...options, headers })\n      .subscribe()\n      // .subscribe(v => console.log('v', v))\n  }\n\n  private _handleModalAction() {\n    if (typeof this._modalConfig.component === 'string') {\n      this._dynamicComponentLoader.getComponentFactory('story-ex-modal')\n        .subscribe(componentFactory => {\n          const factoryResolver = (<any /* ComponentFactoryBoundToModule */>componentFactory).ngModule.componentFactoryResolver\n          this._modal.openFromComponent(componentFactory.componentType, undefined, factoryResolver)\n        })\n    } else {\n      this._modal.openFromComponent(this._modalConfig.component)\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./datatable-action-menu-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "_modal",
                        "type": "Modal"
                    },
                    {
                        "name": "_dynamicComponentLoader",
                        "type": "TheSeamDynamicComponentLoader"
                    }
                ],
                "line": 104,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modal",
                        "type": "Modal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dynamicComponentLoader",
                        "type": "TheSeamDynamicComponentLoader",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "endpointConfig": {
                    "name": "endpointConfig",
                    "setSignature": {
                        "name": "endpointConfig",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 68,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "modalConfig": {
                    "name": "modalConfig",
                    "setSignature": {
                        "name": "modalConfig",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 86,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<!-- <ng-container *ngIf=\"routerLink || href; else noRouterLink\">\n  <a *ngIf=\"href; else noHref\"\n    class=\"list-group-item list-group-item-action py-1\"\n    [attr.href]=\"href\"\n    [target]=\"target\"\n    (click)=\"activateItem($event)\">\n    {{ label }}\n  </a>\n  <ng-template #noHref>\n    <a\n      class=\"list-group-item list-group-item-action py-1\"\n      [queryParams]=\"queryParams\"\n      [fragment]=\"fragment\"\n      [queryParamsHandling]=\"queryParamsHandling\"\n      [preserveFragment]=\"preserveFragment\"\n      [skipLocationChange]=\"skipLocationChange\"\n      [replaceUrl]=\"replaceUrl\"\n      [state]=\"state\"\n      [routerLink]=\"routerLink\"\n      [target]=\"target\"\n      (click)=\"activateItem($event)\">\n      {{ label }}\n    </a>\n  </ng-template>\n</ng-container>\n<ng-template #noRouterLink>\n  <button\n    type=\"button\"\n    class=\"list-group-item list-group-item-action py-1\"\n    (click)=\"activateItem($event)\">\n    {{ label }}\n  </button>\n</ng-template> -->\n"
        },
        {
            "name": "DatatableColumnComponent",
            "id": "component-DatatableColumnComponent-8dfc1ad6855c69e0337f19576aa307a0",
            "file": "projects/ui-common/src/lib/datatable/datatable-column/datatable-column.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-datatable-column",
            "styleUrls": [
                "./datatable-column.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datatable-column.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "canAutoResize",
                    "defaultValue": "true",
                    "line": 27
                },
                {
                    "name": "cellClass",
                    "line": 38,
                    "type": "string | "
                },
                {
                    "name": "cellTemplate",
                    "line": 31,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "checkboxable",
                    "line": 34,
                    "type": "boolean"
                },
                {
                    "name": "comparator",
                    "line": 29,
                    "type": "function"
                },
                {
                    "name": "draggable",
                    "defaultValue": "true",
                    "line": 25
                },
                {
                    "name": "flexGrow",
                    "line": 18,
                    "type": "number"
                },
                {
                    "name": "frozenLeft",
                    "defaultValue": "false",
                    "line": 40
                },
                {
                    "name": "frozenRight",
                    "defaultValue": "false",
                    "line": 41
                },
                {
                    "name": "headerCheckboxable",
                    "line": 35,
                    "type": "boolean"
                },
                {
                    "name": "headerClass",
                    "line": 37,
                    "type": "string | "
                },
                {
                    "name": "headerTemplate",
                    "line": 32,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "isTreeColumn",
                    "defaultValue": "false",
                    "line": 45
                },
                {
                    "name": "maxWidth",
                    "line": 20,
                    "type": "number"
                },
                {
                    "name": "minWidth",
                    "defaultValue": "100",
                    "line": 19
                },
                {
                    "name": "name",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "pipe",
                    "line": 43,
                    "type": "_PipeTransform"
                },
                {
                    "name": "prop",
                    "line": 16,
                    "type": "string | number"
                },
                {
                    "name": "resizeable",
                    "defaultValue": "true",
                    "line": 23
                },
                {
                    "name": "sortable",
                    "defaultValue": "true",
                    "line": 24
                },
                {
                    "name": "width",
                    "defaultValue": "150",
                    "line": 21
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cellTplDirective",
                    "type": "DatatableCellTplDirective",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "DatatableCellTplDirective, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getCellDirective",
                    "args": [],
                    "optional": false,
                    "returnType": "DatatableCellTplDirective | null",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, Input, OnInit, PipeTransform, TemplateRef } from '@angular/core'\n\nimport { DatatableCellTplDirective } from '../directives/datatable-cell-tpl.directive'\n\n// HACK: Union type prevents the not found warning\ntype _PipeTransform = PipeTransform | PipeTransform\n\n@Component({\n  selector: 'seam-datatable-column',\n  templateUrl: './datatable-column.component.html',\n  styleUrls: ['./datatable-column.component.scss']\n})\nexport class DatatableColumnComponent implements OnInit {\n\n  @Input() name: string\n  @Input() prop: string | number\n\n  @Input() flexGrow: number\n  @Input() minWidth = 100\n  @Input() maxWidth: number\n  @Input() width = 150\n\n  @Input() resizeable = true\n  @Input() sortable = true\n  @Input() draggable = true\n\n  @Input() canAutoResize = true\n\n  @Input() comparator: (valueA, valueB, rowA?, rowB?, sortDirection?: 'asc' | 'desc') => -1 | 0 | 1\n\n  @Input() cellTemplate: TemplateRef<any>\n  @Input() headerTemplate: TemplateRef<any>\n\n  @Input() checkboxable: boolean\n  @Input() headerCheckboxable: boolean\n\n  @Input() headerClass: string | ((data: any) => string|any)\n  @Input() cellClass: string | ((data: any) => string|any)\n\n  @Input() frozenLeft = false\n  @Input() frozenRight = false\n\n  @Input() pipe: _PipeTransform\n\n  @Input() isTreeColumn = false\n\n\n  @ContentChild(DatatableCellTplDirective, { static: true }) cellTplDirective: DatatableCellTplDirective\n\n  constructor() { }\n\n  ngOnInit() { }\n\n  public getCellDirective(): DatatableCellTplDirective | null {\n    if (this.cellTplDirective) {\n      return this.cellTplDirective\n    }\n\n    return null\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./datatable-column.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 48
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  datatable-column works!\n</p>\n"
        },
        {
            "name": "DatatableComponent",
            "id": "component-DatatableComponent-0914509fd948fbd67240e2a189b3b106",
            "file": "projects/ui-common/src/lib/datatable/datatable/datatable.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "_THESEAM_DATATABLE"
                }
            ],
            "selector": "seam-datatable",
            "styleUrls": [
                "./datatable.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datatable.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columnMode",
                    "defaultValue": "ColumnMode.force",
                    "line": 124,
                    "type": "ColumnMode"
                },
                {
                    "name": "columns",
                    "line": 98,
                    "type": "ITheSeamDatatableColumn[]"
                },
                {
                    "name": "count",
                    "defaultValue": "0",
                    "line": 135
                },
                {
                    "name": "cssClasses",
                    "defaultValue": "{\n    sortAscending: 'datatable-icon-up',\n    sortDescending: 'datatable-icon-down',\n    pagerLeftArrow: 'datatable-icon-left',\n    pagerRightArrow: 'datatable-icon-right',\n    pagerPrevious: 'datatable-icon-prev',\n    pagerNext: 'datatable-icon-skip'\n  }",
                    "line": 147,
                    "type": "any"
                },
                {
                    "name": "displayCheck",
                    "line": 173,
                    "type": "function"
                },
                {
                    "name": "externalPaging",
                    "defaultValue": "false",
                    "line": 131
                },
                {
                    "name": "externalSorting",
                    "defaultValue": "false",
                    "line": 132
                },
                {
                    "name": "footerHeight",
                    "defaultValue": "40",
                    "line": 191
                },
                {
                    "name": "groupedRows",
                    "line": 127,
                    "type": "any[]"
                },
                {
                    "name": "groupExpansionDefault",
                    "defaultValue": "false",
                    "line": 175
                },
                {
                    "name": "groupRowsBy",
                    "line": 126,
                    "type": "string"
                },
                {
                    "name": "headerHeight",
                    "defaultValue": "50",
                    "line": 189
                },
                {
                    "name": "limit",
                    "line": 134,
                    "type": "number | undefined"
                },
                {
                    "name": "loadingIndicator",
                    "defaultValue": "false",
                    "line": 138
                },
                {
                    "name": "messages",
                    "defaultValue": "{\n    // Message to show when array is presented\n    // but contains no values\n    emptyMessage: 'No data to display',\n\n    // Footer total message\n    totalMessage: 'total',\n\n    // Footer selected message\n    selectedMessage: 'selected'\n  }",
                    "line": 156,
                    "type": "any"
                },
                {
                    "name": "offset",
                    "defaultValue": "0",
                    "line": 136
                },
                {
                    "name": "reorderable",
                    "defaultValue": "true",
                    "line": 142
                },
                {
                    "name": "rowClass",
                    "line": 170,
                    "type": "any"
                },
                {
                    "name": "rowHeight",
                    "defaultValue": "50",
                    "line": 190
                },
                {
                    "name": "rowIdentity",
                    "defaultValue": "((x: any) => x)",
                    "line": 168,
                    "type": "function"
                },
                {
                    "name": "rows",
                    "line": 118,
                    "type": "any[]"
                },
                {
                    "name": "scrollbarH",
                    "defaultValue": "true",
                    "line": 194
                },
                {
                    "name": "scrollbarV",
                    "defaultValue": "true",
                    "line": 193
                },
                {
                    "name": "selectAllRowsOnPage",
                    "defaultValue": "false",
                    "line": 179
                },
                {
                    "name": "selectCheck",
                    "line": 172,
                    "type": "any"
                },
                {
                    "name": "selected",
                    "defaultValue": "[]",
                    "line": 129,
                    "type": "any[]"
                },
                {
                    "name": "selectionType",
                    "line": 140,
                    "type": "SelectionType"
                },
                {
                    "name": "sorts",
                    "defaultValue": "[]",
                    "line": 145,
                    "type": "any[]"
                },
                {
                    "name": "sortType",
                    "defaultValue": "SortType.single",
                    "line": 144,
                    "type": "SortType"
                },
                {
                    "name": "summaryHeight",
                    "defaultValue": "30",
                    "line": 184
                },
                {
                    "name": "summaryPosition",
                    "defaultValue": "'top'",
                    "line": 185
                },
                {
                    "name": "summaryRow",
                    "defaultValue": "false",
                    "line": 183
                },
                {
                    "name": "swapColumns",
                    "defaultValue": "true",
                    "line": 143
                },
                {
                    "name": "targetMarkerTemplate",
                    "line": 95,
                    "type": "any"
                },
                {
                    "name": "trackByProp",
                    "line": 177,
                    "type": "string"
                },
                {
                    "name": "treeFromRelation",
                    "line": 181,
                    "type": "string"
                },
                {
                    "name": "treeToRelation",
                    "line": 182,
                    "type": "string"
                },
                {
                    "name": "virtualization",
                    "defaultValue": "false",
                    "line": 187
                }
            ],
            "outputsClass": [
                {
                    "name": "actionRefreshRequest",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 206,
                    "type": "EventEmitter"
                },
                {
                    "name": "activate",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 197,
                    "type": "EventEmitter"
                },
                {
                    "name": "page",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 200,
                    "type": "EventEmitter"
                },
                {
                    "name": "reorder",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 201,
                    "type": "EventEmitter"
                },
                {
                    "name": "resize",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 202,
                    "type": "EventEmitter"
                },
                {
                    "name": "scroll",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 196,
                    "type": "EventEmitter"
                },
                {
                    "name": "select",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 198,
                    "type": "EventEmitter"
                },
                {
                    "name": "sort",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 199,
                    "type": "EventEmitter"
                },
                {
                    "name": "tableContextmenu",
                    "defaultValue": "new EventEmitter<{ event: MouseEvent, type: ContextmenuType, content: any }>(false)",
                    "line": 203,
                    "type": "EventEmitter"
                },
                {
                    "name": "treeAction",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 204,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_columns",
                    "type": "ITheSeamDatatableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_filtersSubject",
                    "defaultValue": "new BehaviorSubject<IDataFilter[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_menuBarComponent",
                    "type": "DatatableMenuBarComponent",
                    "optional": false,
                    "description": "",
                    "line": 227,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_menuBarSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 228,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_rows",
                    "defaultValue": "new BehaviorSubject<any[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 120,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "actionMenu",
                    "type": "DatatableActionMenuComponent",
                    "optional": false,
                    "description": "",
                    "line": 210,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "DatatableActionMenuComponent, {static: true}"
                        }
                    ]
                },
                {
                    "name": "columnComponents",
                    "type": "QueryList<DatatableColumnComponent>",
                    "optional": false,
                    "description": "",
                    "line": 208,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "DatatableColumnComponent"
                        }
                    ]
                },
                {
                    "name": "faChevronDown",
                    "defaultValue": "faChevronDown",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "faChevronRight",
                    "defaultValue": "faChevronRight",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "faEllipsisH",
                    "defaultValue": "faEllipsisH",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "faSpinner",
                    "defaultValue": "faSpinner",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "ngxDatatable",
                    "type": "NgxDatatableComponent",
                    "optional": false,
                    "description": "",
                    "line": 230,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "NgxDatatableComponent, {static: false}"
                        }
                    ]
                },
                {
                    "name": "ngxDatatableElement",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 231,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "NgxDatatableComponent, {read: ElementRef, static: false}"
                        }
                    ]
                },
                {
                    "name": "rowActionItem",
                    "type": "DatatableRowActionItemDirective",
                    "optional": false,
                    "description": "",
                    "line": 211,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "DatatableRowActionItemDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "rows$",
                    "type": "Observable<any[]>",
                    "optional": false,
                    "description": "",
                    "line": 122,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_columnData",
                    "args": [
                        {
                            "name": "col",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 259,
                    "jsdoctags": [
                        {
                            "name": "col",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_onTreeAction",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 347,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setColumnDefaults",
                    "args": [
                        {
                            "name": "columns",
                            "type": "ITheSeamDatatableColumn[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 282,
                    "description": "<p>This is just the <code>setColumnDefaults</code> function from\n&#39;@marklb/ngx-datatable/release/utils&#39; without the internally maintained\nproperties( the props starting with &#39;$$&#39;).</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "ITheSeamDatatableColumn[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setMenuBarFilters",
                    "args": [
                        {
                            "name": "filters",
                            "type": "IDataFilter[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "IDataFilter[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColumnComponent",
                    "args": [
                        {
                            "name": "propName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "DatatableColumnComponent | null",
                    "typeParameters": [],
                    "line": 246,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "propName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240
                },
                {
                    "name": "onDatatableResize",
                    "args": [
                        {
                            "name": "event",
                            "type": "IElementResizedEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 268,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IElementResizedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByFnColumn",
                    "args": [
                        {
                            "name": "index",
                            "type": ""
                        },
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 264,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "triggerActionRefreshRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 358,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { animate, style, transition, trigger } from '@angular/animations'\nimport {\n  ChangeDetectionStrategy, Component, ContentChild, ContentChildren,\n  ElementRef, EventEmitter, forwardRef, InjectionToken, Input, OnInit, Output, QueryList, ViewChild\n} from '@angular/core'\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs'\nimport { switchMap } from 'rxjs/operators'\n\nimport { faChevronDown, faChevronRight, faEllipsisH, faSpinner } from '@fortawesome/free-solid-svg-icons'\nimport { ColumnMode, ContextmenuType, SelectionType, SortType, TreeStatus } from '@marklb/ngx-datatable'\nimport { DatatableComponent as NgxDatatableComponent } from '@marklb/ngx-datatable'\nimport { camelCase, deCamelCase, getterForProp, isNullOrUndefined } from '@marklb/ngx-datatable/release/utils'\n\nimport { composeDataFilters, IDataFilter } from '../../data-filters/index'\nimport { IElementResizedEvent } from '../../shared/index'\n\nimport { DatatableActionMenuComponent } from '../datatable-action-menu/datatable-action-menu.component'\nimport { DatatableColumnComponent } from '../datatable-column/datatable-column.component'\nimport { DatatableMenuBarComponent } from '../datatable-menu-bar/datatable-menu-bar.component'\nimport { DatatableRowActionItemDirective } from '../directives/datatable-row-action-item.directive'\nimport { ITheSeamDatatableColumn } from '../models/table-column'\n\n/**\n * NOTE: This is still being worked on. I am trying to figure out this model\n * because `ngx-datatable` just uses an untyped object and sets properties in\n * multiple places.\n */\nexport interface ICellContext {\n  allRowsSelected: false\n\n  selectFn: () => any\n  sortDir?: 'asc' | 'desc'\n  sortFn: () => any\n\n  expanded?: boolean\n\n  onCheckboxChangeFn?: any\n  activateFn?: any\n  row?: any\n  group?: any\n  value?: any\n  column?: ITheSeamDatatableColumn\n  rowHeight?: number\n  isSelected?: boolean\n  rowIndex?: number\n  treeStatus?: TreeStatus\n  onTreeAction?: any\n}\n\nexport interface IDatatableAccessor {\n  columns: ITheSeamDatatableColumn[]\n  rows$: Observable<any[]>\n}\n\n/**\n * Intended for internal classes declared by the `TheSeamDatatableModule`.\n */\nexport const THESEAM_DATATABLE = new InjectionToken<IDataFilter>('LibDatatable')\n\nexport const _THESEAM_DATATABLE: any = {\n  provide: THESEAM_DATATABLE,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DatatableComponent)\n}\n\n@Component({\n  selector: 'seam-datatable',\n  templateUrl: './datatable.component.html',\n  styleUrls: ['./datatable.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('slideDown', [\n      transition(':enter', [\n        style({ transform: 'translateY(-20%)', opacity: '0' }),\n        animate('250ms', style({ transform: 'translateY(0)', opacity: '1' })),\n      ]),\n      transition(':leave', [\n        style({ transform: 'translateY(0)', opacity: '1' }),\n        animate('250ms', style({ transform: 'translateY(-20%)', opacity: '0' })),\n      ])\n    ])\n  ],\n  providers: [ _THESEAM_DATATABLE ]\n})\nexport class DatatableComponent implements OnInit {\n\n  faEllipsisH = faEllipsisH\n  faChevronDown = faChevronDown\n  faChevronRight = faChevronRight\n  faSpinner = faSpinner\n\n  private _filtersSubject = new BehaviorSubject<IDataFilter[]>([])\n\n\n  @Input() targetMarkerTemplate: any\n\n  @Input()\n  get columns(): ITheSeamDatatableColumn[] { return this._columns }\n  set columns(value: ITheSeamDatatableColumn[]) {\n    if (value) {\n      // Need to call `setColumnDefaults` before ngx-datatable gets it because\n      // of how this wrapper is implemented.\n\n      // NOTE: Custom `this._setColumnDefaults` used because the\n      // `setColumnDefaults` imported from `ngx-datatable` is causing a circular\n      // dependency.\n      //\n      // TODO: Consider implementing differently to avoid maintaining defaults\n      // or having to remove the properties set by `setColumnDefaults` function\n      // in the `ngx-datatable` utilities that shouldn't be set yet.\n      this._setColumnDefaults(value)\n    }\n    this._columns = value\n  }\n  private _columns: ITheSeamDatatableColumn[]\n\n  @Input()\n  get rows(): any[] { return this._rows.value }\n  set rows(value: any[]) { this._rows.next(value || []) }\n  private _rows = new BehaviorSubject<any[]>([])\n\n  public rows$: Observable<any[]>\n\n  @Input() columnMode: ColumnMode = ColumnMode.force\n\n  @Input() groupRowsBy: string\n  @Input() groupedRows: any[]\n\n  @Input() selected: any[] = []\n\n  @Input() externalPaging = false\n  @Input() externalSorting = false\n\n  @Input() limit: number | undefined\n  @Input() count = 0\n  @Input() offset = 0\n\n  @Input() loadingIndicator = false\n\n  @Input() selectionType: SelectionType\n\n  @Input() reorderable = true\n  @Input() swapColumns = true\n  @Input() sortType: SortType = SortType.single\n  @Input() sorts: any[] = []\n\n  @Input() cssClasses: any = {\n    sortAscending: 'datatable-icon-up',\n    sortDescending: 'datatable-icon-down',\n    pagerLeftArrow: 'datatable-icon-left',\n    pagerRightArrow: 'datatable-icon-right',\n    pagerPrevious: 'datatable-icon-prev',\n    pagerNext: 'datatable-icon-skip'\n  }\n\n  @Input() messages: any = {\n    // Message to show when array is presented\n    // but contains no values\n    emptyMessage: 'No data to display',\n\n    // Footer total message\n    totalMessage: 'total',\n\n    // Footer selected message\n    selectedMessage: 'selected'\n  }\n\n  @Input() rowIdentity: (x: any) => any = ((x: any) => x)\n\n  @Input() rowClass: any\n\n  @Input() selectCheck: any\n  @Input() displayCheck: (row: any, column?: any, value?: any) => boolean\n\n  @Input() groupExpansionDefault = false\n\n  @Input() trackByProp: string\n\n  @Input() selectAllRowsOnPage = false\n\n  @Input() treeFromRelation: string\n  @Input() treeToRelation: string\n  @Input() summaryRow = false\n  @Input() summaryHeight = 30\n  @Input() summaryPosition = 'top'\n\n  @Input() virtualization = false\n\n  @Input() headerHeight = 50\n  @Input() rowHeight = 50\n  @Input() footerHeight = 40\n\n  @Input() scrollbarV = true\n  @Input() scrollbarH = true\n\n  @Output() scroll = new EventEmitter<any>()\n  @Output() activate = new EventEmitter<any>()\n  @Output() select = new EventEmitter<any>()\n  @Output() sort = new EventEmitter<any>()\n  @Output() page = new EventEmitter<any>()\n  @Output() reorder = new EventEmitter<any>()\n  @Output() resize = new EventEmitter<any>()\n  @Output() tableContextmenu = new EventEmitter<{ event: MouseEvent, type: ContextmenuType, content: any }>(false)\n  @Output() treeAction = new EventEmitter<any>()\n\n  @Output() readonly actionRefreshRequest = new EventEmitter<void>()\n\n  @ContentChildren(DatatableColumnComponent) columnComponents: QueryList<DatatableColumnComponent>\n\n  @ContentChild(DatatableActionMenuComponent, { static: true }) actionMenu: DatatableActionMenuComponent\n  @ContentChild(DatatableRowActionItemDirective, { static: true }) rowActionItem: DatatableRowActionItemDirective\n\n  @ContentChild(DatatableMenuBarComponent, { static: false })\n  get menuBarComponent(): DatatableMenuBarComponent { return this._menuBarComponent }\n  set menuBarComponent(value: DatatableMenuBarComponent) {\n    this._menuBarComponent = value\n\n    if (this._menuBarSub) { this._menuBarSub.unsubscribe() }\n\n    if (value) {\n      this._setMenuBarFilters(value.filters())\n\n      this._menuBarSub = this._menuBarComponent.filtersChanged\n        .subscribe(v => { this._setMenuBarFilters(value.filters()) })\n    }\n  }\n  private _menuBarComponent: DatatableMenuBarComponent\n  private _menuBarSub: Subscription\n\n  @ViewChild(NgxDatatableComponent, { static: false }) ngxDatatable: NgxDatatableComponent\n  @ViewChild(NgxDatatableComponent, { read: ElementRef, static: false }) ngxDatatableElement: ElementRef\n\n  constructor() {\n    this.rows$ = this._filtersSubject.asObservable()\n      .pipe(switchMap(filters => this._rows.asObservable()\n        .pipe(composeDataFilters(filters))\n      ))\n  }\n\n  ngOnInit() { }\n\n  private _setMenuBarFilters(filters: IDataFilter[]) {\n    this._filtersSubject.next(filters || [])\n  }\n\n  public getColumnComponent(propName: string): DatatableColumnComponent | null {\n    if (!this.columnComponents || this.columnComponents.length === 0) {\n      return null\n    }\n\n    const tpl = this.columnComponents.find(t => t.prop === propName)\n    if (tpl) {\n      return tpl\n    }\n\n    return null\n  }\n\n  _columnData(col: any): { col: any, comp: DatatableColumnComponent | null } {\n    const comp = this.getColumnComponent(col.prop)\n    return { col, comp }\n  }\n\n  public trackByFnColumn(index, item) {\n    return item.prop\n  }\n\n  public onDatatableResize(event: IElementResizedEvent) {\n    // console.log('onDatatableResize')\n    if (this.ngxDatatable && this.ngxDatatableElement && this.ngxDatatableElement.nativeElement) {\n      // TODO: Consider integrating this into the ngx-datatable library to avoid\n      // multiple resize calls when the table resizes itself.\n      this.ngxDatatable.recalculate()\n    }\n  }\n\n  /**\n   * This is just the `setColumnDefaults` function from\n   * '@marklb/ngx-datatable/release/utils' without the internally maintained\n   * properties( the props starting with '$$').\n   */\n  private _setColumnDefaults(columns: ITheSeamDatatableColumn[]) {\n    if (!columns) { return }\n\n    // Only one column should hold the tree view\n    // Thus if multiple columns are provided with\n    // isTreeColumn as true we take only the first one\n    let treeColumnFound = false\n\n    for (const column of columns) {\n\n      // prop can be numeric; zero is valid not a missing prop\n      // translate name => prop\n      if (isNullOrUndefined(column.prop) && column.name) {\n        column.prop = camelCase(column.name)\n      }\n\n      if (!column.$$valueGetter && column.prop) {\n        column.$$valueGetter = getterForProp(column.prop)\n      }\n\n      // format props if no name passed\n      if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n        column.name = deCamelCase(String(column.prop))\n      }\n\n      if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n        column.name = '' // Fixes IE and Edge displaying `null`\n      }\n\n      if (!column.hasOwnProperty('resizeable')) {\n        column.resizeable = true\n      }\n\n      if (!column.hasOwnProperty('sortable')) {\n        column.sortable = true\n      }\n\n      if (!column.hasOwnProperty('draggable')) {\n        column.draggable = true\n      }\n\n      if (!column.hasOwnProperty('canAutoResize')) {\n        column.canAutoResize = true\n      }\n\n      if (!column.hasOwnProperty('width')) {\n        column.width = 150\n      }\n\n      if (!column.hasOwnProperty('isTreeColumn')) {\n        column.isTreeColumn = false\n      } else {\n        if (column.isTreeColumn && !treeColumnFound) {\n          // If the first column with isTreeColumn is true found\n          // we mark that treeCoulmn is found\n          treeColumnFound = true\n        } else {\n          // After that isTreeColumn property for any other column\n          // will be set as false\n          column.isTreeColumn = false\n        }\n      }\n    }\n  }\n\n  _onTreeAction(event: any) {\n    const index = event.rowIndex\n    const row = event.row\n    if (row.treeStatus === 'collapsed') {\n      row.treeStatus = 'expanded'\n    } else {\n      row.treeStatus = 'collapsed'\n    }\n    this.rows = [ ...this.rows ]\n  }\n\n  public triggerActionRefreshRequest() {\n    this.actionRefreshRequest.emit(undefined)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/utilities';\n\n:host {\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n}\n\nngx-datatable {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.datatable-wrapper {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n\n  .datatable-table-wrapper {\n    position: relative;\n    flex: 1 1 100%;\n  }\n}\n\n.datatable-action-button {\n  font-size: 20px;\n  line-height: 20px;\n\n  width: 30px;\n  height: 30px;\n\n  padding: 0;\n  border-radius: 15px;\n  text-align: center;\n\n  &::ng-deep {\n    .svg-inline--fa {\n      vertical-align: middle;\n    }\n  }\n\n  &:hover {\n    color: $primary;\n    background-color: $gray-200;\n  }\n}\n\n.datatable-column-header-separator {\n  position: absolute;\n  top: 12px;\n  bottom: 12px;\n  right: 0;\n  width: 2px;\n  background-color: #e1e3e6;\n}\n\n.datatable-sort-target {\n  cursor: pointer;\n}\n",
                    "styleUrl": "./datatable.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 231
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "columns": {
                    "name": "columns",
                    "setSignature": {
                        "name": "columns",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 99,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "rows": {
                    "name": "rows",
                    "setSignature": {
                        "name": "rows",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 119,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "menuBarComponent": {
                    "name": "menuBarComponent",
                    "setSignature": {
                        "name": "menuBarComponent",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 215,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "menuBarComponent",
                        "type": "",
                        "returnType": "DatatableMenuBarComponent",
                        "line": 214
                    }
                }
            },
            "templateData": "<div class=\"datatable-wrapper\">\n  <ng-content select=\"seam-datatable-menu-bar\"></ng-content>\n  <div class=\"datatable-table-wrapper\">\n    <ng-container>\n      <!-- [loadingIndicator]=\"true\" -->\n      <ngx-datatable\n        class=\"bootstrap\"\n        [columnMode]=\"columnMode\"\n        [scrollbarV]=\"scrollbarV\"\n        [scrollbarH]=\"scrollbarH\"\n        [virtualization]=\"virtualization\"\n        [targetMarkerTemplate]=\"targetMarkerTemplate\"\n        [groupRowsBy]=\"groupRowsBy\"\n        [groupedRows]=\"groupedRows\"\n        [selected]=\"selected\"\n        [externalPaging]=\"externalPaging\"\n        [externalSorting]=\"externalSorting\"\n        [limit]=\"limit\"\n        [count]=\"count\"\n        [offset]=\"offset\"\n        [loadingIndicator]=\"loadingIndicator\"\n        [selectionType]=\"selectionType\"\n        [reorderable]=\"reorderable\"\n        [swapColumns]=\"swapColumns\"\n        [sortType]=\"sortType\"\n        [sorts]=\"sorts\"\n        [cssClasses]=\"cssClasses\"\n        [messages]=\"messages\"\n        [rowIdentity]=\"rowIdentity\"\n        [rowClass]=\"rowClass\"\n        [selectCheck]=\"selectCheck\"\n        [displayCheck]=\"displayCheck\"\n        [groupExpansionDefault]=\"groupExpansionDefault\"\n        [trackByProp]=\"trackByProp\"\n        [selectAllRowsOnPage]=\"selectAllRowsOnPage\"\n        [treeFromRelation]=\"treeFromRelation\"\n        [treeToRelation]=\"treeToRelation\"\n        [summaryRow]=\"summaryRow\"\n        [summaryHeight]=\"summaryHeight\"\n        [summaryPosition]=\"summaryPosition\"\n        [rows]=\"rows$ | async\"\n        [headerHeight]=\"headerHeight\"\n        [rowHeight]=\"rowHeight\"\n        [footerHeight]=\"footerHeight\"\n        (scroll)=\"scroll.emit($event)\"\n        (activate)=\"activate.emit($event)\"\n        (select)=\"select.emit($event)\"\n        (sort)=\"sort.emit($event)\"\n        (page)=\"page.emit($event)\"\n        (reorder)=\"reorder.emit($event)\"\n        (resize)=\"resize.emit($event)\"\n        (tableContextmenu)=\"tableContextmenu.emit($event)\"\n        (treeAction)=\"treeAction.emit($event)\"\n        (seamElemResized)=\"onDatatableResize($event)\"\n        (treeAction)=\"_onTreeAction($event)\">\n\n        <ngx-datatable-group-header [rowHeight]=\"50\" #myGroupHeader *ngIf=\"groupRowsBy\">\n          <ng-template let-group=\"group\" let-expanded=\"expanded\" ngx-datatable-group-header-template>\n            <div\n              class=\"w-100 bg-light p-1\"\n              [class.border-bottom]=\"!expanded\"\n              [class.datatable-icon-right]=\"!expanded\"\n              [class.datatable-icon-down]=\"expanded\"\n              title=\"Expand/Collapse Group\"\n              (click)=\"ngxDatatable.groupHeader.toggleExpandGroup(group)\">\n              <b>Age: {{ group.age }}</b>\n            </div>\n          </ng-template>\n        </ngx-datatable-group-header>\n\n        <ngx-datatable-column *ngIf=\"selectionType === 'checkbox'\"\n          [width]=\"30\"\n          [sortable]=\"false\"\n          [canAutoResize]=\"false\"\n          [draggable]=\"false\"\n          [resizeable]=\"false\"\n          [headerCheckboxable]=\"true\"\n          [checkboxable]=\"true\">\n        </ngx-datatable-column>\n\n        <ng-container *ngFor=\"let col of (columns || []) trackBy: trackByFnColumn\">\n          <ng-container *ngIf=\"_columnData(col) as colData\">\n\n            <ngx-datatable-column\n              [prop]=\"colData.comp?.prop || colData.col.prop\"\n              [name]=\"colData.comp?.name || colData.col.name\"\n              [flexGrow]=\"colData.comp?.flexGrow || colData.col.flexGrow\"\n              [minWidth]=\"colData.comp?.minWidth || colData.col.minWidth\"\n              [maxWidth]=\"colData.comp?.maxWidth || colData.col.maxWidth\"\n              [width]=\"colData.comp?.width || colData.col.width\"\n              [resizeable]=\"colData.comp?.resizeable || colData.col.resizeable\"\n              [sortable]=\"colData.comp?.sortable || colData.col.sortable\"\n              [draggable]=\"colData.comp?.draggable || colData.col.draggable\"\n              [canAutoResize]=\"colData.comp?.canAutoResize || colData.col.canAutoResize\"\n              [comparator]=\"colData.comp?.comparator || colData.col.comparator\"\n              [checkboxable]=\"colData.comp?.checkboxable || colData.col.checkboxable\"\n              [headerCheckboxable]=\"colData.comp?.headerCheckboxable || colData.col.headerCheckboxable\"\n              [headerClass]=\"colData.comp?.headerClass || colData.col.headerClass\"\n              [cellClass]=\"colData.comp?.cellClass || colData.col.cellClass\"\n              [frozenLeft]=\"colData.comp?.frozenLeft || colData.col.frozenLeft\"\n              [frozenRight]=\"colData.comp?.frozenRight || colData.col.frozenRight\"\n              [pipe]=\"colData.comp?.pipe || colData.col.pipe\"\n              [isTreeColumn]=\"colData.comp?.isTreeColumn || colData.col.isTreeColumn\">\n\n              <ng-template let-column=\"column\" let-sortFn=\"sortFn\" ngx-datatable-header-template>\n                <strong *ngIf=\"!column.sortable\" class=\"draggable\">{{column.name}}</strong>\n                <strong *ngIf=\"column.sortable\" class=\"datatable-sort-target draggable\" (click)=\"sortFn()\">{{column.name}}</strong>\n                <div class=\"datatable-column-header-separator\"></div>\n              </ng-template>\n\n              <ng-template let-value=\"value\" let-rowIndex=\"rowIndex\" let-row=\"row\" ngx-datatable-cell-template>\n                <ng-template *ngIf=\"colData.comp?.cellTplDirective as cellDir; else noCellTpl\"\n                  [ngTemplateOutlet]=\"cellDir.template\"\n                  [ngTemplateOutletContext]=\"{ $implicit: value, value: value, rowIndex: rowIndex, row: row }\">\n                </ng-template>\n                <ng-template #noCellTpl>\n                  <seam-table-cell-type-selector *ngIf=\"colData.comp?.cellType || colData.col?.cellType; else noCellType\"\n                    [type]=\"colData.comp?.cellType || colData.col?.cellType\"\n                    [value]=\"value\"\n                    [rowIndex]=\"rowIndex\"\n                    [row]=\"row\"\n                    [colData]=\"colData.comp || colData.col\">\n                  </seam-table-cell-type-selector>\n                  <ng-template #noCellType>\n                    {{ value }}\n                  </ng-template>\n                </ng-template>\n              </ng-template>\n\n              <ng-template ngx-datatable-tree-toggle let-tree=\"cellContext\">\n                <button\n                  class=\"p-0 bg-transparent border-0 btn\"\n                  [disabled]=\"tree.treeStatus==='disabled'\"\n                  (click)=\"tree.onTreeAction()\">\n                  <span *ngIf=\"tree.treeStatus==='loading'\">\n                    <fa-icon [icon]=\"faSpinner\"></fa-icon>\n                  </span>\n                  <span *ngIf=\"tree.treeStatus==='collapsed'\">\n                    <fa-icon [icon]=\"faChevronRight\"></fa-icon>\n                  </span>\n                  <span *ngIf=\"tree.treeStatus==='expanded'\">\n                    <fa-icon [icon]=\"faChevronDown\"></fa-icon>\n                  </span>\n                  <span *ngIf=\"tree.treeStatus==='disabled'\">\n                    <fa-icon [icon]=\"faChevronRight\"></fa-icon>\n                  </span>\n                </button>\n              </ng-template>\n\n            </ngx-datatable-column>\n\n          </ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"rowActionItem\">\n          <ngx-datatable-column prop=\"actionMenu\" name=\"Actions\"\n            [width]=\"50\"\n            [minWidth]=\"50\"\n            [maxWidth]=\"50\"\n            [resizeable]=\"false\"\n            [sortable]=\"false\"\n            [draggable]=\"false\"\n            [frozenRight]=\"false\">\n            <ng-template let-column=\"column\" ngx-datatable-header-template>\n              <!-- <strong>Actions</strong> -->\n            </ng-template>\n            <ng-template let-value=\"value\" let-rowIndex=\"rowIndex\" let-row=\"row\" ngx-datatable-cell-template>\n              <button type=\"button\" class=\"datatable-action-button btn\"\n                [seamDatatableActionMenuToggle]=\"actionMenuOverlayTpl\"\n                #actionMenuToggle=\"seamDatatableActionMenuToggle\"\n                title=\"Row Actions\">\n                <fa-icon [icon]=\"faEllipsisH\"></fa-icon>\n              </button>\n              <ng-template #actionMenuOverlayTpl>\n                <div @slideDown\n                  cdkMonitorSubtreeFocus\n                  (cdkFocusChange)=\"actionMenuToggle.onFocusChangeOverlay($event)\"\n                  tabindex=\"-1\"\n                  seamAutoFocus>\n                  <!-- <ng-content select=\"seam-datatable-action-menu\"></ng-content> -->\n                  <!-- <seam-datatable-action-menu [row]=\"row\"></seam-datatable-action-menu> -->\n                  <ng-template\n                    [ngTemplateOutlet]=\"rowActionItem.template\"\n                    [ngTemplateOutletContext]=\"{ $implicit: row, row: row, rowIndex: rowIndex }\">\n                  </ng-template>\n                </div>\n              </ng-template>\n            </ng-template>\n          </ngx-datatable-column>\n        </ng-container>\n\n      </ngx-datatable>\n    </ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "DatatableDynamicComponent",
            "id": "component-DatatableDynamicComponent-b3f169553a45473bcf06529053f14b55",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-datatable-dynamic",
            "styleUrls": [
                "./datatable-dynamic.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datatable-dynamic.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 38,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_commonFilterComponents$",
                    "type": "Observable<IFilterComponentRecord[]>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "_data",
                    "defaultValue": "new BehaviorSubject<IDatatableDynamicDef | undefined | null>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_dataExporters",
                    "type": "IDataExporter[]",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "THESEAM_DATA_EXPORTER"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_dataFilters",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "THESEAM_DATA_FILTER_DEF"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_exporters$",
                    "type": "Observable<[] | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "_hasFilterMenu$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "_hasFullSearch$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "data$",
                    "defaultValue": "this._data.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getActionRowContext",
                    "args": [
                        {
                            "name": "row",
                            "type": "IDynamicDatatableRow"
                        },
                        {
                            "name": "rowActionDef",
                            "type": "IDynamicDatatableRowActionDef"
                        }
                    ],
                    "optional": false,
                    "returnType": "IActionRowExprContext",
                    "typeParameters": [],
                    "line": 174,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "IDynamicDatatableRow",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowActionDef",
                            "type": "IDynamicDatatableRowActionDef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_rowActions",
                    "args": [
                        {
                            "name": "row",
                            "type": "IDynamicDatatableRow"
                        },
                        {
                            "name": "rowActions",
                            "type": "IDynamicDatatableRowActionDef[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDynamicDatatableRowActionDef[]>",
                    "typeParameters": [],
                    "line": 148,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "IDynamicDatatableRow",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowActions",
                            "type": "IDynamicDatatableRowActionDef[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setDefaults",
                    "args": [
                        {
                            "name": "def",
                            "type": "IDatatableDynamicDef"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "def",
                            "type": "IDatatableDynamicDef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal'\nimport { ChangeDetectionStrategy, Component, Inject, Input, OnInit } from '@angular/core'\nimport { BehaviorSubject, combineLatest, from, Observable, of } from 'rxjs'\nimport { concatMap, map, switchMap, take, tap, toArray } from 'rxjs/operators'\n\nimport jexl from 'jexl'\n\nimport { IDataExporter, THESEAM_DATA_EXPORTER } from '../data-exporter/index'\nimport { THESEAM_DATA_FILTER_DEF } from '../data-filters/data-filter-def'\nimport { IDataFilter } from '../data-filters/index'\nimport { notNullOrUndefined } from '../utils/index'\n\nimport { IDatatableDynamicDef, IDynamicDatatableRow, IDynamicDatatableRowActionDef } from './datatable-dynamic-def'\n\nexport function jexlObservable<R = any>(expression: string, context?: any): Observable<R> {\n  return from(jexl.eval(expression, context) as Promise<R>)\n}\n\nexport interface IFilterComponentRecord {\n  component: ComponentType<IDataFilter>\n  options?: any\n  order?: number\n}\n\nexport interface IActionRowExprContext {\n  row: IDynamicDatatableRow\n}\n\n@Component({\n  selector: 'seam-datatable-dynamic',\n  templateUrl: './datatable-dynamic.component.html',\n  styleUrls: ['./datatable-dynamic.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableDynamicComponent implements OnInit {\n\n  @Input()\n  set data(value: IDatatableDynamicDef | undefined | null) {\n    if (value) {\n      this._setDefaults(value)\n    }\n    this._data.next(value)\n  }\n  get data() { return this._data.value }\n  private _data = new BehaviorSubject<IDatatableDynamicDef | undefined | null>(undefined)\n\n  public data$ = this._data.asObservable()\n\n  _exporters$: Observable<IDataExporter[] | undefined>\n  _commonFilterComponents$: Observable<IFilterComponentRecord[]>\n  _hasFullSearch$: Observable<boolean>\n  _hasFilterMenu$: Observable<boolean>\n\n  constructor(\n    @Inject(THESEAM_DATA_EXPORTER) public _dataExporters: IDataExporter[],\n    @Inject(THESEAM_DATA_FILTER_DEF) public _dataFilters: { name: string, component: ComponentType<IDataFilter> }[]\n  ) { }\n\n  ngOnInit() {\n    this._exporters$ = this.data$.pipe(map(data => {\n      if (data && data.filterMenu && Array.isArray(data.filterMenu.exporters)) {\n        return data.filterMenu.exporters\n          .map(e => this._dataExporters.find(de => de.name === e))\n          .filter(notNullOrUndefined)\n      }\n      return undefined\n    }))\n\n    this._commonFilterComponents$ = this.data$.pipe(map(data => {\n      if (\n        data && data.filterMenu && Array.isArray(data.filterMenu.filters) &&\n        this._dataFilters && Array.isArray(this._dataFilters)\n      ) {\n        const commonFilters = data.filterMenu.filters.filter(f => f.type === 'common')\n\n        if (!commonFilters || commonFilters.length < 1) {\n          return []\n        }\n\n        const r = commonFilters\n          .map(cf => {\n            const _df = this._dataFilters.find(df => df.name === cf.name)\n            if (_df) {\n              const record: IFilterComponentRecord = {\n                component: _df.component,\n                options: cf.options,\n                order: cf.order || 0\n              }\n              return record\n            }\n            return null\n          })\n          .filter(notNullOrUndefined)\n\n        return r\n      }\n      return []\n    }))\n\n    this._hasFullSearch$ = this.data$.pipe(map(data => {\n      if (data && data.filterMenu && Array.isArray(data.filterMenu.filters)\n        && data.filterMenu.filters.findIndex(f => f.type === 'full-search') !== -1\n      ) {\n        return true\n      }\n      return false\n    }))\n\n    this._hasFilterMenu$ = this.data$.pipe(\n      switchMap(data => {\n        if (data && data.filterMenu) {\n          if (data.filterMenu.state === 'always-visible') {\n            return of(true)\n          } else if (data.filterMenu.state === 'hidden') {\n            return of(false)\n          }\n        }\n\n        return combineLatest([\n          this._exporters$.pipe(map(e => (e || []).length > 0)),\n          this._commonFilterComponents$.pipe(map(cfc => cfc.length > 0)),\n          this._hasFullSearch$\n        ]).pipe(map(v => v.indexOf(true) !== -1))\n      })\n    )\n  }\n\n  private _setDefaults(def: IDatatableDynamicDef): void {\n    for (const col of def.columns) {\n      if (!col.cellType) {\n        col.cellType = 'string'\n      }\n    }\n\n    if (def.filterMenu) {\n      if (!def.filterMenu.state) {\n        def.filterMenu.state = 'default'\n      }\n    }\n\n    if (def.options) {\n      if (def.options.virtualization === undefined || def.options.virtualization === null) {\n        def.options.virtualization = false\n      }\n    }\n  }\n\n  public _rowActions(row: IDynamicDatatableRow, rowActions: IDynamicDatatableRowActionDef[]): Observable<IDynamicDatatableRowActionDef[]> {\n    // TODO: Fix async eval.\n\n    if (!rowActions) { return of([]) }\n\n    return from(rowActions).pipe(\n      // concatMap(rowAction => rowAction.isHiddenExpr\n      //   ? jexlObservable(rowAction.isHiddenExpr).pipe(take(1), map(v => v ? rowAction : undefined))\n      //   : of(rowAction)\n      // ),\n\n      map(rowAction => {\n        if (rowAction.isHiddenExpr) {\n          const context = this._getActionRowContext(row, rowAction)\n          const isHidden = jexl.evalSync(rowAction.isHiddenExpr, context)\n          return isHidden ? undefined : rowAction\n        }\n        return rowAction\n      }),\n\n      toArray(),\n      map(v => v.filter(notNullOrUndefined)),\n      // tap(r => console.log('result', r)),\n    )\n  }\n\n  private _getActionRowContext(row: IDynamicDatatableRow, rowActionDef: IDynamicDatatableRowActionDef): IActionRowExprContext {\n    return {\n      row\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n}\n",
                    "styleUrl": "./datatable-dynamic.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_dataExporters",
                        "type": "IDataExporter[]"
                    },
                    {
                        "name": "_dataFilters",
                        "type": "literal type[]"
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "_dataExporters",
                        "type": "IDataExporter[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dataFilters",
                        "type": "literal type[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 38,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                }
            },
            "templateData": "<seam-datatable *ngIf=\"{ data: data$ | async } as obj\"\n  class=\"w-100 h-100\"\n  [columns]=\"obj.data && obj.data.columns\"\n  [rows]=\"obj.data && obj.data.rows\"\n  [virtualization]=\"obj.virtualization && obj.data.virtualization\">\n\n  <seam-datatable-menu-bar *ngIf=\"_hasFilterMenu$ | async\">\n    <div class=\"d-flex flex-row pb-2\">\n      <div class=\"d-flex flex-row justify-content-end flex-grow-1\">\n        <seam-data-filter-search seamDatatableFilter *ngIf=\"_hasFullSearch$\"></seam-data-filter-search>\n      </div>\n    </div>\n    <div class=\"d-flex flex-row\">\n      <div class=\"d-flex justify-content-center flex-grow-1\">\n        <ng-container *ngFor=\"let r of _commonFilterComponents$ | async; let isFirst = first\">\n          <seam-datatable-dynamic-filter-container\n            [class.ml-1]=\"!isFirst\"\n            [filterComponent]=\"r.component\"\n            [options]=\"r.options\">\n          </seam-datatable-dynamic-filter-container>\n        </ng-container>\n      </div>\n      <seam-datatable-export-button *ngIf=\"_exporters$ | async as exporters\"\n        [exporters]=\"exporters\">\n      </seam-datatable-export-button>\n    </div>\n  </seam-datatable-menu-bar>\n\n  <ng-template seamDatatableRowActionItem let-row>\n    <ng-container *ngIf=\"(_rowActions(row, obj.data.rowActions) | async) as rActions\">\n      <seam-datatable-action-menu>\n        <ng-container *ngFor=\"let a of rActions\">\n          <!-- TODO: Cleanup action-menu-item to be easier to use with or without dynamic. -->\n          <seam-datatable-action-menu-item *ngIf=\"!a.action\" [label]=\"a.label\"></seam-datatable-action-menu-item>\n          <seam-datatable-action-menu-item *ngIf=\"a.action && a.action.type === 'link' && a.action.external\"\n            [label]=\"a.label\"\n            [attr.href]=\"a.action.link\"\n            [confirmDialog]=\"a.action.confirmDialog\">\n          </seam-datatable-action-menu-item>\n          <seam-datatable-action-menu-item *ngIf=\"a.action && a.action.type === 'link' && !a.action.external\"\n            [label]=\"a.label\"\n            [routerLink]=\"a.action.link\"\n            [confirmDialog]=\"a.action.confirmDialog\">\n          </seam-datatable-action-menu-item>\n          <seam-datatable-action-menu-item *ngIf=\"a.action && a.action.type === 'api'\"\n            [label]=\"a.label\"\n            [endpointConfig]=\"a.action\"\n            [row]=\"row\"\n            [confirmDialog]=\"a.action.confirmDialog\">\n          </seam-datatable-action-menu-item>\n          <seam-datatable-action-menu-item *ngIf=\"a.action && a.action.type === 'modal'\"\n            [label]=\"a.label\"\n            [modalConfig]=\"a.action\"\n            [row]=\"row\"\n            [confirmDialog]=\"a.action.confirmDialog\">\n          </seam-datatable-action-menu-item>\n        </ng-container>\n      </seam-datatable-action-menu>\n    </ng-container>\n  </ng-template>\n\n</seam-datatable>\n\n<!-- <router-outlet name=\"modal\"></router-outlet> -->\n"
        },
        {
            "name": "DatatableDynamicFilterContainerComponent",
            "id": "component-DatatableDynamicFilterContainerComponent-1fe42e9789e8fee34acc5f8958ab1f01",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-filter-container/datatable-dynamic-filter-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-datatable-dynamic-filter-container",
            "styleUrls": [
                "./datatable-dynamic-filter-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datatable-dynamic-filter-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "filterComponent",
                    "line": 18,
                    "type": ""
                },
                {
                    "name": "options",
                    "line": 27,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_filterComponent",
                    "type": "ComponentType<C>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_portal",
                    "defaultValue": "null",
                    "type": "ComponentPortal<C> | null",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "_createInjector",
                    "args": [],
                    "optional": false,
                    "returnType": "PortalInjector",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_setPortal",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<C>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<C>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ComponentPortal, PortalInjector } from '@angular/cdk/portal'\nimport { ChangeDetectionStrategy, Component, Injector, Input, OnInit, ViewContainerRef } from '@angular/core'\n\nimport { THESEAM_DATA_FILTER_OPTIONS } from '../../data-filters/data-filter'\n\n/** Interface that can be used to generically type a class. */\nexport type ComponentType<T> = new (...args: any[]) => T\n\n@Component({\n  selector: 'seam-datatable-dynamic-filter-container',\n  templateUrl: './datatable-dynamic-filter-container.component.html',\n  styleUrls: ['./datatable-dynamic-filter-container.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableDynamicFilterContainerComponent<C> implements OnInit {\n\n  @Input()\n  set filterComponent(value: ComponentType<C>) {\n    this._filterComponent = value\n    // if (this._filterComponent !== value) {\n    //   this._setPortal(value)\n    // }\n  }\n  get filterComponent() { return this._filterComponent }\n  private _filterComponent: ComponentType<C>\n\n  @Input() options: any\n\n  _portal: ComponentPortal<C> | null = null\n\n  constructor(\n    private _injector: Injector\n  ) { }\n\n  ngOnInit() {\n    this._setPortal(this.filterComponent)\n  }\n\n  private _setPortal(component: ComponentType<C>) {\n    if (this._portal) {\n      this._portal = null\n    }\n\n    if (component) {\n      this._portal = new ComponentPortal(component, undefined, this._createInjector())\n    } else {\n      this._portal = null\n    }\n  }\n\n  private _createInjector(): PortalInjector {\n    return new PortalInjector(this._injector, new WeakMap <any, any> ([\n      [ THESEAM_DATA_FILTER_OPTIONS, this.options ]\n    ]))\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n",
                    "styleUrl": "./datatable-dynamic-filter-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_injector",
                        "type": "Injector"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "filterComponent": {
                    "name": "filterComponent",
                    "setSignature": {
                        "name": "filterComponent",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "filterComponent",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            },
            "templateData": "<ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n"
        },
        {
            "name": "DatatableExportButtonComponent",
            "id": "component-DatatableExportButtonComponent-a8ed1f0f5d69f9e23cb81f18b3f05825",
            "file": "projects/ui-common/src/lib/datatable/datatable-export-button/datatable-export-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-datatable-export-button",
            "styleUrls": [
                "./datatable-export-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datatable-export-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "exporters",
                    "line": 24,
                    "type": "IDataExporter[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "icon",
                    "defaultValue": "faFileDownload",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "_mapExportData",
                    "args": [
                        {
                            "name": "columns",
                            "type": "ITheSeamDatatableColumn[]"
                        },
                        {
                            "name": "rows",
                            "type": "any[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "ITheSeamDatatableColumn[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rows",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_onExporterClicked",
                    "args": [
                        {
                            "name": "exporter",
                            "type": "IDataExporter"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "exporter",
                            "type": "IDataExporter",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_rowValue",
                    "args": [
                        {
                            "name": "column",
                            "type": "ITheSeamDatatableColumn"
                        },
                        {
                            "name": "row",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "ITheSeamDatatableColumn",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "row",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Inject, Input, isDevMode, OnInit } from '@angular/core'\nimport { of } from 'rxjs'\nimport { catchError, concatMap, map, tap } from 'rxjs/operators'\n\nimport { faFileDownload } from '@fortawesome/free-solid-svg-icons'\nimport { ToastrService } from 'ngx-toastr'\n\nimport { IDataExporter } from '../../data-exporter/data-exporter'\nimport { TheSeamLoadingOverlayService } from '../../loading/index'\n\nimport { DatatableComponent, THESEAM_DATATABLE } from '../datatable/datatable.component'\nimport { ITheSeamDatatableColumn } from '../models/table-column'\n\n@Component({\n  selector: 'seam-datatable-export-button',\n  templateUrl: './datatable-export-button.component.html',\n  styleUrls: ['./datatable-export-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableExportButtonComponent implements OnInit {\n\n  icon = faFileDownload\n\n  @Input() exporters: IDataExporter[]\n\n  get disabled() {\n    return !(this.exporters && this.exporters.length > 0)\n  }\n\n  constructor(\n    @Inject(THESEAM_DATATABLE) private _datatable: DatatableComponent,\n    private _toastr: ToastrService,\n    private _loading: TheSeamLoadingOverlayService\n  ) { }\n\n  ngOnInit() { }\n\n  _onExporterClicked(exporter: IDataExporter) {\n    if (!exporter.export) {\n      const msg = isDevMode()\n        ? `Exporter '${exporter.name}' is missing an export method.`\n        : `${exporter.label} export is not available.`\n      this._toastr.error(msg, 'Data Export')\n    }\n\n    const export$ = this._datatable.rows$\n      .pipe(\n        map(rows => this._mapExportData(this._datatable.columns, rows)),\n        concatMap(data => exporter.export(data)),\n        catchError(err => {\n          console.error(err)\n          return of(false)\n        }),\n        tap(success => {\n          if (success) {\n            this._toastr.success(`${exporter.label} export complete.`, 'Data Export')\n          } else {\n            this._toastr.success(`${exporter.label} export failed.`, 'Data Export')\n          }\n        })\n      )\n\n    this._loading.while(export$).subscribe()\n  }\n\n  private _mapExportData(columns: ITheSeamDatatableColumn[], rows: any[]) {\n    const data: any[] = []\n\n    for (const row of rows) {\n      const newRow: any = {}\n\n      for (const col of columns) {\n        if (!col.exportIgnore) {\n          const colName = col.exportHeader || col.name || col.prop\n          if (colName) {\n            newRow[colName] = this._rowValue(col, row)\n          }\n        }\n      }\n\n      data.push(newRow)\n    }\n\n    return data\n  }\n\n  private _rowValue(column: ITheSeamDatatableColumn, row: any) {\n    if (column.exportValueFn) {\n      return column.exportValueFn(row)\n    }\n\n    const colProp = column.prop\n    if (colProp) {\n      return row[colProp]\n    }\n    return undefined\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n",
                    "styleUrl": "./datatable-export-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_datatable",
                        "type": "DatatableComponent"
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService"
                    },
                    {
                        "name": "_loading",
                        "type": "TheSeamLoadingOverlayService"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "_datatable",
                        "type": "DatatableComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_toastr",
                        "type": "ToastrService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_loading",
                        "type": "TheSeamLoadingOverlayService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                }
            },
            "templateData": "<seam-menu #menu>\n  <button *ngFor=\"let exp of exporters\"\n    seamMenuItem\n    [icon]=\"exp?.icon\"\n    (click)=\"_onExporterClicked(exp)\">\n    {{ exp.label }}\n  </button>\n</seam-menu>\n<button\n  [seamMenuToggle]=\"menu\"\n  seamButton\n  theme=\"lightgray\"\n  size=\"sm\"\n  class=\"dropdown-toggle\"\n  style=\"padding-left: 10px; padding-right: 10px;\"\n  title=\"Export\"\n  [disabled]=\"disabled\"\n  >\n  <seam-icon [icon]=\"icon\" class=\"mr-2\"></seam-icon>\n</button>\n"
        },
        {
            "name": "DatatableMenuBarComponent",
            "id": "component-DatatableMenuBarComponent-2129d83295d22044ed1122a12d70fcb1",
            "file": "projects/ui-common/src/lib/datatable/datatable-menu-bar/datatable-menu-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-datatable-menu-bar",
            "styleUrls": [
                "./datatable-menu-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datatable-menu-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_filterDirectives",
                    "type": "QueryList<DatatableFilterDirective>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_filtersArr",
                    "defaultValue": "[]",
                    "type": "IDataFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "filtersChanged",
                    "defaultValue": "new EventEmitter<IDataFilter[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addFilter",
                    "args": [
                        {
                            "name": "dataFilter",
                            "type": "IDataFilter"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataFilter",
                            "type": "IDataFilter",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filters",
                    "args": [],
                    "optional": false,
                    "returnType": "IDataFilter[]",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "removeFilter",
                    "args": [
                        {
                            "name": "dataFilter",
                            "type": "IDataFilter"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataFilter",
                            "type": "IDataFilter",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ContentChildren, EventEmitter, OnInit, QueryList } from '@angular/core'\n\nimport { IDataFilter } from '../../data-filters/index'\n\nimport { DatatableFilterDirective } from '../directives/datatable-filter.directive'\n\n@Component({\n  selector: 'seam-datatable-menu-bar',\n  templateUrl: './datatable-menu-bar.component.html',\n  styleUrls: ['./datatable-menu-bar.component.scss']\n})\nexport class DatatableMenuBarComponent implements OnInit, AfterViewInit {\n\n  @ContentChildren(DatatableFilterDirective)\n  get filterDirectives(): QueryList<DatatableFilterDirective> {\n    return this._filterDirectives\n  }\n  set filterDirectives(value: QueryList<DatatableFilterDirective>) {\n    this._filterDirectives = value\n    this.filtersChanged.emit(this.filters())\n  }\n  private _filterDirectives: QueryList<DatatableFilterDirective>\n\n  private _filtersArr: IDataFilter[] = []\n\n  public readonly filtersChanged = new EventEmitter<IDataFilter[]>()\n\n  constructor() { }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {\n    // console.log('_filterDirectives', this._filterDirectives, this.filters())\n  }\n\n  public filters(): IDataFilter[] {\n    const fDirectives = this._filterDirectives\n      ? this._filterDirectives.map(f => f.filter).filter(f => f !== undefined)\n      : []\n\n    const fArr = this._filtersArr.filter(f => fDirectives.findIndex(fd => fd.uid === f.uid) === -1)\n    return [ ...fArr, ...fDirectives ]\n  }\n\n  public addFilter(dataFilter: IDataFilter): void {\n    this._filtersArr.push(dataFilter)\n    this.filtersChanged.emit(this.filters())\n  }\n\n  public removeFilter(dataFilter: IDataFilter): void {\n    this._filtersArr = this._filtersArr.filter(f => f !== dataFilter)\n    this.filtersChanged.emit(this.filters())\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n",
                    "styleUrl": "./datatable-menu-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 26
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "filterDirectives": {
                    "name": "filterDirectives",
                    "setSignature": {
                        "name": "filterDirectives",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "filterDirectives",
                        "type": "",
                        "returnType": "QueryList<DatatableFilterDirective>",
                        "line": 15
                    }
                }
            },
            "templateData": "<div class=\"bg-light border rounded p-2\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "DynamicDatatablePageComponent",
            "id": "component-DynamicDatatablePageComponent-2bca64ff85d5a2139bdbd639e25ed23e",
            "file": "projects/ui-common/src/lib/framework/dynamic-pages/dynamic-datatable-page/dynamic-datatable-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-dynamic-datatable-page",
            "styleUrls": [
                "./dynamic-datatable-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-datatable-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tableDef$",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { untilDestroyed } from 'ngx-take-until-destroy'\n\n@Component({\n  selector: 'seam-dynamic-datatable-page',\n  templateUrl: './dynamic-datatable-page.component.html',\n  styleUrls: ['./dynamic-datatable-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DynamicDatatablePageComponent implements OnInit, OnDestroy {\n\n  tableDef$: Observable<any>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.tableDef$ = this._route.data.pipe(map(v => v['tableDef'] || undefined))\n  }\n\n  ngOnInit() {\n    // console.log(this._route)\n    // console.log(this._router)\n    this.tableDef$\n      .pipe(untilDestroyed(this))\n      .subscribe(v => console.log('tableDef$', v))\n  }\n\n  ngOnDestroy() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n",
                    "styleUrl": "./dynamic-datatable-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<seam-hierarchy-router-outlet>\n  <div class=\"p-2 w-100 h-100 d-flex flex-column\">\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Dashboard</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Users</li>\n      </ol>\n    </nav>\n    <seam-datatable-dynamic class=\"w-100 flex-grow-1\" [data]=\"tableDef$ | async\"></seam-datatable-dynamic>\n  </div>\n</seam-hierarchy-router-outlet>\n"
        },
        {
            "name": "ExampleLazyLoadedWidgetsComponent",
            "id": "component-ExampleLazyLoadedWidgetsComponent-c7bff73f1d3c74265e04ea15d55b49a8",
            "file": "src/app/example-lazy-loaded-widgets/example-lazy-loaded-widgets.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-example-lazy-loaded-widgets",
            "styleUrls": [
                "./example-lazy-loaded-widgets.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./example-lazy-loaded-widgets.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "testOutlet",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'testOutlet', {static: true, read: ViewContainerRef}"
                        }
                    ]
                },
                {
                    "name": "widgets",
                    "defaultValue": "[]",
                    "type": "IWidgetsGridItemDef[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "loadComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, ViewContainerRef } from '@angular/core'\nimport { TheSeamDynamicComponentLoader } from 'projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-loader.service'\nimport { IWidgetsGridItemDef } from 'projects/ui-common/src/lib/widgets-grid/widgets-grid-item'\nimport { LazyWidgetOneComponent } from 'src/app/example-lazy-loaded-widgets/lazy-widget-one/lazy-widget-one.component'\n\n@Component({\n  selector: 'app-example-lazy-loaded-widgets',\n  templateUrl: './example-lazy-loaded-widgets.component.html',\n  styleUrls: ['./example-lazy-loaded-widgets.component.scss']\n})\nexport class ExampleLazyLoadedWidgetsComponent implements OnInit {\n\n  @ViewChild('testOutlet', { static: true, read: ViewContainerRef }) testOutlet: ViewContainerRef\n\n  widgets: IWidgetsGridItemDef[] = []\n\n  constructor(\n    private _dynamicComponentLoaderModule: TheSeamDynamicComponentLoader\n  ) { }\n\n  ngOnInit() { }\n\n  loadComponent() {\n    this._dynamicComponentLoaderModule\n      .getComponentFactory<LazyWidgetOneComponent>('widget-one')\n      .subscribe(componentFactory => {\n        console.log('componentFactory', componentFactory)\n        // const ref = this.testOutlet.createComponent(componentFactory)\n        // ref.changeDetectorRef.detectChanges()\n\n        // if ((<any>componentFactory).ngModule) {\n        //   const factory: any /* ComponentFactoryBoundToModule */\n        // }\n\n        this.widgets = [ {\n          type: componentFactory.componentType,\n          componentFactoryResolver: (<any /* ComponentFactoryBoundToModule */>componentFactory).ngModule.componentFactoryResolver\n        } ]\n      }, error => {\n        console.warn(error)\n      })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example-lazy-loaded-widgets.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_dynamicComponentLoaderModule",
                        "type": "TheSeamDynamicComponentLoader"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_dynamicComponentLoaderModule",
                        "type": "TheSeamDynamicComponentLoader",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button type=\"button\" (click)=\"loadComponent()\">Load!</button>\n\n<div #testOutlet></div>\n\n<div style=\"height: 800px;\">\n  <seam-widgets-grid [widgets]=\"widgets\"></seam-widgets-grid>\n</div>\n"
        },
        {
            "name": "FooterBarComponent",
            "id": "component-FooterBarComponent-99256687656efd12177fd1863c0d958d",
            "file": "projects/ui-common/src/lib/footer-bar/footer-bar/footer-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-footer-bar",
            "styleUrls": [
                "./footer-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-footer-bar',\n  templateUrl: './footer-bar.component.html',\n  styleUrls: ['./footer-bar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FooterBarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./footer-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>footer-bar works!</p>\n"
        },
        {
            "name": "FormFieldComponent",
            "id": "component-FormFieldComponent-b9f155101c1e569bcde06d94ca77fc26",
            "file": "projects/ui-common/src/lib/form-field/form-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-form-field",
            "styleUrls": [
                "./form-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formGroupClass",
                    "line": 43,
                    "type": "string"
                },
                {
                    "name": "inline",
                    "defaultValue": "false",
                    "line": 37
                },
                {
                    "name": "label",
                    "line": 39,
                    "type": "string"
                },
                {
                    "name": "labelClass",
                    "line": 41,
                    "type": "string"
                },
                {
                    "name": "labelId",
                    "line": 49,
                    "type": "string"
                },
                {
                    "name": "labelPosition",
                    "defaultValue": "'top'",
                    "line": 40,
                    "type": "\"top\" | \"inline\""
                },
                {
                    "name": "maxErrors",
                    "defaultValue": "-1",
                    "line": 45
                },
                {
                    "name": "numPaddingErrors",
                    "defaultValue": "1",
                    "line": 46
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_errorPadding",
                    "defaultValue": "'0px'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_fieldErrors",
                    "type": "QueryList<FormFieldErrorDirective[]>",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_fieldErrorsSubject",
                    "defaultValue": "new ReplaySubject<FormFieldErrorDirective[]>(1)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_fieldErrorsSubject2",
                    "defaultValue": "new ReplaySubject<IErrorRecord[]>(1)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_labelId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_labelUid",
                    "defaultValue": "`lib-label-${nextLabelUniqueId++}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_sub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "contentInput",
                    "type": "InputDirective",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "InputDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "fieldErrors$",
                    "defaultValue": "this._fieldErrorsSubject.asObservable()",
                    "type": "Observable<FormFieldErrorDirective[]>",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "fieldErrors2$",
                    "defaultValue": "this._fieldErrorsSubject2.asObservable()",
                    "type": "Observable<IErrorRecord[]>",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "labelTpl",
                    "type": "FormFieldLabelTplDirective",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "FormFieldLabelTplDirective, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_labelElemResized",
                    "args": [
                        {
                            "name": "labelElem",
                            "type": "HTMLLabelElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "labelElem",
                            "type": "HTMLLabelElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidatorMatch",
                    "args": [
                        {
                            "name": "validatorName",
                            "type": "string"
                        },
                        {
                            "name": "tplValidatorName",
                            "type": "string"
                        },
                        {
                            "name": "errors",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 105,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "validatorName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tplValidatorName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errors",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101
                }
            ],
            "hostBindings": [
                {
                    "name": "style.display",
                    "line": 35
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ContentChild,\n  ContentChildren,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  QueryList\n} from '@angular/core'\nimport { Observable, ReplaySubject, Subscription } from 'rxjs'\nimport { map, startWith, tap } from 'rxjs/operators'\n\nimport { untilDestroyed } from 'ngx-take-until-destroy'\n\nimport { IErrorRecord } from '../form-field-error/form-field-error-list/form-field-error-list.component'\n\nimport { FormFieldErrorDirective } from './form-field-error.directive'\nimport { FormFieldLabelTplDirective } from './form-field-label-tpl.directive'\nimport { InputDirective } from './input.directive'\n\nlet nextLabelUniqueId = 0\n\n@Component({\n  selector: 'seam-form-field',\n  templateUrl: './form-field.component.html',\n  styleUrls: ['./form-field.component.scss']\n})\nexport class FormFieldComponent implements OnInit, OnDestroy {\n\n  protected _labelUid = `lib-label-${nextLabelUniqueId++}`\n\n  public _errorPadding = '0px'\n\n  @HostBinding('style.display') get _displayStyle() { return this.inline ? 'inline-block' : 'block' }\n\n  @Input() inline = false\n\n  @Input() label: string\n  @Input() labelPosition: 'top' | 'inline' = 'top'\n  @Input() labelClass: string\n\n  @Input() formGroupClass: string\n\n  @Input() maxErrors = -1\n  @Input() numPaddingErrors = 1\n\n  @Input()\n  get labelId(): string { return this._labelId }\n  set labelId(value: string) { this._labelId = value || this._labelUid }\n  protected _labelId: string\n\n  @ContentChild(FormFieldLabelTplDirective, { static: true }) labelTpl: FormFieldLabelTplDirective\n\n  @ContentChild(InputDirective, { static: true }) contentInput: InputDirective\n\n  @ContentChildren(FormFieldErrorDirective)\n  get fieldErrors() { return this._fieldErrors }\n  set fieldErrors(value: QueryList<FormFieldErrorDirective[]>) {\n    this._fieldErrors = value\n\n    if (this._sub) { this._sub.unsubscribe() }\n    if (this.fieldErrors) {\n      this._sub = this.fieldErrors.changes\n        .pipe(untilDestroyed(this))\n        .pipe(startWith(this.fieldErrors))\n        .pipe(map(v => v.toArray() as FormFieldErrorDirective[]))\n        .pipe(tap(v => {\n          const records: IErrorRecord[] = []\n          for (const item of v) {\n            records.push({\n              validatorName: item.validatorName,\n              error: null,\n              template: item.template,\n              external: item.external\n            })\n          }\n          this._fieldErrorsSubject2.next(records)\n        }))\n        .subscribe(v => this._fieldErrorsSubject.next(v))\n    }\n  }\n  private _fieldErrors: QueryList<FormFieldErrorDirective[]>\n  private _sub: Subscription\n\n  private readonly _fieldErrorsSubject = new ReplaySubject<FormFieldErrorDirective[]>(1)\n  public readonly fieldErrors$: Observable<FormFieldErrorDirective[]> = this._fieldErrorsSubject.asObservable()\n\n  private readonly _fieldErrorsSubject2 = new ReplaySubject<IErrorRecord[]>(1)\n  public readonly fieldErrors2$: Observable<IErrorRecord[]> = this._fieldErrorsSubject2.asObservable()\n\n  get isPasswordInput() {\n    return this.contentInput && this.contentInput.type && this.contentInput.type === 'password'\n  }\n  get passwordInputElement() {\n    return this.contentInput && this.contentInput._elementRef && this.contentInput._elementRef.nativeElement\n  }\n\n  constructor() { }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { }\n\n  public isValidatorMatch(validatorName: string, tplValidatorName: string, errors: any): boolean {\n    const tplValidatorNames = tplValidatorName.split(' ')\n\n    for (let i = 0; i < tplValidatorNames.length; i++) {\n      const name = tplValidatorNames[i]\n      if (name === validatorName && i === 0) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  public _labelElemResized(labelElem: HTMLLabelElement) {\n    if (labelElem) {\n      this._errorPadding = `${labelElem.getBoundingClientRect().width}px`\n    } else {\n      this._errorPadding = '0px'\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".seam-form-field-inline {\n  display: flex;\n  flex-direction: row;\n\n  .control-label {\n    margin-bottom: 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n}\n",
                    "styleUrl": "./form-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 97
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "labelId": {
                    "name": "labelId",
                    "setSignature": {
                        "name": "labelId",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "fieldErrors": {
                    "name": "fieldErrors",
                    "setSignature": {
                        "name": "fieldErrors",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 59,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "fieldErrors",
                        "type": "",
                        "returnType": "",
                        "line": 58
                    }
                },
                "isPasswordInput": {
                    "name": "isPasswordInput",
                    "getSignature": {
                        "name": "isPasswordInput",
                        "type": "",
                        "returnType": "",
                        "line": 92
                    }
                },
                "passwordInputElement": {
                    "name": "passwordInputElement",
                    "getSignature": {
                        "name": "passwordInputElement",
                        "type": "",
                        "returnType": "",
                        "line": 95
                    }
                }
            },
            "templateData": "<div class=\"form-group {{ formGroupClass }}\">\n  <div [class.seam-form-field-inline]=\"inline\">\n    <label *ngIf=\"label || labelTpl\"\n      #labelElem\n      [attr.id]=\"labelId\"\n      [attr.for]=\"contentInput?.id\"\n      class=\"control-label {{ labelClass }}\"\n      (seamElemResized)=\"_labelElemResized(labelElem)\">\n      <ng-container *ngIf=\"labelTpl; else noLabelTpl\">\n        <ng-template [ngTemplateOutlet]=\"labelTpl.template\" [ngTemplateOutletContext]=\"{ $implicit: label }\"></ng-template>\n      </ng-container>\n      <ng-template #noLabelTpl>\n        {{ label }}\n      </ng-template>\n    </label>\n    <ng-container *ngIf=\"!isPasswordInput\">\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"isPasswordInput\">\n      <div class=\"position-relative\">\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        <seam-password-input-reveal [inputRef]=\"passwordInputElement\"></seam-password-input-reveal>\n      </div>\n    </ng-container>\n  </div>\n  <!-- Need `.d-block` to make errors show without input sibling selector -->\n  <ng-container *ngIf=\"contentInput\">\n    <seam-form-field-error-list *ngIf=\"fieldErrors$ | async as fieldErrors\"\n      [style.paddingLeft]=\"(label || labelTpl) && inline ? _errorPadding : undefined\"\n      [control]=\"contentInput.ngControl\"\n      [errors]=\"fieldErrors2$ | async\"\n      [maxErrors]=\"maxErrors\"\n      [numPaddingErrors]=\"numPaddingErrors\"\n      class=\"invalid-feedback\">\n    </seam-form-field-error-list>\n  </ng-container>\n</div>\n\n<ng-template #content><ng-content></ng-content></ng-template>\n"
        },
        {
            "name": "FormFieldErrorComponent",
            "id": "component-FormFieldErrorComponent-ad38a286790a29ce29bd7beff7524295",
            "file": "projects/ui-common/src/lib/form-field-error/form-field-error/form-field-error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-form-field-error",
            "styleUrls": [
                "./form-field-error.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-field-error.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "showValidatorName",
                    "defaultValue": "false",
                    "line": 13
                },
                {
                    "name": "validatorName",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-form-field-error',\n  templateUrl: './form-field-error.component.html',\n  styleUrls: ['./form-field-error.component.scss']\n})\nexport class FormFieldErrorComponent implements OnInit {\n\n  @Input() validatorName: string\n  @Input() message: string\n\n  @Input() showValidatorName = false\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".msg-text:empty:after {\n  content: '\\200b';\n}\n",
                    "styleUrl": "./form-field-error.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<em style=\"display: block;\">\n  <span *ngIf=\"showValidatorName && validatorName\"\n    style=\"font-weight: bold;\">{{ validatorName }}: </span>\n  <span class=\"msg-text\">{{ message }}</span>\n</em>\n"
        },
        {
            "name": "FormFieldErrorListComponent",
            "id": "component-FormFieldErrorListComponent-c318c45a726435e417bade03793962fa",
            "file": "projects/ui-common/src/lib/form-field-error/form-field-error-list/form-field-error-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-form-field-error-list",
            "styleUrls": [
                "./form-field-error-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-field-error-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "line": 196,
                    "type": "AbstractControlDirective | AbstractControl"
                },
                {
                    "name": "errors",
                    "line": 56,
                    "type": "[]"
                },
                {
                    "name": "listItemTpls",
                    "line": 172,
                    "type": ""
                },
                {
                    "name": "maxErrors",
                    "defaultValue": "-1",
                    "line": 193
                },
                {
                    "name": "numPaddingErrors",
                    "defaultValue": "1",
                    "line": 162
                },
                {
                    "name": "showErrors",
                    "line": 218,
                    "type": "boolean"
                },
                {
                    "name": "showValidatorName",
                    "defaultValue": "false",
                    "line": 160
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_control",
                    "type": "AbstractControlDirective | AbstractControl",
                    "optional": false,
                    "description": "",
                    "line": 201,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_controlErrors",
                    "defaultValue": "new BehaviorSubject<IErrorRecord[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 206,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_defaultMessages",
                    "defaultValue": "{\n    // required: () => 'Required',\n    // minlength: (params) => 'The min number of characters is ' + params.requiredLength,\n    // maxlength: (params) => 'The max allowed number of characters is ' + params.requiredLength,\n    // pattern: (params) => 'The required pattern is: ' + params.requiredPattern\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_errorInput",
                    "defaultValue": "new BehaviorSubject<IErrorRecord[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 208,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_errors",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_errorTpls",
                    "defaultValue": "new BehaviorSubject<IErrorRecord[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 207,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_errorTplsChangeSub",
                    "defaultValue": "Subscription.EMPTY",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 204,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_paddingErrors",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_showControlErrorsSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 210,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_showErrors",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 215,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_valueChangeSub",
                    "defaultValue": "Subscription.EMPTY",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 203,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "defaultMessages",
                    "defaultValue": "{\n    // required: () => 'Required',\n    // minlength: (params) => 'The min number of characters is ' + params.requiredLength,\n    // maxlength: (params) => 'The max allowed number of characters is ' + params.requiredLength,\n    // pattern: (params) => 'The required pattern is: ' + params.requiredPattern\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        112,
                        115,
                        132
                    ]
                },
                {
                    "name": "displayRecords$",
                    "type": "Observable<IErrorRecord[]>",
                    "optional": false,
                    "description": "",
                    "line": 212,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "errorRecords$",
                    "type": "Observable<IErrorRecord[]>",
                    "optional": false,
                    "description": "",
                    "line": 245,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showControlErrors$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 213,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_composeErrorInputs",
                    "args": [
                        {
                            "name": "controlErrors",
                            "type": "IErrorRecord[]"
                        },
                        {
                            "name": "errorTemplates",
                            "type": "IErrorRecord[]"
                        },
                        {
                            "name": "errorInput",
                            "type": "IErrorRecord[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "IErrorRecord[]",
                    "typeParameters": [],
                    "line": 392,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "controlErrors",
                            "type": "IErrorRecord[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errorTemplates",
                            "type": "IErrorRecord[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errorInput",
                            "type": "IErrorRecord[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_initControlListeners",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControlDirective | AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 297,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControlDirective | AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_initErrorInput",
                    "args": [
                        {
                            "name": "errors",
                            "type": "IErrorRecord[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 380,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "errors",
                            "type": "IErrorRecord[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_initErrorTemplates",
                    "args": [
                        {
                            "name": "tplsQueryList",
                            "type": "QueryList<FormFieldErrorListItemTplDirective>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 342,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "tplsQueryList",
                            "type": "QueryList<FormFieldErrorListItemTplDirective>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_isErrorValidator",
                    "args": [
                        {
                            "name": "errors",
                            "type": "ValidationErrors | null"
                        },
                        {
                            "name": "validatorName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 435,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "errors",
                            "type": "ValidationErrors | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "validatorName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_parseMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "any"
                        },
                        {
                            "name": "error",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 332,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "error",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setControlErrors",
                    "args": [
                        {
                            "name": "errors",
                            "type": "IErrorRecord[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 328,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "errors",
                            "type": "IErrorRecord[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setErrorInput",
                    "args": [
                        {
                            "name": "errors",
                            "type": "IErrorRecord[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 388,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "errors",
                            "type": "IErrorRecord[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setErrorTemplates",
                    "args": [
                        {
                            "name": "errorTpls",
                            "type": "IErrorRecord[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 376,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "errorTpls",
                            "type": "IErrorRecord[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_updateControlErrors",
                    "args": [
                        {
                            "name": "errors",
                            "type": "ValidationErrors | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "errors",
                            "type": "ValidationErrors | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_updateErrorInputs",
                    "args": [
                        {
                            "name": "errors",
                            "type": "IErrorRecord[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 384,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "errors",
                            "type": "IErrorRecord[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_updateErrorTemplates",
                    "args": [
                        {
                            "name": "tplsList",
                            "type": "FormFieldErrorListItemTplDirective[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 359,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "tplsList",
                            "type": "FormFieldErrorListItemTplDirective[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 289
                }
            ],
            "hostBindings": [
                {
                    "name": "style.display",
                    "line": 33
                }
            ],
            "hostListeners": [],
            "description": "<p>NOTE: This class has some issues with filtering duplicate validators. The\ninputs will be cleaned up soon to fix the input confusion.</p>\n<p>TODO: Cleanup remaining code from before refactor.</p>\n",
            "rawdescription": "NOTE: This class has some issues with filtering duplicate validators. The\ninputs will be cleaned up soon to fix the input confusion.\n\nTODO: Cleanup remaining code from before refactor.",
            "type": "component",
            "sourceCode": "import { Component, ContentChildren, DoCheck, HostBinding, Input, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core'\nimport { AbstractControl, AbstractControlDirective, ValidationErrors } from '@angular/forms'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs'\nimport { distinctUntilChanged, map, shareReplay, startWith } from 'rxjs/operators'\n\nimport { FormFieldErrorListItemTplDirective } from './form-field-error-list-item-tpl.directive'\n\nexport interface IErrorRecord {\n  validatorName: string\n  error: any,\n  message?: string\n  template?: TemplateRef<any>\n\n  external?: boolean\n\n  _errors?: ValidationErrors\n}\n\n/**\n * NOTE: This class has some issues with filtering duplicate validators. The\n * inputs will be cleaned up soon to fix the input confusion.\n *\n * TODO: Cleanup remaining code from before refactor.\n */\n@Component({\n  selector: 'seam-form-field-error-list',\n  templateUrl: './form-field-error-list.component.html',\n  styleUrls: ['./form-field-error-list.component.scss']\n})\nexport class FormFieldErrorListComponent implements OnInit, OnDestroy, DoCheck {\n\n  @HostBinding('style.display') get _display() {\n    return this.showErrors ? 'block' : 'none'\n  }\n\n  private static readonly defaultMessages = {\n    // required: () => 'Required',\n    // minlength: (params) => 'The min number of characters is ' + params.requiredLength,\n    // maxlength: (params) => 'The max allowed number of characters is ' + params.requiredLength,\n    // pattern: (params) => 'The required pattern is: ' + params.requiredPattern\n  }\n\n  private readonly _defaultMessages = {\n    // required: () => 'Required',\n    // minlength: (params) => 'The min number of characters is ' + params.requiredLength,\n    // maxlength: (params) => 'The max allowed number of characters is ' + params.requiredLength,\n    // pattern: (params) => 'The required pattern is: ' + params.requiredPattern\n  }\n\n  private _errors: any[]\n\n  public _paddingErrors = []\n\n  @Input()\n  set errors(records: IErrorRecord[]) {\n    // if (val instanceof Array) {\n    //   this._errors = val\n    // } else {\n    //   const errs = []\n    //   for (const k in val) {\n    //     if (val[k]) {\n    //       const err = val[k]\n    //       const newErr = {\n    //         validatorName: k,\n    //         error: err,\n    //         message: '',\n    //         template: err.template,\n    //         external: !!err.external\n    //       }\n\n    //       if (err.message) {\n    //         const msgTmp = err.message\n    //         if (typeof msgTmp === 'string') {\n    //           newErr.message = msgTmp\n    //         } else if (typeof msgTmp === 'function') {\n    //           newErr.message = msgTmp(err)\n    //         }\n    //       } else if (FormFieldErrorListComponent.defaultMessages[k]) {\n    //         const defaultMsg = FormFieldErrorListComponent.defaultMessages[k]\n    //         if (typeof defaultMsg === 'string') {\n    //           newErr.message = defaultMsg\n    //         } else if (typeof defaultMsg === 'function') {\n    //           newErr.message = defaultMsg(err)\n    //         }\n    //       }\n\n    //       errs.push(newErr)\n    //     }\n    //   }\n    //   this._errors = errs\n    // }\n\n    this._initErrorInput(records)\n  }\n\n  // get errors() {\n  //   let errs = []\n\n  //   if (this._errors) {\n  //     if (!this.messages) {\n  //       errs = this._errors\n  //     } else {\n  //       errs = this._errors.map(err => {\n  //         if (this.messages && err.validatorName && this.messages[err.validatorName]) {\n  //           return Object.assign({}, err, {\n  //             message: this.messages[err.validatorName]\n  //           })\n  //         } else {\n  //           return err\n  //         }\n  //       })\n  //     }\n  //   }\n\n  //   if (this.control) {\n  //     for (const key in this.control.errors) {\n  //       if (this.control.errors[key]) {\n  //         const err = this.control.errors[key]\n\n  //         const newErr = {\n  //           validatorName: key,\n  //           error: err,\n  //           message: '',\n  //           external: false\n  //         }\n\n  //         if (FormFieldErrorListComponent.defaultMessages[key]) {\n  //           const defaultMsg = FormFieldErrorListComponent.defaultMessages[key]\n  //           if (typeof defaultMsg === 'string') {\n  //             newErr.message = defaultMsg\n  //           } else if (typeof defaultMsg === 'function') {\n  //             newErr.message = defaultMsg(err)\n  //           }\n  //         }\n\n  //         errs = [ ...errs, newErr ]\n  //       }\n  //     }\n  //   }\n\n  //   if (this.maxErrors >= 0) {\n  //     errs = errs.slice(0, this.maxErrors)\n  //   }\n\n  //   const count = this.showControlErrors ? this.numPaddingErrors - errs.length : this.numPaddingErrors\n  //   if (count > 0) {\n  //     this._paddingErrors = []\n  //     for (let i = 0; i < count; i++) {\n  //       this._paddingErrors.push({ validatorName: '__padding__', error: {}, message: '', external: false })\n  //     }\n  //   } else {\n  //     this._paddingErrors = []\n  //   }\n\n  //   return errs\n  // }\n\n  // @Input() messages: any = {}\n  @Input() showValidatorName = false\n\n  @Input() numPaddingErrors = 1\n\n  // private errorTpl: TemplateRef<any>\n\n  // private _listItemTpls: QueryList<FormFieldErrorListItemTplDirective>\n  // private listItemTplsObj = {}\n\n\n  @Input()\n  @ContentChildren(FormFieldErrorListItemTplDirective)\n  set listItemTpls(val: QueryList<FormFieldErrorListItemTplDirective>) {\n    this._initErrorTemplates(val)\n\n    // for (const v of val.toArray()) {\n    //   if (v.validatorName !== undefined) {\n    //     this.listItemTplsObj[v.validatorName] = v\n    //   }\n    // }\n\n    // const tmp = val.find(v => v.validatorName === undefined)\n    // if (tmp) {\n    //   this.errorTpl = tmp.template\n    // }\n\n    // this._listItemTpls = val\n  }\n\n  // get listItemTpls(): QueryList<FormFieldErrorListItemTplDirective> {\n  //   return this._listItemTpls\n  // }\n\n  @Input() maxErrors = -1\n\n  @Input()\n  get control(): AbstractControlDirective | AbstractControl { return this._control }\n  set control(value: AbstractControlDirective | AbstractControl) {\n    this._control = value\n    this._initControlListeners(value)\n  }\n  private _control: AbstractControlDirective | AbstractControl\n\n  private _valueChangeSub = Subscription.EMPTY\n  private _errorTplsChangeSub = Subscription.EMPTY\n\n  private _controlErrors = new BehaviorSubject<IErrorRecord[]>([])\n  private _errorTpls = new BehaviorSubject<IErrorRecord[]>([])\n  private _errorInput = new BehaviorSubject<IErrorRecord[]>([])\n\n  private _showControlErrorsSubject = new BehaviorSubject<boolean>(false)\n\n  public displayRecords$: Observable<IErrorRecord[]>\n  public showControlErrors$: Observable<boolean>\n\n  private _showErrors = true\n\n  @Input()\n  set showErrors(val: boolean) {\n    this._showErrors = val\n  }\n\n  get showErrors(): boolean {\n    let show = this._showErrors\n\n    if (show && this.control) {\n      if (this.numPaddingErrors > 0) {\n        show = true\n      } else {\n        show = !!(this.control.invalid && (this.control.dirty || this.control.touched))\n      }\n    }\n\n    return show\n  }\n\n  get showControlErrors(): boolean {\n    let show = false\n    if (this.control && this.showErrors) {\n      show = !!(this.control.invalid && (this.control.dirty || this.control.touched))\n    }\n\n    return show\n  }\n\n  public errorRecords$: Observable<IErrorRecord[]>\n\n  constructor() {\n    this.showControlErrors$ = this._showControlErrorsSubject.asObservable()\n      .pipe(distinctUntilChanged())\n      .pipe(shareReplay(1))\n\n    this.errorRecords$ = combineLatest([this._controlErrors, this._errorTpls, this._errorInput])\n      .pipe(map(([ctrlErrs, errTpls, errorInput]) => this._composeErrorInputs(ctrlErrs, errTpls, errorInput)))\n      .pipe(shareReplay(1))\n\n    this.displayRecords$ = this.errorRecords$\n      .pipe(map(records => {\n        let resultRecords: IErrorRecord[] = []\n\n        if (!this.showErrors) {\n\n        } else {\n          let errs = [ ...records ]\n\n          if (this.maxErrors >= 0) {\n            errs = errs.slice(0, this.maxErrors)\n          }\n\n          const count = this.showControlErrors ? this.numPaddingErrors - errs.length : this.numPaddingErrors\n          const paddingErrors: IErrorRecord[] = []\n          if (count > 0) {\n            for (let i = 0; i < count; i++) {\n              paddingErrors.push({ validatorName: '__padding__', error: {}, message: '', external: false })\n            }\n          }\n\n          if (this.showControlErrors) {\n            resultRecords = [ ...errs, ...paddingErrors ]\n          } else {\n            resultRecords = [ ...paddingErrors ]\n          }\n        }\n\n        return resultRecords\n      }))\n      .pipe(shareReplay(1))\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { }\n\n  ngDoCheck() {\n    this._showControlErrorsSubject.next(this.showControlErrors)\n  }\n\n  private _initControlListeners(control: AbstractControlDirective | AbstractControl): void {\n    // Unsubscribe from old control changes\n    if (this._valueChangeSub && !this._valueChangeSub.closed) {\n      this._valueChangeSub.unsubscribe()\n    }\n\n    if (control.valueChanges !== null) {\n      this._valueChangeSub = combineLatest([this.showControlErrors$, control.valueChanges.pipe(startWith(undefined))])\n        .pipe(\n          untilDestroyed(this),\n          startWith(undefined)\n        )\n        .subscribe(_ => this._updateControlErrors(control.errors))\n    } else {\n      this._setControlErrors([])\n    }\n  }\n\n  private _updateControlErrors(errors: ValidationErrors | null): void {\n    const errs: IErrorRecord[] = []\n    for (const validatorName in errors) {\n      if (errors.hasOwnProperty(validatorName)) {\n        const error = errors[validatorName]\n        const message = this._parseMessage(this._defaultMessages[validatorName], error)\n        const external = false\n        errs.push({ validatorName, error, message, external })\n      }\n    }\n    this._setControlErrors(errs)\n  }\n\n  private _setControlErrors(errors: IErrorRecord[]) {\n    this._controlErrors.next(errors)\n  }\n\n  private _parseMessage(message: any, error: any) {\n    if (!message) { return }\n\n    if (typeof message === 'string') {\n      return message\n    } else if (typeof message === 'function') {\n      return message(error)\n    }\n  }\n\n  private _initErrorTemplates(tplsQueryList: QueryList<FormFieldErrorListItemTplDirective>) {\n    if (this._errorTplsChangeSub && !this._errorTplsChangeSub.closed) {\n      this._errorTplsChangeSub.unsubscribe()\n    }\n\n    if (tplsQueryList) {\n      this._errorTplsChangeSub = tplsQueryList.changes\n        .pipe(\n          untilDestroyed(this),\n          startWith(undefined)\n        )\n        .subscribe(_ => this._updateErrorTemplates(tplsQueryList.toArray()))\n    } else {\n      this._setErrorTemplates([])\n    }\n  }\n\n  private _updateErrorTemplates(tplsList: FormFieldErrorListItemTplDirective[]): void {\n    const errs: IErrorRecord[] = []\n    for (const tpl of tplsList) {\n      if (tpl.validatorName !== undefined) {\n        errs.push({\n          validatorName: tpl.validatorName,\n          error: null,\n          template: tpl.template,\n          external: !!tpl.external\n        })\n      } else {\n        // this.errorTpl = tpl.template\n      }\n    }\n    this._setErrorTemplates(errs)\n  }\n\n  private _setErrorTemplates(errorTpls: IErrorRecord[]): void {\n    this._errorTpls.next(errorTpls)\n  }\n\n  private _initErrorInput(errors: IErrorRecord[]): void {\n    this._updateErrorInputs(errors)\n  }\n\n  private _updateErrorInputs(errors: IErrorRecord[]): void {\n    this._setErrorInput(errors)\n  }\n\n  private _setErrorInput(errors: IErrorRecord[]): void {\n    this._errorInput.next(errors)\n  }\n\n  private _composeErrorInputs(\n    controlErrors: IErrorRecord[],\n    errorTemplates: IErrorRecord[],\n    errorInput: IErrorRecord[]\n  ): IErrorRecord[] {\n    const errs: IErrorRecord[] = []\n\n    const errsMap = {}\n\n    for (const err of controlErrors) {\n      if (err.message || err.template) {\n        errsMap[err.validatorName] = err\n      }\n    }\n\n    for (const err of errorInput) {\n      if (err.message || err.template) {\n        errsMap[err.validatorName] = err\n      }\n    }\n\n    for (const err of errorTemplates) {\n      if (err.message || err.template) {\n        errsMap[err.validatorName] = err\n      }\n    }\n\n    for (const validatorName in errsMap) {\n      if (errsMap.hasOwnProperty(validatorName)) {\n        errs.push(errsMap[validatorName])\n      }\n    }\n\n    return errs\n      .filter(err => this._isErrorValidator(this.control.errors, err.validatorName))\n      .filter(err => !err.external)\n      .map(err => ({\n        ...err,\n        error: this.control.errors ? this.control.errors[err.validatorName] : null,\n        _errors: this.control.errors\n      } as IErrorRecord))\n  }\n\n  private _isErrorValidator(errors: ValidationErrors | null, validatorName: string): boolean {\n    if (!errors) {\n      return false\n    }\n    const arr = validatorName.split(' ').filter(v => v.trim().length > 0)\n    for (const item of arr) {\n      if (errors.hasOwnProperty(item)) {\n        return true\n      }\n    }\n    return false\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-field-error-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 245
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "DoCheck"
            ],
            "accessors": {
                "errors": {
                    "name": "errors",
                    "setSignature": {
                        "name": "errors",
                        "type": "void",
                        "args": [
                            {
                                "name": "records",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "records",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "listItemTpls": {
                    "name": "listItemTpls",
                    "setSignature": {
                        "name": "listItemTpls",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 172,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "control": {
                    "name": "control",
                    "setSignature": {
                        "name": "control",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 197,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "showErrors": {
                    "name": "showErrors",
                    "setSignature": {
                        "name": "showErrors",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 218,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "showErrors",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 222
                    }
                },
                "showControlErrors": {
                    "name": "showControlErrors",
                    "getSignature": {
                        "name": "showControlErrors",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 236
                    }
                }
            },
            "templateData": "<ng-container *ngFor=\"let record of displayRecords$ | async\">\n  <ng-container *ngIf=\"record.template; else noTemplate\">\n    <div>\n      <ng-template\n        [ngTemplateOutlet]=\"record.template\"\n        [ngTemplateOutletContext]=\"{ $implicit: record.error, errors: record._errors }\">\n      </ng-template>\n    </div>\n  </ng-container>\n  <ng-template #noTemplate>\n    <seam-form-field-error\n      [validatorName]=\"record.validatorName\"\n      [message]=\"record.message\"\n      [showValidatorName]=\"showValidatorName\">\n    </seam-form-field-error>\n  </ng-template>\n</ng-container>\n"
        },
        {
            "name": "HierarchyRouterOutletComponent",
            "id": "component-HierarchyRouterOutletComponent-cb249fb9c0564973b196dca0383e93d1",
            "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-router-outlet.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-hierarchy-router-outlet",
            "styleUrls": [
                "./hierarchy-router-outlet.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hierarchy-router-outlet.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_uid",
                    "defaultValue": "_uid++",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "animState",
                    "defaultValue": "'isRight'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "ngContentVisible",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "outletActive",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "_hasChildren",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 82,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "outletActivate",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "outletDeactivate",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prepareRoute",
                    "args": [
                        {
                            "name": "outlet",
                            "type": "RouterOutlet"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "outlet",
                            "type": "RouterOutlet",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "routeAnimationsDone",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "routeAnimationsStart",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, OnDestroy, OnInit } from '@angular/core'\nimport { ActivatedRoute, NavigationEnd, NavigationStart, Router, RouterOutlet } from '@angular/router'\nimport { combineLatest } from 'rxjs'\nimport { distinctUntilChanged, filter, map, startWith, switchMap, tap } from 'rxjs/operators'\n\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { fader, sideToSide, slider, stepper, transformer } from './hierarchy-route-animations'\n\nexport function routeChanges(router: Router)  {\n  return router.events.pipe(\n    filter<NavigationStart | NavigationEnd>(event => event instanceof NavigationStart || event instanceof NavigationEnd),\n    distinctUntilChanged((x, y) => x.id === y.id),\n    map(event => ({ url: event.url }))\n  )\n}\n\n\n//\n// TODO: Animation improvement: Try adding a full component animation that\n// queries the <ng-content> and <router-outlet> blocks. When the outlet\n// activates, set the animation state to a transition that moves both blocks\n// together.\n//\n\n\nlet _uid = 0\n\n@Component({\n  selector: 'seam-hierarchy-router-outlet',\n  templateUrl: './hierarchy-router-outlet.component.html',\n  styleUrls: ['./hierarchy-router-outlet.component.scss'],\n  animations: [\n    // fader,\n    slider,\n    // transformer,\n    // stepper,\n    // sideToSide\n    // contentLeave\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HierarchyRouterOutletComponent implements OnInit, OnDestroy {\n\n  private _uid = _uid++\n\n  animState = 'isRight'\n  // animState = ''\n\n  outletActive = false\n\n  ngContentVisible = true\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this._router.events.pipe(\n      untilDestroyed(this),\n      filter(event => event instanceof NavigationEnd),\n      // tap(v => console.log(`_hasChildren()[${this._uid}]`, this._hasChildren()))\n    )\n    .subscribe()\n\n    // routeChanges(this._router)\n    //   .pipe(\n    //     untilDestroyed(this),\n    //     tap(() => {\n    //       // if (this._hasChildren()) {\n    //       //   this.animState = 'isLeft'\n    //       // } else {\n    //       //   this.animState = 'isRight'\n    //       // }\n    //     })\n    //   )\n    //   .subscribe(v => console.log(`routeChanges[${this._uid}]`, v))\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { }\n\n  private _hasChildren() {\n    const count = this._route.pathFromRoot.length - 1\n    let countFull = 0\n    if (this._router.parseUrl(this._router.url).root.children.primary) {\n      countFull = this._router.parseUrl(this._router.url).root.children.primary.segments.length\n    }\n    // console.log(`_hasChildren[${this._uid}]`, { count, countFull })\n    return countFull > count\n  }\n\n  prepareRoute(outlet: RouterOutlet) {\n    // console.log(`outlet[${this._uid}]`, outlet, this.animState, this._hasChildren(), this.outletActive)\n    if (outlet.isActivated) {\n      // console.log(outlet.isActivated)\n      // console.log(outlet.component)\n      console.log(this.animState)\n      return this.animState\n    } else {\n      return undefined\n    }\n    // console.log(`prepareRoute[${this._uid}]`, this.animState, this._hasChildren())\n    // console.log('activatedRouteData', outlet && outlet.activatedRouteData)\n    // if (outlet && outlet.isActivated) {\n    //   console.log('activatedRoute', outlet.activatedRoute && outlet.activatedRoute.snapshot.url)\n    // }\n    // return outlet && outlet.activatedRouteData && outlet.activatedRouteData['animation']\n    // console.log('')\n    // return this.animState\n  }\n\n  outletActivate(event) {\n    // console.log(`outletActivate[${this._uid}]`, event)\n    this.outletActive = true\n  }\n\n  outletDeactivate(event) {\n    // console.log(`outletDeactivate[${this._uid}]`, event)\n    this.outletActive = false\n  }\n\n  routeAnimationsStart(event) {\n    // console.log('routeAnimationsStart', event)\n    this.ngContentVisible = true\n  }\n\n  routeAnimationsDone(event) {\n    // console.log('routeAnimationsDone', event)\n    this.ngContentVisible = !this.outletActive\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/utilities';\n\n:host {\n  display: block;\n  height: 100%;\n\n  ::ng-deep {\n    router-outlet + * {\n      background-color: $white;\n      height: 100%;\n    }\n  }\n}\n\n// .hierarchy-router-outlet--content {}\n\n// .hierarchy-router-outlet--route-container {\n//   position: absolute;\n//   top: 0;\n//   left: 100%;\n// }\n",
                    "styleUrl": "./hierarchy-router-outlet.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"h-100\"\n  [@routeAnimations]=\"prepareRoute(outlet)\"\n  (@routeAnimations.start)=\"routeAnimationsStart($event)\"\n  (@routeAnimations.done)=\"routeAnimationsDone($event)\">\n  <div class=\"hierarchy-router-outlet--content h-100\" *ngIf=\"ngContentVisible\">\n    <!-- {{ animState }} -->\n    <div class=\"border border-info h-100\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n  <div class=\"router-container\"\n    [class.h-100]=\"!ngContentVisible\"\n    >\n  <!-- <div [@routeAnimations]=\"animState\"> -->\n  <!-- <div class=\"hierarchy-router-outlet--route-content\"> -->\n    <router-outlet #outlet=\"outlet\"\n      (activate)=\"outletActivate($event)\"\n      (deactivate)=\"outletDeactivate($event)\">\n    </router-outlet>\n  </div>\n</div>\n"
        },
        {
            "name": "IconBtnComponent",
            "id": "component-IconBtnComponent-6b60ee212f8dd2377c2e519991f9dd92",
            "file": "projects/ui-common/src/lib/icon/icon-btn/icon-btn.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button[seamIconBtn]",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-icon *ngIf=\"icon\"\n  [grayscaleOnDisable]=\"grayscaleOnDisable\"\n  [disabled]=\"disabled\"\n  [iconClass]=\"iconClass\"\n  [icon]=\"icon\"\n  [size]=\"size\"\n  [showDefaultOnError]=\"showDefaultOnError\"\n  [iconType]=\"iconType\">\n</seam-icon>\n<ng-content select=\".sr-only,seam-icon-notification\"></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "badgeText",
                    "defaultValue": "''",
                    "line": 92
                },
                {
                    "name": "badgeTheme",
                    "defaultValue": "'light'",
                    "line": 91,
                    "type": "ThemeTypes"
                },
                {
                    "name": "btnSize",
                    "defaultValue": "undefined",
                    "line": 94,
                    "type": "\"sm\" | \"lg\" | undefined"
                },
                {
                    "name": "btnTheme",
                    "defaultValue": "'default'",
                    "line": 90,
                    "type": "ThemeTypes"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "description": "<p>Toggles the img/icon to grayscale if <code>grayscaleOnDisable</code> is true. </p>\n",
                    "line": 36
                },
                {
                    "name": "grayscaleOnDisable",
                    "defaultValue": "true",
                    "description": "<p>Toggles whether the img/icon will attempt to be grayscale when disabled is true. </p>\n",
                    "line": 33
                },
                {
                    "name": "icon",
                    "description": "<p>The icon to display.</p>\n<p>If the input icon is a string an <code>img</code> element will be used with icon as <code>src</code>.\nIf the input is not a string it will be assumed to be a font-awesome IconProp object.</p>\n",
                    "line": 49,
                    "type": "SeamIcon"
                },
                {
                    "name": "iconClass",
                    "description": "<p>Placed on the <code>.seam-icon--fa</code> and <code>seam-icon--img</code> elements.</p>\n",
                    "line": 41,
                    "type": "string"
                },
                {
                    "name": "iconType",
                    "defaultValue": "'image-fill'",
                    "description": "<p>Shown if icon is not set or if showDefaultOnError is true and img has thrown an error.</p>\n<p>NOTE: Not supported for icon-btn yet.</p>\n",
                    "line": 69,
                    "type": "\"\" | \"borderless-styled-square\" | \"styled-square\" | \"image-fill\""
                },
                {
                    "name": "role",
                    "line": 104
                },
                {
                    "name": "showDefaultOnError",
                    "defaultValue": "false",
                    "description": "<p>Toggles whether an image that has thrown the <code>onerror</code> event should show\nthe <code>defaultIcon</code> instead.</p>\n",
                    "line": 60
                },
                {
                    "name": "size",
                    "description": "<p>NOTE: Only works for fa-icon for now.</p>\n",
                    "line": 54,
                    "type": "string"
                },
                {
                    "name": "type",
                    "line": 97
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_role",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_isAnchor",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 133,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_isButton",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 129,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "isBtnTheme",
                    "args": [
                        {
                            "name": "type",
                            "type": "ThemeTypes"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 125,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "ThemeTypes",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115
                }
            ],
            "hostBindings": [
                {
                    "name": "class.btn",
                    "defaultValue": "true",
                    "line": 73
                },
                {
                    "name": "class.btn-danger",
                    "line": 80
                },
                {
                    "name": "class.btn-dark",
                    "line": 84
                },
                {
                    "name": "class.btn-default",
                    "line": 76
                },
                {
                    "name": "class.btn-info",
                    "line": 82
                },
                {
                    "name": "class.btn-lg",
                    "line": 88
                },
                {
                    "name": "class.btn-light",
                    "line": 83
                },
                {
                    "name": "class.btn-lightgray",
                    "line": 85
                },
                {
                    "name": "class.btn-primary",
                    "line": 77
                },
                {
                    "name": "class.btn-secondary",
                    "line": 78
                },
                {
                    "name": "class.btn-sm",
                    "line": 87
                },
                {
                    "name": "class.btn-success",
                    "line": 79
                },
                {
                    "name": "class.btn-warning",
                    "line": 81
                },
                {
                    "name": "class.p-0",
                    "defaultValue": "true",
                    "line": 71
                },
                {
                    "name": "class.text-nowrap",
                    "defaultValue": "true",
                    "line": 74
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, DoCheck, ElementRef, HostBinding, Input, OnInit, Renderer2 } from '@angular/core'\n\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\n\nimport { ThemeTypes } from '../../models/index'\nimport { SeamIcon } from '../icon'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seamIconBtn]',\n  template: `\n    <seam-icon *ngIf=\"icon\"\n      [grayscaleOnDisable]=\"grayscaleOnDisable\"\n      [disabled]=\"disabled\"\n      [iconClass]=\"iconClass\"\n      [icon]=\"icon\"\n      [size]=\"size\"\n      [showDefaultOnError]=\"showDefaultOnError\"\n      [iconType]=\"iconType\">\n    </seam-icon>\n    <ng-content select=\".sr-only,seam-icon-notification\"></ng-content>\n  `,\n  styles: [],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n})\nexport class IconBtnComponent implements OnInit, DoCheck {\n\n  /** Toggles whether the img/icon will attempt to be grayscale when disabled is true. */\n  @Input() grayscaleOnDisable = true\n\n  /** Toggles the img/icon to grayscale if `grayscaleOnDisable` is true. */\n  @Input() disabled = false\n\n  /**\n   * Placed on the `.seam-icon--fa` and `seam-icon--img` elements.\n   */\n  @Input() iconClass: string\n\n  /**\n   * The icon to display.\n   *\n   * If the input icon is a string an `img` element will be used with icon as `src`.\n   * If the input is not a string it will be assumed to be a font-awesome IconProp object.\n   */\n  @Input() icon: SeamIcon\n\n  /**\n   * NOTE: Only works for fa-icon for now.\n   */\n  @Input() size: string\n\n  /**\n   * Toggles whether an image that has thrown the `onerror` event should show\n   * the `defaultIcon` instead.\n   */\n  @Input() showDefaultOnError = false\n\n  /**\n   * Shown if icon is not set or if showDefaultOnError is true and img has thrown an error.\n   *\n   * NOTE: Not supported for icon-btn yet.\n   */\n  // @Input() defaultIcon: SeamIcon\n\n  @Input() iconType: '' | 'borderless-styled-square' | 'styled-square' | 'image-fill' = 'image-fill'\n\n  @HostBinding('class.p-0') _cssPadding0 = true\n\n  @HostBinding('class.btn') _btn = true\n  @HostBinding('class.text-nowrap') _textNoWrap = true\n\n  @HostBinding('class.btn-default') get _btnDefault() { return this.isBtnTheme('default') }\n  @HostBinding('class.btn-primary') get _btnPrimary() { return this.isBtnTheme('primary') }\n  @HostBinding('class.btn-secondary') get _btnSecondary() { return this.isBtnTheme('secondary') }\n  @HostBinding('class.btn-success') get _btnSuccess() { return this.isBtnTheme('success') }\n  @HostBinding('class.btn-danger') get _btnDanger() { return this.isBtnTheme('danger') }\n  @HostBinding('class.btn-warning') get _btnWarning() { return this.isBtnTheme('warning') }\n  @HostBinding('class.btn-info') get _btnInfo() { return this.isBtnTheme('info') }\n  @HostBinding('class.btn-light') get _btnLight() { return this.isBtnTheme('light') }\n  @HostBinding('class.btn-dark') get _btnDark() { return this.isBtnTheme('dark') }\n  @HostBinding('class.btn-lightgray') get _btnLightGray() { return this.isBtnTheme('lightgray') }\n\n  @HostBinding('class.btn-sm') get _btnSizeSm() { return this.btnSize === 'sm' }\n  @HostBinding('class.btn-lg') get _btnSizeLg() { return this.btnSize === 'lg' }\n\n  @Input() btnTheme: ThemeTypes = 'default'\n  @Input() badgeTheme: ThemeTypes = 'light'\n  @Input() badgeText = ''\n\n  @Input() btnSize: 'sm' | 'lg' | undefined = undefined\n\n  @Input()\n  get type() { return this._type }\n  set type(value: string) {\n    this._type = value\n  }\n  private _type: string\n\n  @Input()\n  get role() { return this._role }\n  set role(value: string) {\n    this._role = value\n  }\n  private _role: string\n\n  constructor(\n    private _elementRef: ElementRef<HTMLButtonElement | HTMLAnchorElement>,\n    private _renderer: Renderer2\n  ) { }\n\n  ngOnInit() { }\n\n  ngDoCheck() {\n    if (this._isButton()) {\n      this._renderer.setAttribute(this._elementRef.nativeElement, 'type', this._type || 'button')\n    } else if (this._isAnchor()) {\n      this._renderer.setAttribute(this._elementRef.nativeElement, 'role', this._role || 'button')\n    }\n  }\n\n  public isBtnTheme(type: ThemeTypes): boolean {\n    return this.btnTheme === type\n  }\n\n  protected _isButton() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'button'\n  }\n\n  protected _isAnchor() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'button'\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLButtonElement | HTMLAnchorElement>"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 108,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLButtonElement | HTMLAnchorElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "DoCheck"
            ],
            "accessors": {
                "type": {
                    "name": "type",
                    "setSignature": {
                        "name": "type",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 98,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "role": {
                    "name": "role",
                    "setSignature": {
                        "name": "role",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 105,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-e36b812b4f0634f9343d643bd4dcec8c",
            "file": "projects/ui-common/src/lib/icon/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "defaultIcon",
                    "description": "<p>Shown if icon is not set or if showDefaultOnError is true and img has thrown an error.</p>\n",
                    "line": 100,
                    "type": "SeamIcon | undefined"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "description": "<p>Toggles the img/icon to grayscale if <code>grayscaleOnDisable</code> is true. </p>\n",
                    "line": 30
                },
                {
                    "name": "grayscaleOnDisable",
                    "defaultValue": "true",
                    "description": "<p>Toggles whether the img/icon will attempt to be grayscale when disabled is true. </p>\n",
                    "line": 27
                },
                {
                    "name": "icon",
                    "description": "<p>The icon to display.</p>\n<p>If the input icon is a string an <code>img</code> element will be used with icon as <code>src</code>.\nIf the input is not a string it will be assumed to be a font-awesome IconProp object.</p>\n",
                    "line": 44,
                    "type": "SeamIcon | undefined"
                },
                {
                    "name": "iconClass",
                    "description": "<p>Placed on the <code>.seam-icon--fa</code> and <code>seam-icon--img</code> elements.</p>\n",
                    "line": 35,
                    "type": "string"
                },
                {
                    "name": "iconType",
                    "line": 124,
                    "type": "TheSeamIconType"
                },
                {
                    "name": "showDefaultOnError",
                    "description": "<p>Toggles whether an image that has thrown the <code>onerror</code> event should show\nthe <code>defaultIcon</code> instead.</p>\n",
                    "line": 79,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "description": "<p>NOTE: Only works for fa-icon for now.</p>\n",
                    "line": 72,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_defaultIconObj",
                    "type": "IconProp | undefined",
                    "optional": false,
                    "description": "",
                    "line": 122,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_defaultIconUrl",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_hasError",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_iconObj",
                    "type": "IconProp | undefined",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_iconObjBeforeError",
                    "type": "IconProp | undefined",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_iconUrl",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_iconUrlBeforeError",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_showDefaultOnError",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "needToFix",
                    "defaultValue": "needToFix",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "_imgError",
                    "args": [
                        {
                            "name": "event",
                            "type": "UIEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "UIEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.icon-type",
                    "line": 127
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core'\n\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\n\nimport { SeamIcon } from '../icon'\n\n//\n// TODO: Ensure all inputs correctly update the state whenever changed, not just\n// on initial load.\n//\n\n// Browsers that do not support css grayscale filter.\nconst needToFix = /(MSIE 10)|(Trident.*rv:11\\.0)|( Edge\\/[\\d\\.]+$)/.test(navigator.userAgent)\n\nexport type TheSeamIconType = 'borderless-styled-square' | 'styled-square' | 'image-fill' | undefined\n\n@Component({\n  selector: 'seam-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss']\n})\nexport class IconComponent {\n\n  needToFix = needToFix\n\n  /** Toggles whether the img/icon will attempt to be grayscale when disabled is true. */\n  @Input() grayscaleOnDisable = true\n\n  /** Toggles the img/icon to grayscale if `grayscaleOnDisable` is true. */\n  @Input() disabled = false\n\n  /**\n   * Placed on the `.seam-icon--fa` and `seam-icon--img` elements.\n   */\n  @Input() iconClass: string\n\n  /**\n   * The icon to display.\n   *\n   * If the input icon is a string an `img` element will be used with icon as `src`.\n   * If the input is not a string it will be assumed to be a font-awesome IconProp object.\n   */\n  @Input()\n  get icon(): SeamIcon | undefined { return this._iconUrl || this._iconObj }\n  set icon(value: SeamIcon | undefined) {\n    if (typeof value === 'string') {\n      this._iconUrl = value\n      this._iconObj = undefined\n    } else {\n      this._iconUrl = undefined\n      this._iconObj = value\n    }\n\n    this._iconUrlBeforeError = undefined\n    this._iconObjBeforeError = undefined\n\n    if (!this._iconUrl && !this._iconObj) {\n      this._iconUrl = this._defaultIconUrl\n      this._iconObj = this._defaultIconObj\n    }\n  }\n\n  public _iconUrl: string | undefined\n  public _iconObj: IconProp | undefined\n\n  private _iconUrlBeforeError: string | undefined\n  private _iconObjBeforeError: IconProp | undefined\n\n  /**\n   * NOTE: Only works for fa-icon for now.\n   */\n  @Input() size: string\n\n  /**\n   * Toggles whether an image that has thrown the `onerror` event should show\n   * the `defaultIcon` instead.\n   */\n  @Input()\n  get showDefaultOnError(): boolean { return this._showDefaultOnError }\n  set showDefaultOnError(value: boolean) {\n    this._showDefaultOnError = value\n    if (this._hasError) {\n      if (this._iconUrlBeforeError || this._iconObjBeforeError) {\n        this._iconUrl = this._iconUrlBeforeError\n        this._iconObj = this._iconObjBeforeError\n        this._iconUrlBeforeError = undefined\n        this._iconObjBeforeError = undefined\n      } else if (this._showDefaultOnError) {\n        this._iconUrl = this._defaultIconUrl\n        this._iconObj = this._defaultIconObj\n      }\n    }\n  }\n  private _showDefaultOnError = false\n\n  /**\n   * Shown if icon is not set or if showDefaultOnError is true and img has thrown an error.\n   */\n  @Input()\n  get defaultIcon(): SeamIcon | undefined { return this._defaultIconUrl || this._defaultIconObj }\n  set defaultIcon(value: SeamIcon | undefined) {\n    if (typeof value === 'string') {\n      this._defaultIconUrl = value\n      this._defaultIconObj = undefined\n    } else {\n      this._defaultIconUrl = undefined\n      this._defaultIconObj = value\n    }\n\n    if (!this._defaultIconUrl && !this._defaultIconObj) {\n      this._iconUrl = this._iconUrlBeforeError\n      this._iconObj = this._iconObjBeforeError\n    }\n\n    if (!this._iconUrl && !this._iconObj) {\n      this._iconUrl = this._defaultIconUrl\n      this._iconObj = this._defaultIconObj\n    }\n  }\n\n  public _defaultIconUrl: string | undefined\n  public _defaultIconObj: IconProp | undefined\n\n  @Input() iconType: TheSeamIconType\n\n  @HostBinding('attr.icon-type')\n  get _iconTypeAttr() { return this.iconType }\n\n  private _hasError = false\n\n  public _imgError(event: UIEvent): void {\n    this._hasError = true\n    if (this._showDefaultOnError && (this._defaultIconUrl || this._defaultIconObj)) {\n      this._iconUrlBeforeError = this._iconUrl\n      this._iconObjBeforeError = this._iconObj\n      this._iconUrl = this._defaultIconUrl\n      this._iconObj = this._defaultIconObj\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/utilities';\n\n:host {\n  display: inline-block;\n\n  &[icon-type=styled-square] {\n    border: 1px solid $border-color;\n    border-radius: 8px;\n  }\n\n  &[icon-type=styled-square],\n  &[icon-type=borderless-styled-square] {\n    user-select: none;\n    overflow: hidden;\n\n    min-width: 39px;\n    width: 39px;\n    min-height: 39px;\n    height: 39px;\n    padding: 1px;\n    align-items: center;\n    display: inline-flex;\n    vertical-align: top;\n\n    img {\n      max-width: 100%;\n      max-height: 100%;\n      margin: 0 auto;\n    }\n\n    .seam-icon--fa {\n      height: 100%;\n      display: flex;\n      flex-direction: row;\n      justify-content: center;\n      text-align: center;\n      width: 100%;\n      padding: 2px;\n\n      ::ng-deep .svg-inline--fa {\n        max-width: 100%;\n        height: 100%;\n        width: 100%;\n      }\n    }\n  }\n\n  &[icon-type=image-fill] {\n    max-height: 100%;\n    max-width: 100%;\n    width: 100%;\n    height: 100%;\n\n    img {\n      max-width: 100%;\n      max-height: 100%;\n      margin: 0 auto;\n    }\n\n    .seam-icon--fa {\n      height: 100%;\n      display: flex;\n      flex-direction: row;\n      justify-content: center;\n      text-align: center;\n      width: 100%;\n\n      ::ng-deep .svg-inline--fa {\n        max-width: 100%;\n        height: 100%;\n        width: 100%;\n      }\n    }\n  }\n}\n\n.grey-fix {\n  visibility: hidden;\n  display: block;\n}\n",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "icon": {
                    "name": "icon",
                    "setSignature": {
                        "name": "icon",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 45,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "showDefaultOnError": {
                    "name": "showDefaultOnError",
                    "setSignature": {
                        "name": "showDefaultOnError",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 80,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "defaultIcon": {
                    "name": "defaultIcon",
                    "setSignature": {
                        "name": "defaultIcon",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 101,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<fa-icon *ngIf=\"_iconObj\"\n  class=\"seam-icon--fa {{ iconClass }}\"\n  [icon]=\"_iconObj\"\n  [size]=\"size\">\n</fa-icon>\n\n<ng-container *ngIf=\"_iconUrl\">\n  <!-- Partial fix for IE greyscale -->\n  <ng-container *ngIf=\"needToFix\">\n    <ng-container *ngIf=\"disabled && grayscaleOnDisable\">\n      <span class=\"grayscale-fix\" style=\"display: inline-block; position: relative;\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" id=\"svgroot\" style=\"position: absolute; left: 0; right: 0;\" viewBox=\"0 0 48 48\" width=\"100%\" height=\"100%\">\n          <defs><filter id=\"gray\"><feColorMatrix type=\"matrix\" values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\" /></filter></defs>\n          <image filter=\"url(&quot;#gray&quot;)\" preserveAspectRatio=\"none meet\" x=\"0\" y=\"0\" width=\"48\" height=\"48\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            [attr.xlink:href]=\"_iconUrl\" />\n        </svg>\n        <img class=\"seam-icon--img {{ iconClass }}\" style=\"display: block; visibility: hidden;\" alt=\"Icon\" [src]=\"_iconUrl\" (error)=\"_imgError($event)\">\n      </span>\n    </ng-container>\n    <ng-container *ngIf=\"!disabled\">\n      <img class=\"seam-icon--img {{ iconClass }}\" [src]=\"_iconUrl\" alt=\"Icon\" (error)=\"_imgError($event)\">\n    </ng-container>\n  </ng-container>\n  <ng-container *ngIf=\"!needToFix\">\n    <img class=\"seam-icon--img {{ iconClass }}\" [src]=\"_iconUrl\" alt=\"Icon\" (error)=\"_imgError($event)\">\n  </ng-container>\n</ng-container>\n\n<ng-content select=\".sr-only,seam-icon-notification\"></ng-content>\n"
        },
        {
            "name": "IconNotificationComponent",
            "id": "component-IconNotificationComponent-7d95519abb88e55a702fab8daef827f2",
            "file": "projects/ui-common/src/lib/icon/icon-notification/icon-notification.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-icon-notification",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      position: absolute;\n      top: 0;\n      right: 0;\n      left: 0;\n      bottom: 0;\n    }\n\n    seam-icon {\n      position: absolute;\n      top: 4px;\n      right: 4px;\n      width: 25% !important;\n      height: 25% !important;\n      min-width: 15px;\n      min-height: 15px;\n    }\n  "
            ],
            "template": "<seam-icon *ngIf=\"icon && !hidden\" [@counterChange]=\"count\"\n  [grayscaleOnDisable]=\"grayscaleOnDisable\"\n  [disabled]=\"disabled\"\n  [iconClass]=\"iconClass\"\n  [icon]=\"icon\"\n  [size]=\"size\"\n  [showDefaultOnError]=\"showDefaultOnError\"\n  [iconType]=\"iconType\">\n</seam-icon>\n<ng-content select=\".sr-only\"></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "count",
                    "line": 75,
                    "type": "number | undefined"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "description": "<p>Toggles the img/icon to grayscale if <code>grayscaleOnDisable</code> is true. </p>\n",
                    "line": 83
                },
                {
                    "name": "grayscaleOnDisable",
                    "defaultValue": "true",
                    "description": "<p>Toggles whether the img/icon will attempt to be grayscale when disabled is true. </p>\n",
                    "line": 80
                },
                {
                    "name": "hidden",
                    "defaultValue": "false",
                    "line": 77
                },
                {
                    "name": "icon",
                    "defaultValue": "faCircle",
                    "description": "<p>The icon to display.</p>\n<p>If the input icon is a string an <code>img</code> element will be used with icon as <code>src</code>.\nIf the input is not a string it will be assumed to be a font-awesome IconProp object.</p>\n",
                    "line": 96,
                    "type": "SeamIcon | undefined"
                },
                {
                    "name": "iconClass",
                    "description": "<p>Placed on the <code>.seam-icon--fa</code> and <code>seam-icon--img</code> elements.</p>\n",
                    "line": 88,
                    "type": "string"
                },
                {
                    "name": "iconType",
                    "defaultValue": "'image-fill'",
                    "line": 116,
                    "type": "\"\" | \"borderless-styled-square\" | \"styled-square\" | \"image-fill\""
                },
                {
                    "name": "showDefaultOnError",
                    "defaultValue": "false",
                    "description": "<p>Toggles whether an image that has thrown the <code>onerror</code> event should show\nthe <code>defaultIcon</code> instead.</p>\n",
                    "line": 102
                },
                {
                    "name": "size",
                    "description": "<p>Shown if icon is not set or if showDefaultOnError is true and img has thrown an error.</p>\n<p>NOTE: Not supported for icon-notification yet.</p>\n",
                    "line": 114,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { animate, animation, keyframes, style, transition, trigger, useAnimation } from '@angular/animations'\nimport { ChangeDetectionStrategy, Component, ElementRef, HostBinding, Input, OnInit } from '@angular/core'\n\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\n\nimport { SeamIcon } from '../icon'\n\nexport const pulseAnimation = animation([\n  style({ transform: 'scale(1)' }),\n  animate(\n    '{{ timings }}',\n    keyframes([\n      style({ transform: 'scale(1)', offset: 0 }),\n      style({ transform: 'scale({{ scale }})', offset: 0.5 }),\n      style({ transform: 'scale(1)', offset: 1 })\n    ])\n  )\n])\n\n@Component({\n  selector: 'seam-icon-notification',\n  template: `\n    <seam-icon *ngIf=\"icon && !hidden\" [@counterChange]=\"count\"\n      [grayscaleOnDisable]=\"grayscaleOnDisable\"\n      [disabled]=\"disabled\"\n      [iconClass]=\"iconClass\"\n      [icon]=\"icon\"\n      [size]=\"size\"\n      [showDefaultOnError]=\"showDefaultOnError\"\n      [iconType]=\"iconType\">\n    </seam-icon>\n    <ng-content select=\".sr-only\"></ng-content>\n  `,\n  styles: [`\n    :host {\n      position: absolute;\n      top: 0;\n      right: 0;\n      left: 0;\n      bottom: 0;\n    }\n\n    seam-icon {\n      position: absolute;\n      top: 4px;\n      right: 4px;\n      width: 25% !important;\n      height: 25% !important;\n      min-width: 15px;\n      min-height: 15px;\n    }\n  `],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  animations: [\n    trigger('counterChange', [\n      transition(\n        ':increment',\n        useAnimation(pulseAnimation, {\n          params: {\n            timings: '400ms ease-in-out',\n            scale: 1.2\n          }\n        })\n      )\n    ])\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IconNotificationComponent implements OnInit {\n\n  @Input() count: number | undefined\n\n  @Input() hidden = false\n\n  /** Toggles whether the img/icon will attempt to be grayscale when disabled is true. */\n  @Input() grayscaleOnDisable = true\n\n  /** Toggles the img/icon to grayscale if `grayscaleOnDisable` is true. */\n  @Input() disabled = false\n\n  /**\n   * Placed on the `.seam-icon--fa` and `seam-icon--img` elements.\n   */\n  @Input() iconClass: string\n\n  /**\n   * The icon to display.\n   *\n   * If the input icon is a string an `img` element will be used with icon as `src`.\n   * If the input is not a string it will be assumed to be a font-awesome IconProp object.\n   */\n  @Input() icon: SeamIcon | undefined = faCircle\n\n  /**\n   * Toggles whether an image that has thrown the `onerror` event should show\n   * the `defaultIcon` instead.\n   */\n  @Input() showDefaultOnError = false\n\n  /**\n   * Shown if icon is not set or if showDefaultOnError is true and img has thrown an error.\n   *\n   * NOTE: Not supported for icon-notification yet.\n   */\n  // @Input() defaultIcon: SeamIcon\n\n  /**\n   * NOTE: Only works for fa-icon for now.\n   */\n  @Input() size: string\n\n  @Input() iconType: '' | 'borderless-styled-square' | 'styled-square' | 'image-fill' = 'image-fill'\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>\n  ) { }\n\n  ngOnInit() {\n    if (this._elementRef && this._elementRef.nativeElement && this._elementRef.nativeElement.parentElement) {\n      this._elementRef.nativeElement.parentElement.style.position = 'relative'\n    }\n  }\n\n  // ngDoCheck() {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      position: absolute;\n      top: 0;\n      right: 0;\n      left: 0;\n      bottom: 0;\n    }\n\n    seam-icon {\n      position: absolute;\n      top: 4px;\n      right: 4px;\n      width: 25% !important;\n      height: 25% !important;\n      min-width: 15px;\n      min-height: 15px;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>"
                    }
                ],
                "line": 116,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "LazyWidgetOneComponent",
            "id": "component-LazyWidgetOneComponent-eaeace950ddb5b400521f7be576692bc",
            "file": "src/app/example-lazy-loaded-widgets/lazy-widget-one/lazy-widget-one.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lazy-widget-one",
            "styleUrls": [
                "./lazy-widget-one.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lazy-widget-one.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faBell",
                    "defaultValue": "faBell",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "faWrench",
                    "defaultValue": "faWrench",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true).pipe(delay(5000))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "items",
                    "defaultValue": "[\n    'one',\n    'two',\n    'three',\n    'four'\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getDate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { of } from 'rxjs'\nimport { delay } from 'rxjs/operators'\n\nimport { faBell, faWrench } from '@fortawesome/free-solid-svg-icons'\n\n@Component({\n  selector: 'app-lazy-widget-one',\n  templateUrl: './lazy-widget-one.component.html',\n  styleUrls: ['./lazy-widget-one.component.scss']\n})\nexport class LazyWidgetOneComponent implements OnInit {\n\n  faWrench = faWrench\n  faBell = faBell\n\n  items = [\n    'one',\n    'two',\n    'three',\n    'four'\n  ]\n\n  initialized$ = of(true).pipe(delay(5000))\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  getDate() {\n    return Date.now()\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./lazy-widget-one.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <p>lazy-widget-one works!</p> -->\n\n<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 1\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>\n    Widget example 1\n  </seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\"\n      seam-widget-tile\n      [icon]=\"faBell\">\n      {{ item }}\n    </button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text>\n    Submitted: {{ getDate() | date: 'MM-dd-yyyy h:mm aaa' }}\n  </seam-widget-footer-text>\n</seam-widget>\n"
        },
        {
            "name": "LoadingComponent",
            "id": "component-LoadingComponent-f67c5dafaf1ccda34ff5239ec5ca1410",
            "file": "projects/ui-common/src/lib/loading/loading/loading.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-loading",
            "styleUrls": [
                "./loading.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "theme",
                    "line": 16,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_theme",
                    "defaultValue": "defaultThemeConfig",
                    "type": "NgxLoadingConfig",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core'\n\nimport { NgxLoadingConfig } from 'ngx-loading'\n\nimport { defaultThemeConfig, primaryThemeConfig } from '../loading-themes'\nimport { TheSeamLoadingTheme } from '../loading.models'\n\n@Component({\n  selector: 'seam-loading',\n  templateUrl: './loading.component.html',\n  styleUrls: ['./loading.component.scss']\n})\nexport class LoadingComponent implements OnInit {\n\n  @Input()\n  set theme(value: TheSeamLoadingTheme) {\n    if (value === 'primary') {\n      this._theme = primaryThemeConfig\n    } else {\n      this._theme = defaultThemeConfig\n    }\n  }\n  _theme: NgxLoadingConfig = defaultThemeConfig\n\n  constructor() { }\n\n  ngOnInit() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 9000;\n}\n",
                    "styleUrl": "./loading.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "theme": {
                    "name": "theme",
                    "setSignature": {
                        "name": "theme",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ngx-loading [show]=\"true\" [config]=\"_theme\"></ngx-loading>\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-796917e0be48f4fb4155df0e6491aee0",
            "file": "projects/ui-common/src/lib/menu/menu.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "LIB_MENU"
                }
            ],
            "selector": "seam-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "menuClass",
                    "line": 77,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<void | 'click' | 'keydown' | 'tab'>()",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_footer",
                    "defaultValue": "new BehaviorSubject<MenuFooterComponent | undefined | null>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_itemChanges",
                    "defaultValue": "new Subject<MenuItemComponent[]>()",
                    "type": "",
                    "optional": false,
                    "description": "<p>Emits whenever the amount of menu items changes. </p>\n",
                    "line": 65,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_items",
                    "defaultValue": "[]",
                    "type": "MenuItemComponent[]",
                    "optional": false,
                    "description": "<p>Menu items inside the current menu. </p>\n",
                    "line": 62,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_keyManager",
                    "type": "FocusKeyManager<MenuItemComponent>",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_tabSubscription",
                    "defaultValue": "Subscription.EMPTY",
                    "type": "",
                    "optional": false,
                    "description": "<p>Subscription to tab events on the menu panel </p>\n",
                    "line": 68,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "hasFooter$",
                    "defaultValue": "this._footer.pipe(map(v => v !== null && v !== undefined))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "parentMenu",
                    "type": "ITheSeamMenuPanel | undefined",
                    "optional": false,
                    "description": "<p>Parent menu of the current menu panel. </p>\n",
                    "line": 71
                },
                {
                    "name": "templateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef, {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_handleKeydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "description": "<p>Handle a keyboard event from the menu, delegating to the appropriate action. </p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_hovered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MenuItemComponent>",
                    "typeParameters": [],
                    "line": 94,
                    "description": "<p>Stream that emits whenever the hovered menu item changes. </p>\n"
                },
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "MenuItemComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "description": "<p>Registers a menu item with the menu. </p>\n",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "MenuItemComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusFirstItem",
                    "args": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "defaultValue": "'program'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "description": "<p>Focus the first item in the menu.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4543,
                                "end": 4549,
                                "flags": 0,
                                "escapedText": "origin"
                            },
                            "type": "FocusOrigin",
                            "defaultValue": "'program'",
                            "tagName": {
                                "pos": 4537,
                                "end": 4542,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Action from which the focus originated. Used to set the correct styling.</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "MenuItemComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "description": "<p>Removes an item from the menu. </p>\n",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "MenuItemComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetActiveItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "description": "<p>Resets the active item in the menu. This is used when the menu is opened, allowing\nthe user to start from the first option when pressing the down arrow.</p>\n"
                },
                {
                    "name": "setFooter",
                    "args": [
                        {
                            "name": "footer",
                            "type": "MenuFooterComponent",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "description": "<p>Sets the footer component. </p>\n",
                    "jsdoctags": [
                        {
                            "name": "footer",
                            "type": "MenuFooterComponent",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { animate, group, query, style, transition, trigger, useAnimation } from '@angular/animations'\nimport { FocusKeyManager, FocusOrigin } from '@angular/cdk/a11y'\nimport { DOWN_ARROW, END, ESCAPE, hasModifierKey, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes'\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild\n} from '@angular/core'\nimport { BehaviorSubject, merge, Observable, Subject, Subscription } from 'rxjs'\n\nimport { map, startWith, switchMap } from 'rxjs/operators'\nimport { menuDropdownPanelSlideIn, menuDropdownPanelSlideOut } from './menu-animations'\nimport { MenuItemComponent } from './menu-item.component'\nimport { ITheSeamMenuPanel } from './menu-panel'\nimport { THESEAM_MENU_PANEL } from './menu-panel-token'\n\nimport { MenuFooterComponent } from './menu-footer/menu-footer.component'\n\nexport const LIB_MENU: any = {\n  provide: THESEAM_MENU_PANEL,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => MenuComponent)\n}\n\n@Component({\n  selector: 'seam-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.scss'],\n  providers: [ LIB_MENU ],\n  animations: [\n    trigger('slideDown', [\n      transition(':enter', useAnimation(menuDropdownPanelSlideIn)),\n      transition(':leave', useAnimation(menuDropdownPanelSlideOut)),\n    ])\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MenuComponent implements OnInit, OnDestroy, AfterContentInit, ITheSeamMenuPanel {\n\n  // @ContentChild(MenuFooterComponent, { static: false })\n  // get footerComponent() { return this._footer.value }\n  // set footerComponent(value: MenuFooterComponent | undefined | null) {\n  //   // console.log('set footer', value)\n  //   // this._footer = value\n  //   this._footer.next(value)\n  // }\n  private _footer = new BehaviorSubject<MenuFooterComponent | undefined | null>(undefined)\n  public hasFooter$ = this._footer.pipe(map(v => v !== null && v !== undefined))\n\n  private _keyManager: FocusKeyManager<MenuItemComponent>\n\n  /** Menu items inside the current menu. */\n  private _items: MenuItemComponent[] = []\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MenuItemComponent[]>()\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: ITheSeamMenuPanel | undefined\n\n  @ViewChild(TemplateRef, { static: false }) templateRef: TemplateRef<any>\n\n  @Output() readonly closed = new EventEmitter<void | 'click' | 'keydown' | 'tab'>()\n\n  @Input() menuClass: string\n\n  constructor() { }\n\n  ngOnInit() { }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe()\n    this.closed.complete()\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MenuItemComponent>(this._items).withWrap().withTypeAhead()\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'))\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MenuItemComponent> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    )\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    // tslint:disable-next-line:deprecation\n    const keyCode = event.keyCode\n    const manager = this._keyManager\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault()\n          this.closed.emit('keydown')\n        }\n        break\n      // case LEFT_ARROW:\n      //   if (this.parentMenu && this.direction === 'ltr') {\n      //     this.closed.emit('keydown')\n      //   }\n      //   break\n      // case RIGHT_ARROW:\n      //   if (this.parentMenu && this.direction === 'rtl') {\n      //     this.closed.emit('keydown')\n      //   }\n      //   break\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive()\n          event.preventDefault()\n        }\n        break\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard')\n        }\n\n        manager.onKeydown(event)\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    this._keyManager.setFocusOrigin(origin).setFirstItemActive()\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1)\n  }\n\n  /** Registers a menu item with the menu. */\n  addItem(item: MenuItemComponent) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `seam-menu` ancestor. If we used `@ContentChildren(MenuItemComponent, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `seam-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item)\n      this._itemChanges.next(this._items)\n    }\n  }\n\n  /** Removes an item from the menu. */\n  removeItem(item: MenuItemComponent) {\n    const index = this._items.indexOf(item)\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1)\n      this._itemChanges.next(this._items)\n    }\n  }\n\n  /** Sets the footer component. */\n  setFooter(footer?: MenuFooterComponent) {\n    this._footer.next(footer)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dropdown-menu {\n  &.ng-animating {\n    user-select: none;\n  }\n}\n",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 77
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterContentInit",
                "ITheSeamMenuPanel"
            ],
            "templateData": "<ng-template>\n  <div class=\"overflow-hidden\" @slideDown>\n    <div class=\"dropdown-menu show position-static\"\n      [class.pb-0]=\"hasFooter$ | async\"\n      (keydown)=\"_handleKeydown($event)\"\n      (click)=\"closed.emit('click')\"\n      tabindex=\"-1\"\n      role=\"menu\"\n      >\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "MenuDividerComponent",
            "id": "component-MenuDividerComponent-899b171015d34cf224ff38a5580a177d",
            "file": "projects/ui-common/src/lib/menu/menu-divider.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-menu-divider",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core'\n\n@Component({\n  selector: 'seam-menu-divider',\n  template: ``,\n  styles: [],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    'class': 'dropdown-divider d-block'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MenuDividerComponent { }\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "MenuFooterActionComponent",
            "id": "component-MenuFooterActionComponent-78ed7253ce980cb1a9ac81cab2d92f97",
            "file": "projects/ui-common/src/lib/menu/menu-footer-action/menu-footer-action.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button[seamMenuFooterAction],a[seamMenuFooterAction]",
            "styleUrls": [
                "./menu-footer-action.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-footer-action.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "description": "<p>ARIA type for the button. </p>\n",
                    "line": 18
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_type",
                    "type": "\"button\" | \"submit\" | \"reset\" | undefined | null",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_isAnchor",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 41,
                    "description": "<p>Determines if the component host is an anchor. </p>\n",
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "_isButton",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "description": "<p>Determines if the component host is a button. </p>\n",
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.type",
                    "line": 14
                },
                {
                    "name": "class.btn",
                    "line": 24
                },
                {
                    "name": "class.btn-link",
                    "line": 25
                },
                {
                    "name": "style.border.px",
                    "line": 28
                },
                {
                    "name": "style.display.px",
                    "line": 29
                },
                {
                    "name": "style.padding.px",
                    "line": 27
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, Input } from '@angular/core'\n\n// TODO: Split up the button and anchor classes.\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seamMenuFooterAction],a[seamMenuFooterAction]',\n  templateUrl: './menu-footer-action.component.html',\n  styleUrls: ['./menu-footer-action.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MenuFooterActionComponent {\n\n  @HostBinding('attr.type') get _attrType() { return this.type }\n\n  /** ARIA type for the button. */\n  @Input()\n  get type() { return this._isButton() ? this._type || 'button' : undefined }\n  set type(value: 'button' | 'submit' | 'reset' | undefined | null) {\n    this._type = value\n  }\n  private _type: 'button' | 'submit' | 'reset' | undefined | null\n\n  @HostBinding('class.btn') get _classBtn() { return this._isButton() }\n  @HostBinding('class.btn-link') get _classBtnLink() { return this._isButton() }\n\n  @HostBinding('style.padding.px') get _stylePadding() { return this._isButton() && 0 }\n  @HostBinding('style.border.px') get _styleBorder() { return this._isButton() && 0 }\n  @HostBinding('style.display.px') get _styleDisplay() { return this._isButton() && 'inline' }\n\n  constructor(\n    private _elementRef: ElementRef\n  ) { }\n\n  /** Determines if the component host is a button. */\n  protected _isButton() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'button'\n  }\n\n  /** Determines if the component host is an anchor. */\n  protected _isAnchor() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'a'\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./menu-footer-action.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "type": {
                    "name": "type",
                    "setSignature": {
                        "name": "type",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "MenuFooterComponent",
            "id": "component-MenuFooterComponent-e0b26be68469b2d1464997bd3c4ed3f5",
            "file": "projects/ui-common/src/lib/menu/menu-footer/menu-footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-menu-footer",
            "styleUrls": [
                "./menu-footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Inject, OnInit, Optional } from '@angular/core'\n\nimport { MenuItemComponent } from '../menu-item.component'\nimport { ITheSeamMenuPanel } from '../menu-panel'\nimport { THESEAM_MENU_PANEL } from '../menu-panel-token'\n\n@Component({\n  selector: 'seam-menu-footer',\n  templateUrl: './menu-footer.component.html',\n  styleUrls: ['./menu-footer.component.scss'],\n  host: {\n    'class': 'd-flex flex-column text-center bg-light border-top py-2'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MenuFooterComponent implements OnInit {\n\n  constructor(\n    @Inject(THESEAM_MENU_PANEL) @Optional() private _parentMenu?: ITheSeamMenuPanel<MenuItemComponent>\n  ) {\n    if (_parentMenu && _parentMenu.setFooter) {\n      _parentMenu.setFooter(this)\n    }\n  }\n\n  ngOnInit() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./menu-footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_parentMenu",
                        "type": "ITheSeamMenuPanel<MenuItemComponent>",
                        "optional": true
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_parentMenu",
                        "type": "ITheSeamMenuPanel<MenuItemComponent>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content select=\"a[seamMenuFooterAction],button[seamMenuFooterAction]\"></ng-content>\n"
        },
        {
            "name": "MenuItemComponent",
            "id": "component-MenuItemComponent-7b2ce95a0a5cbede81a2169734700158",
            "file": "projects/ui-common/src/lib/menu/menu-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "seamMenuItem",
            "host": {},
            "inputs": [
                "disabled"
            ],
            "outputs": [],
            "providers": [],
            "selector": "[seamMenuItem]",
            "styleUrls": [
                "./menu-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "line": 40,
                    "type": "IconProp | string"
                },
                {
                    "name": "iconClass",
                    "line": 41,
                    "type": "string"
                },
                {
                    "name": "role",
                    "defaultValue": "'menuitem'",
                    "description": "<p>ARIA role for the menu item. </p>\n",
                    "line": 38,
                    "type": "\"menuitem\" | \"menuitemradio\" | \"menuitemcheckbox\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_highlighted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Whether the menu item is highlighted. </p>\n",
                    "line": 47
                },
                {
                    "name": "_hovered",
                    "defaultValue": "new Subject<MenuItemComponent>()",
                    "type": "Subject<MenuItemComponent>",
                    "optional": false,
                    "description": "<p>Stream that emits when the menu item is hovered. </p>\n",
                    "line": 44,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "document",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "DOCUMENT"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_getHostElement",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 99,
                    "description": "<p>Returns the host DOM element. </p>\n"
                },
                {
                    "name": "_getTabIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 94,
                    "description": "<p>Used to set the <code>tabindex</code>. </p>\n"
                },
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "defaultValue": "'program'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "description": "<p>Focuses the menu item. </p>\n",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "defaultValue": "'program'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 119,
                    "description": "<p>Gets the label to be used when determining whether the option should be focused. </p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "description": "<p>Prevents the default element actions if it is disabled. </p>\n",
                    "line": 105
                },
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "description": "<p>Emits to the hover stream. </p>\n",
                    "line": 114
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y'\nimport { DOCUMENT } from '@angular/common'\nimport { ChangeDetectionStrategy, Component, ElementRef, HostListener, Inject, Input, OnDestroy, OnInit, Optional } from '@angular/core'\nimport { Subject } from 'rxjs'\n\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\n\nimport { CanDisableCtor, mixinDisabled } from '../core/common-behaviors/disabled'\nimport { ITheSeamMenuPanel } from './menu-panel'\nimport { THESEAM_MENU_PANEL } from './menu-panel-token'\n\nclass TheSeamMenuItemBase {}\n\nconst _seamMenuItemMixinBase: CanDisableCtor & typeof TheSeamMenuItemBase =\n    mixinDisabled(TheSeamMenuItemBase)\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: '[seamMenuItem]',\n  templateUrl: './menu-item.component.html',\n  styleUrls: ['./menu-item.component.scss'],\n  exportAs: 'seamMenuItem',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    '[attr.role]': 'role',\n    'class': 'dropdown-item',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MenuItemComponent extends _seamMenuItemMixinBase implements OnInit, OnDestroy, FocusableOption {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem'\n\n  @Input() icon: IconProp | string\n  @Input() iconClass: string\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MenuItemComponent> = new Subject<MenuItemComponent>()\n\n  /** Whether the menu item is highlighted. */\n  _highlighted = false\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) public document: any,\n    private _focusMonitor: FocusMonitor,\n    @Inject(THESEAM_MENU_PANEL) @Optional() private _parentMenu?: ITheSeamMenuPanel<MenuItemComponent>\n  ) {\n    super()\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false)\n    }\n\n    // console.log(this._parentMenu)\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this)\n    }\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef)\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this)\n    }\n\n    this._hovered.complete()\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin)\n    } else {\n      this._getHostElement().focus()\n    }\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0'\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n  }\n\n  /** Emits to the hover stream. */\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this)\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement\n    const textNodeType = this.document ? this.document.TEXT_NODE : 3\n    let output = ''\n\n    if (element.childNodes) {\n      const length = element.childNodes.length\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent\n        }\n      }\n    }\n\n    return output.trim()\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// :host {\n//   // Avoid the outline\n//   &.cdk-mouse-focused {\n//     outline: 0;\n//   }\n// }\n",
                    "styleUrl": "./menu-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>"
                    },
                    {
                        "name": "document",
                        "type": "any"
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "_parentMenu",
                        "type": "ITheSeamMenuPanel<MenuItemComponent>",
                        "optional": true
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parentMenu",
                        "type": "ITheSeamMenuPanel<MenuItemComponent>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "_seamMenuItemMixinBase",
            "implements": [
                "OnInit",
                "OnDestroy",
                "FocusableOption"
            ],
            "templateData": "<div class=\"d-flex flex-row\">\n  <seam-icon *ngIf=\"icon\"\n    style=\"width: 30px; height: 20px; flex: 0 0 auto;\"\n    class=\"pr-2\"\n    [icon]=\"icon\"\n    [iconClass]=\"iconClass\"\n    iconType=\"image-fill\">\n  </seam-icon>\n  <!-- <span class=\"text-nowrap\">\n    <ng-content></ng-content>\n  </span> -->\n  <div class=\"text-truncate\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "ModalBodyComponent",
            "id": "component-ModalBodyComponent-13a86b6cca3b014bd95a69c9ca6a6959",
            "file": "projects/ui-common/src/lib/modal/modal-body/modal-body.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-modal-body",
            "styleUrls": [
                "./modal-body.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-body.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [
                {
                    "name": "class.modal-body",
                    "defaultValue": "true",
                    "line": 10
                },
                {
                    "name": "class.p-3",
                    "defaultValue": "true",
                    "line": 11
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-modal-body',\n  templateUrl: './modal-body.component.html',\n  styleUrls: ['./modal-body.component.scss']\n})\nexport class ModalBodyComponent implements OnInit {\n\n  @HostBinding('class.modal-body') _modalBodyCss = true\n  @HostBinding('class.p-3') _paddingCss = true\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n",
                    "styleUrl": "./modal-body.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-fe523f2520e41cb4e7141a420bc7549a",
            "file": "projects/ui-common/src/lib/modal/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "LIB_MODAL"
                }
            ],
            "selector": "seam-modal",
            "styleUrls": [
                "./modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "closeOnKeyPressed",
                    "defaultValue": "[ ESCAPE ]",
                    "line": 36
                },
                {
                    "name": "footerTpl",
                    "line": 76,
                    "type": "TemplateRef<HTMLElement>"
                },
                {
                    "name": "form",
                    "description": "<p>Makes the modal container a form with this formGroup. </p>\n",
                    "line": 97,
                    "type": "FormGroup"
                },
                {
                    "name": "icon",
                    "line": 43,
                    "type": "SeamIcon | undefined"
                },
                {
                    "name": "iconTpl",
                    "line": 58,
                    "type": "TemplateRef<HTMLElement>"
                },
                {
                    "name": "showCloseBtn",
                    "defaultValue": "true",
                    "line": 38
                },
                {
                    "name": "titleText",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "titleTpl",
                    "line": 67,
                    "type": "TemplateRef<HTMLElement>"
                }
            ],
            "outputsClass": [
                {
                    "name": "formSubmit",
                    "defaultValue": "new EventEmitter<void>()",
                    "description": "<p>Emit the <code>(ngSubmit)</code> event. NOTE: Only if <code>form</code> is defined. </p>\n",
                    "line": 100,
                    "type": "EventEmitter"
                },
                {
                    "name": "modalClosed",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 84,
                    "type": "EventEmitter"
                },
                {
                    "name": "overlayDetached",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 88,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_footerTpl",
                    "type": "TemplateRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_iconObj",
                    "type": "IconProp | undefined",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_iconTpl",
                    "type": "TemplateRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_iconUrl",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_modalTpl",
                    "type": "TemplateRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalTpl', {static: true}"
                        }
                    ]
                },
                {
                    "name": "_overlayRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "_queryFooterTpl",
                    "type": "ModalFooterTplDirective",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ModalFooterTplDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "_queryIconTpl",
                    "type": "ModalHeaderIconTplDirective",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ModalHeaderIconTplDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "_queryTitleTpl",
                    "type": "ModalHeaderTitleTplDirective",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ModalHeaderTitleTplDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "_titleTpl",
                    "type": "TemplateRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isRouteModal",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 162,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "portal",
                            "type": "TemplatePortal | ComponentPortal<literal type>",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "portal",
                            "type": "TemplatePortal | ComponentPortal<literal type>",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ESCAPE } from '@angular/cdk/keycodes'\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay'\nimport { ComponentPortal, TemplatePortal } from '@angular/cdk/portal'\nimport {\n  AfterViewInit, Component, ContentChild, EventEmitter, forwardRef, Input,\n  isDevMode, OnDestroy, OnInit, Output, TemplateRef, ViewChild, ViewContainerRef\n} from '@angular/core'\nimport { FormGroup } from '@angular/forms'\nimport { ActivatedRoute } from '@angular/router'\nimport { filter } from 'rxjs/operators'\n\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\n\nimport { SeamIcon } from '../../icon/index'\n\nimport { ModalFooterTplDirective } from '../directives/modal-footer-tpl.directive'\nimport { ModalHeaderIconTplDirective } from '../directives/modal-header-icon-tpl.directive'\nimport { ModalHeaderTitleTplDirective } from '../directives/modal-header-title-tpl.directive'\nimport { IModalContainer, THESEAM_MODAL_CONTAINER } from '../modal.models'\n\nexport const LIB_MODAL: any = {\n  provide: THESEAM_MODAL_CONTAINER,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => ModalComponent),\n  multi: true,\n}\n\n@Component({\n  selector: 'seam-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss'],\n  providers: [ LIB_MODAL ]\n})\nexport class ModalComponent implements OnInit, OnDestroy, AfterViewInit, IModalContainer {\n\n  @Input() closeOnKeyPressed = [ ESCAPE ]\n\n  @Input() showCloseBtn = true\n\n  @Input() titleText: string\n\n  @Input()\n  get icon(): SeamIcon | undefined { return this._iconUrl || this._iconObj }\n  set icon(value: SeamIcon | undefined) {\n    if (typeof value === 'string') {\n      this._iconUrl = value\n      this._iconObj = undefined\n    } else {\n      this._iconUrl = undefined\n      this._iconObj = value\n    }\n  }\n\n  public _iconUrl: string | undefined\n  public _iconObj: IconProp | undefined\n\n  @Input()\n  get iconTpl(): TemplateRef<HTMLElement> {\n    return this._iconTpl || (this._queryIconTpl && this._queryIconTpl.template)\n  }\n  set iconTpl(value: TemplateRef<HTMLElement>) {\n    this._iconTpl = value\n  }\n  private _iconTpl: TemplateRef<HTMLElement>\n\n  @Input()\n  get titleTpl(): TemplateRef<HTMLElement> {\n    return this._titleTpl || (this._queryTitleTpl && this._queryTitleTpl.template)\n  }\n  set titleTpl(value: TemplateRef<HTMLElement>) {\n    this._titleTpl = value\n  }\n  private _titleTpl: TemplateRef<HTMLElement>\n\n  @Input()\n  get footerTpl(): TemplateRef<HTMLElement> {\n    return this._footerTpl || (this._queryFooterTpl && this._queryFooterTpl.template)\n  }\n  set footerTpl(value: TemplateRef<HTMLElement>) {\n    this._footerTpl = value\n  }\n  private _footerTpl: TemplateRef<HTMLElement>\n\n  @Output() modalClosed = new EventEmitter<void>()\n\n  _overlayRef: OverlayRef\n\n  @Output() overlayDetached = new EventEmitter<void>()\n\n  @ContentChild(ModalHeaderIconTplDirective, { static: true })  _queryIconTpl: ModalHeaderIconTplDirective\n  @ContentChild(ModalHeaderTitleTplDirective, { static: true })  _queryTitleTpl: ModalHeaderTitleTplDirective\n  @ContentChild(ModalFooterTplDirective, { static: true })  _queryFooterTpl: ModalFooterTplDirective\n\n  @ViewChild('modalTpl', { static: true }) _modalTpl: TemplateRef<HTMLElement>\n\n  /** Makes the modal container a form with this formGroup. */\n  @Input() form: FormGroup\n\n  /** Emit the `(ngSubmit)` event. NOTE: Only if `form` is defined. */\n  @Output() formSubmit = new EventEmitter<void>()\n\n  constructor(\n    private _viewContainerRef: ViewContainerRef,\n    private _overlay: Overlay,\n    private _route: ActivatedRoute\n  ) {\n    if (isDevMode()) {\n      // tslint:disable-next-line:max-line-length\n      console.warn('seamModal has some issues with its design. Use the Modal service for now, because seamModal will have breaking changes or be removed soon.')\n    }\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() {\n    this.close()\n  }\n\n  ngAfterViewInit() {\n    if (this.isRouteModal()) {\n      this.open()\n    }\n  }\n\n  public open(portal?: TemplatePortal | ComponentPortal<{}>) {\n    if (this._overlayRef && this._overlayRef.hasAttached()) { return }\n\n    const positionStrategy = this._overlay.position()\n      .global()\n      .centerHorizontally()\n      .centerVertically()\n\n    this._overlayRef = this._overlay.create({\n      hasBackdrop: true,\n      positionStrategy: positionStrategy\n    })\n\n    this._overlayRef.detachments().subscribe(_ => this.overlayDetached.emit())\n\n    this._overlayRef.backdropClick().subscribe(_ => this.close())\n\n    this._overlayRef.keydownEvents()\n      // tslint:disable-next-line:deprecation\n      .pipe(filter(e => e.keyCode === ESCAPE))\n      .subscribe(_ => this.close())\n\n    this._overlayRef.attach(portal || new TemplatePortal(this._modalTpl, this._viewContainerRef))\n  }\n\n  public close() {\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) { return }\n\n    this._overlayRef.detach()\n\n    this.modalClosed.emit()\n  }\n\n  _onSubmit() {\n    this.formSubmit.emit()\n  }\n\n  public isRouteModal() {\n    return this._route.outlet === 'modal'\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 100,
                "jsdoctags": [
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit",
                "IModalContainer"
            ],
            "accessors": {
                "icon": {
                    "name": "icon",
                    "setSignature": {
                        "name": "icon",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "iconTpl": {
                    "name": "iconTpl",
                    "setSignature": {
                        "name": "iconTpl",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 61,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "titleTpl": {
                    "name": "titleTpl",
                    "setSignature": {
                        "name": "titleTpl",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 70,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "footerTpl": {
                    "name": "footerTpl",
                    "setSignature": {
                        "name": "footerTpl",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 79,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-template #modalTpl>\n  <form *ngIf=\"form\" [formGroup]=\"form\" (ngSubmit)=\"_onSubmit()\" class=\"p-4\" style=\"max-width: 800px\">\n    <ng-container *ngTemplateOutlet=\"modalContent\"></ng-container>\n  </form>\n\n  <div *ngIf=\"!form\" class=\"p-4\" style=\"max-width: 800px\">\n    <ng-container *ngTemplateOutlet=\"modalContent\"></ng-container>\n  </div>\n\n  <ng-template #modalContent>\n    <div class=\"modal-content\">\n      <div class=\"modal-header py-2\">\n        <h4 class=\"modal-title\">\n          <span class=\"pr-2 modal-header-icon\">\n            <ng-container *ngIf=\"iconTpl; else noIconTpl\">\n              <ng-template\n                [ngTemplateOutlet]=\"iconTpl\"\n                [ngTemplateOutletContext]=\"{ $implicit: icon, icon: icon }\">\n              </ng-template>\n            </ng-container>\n            <ng-template #noIconTpl>\n              <fa-icon *ngIf=\"_iconObj\"\n                class=\"modal-header-icon--fa\"\n                [icon]=\"_iconObj\"\n                size=\"sm\"></fa-icon>\n              <img *ngIf=\"_iconUrl\"\n                class=\"modal-header-icon--img\"\n                [src]=\"_iconUrl\" [alt]=\"titleText\">\n            </ng-template>\n          </span>\n\n          <span class=\"modal-header-title\">\n            <ng-container *ngIf=\"titleTpl; else noTitleTpl\">\n              <ng-template\n                [ngTemplateOutlet]=\"titleTpl\"\n                [ngTemplateOutletContext]=\"{ $implicit: titleText, title: titleText }\">\n              </ng-template>\n            </ng-container>\n            <ng-template #noTitleTpl>{{ titleText }}</ng-template>\n          </span>\n        </h4>\n        <button *ngIf=\"showCloseBtn\"\n          type=\"button\"\n          class=\"close\"\n          (click)=\"close()\"\n          aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <ng-content></ng-content>\n      </div>\n      <div *ngIf=\"_queryFooterTpl\" class=\"modal-footer p-2\">\n        <ng-container *ngComponentOutlet=\"_queryFooterTpl.template\"></ng-container>\n      </div>\n    </div>\n  </ng-template>\n</ng-template>\n"
        },
        {
            "name": "ModalContainerComponent",
            "id": "component-ModalContainerComponent-d7b396cfaa0b3fd46fc3b4f7ddd7d05f",
            "file": "projects/ui-common/src/lib/modal/modal-container/modal-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-modal-container",
            "styleUrls": [
                "./modal-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_afterEnter",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "<p>A subject emitting after the dialog enters the view. </p>\n",
                    "line": 132
                },
                {
                    "name": "_afterExit",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "<p>A subject emitting after the dialog exits the view. </p>\n",
                    "line": 138
                },
                {
                    "name": "_animationDone",
                    "defaultValue": "new Subject<AnimationEvent>()",
                    "type": "",
                    "optional": false,
                    "description": "<p>Stream of animation <code>done</code> events. </p>\n",
                    "line": 141
                },
                {
                    "name": "_beforeEnter",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "<p>A subject emitting before the dialog enters the view. </p>\n",
                    "line": 129
                },
                {
                    "name": "_beforeExit",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "<p>A subject emitting before the dialog exits the view. </p>\n",
                    "line": 135
                },
                {
                    "name": "_config",
                    "type": "ModalConfig",
                    "optional": false,
                    "description": "<p>The dialog configuration. </p>\n",
                    "line": 84,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_elementFocusedBeforeDialogWasOpened",
                    "defaultValue": "null",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "<p>Element that was focused before the dialog was opened. Save this to restore upon close. </p>\n",
                    "line": 112,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_focusTrap",
                    "defaultValue": "this._focusTrapFactory.create(this._elementRef.nativeElement, false)",
                    "type": "",
                    "optional": false,
                    "description": "<p>The class that traps and manages focus within the dialog. </p>\n",
                    "line": 115,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "_portalHost",
                    "type": "CdkPortalOutlet",
                    "optional": false,
                    "description": "<p>The portal host inside of this container into which the dialog content will be loaded. </p>\n",
                    "line": 126,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CdkPortalOutlet, {static: true}"
                        }
                    ]
                },
                {
                    "name": "_state",
                    "defaultValue": "'enter'",
                    "type": "\"void\" | \"enter\" | \"exit\"",
                    "optional": false,
                    "description": "<p>State of the dialog animation. </p>\n",
                    "line": 109
                }
            ],
            "methodsClass": [
                {
                    "name": "_autoFocusFirstTabbableElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "description": "<p>Autofocus the first tabbable element inside of the dialog, if there is not a tabbable element,\nfocus the dialog instead.</p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_onAnimationStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "description": "<p>Emit lifecycle events based on animation <code>start</code> callback. </p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_returnFocusAfterDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "description": "<p>Returns the focus to the element focused before the dialog was open. </p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_savePreviouslyFocusedElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "description": "<p>Saves a reference to the element that was focused before the dialog was opened. </p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_startExiting",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "description": "<p>Starts the dialog exit animation. </p>\n"
                },
                {
                    "name": "attachComponentPortal",
                    "args": [
                        {
                            "name": "portal",
                            "type": "ComponentPortal<T>"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 159,
                    "description": "<p>Attach a ComponentPortal as content to this dialog container.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5766,
                                "end": 5772,
                                "flags": 0,
                                "escapedText": "portal"
                            },
                            "type": "ComponentPortal<T>",
                            "tagName": {
                                "pos": 5760,
                                "end": 5765,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Portal to be attached as the dialog content.</p>\n"
                        }
                    ]
                },
                {
                    "name": "attachTemplatePortal",
                    "args": [
                        {
                            "name": "portal",
                            "type": "TemplatePortal<C>"
                        }
                    ],
                    "optional": false,
                    "returnType": "EmbeddedViewRef<C>",
                    "typeParameters": [
                        "C"
                    ],
                    "line": 172,
                    "description": "<p>Attach a TemplatePortal as content to this dialog container.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6182,
                                "end": 6188,
                                "flags": 0,
                                "escapedText": "portal"
                            },
                            "type": "TemplatePortal<C>",
                            "tagName": {
                                "pos": 6176,
                                "end": 6181,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Portal to be attached as the dialog content.</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "description": "<p>Destroy focus trap to place focus back to the element focused before the dialog opened. </p>\n"
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.aria-describedby",
                    "line": 68
                },
                {
                    "name": "attr.aria-label",
                    "line": 65
                },
                {
                    "name": "attr.id",
                    "line": 59
                },
                {
                    "name": "attr.role",
                    "line": 70
                },
                {
                    "name": "attr.tabindex",
                    "line": 72
                },
                {
                    "name": "class.modal-dialog",
                    "defaultValue": "true",
                    "line": 118
                },
                {
                    "name": "class.modal-dialog-centered",
                    "defaultValue": "true",
                    "line": 119
                },
                {
                    "name": "class.modal-lg",
                    "line": 122
                },
                {
                    "name": "class.modal-sm",
                    "line": 121
                },
                {
                    "name": "class.modal-xl",
                    "line": 123
                },
                {
                    "name": "class.seam-modal-container",
                    "defaultValue": "true",
                    "line": 74
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 145
                }
            ],
            "description": "<p>Internal component that wraps user-provided dialog content.</p>\n",
            "rawdescription": "Internal component that wraps user-provided dialog content.",
            "type": "component",
            "sourceCode": "import { animate, AnimationEvent, state, style, transition, trigger } from '@angular/animations'\nimport { FocusTrapFactory } from '@angular/cdk/a11y'\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal'\nimport { DOCUMENT } from '@angular/common'\nimport {\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  HostBinding,\n  HostListener,\n  Inject,\n  OnDestroy,\n  Optional,\n  ViewChild\n} from '@angular/core'\nimport { Subject } from 'rxjs'\nimport { distinctUntilChanged } from 'rxjs/operators'\n\nimport { ModalConfig } from '../modal-config'\n\nexport function throwDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached')\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\n@Component({\n  selector: 'seam-modal-container',\n  templateUrl: './modal-container.component.html',\n  styleUrls: ['./modal-container.component.scss'],\n  animations: [\n    trigger('dialog', [\n      state('enter', style({opacity: 1})),\n      state('exit, void', style({opacity: 0})),\n      transition('* => enter', animate('{{enterAnimationDuration}}')),\n      transition('* => exit, * => void', animate('{{exitAnimationDuration}}')),\n    ])\n  ],\n  // tslint:disable:use-host-property-decorator\n  host: {\n    '[@dialog]': `{\n      value: _state,\n      params: {\n        enterAnimationDuration: _config.enterAnimationDuration,\n        exitAnimationDuration: _config.exitAnimationDuration\n      }\n    }`,\n    '(@dialog.start)': '_onAnimationStart($event)',\n    '(@dialog.done)': '_animationDone.next($event)',\n  },\n  // tslint:enable:use-host-property-decorator\n})\nexport class ModalContainerComponent extends BasePortalOutlet implements OnDestroy {\n\n  @HostBinding('attr.id') get _idAttr() { return this._id }\n\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('attr.aria-label') get _ariaLabel() { return this._config.ariaLabel || null }\n\n  @HostBinding('attr.aria-describedby')\n  get _ariaDescribedBy() { return this._config.ariaDescribedBy }\n\n  @HostBinding('attr.role') get _role() { return this._config.role }\n\n  @HostBinding('attr.tabindex') get _tabindex() { return -1 }\n\n  @HostBinding('class.seam-modal-container') _seamModalContainer = true\n\n  _id: string\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: ModalConfig) {\n    super()\n\n    // We use a Subject with a distinctUntilChanged, rather than a callback attached to .done,\n    // because some browsers fire the done event twice and we don't want to emit duplicate events.\n    // See: https://github.com/angular/angular/issues/24084\n    this._animationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState\n    })).subscribe(event => {\n      // Emit lifecycle events based on animation `done` callback.\n      if (event.toState === 'enter') {\n        this._autoFocusFirstTabbableElement()\n        this._afterEnter.next()\n        this._afterEnter.complete()\n      }\n\n      if (event.fromState === 'enter' && (event.toState === 'void' || event.toState === 'exit')) {\n        this._returnFocusAfterDialog()\n        this._afterExit.next()\n        this._afterExit.complete()\n      }\n    })\n  }\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter'\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null\n\n   /** The class that traps and manages focus within the dialog. */\n  private _focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, false)\n  // tslint:disable:no-host-decorator-in-concrete\n\n  @HostBinding('class.modal-dialog') _modalDialog = true\n  @HostBinding('class.modal-dialog-centered') _modalDialogCentered = true\n\n  @HostBinding('class.modal-sm') get _modalDialogSm() { return this._config.modalSize === 'sm' }\n  @HostBinding('class.modal-lg') get _modalDialogLg() { return this._config.modalSize === 'lg' }\n  @HostBinding('class.modal-xl') get _modalDialogXl() { return this._config.modalSize === 'xl' }\n\n  /** The portal host inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet /*, { static: true }*/, { static: true }) _portalHost: CdkPortalOutlet\n\n  /** A subject emitting before the dialog enters the view. */\n  _beforeEnter: Subject<void> = new Subject()\n\n  /** A subject emitting after the dialog enters the view. */\n  _afterEnter: Subject<void> = new Subject()\n\n  /** A subject emitting before the dialog exits the view. */\n  _beforeExit: Subject<void> = new Subject()\n\n  /** A subject emitting after the dialog exits the view. */\n  _afterExit: Subject<void> = new Subject()\n\n  /** Stream of animation `done` events. */\n  _animationDone = new Subject<AnimationEvent>()\n\n  // NOTE: For current bootstrap style modal\n  @HostListener('click', [ '$event' ])\n  _onClick(event) {\n    event.stopPropagation()\n  }\n\n  /** Destroy focus trap to place focus back to the element focused before the dialog opened. */\n  ngOnDestroy() {\n    this._focusTrap.destroy()\n    this._animationDone.complete()\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwDialogContentAlreadyAttachedError()\n    }\n\n    this._savePreviouslyFocusedElement()\n    return this._portalHost.attachComponentPortal(portal)\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalHost.hasAttached()) {\n      throwDialogContentAlreadyAttachedError()\n    }\n\n    this._savePreviouslyFocusedElement()\n    return this._portalHost.attachTemplatePortal(portal)\n  }\n\n  /** Emit lifecycle events based on animation `start` callback. */\n  _onAnimationStart(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._beforeEnter.next()\n      this._beforeEnter.complete()\n    }\n    if (event.fromState === 'enter' && (event.toState === 'void' || event.toState === 'exit')) {\n      this._beforeExit.next()\n      this._beforeExit.complete()\n    }\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExiting(): void {\n    this._state = 'exit'\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck()\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus())\n    }\n  }\n\n  /**\n   * Autofocus the first tabbable element inside of the dialog, if there is not a tabbable element,\n   * focus the dialog instead.\n   */\n  private _autoFocusFirstTabbableElement() {\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n        // If we didn't find any focusable elements inside the dialog, focus the\n        // container so the user can't tab into other elements behind it.\n        if (!hasMovedFocus) {\n          this._elementRef.nativeElement.focus()\n        }\n      })\n    }\n  }\n\n  /** Returns the focus to the element focused before the dialog was open. */\n  private _returnFocusAfterDialog() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus()\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// :host {\n//   // background: white;\n//   // border-radius: 5px;\n//   display: block;\n//   // padding: 10px;\n\n//   width: 100%;\n// }\n\n// .modal-content {\n//   transition: 250ms ease-in-out;\n//   transform: translateY(100%);\n// }\n",
                    "styleUrl": "./modal-container.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 843,
                    "end": 848,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 843,
                        "end": 844,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 844,
                        "end": 848,
                        "flags": 0,
                        "escapedText": "docs"
                    },
                    "comment": "-private"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>"
                    },
                    {
                        "name": "_focusTrapFactory",
                        "type": "FocusTrapFactory"
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_document",
                        "type": "any"
                    },
                    {
                        "name": "_config",
                        "type": "ModalConfig"
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusTrapFactory",
                        "type": "FocusTrapFactory",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_document",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_config",
                        "type": "ModalConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BasePortalOutlet",
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div class=\"modal-content\">\n  <ng-template cdkPortalOutlet></ng-template>\n</div>\n"
        },
        {
            "name": "ModalFooterComponent",
            "id": "component-ModalFooterComponent-6c2d1464e3da9da475c07b0d59ada2e2",
            "file": "projects/ui-common/src/lib/modal/modal-footer/modal-footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-modal-footer",
            "styleUrls": [
                "./modal-footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [
                {
                    "name": "class.modal-footer",
                    "defaultValue": "true",
                    "line": 10
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-modal-footer',\n  templateUrl: './modal-footer.component.html',\n  styleUrls: ['./modal-footer.component.scss']\n})\nexport class ModalFooterComponent implements OnInit {\n\n  @HostBinding('class.modal-footer') _modalFooterCss = true\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "ModalHeaderComponent",
            "id": "component-ModalHeaderComponent-3cbe92182d5bd447949418fced0f0af0",
            "file": "projects/ui-common/src/lib/modal/modal-header/modal-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-modal-header",
            "styleUrls": [
                "./modal-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hasCloseBtn",
                    "defaultValue": "true",
                    "line": 15
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_closeDirective",
                    "type": "ModalCloseDirective",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ModalCloseDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "_titleDirective",
                    "type": "ModalTitleDirective",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ModalTitleDirective, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [
                {
                    "name": "class.modal-header",
                    "defaultValue": "true",
                    "line": 13
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, HostBinding, Input, OnInit } from '@angular/core'\n\nimport { ModalCloseDirective } from '../directives/modal-close.directive'\nimport { ModalTitleDirective } from '../directives/modal-title.directive'\n\n@Component({\n  selector: 'seam-modal-header',\n  templateUrl: './modal-header.component.html',\n  styleUrls: ['./modal-header.component.scss']\n})\nexport class ModalHeaderComponent implements OnInit {\n\n  @HostBinding('class.modal-header') _modalHeaderCss = true\n\n  @Input() hasCloseBtn = true\n\n  @ContentChild(ModalTitleDirective, { static: true }) _titleDirective: ModalTitleDirective\n  @ContentChild(ModalCloseDirective, { static: true }) _closeDirective: ModalCloseDirective\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>\n\n<!-- <button seamModalClose>\n  <span aria-hidden=\"true\">&times;</span>\n</button> -->\n\n<!-- seam-modal-header-close -->\n"
        },
        {
            "name": "PasswordInputRevealComponent",
            "id": "component-PasswordInputRevealComponent-3c6be953652b6a3eead36819b690d28b",
            "file": "projects/ui-common/src/lib/shared/components/password-input-reveal/password-input-reveal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-password-input-reveal",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: flex;\n      align-items: center;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: 30px;\n      transform: translateZ(0);\n      z-index: 50;\n    }\n\n    :host fa-icon {\n      opacity: 1;\n      color: #bababa;\n      margin-top: 3px;\n      cursor: pointer;\n    }\n\n    :host fa-icon ::ng-deep {\n      .svg-inline--fa {\n        vertical-align: middle;\n      }\n    }\n    "
            ],
            "template": "<fa-icon [icon]=\"passwordVisible ? faEyeSlash : faEye\" class=\"password-reveal-icon\" (click)=\"revealPassword()\"></fa-icon>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "inputRef",
                    "line": 45
                },
                {
                    "name": "passwordVisible",
                    "line": 55
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_loginPasswordInput",
                    "type": "HTMLInputElement",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_passwordVisible",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "faEye",
                    "defaultValue": "faEye",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "faEyeSlash",
                    "defaultValue": "faEyeSlash",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "revealPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "updateRevealState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\nimport { faEye, faEyeSlash } from '@fortawesome/free-regular-svg-icons'\n\n@Component({\n  selector: 'seam-password-input-reveal',\n  template: `\n    <fa-icon [icon]=\"passwordVisible ? faEyeSlash : faEye\" class=\"password-reveal-icon\" (click)=\"revealPassword()\"></fa-icon>\n  `,\n  styles: [\n    `\n    :host {\n      display: flex;\n      align-items: center;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: 30px;\n      transform: translateZ(0);\n      z-index: 50;\n    }\n\n    :host fa-icon {\n      opacity: 1;\n      color: #bababa;\n      margin-top: 3px;\n      cursor: pointer;\n    }\n\n    :host fa-icon ::ng-deep {\n      .svg-inline--fa {\n        vertical-align: middle;\n      }\n    }\n    `\n  ]\n})\nexport class PasswordInputRevealComponent {\n\n  faEye = faEye\n  faEyeSlash = faEyeSlash\n\n  @Input()\n  get inputRef() { return this._loginPasswordInput }\n  set inputRef(value: HTMLInputElement) {\n    this._loginPasswordInput = value\n    this.updateRevealState()\n    this._loginPasswordInput.style.paddingRight = '40px'\n    this._loginPasswordInput.classList.add('no-native-eye')\n  }\n  private _loginPasswordInput: HTMLInputElement\n\n  @Input()\n  get passwordVisible() { return this._passwordVisible }\n  set passwordVisible(value: boolean) {\n    this._passwordVisible = value\n    this.updateRevealState()\n  }\n  public _passwordVisible = false\n\n  public updateRevealState(): void {\n    if (this._loginPasswordInput) {\n      this._loginPasswordInput.type = this.passwordVisible ? 'text' : 'password'\n    }\n  }\n\n  public revealPassword(): void {\n    this.passwordVisible = !this.passwordVisible\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: flex;\n      align-items: center;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: 30px;\n      transform: translateZ(0);\n      z-index: 50;\n    }\n\n    :host fa-icon {\n      opacity: 1;\n      color: #bababa;\n      margin-top: 3px;\n      cursor: pointer;\n    }\n\n    :host fa-icon ::ng-deep {\n      .svg-inline--fa {\n        vertical-align: middle;\n      }\n    }\n    \n",
            "accessors": {
                "inputRef": {
                    "name": "inputRef",
                    "setSignature": {
                        "name": "inputRef",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 46,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "passwordVisible": {
                    "name": "passwordVisible",
                    "setSignature": {
                        "name": "passwordVisible",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "PdfPageComponent",
            "id": "component-PdfPageComponent-2a870bdd9edfe689c03e3b6c63d4372b",
            "file": "projects/ui-common/src/lib/viewers/pdf-viewer/pdf-page/pdf-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-pdf-page",
            "styleUrls": [],
            "styles": [
                "\n    :host { display: block; }\n    canvas { display: block; }\n  "
            ],
            "template": "<div #pdfContainer\n  (seamElemResized)=\"onResized($event)\">\n  <canvas #pdfCanvas></canvas>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "page",
                    "line": 26
                },
                {
                    "name": "renderUpdateThreshold",
                    "defaultValue": "100",
                    "description": "<p>The canvas will be rerendered if the canvas size changes by this many\npixels from the last render.</p>\n<p>To make the canvas responsive using only the initial size for its render\nset the threshold to <code>-1</code>. You can still trigger a rerender by calling the\n<code>render()</code> method.</p>\n<p>NOTE: Only used when <code>responsive</code> is <code>true</code>.</p>\n",
                    "line": 56
                },
                {
                    "name": "responsive",
                    "defaultValue": "false",
                    "description": "<p>Canvas will responsively scale and rerender if scaled more than\n<code>renderUpdateThreshold</code> pixels.</p>\n",
                    "line": 44
                },
                {
                    "name": "shadow",
                    "defaultValue": "false",
                    "line": 33
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_page",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_render$",
                    "type": "Observable<void>",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_renderRequestSubject",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "pdfCanvas",
                    "type": "ElementRef<HTMLCanvasElement>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'pdfCanvas', {static: true}"
                        }
                    ]
                },
                {
                    "name": "pdfContainer",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'pdfContainer', {static: true}"
                        }
                    ]
                },
                {
                    "name": "rendering",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        112,
                        120
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "onResized",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.shadow",
                    "line": 35
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, HostBinding, Input, OnDestroy, OnInit, ViewChild } from '@angular/core'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { from, Observable, Subject } from 'rxjs'\nimport { auditTime, switchMap } from 'rxjs/operators'\n\nimport { waitOnConditionAsync } from '../../../utils/index'\n\nconst pdfjsLib = require('pdfjs-dist/build/pdf')\n\n@Component({\n  selector: 'seam-pdf-page',\n  template: `\n  <div #pdfContainer\n    (seamElemResized)=\"onResized($event)\">\n    <canvas #pdfCanvas></canvas>\n  </div>\n  `,\n  styles: [`\n    :host { display: block; }\n    canvas { display: block; }\n  `]\n})\nexport class PdfPageComponent implements OnInit, OnDestroy, AfterViewInit {\n\n  @Input()\n  public get page() { return this._page }\n  public set page(value) {\n    this._page = value\n    setTimeout(_ => { this.render() })\n  }\n  private _page\n\n  @Input() shadow = false\n\n  @HostBinding('class.shadow') get _shadow() { return this.shadow }\n\n  @ViewChild('pdfContainer', { static: true }) pdfContainer: ElementRef<HTMLDivElement>\n  @ViewChild('pdfCanvas', { static: true }) pdfCanvas: ElementRef<HTMLCanvasElement>\n\n  /**\n   * Canvas will responsively scale and rerender if scaled more than\n   * `renderUpdateThreshold` pixels.\n   */\n  @Input() responsive = false\n\n  /**\n   * The canvas will be rerendered if the canvas size changes by this many\n   * pixels from the last render.\n   *\n   * To make the canvas responsive using only the initial size for its render\n   * set the threshold to `-1`. You can still trigger a rerender by calling the\n   * `render()` method.\n   *\n   * NOTE: Only used when `responsive` is `true`.\n   */\n  @Input() renderUpdateThreshold = 100\n\n  public rendering = false\n\n  private _renderRequestSubject = new Subject<void>()\n\n  private _render$: Observable<void>\n\n  constructor() {\n    if (!pdfjsLib.GlobalWorkerOptions.workerSrc) {\n      // tslint:disable-next-line:max-line-length\n      pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${ (pdfjsLib as any).version }/pdf.worker.min.js`\n    }\n  }\n\n  ngOnInit() {\n    this._render$ = this._renderRequestSubject.pipe(\n      untilDestroyed(this),\n      auditTime(500),\n      switchMap(_ => from(waitOnConditionAsync(() => this.rendering === false, 30 * 1000))),\n      switchMap(_ => from(this._render()))\n    )\n  }\n\n  ngOnDestroy() { }\n\n  ngAfterViewInit() {\n    this._render$.subscribe()\n    this.render()\n  }\n\n  public render() {\n    this._renderRequestSubject.next()\n  }\n\n  private async _render() {\n    try {\n      const w = this.pdfContainer.nativeElement.clientWidth\n      const desiredWidth = w\n      const viewport = this.page.getViewport(1)\n      const scale = desiredWidth / viewport.width\n      const scaledViewport = this.page.getViewport(scale)\n\n      // Prepare canvas using PDF page dimensions\n      const canvas: HTMLCanvasElement = this.pdfCanvas.nativeElement\n      const context = canvas.getContext('2d')\n      canvas.height = scaledViewport.height\n      canvas.width = scaledViewport.width\n      canvas.style.height = `${scaledViewport.height}px`\n      canvas.style.width = `${scaledViewport.width}px`\n\n      // Render PDF page into canvas context\n      const renderContext = {\n        canvasContext: context,\n        viewport: scaledViewport\n      }\n\n      const renderTask = await this.page.render(renderContext)\n\n      // TODO: Allow canceling instead of only waiting\n      // await renderTask.cancel()\n      this.rendering = false\n      if (this.responsive) {\n        canvas.style.width = '100%'\n        canvas.style.height = '100%'\n      }\n    } catch (err) {\n      // PDF loading error\n      console.error(err)\n    }\n  }\n\n  onResized(event) {\n    if (!this.responsive || this.renderUpdateThreshold === -1) { return }\n    const containerRect = this.pdfContainer.nativeElement.getBoundingClientRect()\n    const pdfWidth = this.pdfCanvas.nativeElement.width\n    const pdfHeight = this.pdfCanvas.nativeElement.height\n    const wDiff = Math.abs(containerRect.width - pdfWidth)\n    const hDiff = Math.abs(containerRect.height - pdfHeight)\n    if (wDiff > this.renderUpdateThreshold || hDiff > this.renderUpdateThreshold) {\n      this.render()\n    }\n\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host { display: block; }\n    canvas { display: block; }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 62
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "accessors": {
                "page": {
                    "name": "page",
                    "setSignature": {
                        "name": "page",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "PdfViewerComponent",
            "id": "component-PdfViewerComponent-3497d68b738b6970ec39dbfd9601f667",
            "file": "projects/ui-common/src/lib/viewers/pdf-viewer/pdf-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-pdf-viewer",
            "styleUrls": [],
            "styles": [
                ":host { display: block; }"
            ],
            "template": "<ng-container *ngFor=\"let page of pages$ | async\">\n  <seam-pdf-page\n    class=\"mb-2\"\n    [page]=\"page | async\"\n    [responsive]=\"responsive\"\n    [shadow]=\"shadow\"\n    [renderUpdateThreshold]=\"renderUpdateThreshold\">\n  </seam-pdf-page>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pageNumber",
                    "description": "<p>Render a specific page.</p>\n",
                    "line": 94,
                    "type": "number"
                },
                {
                    "name": "pageNumbers",
                    "description": "<p>Specific page numbers to render.</p>\n",
                    "line": 105,
                    "type": "number[]"
                },
                {
                    "name": "pageRange",
                    "description": "<p>Range of pages to render.</p>\n<p>Example(page 1 to page 3):\n  [pageRange]=&quot;[1,3]&quot;</p>\n",
                    "line": 60,
                    "type": "number[]"
                },
                {
                    "name": "pdfUrl",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "renderUpdateThreshold",
                    "defaultValue": "100",
                    "description": "<p>The canvas will be rerendered if the canvas size changes by this many\npixels from the last render.</p>\n<p>To make the canvas responsive using only the initial size for its render\nset the threshold to <code>-1</code>. You can still trigger a rerender by calling the\n<code>render()</code> method.</p>\n<p>NOTE: Only used when <code>responsive</code> is <code>true</code>.</p>\n",
                    "line": 51
                },
                {
                    "name": "responsive",
                    "defaultValue": "false",
                    "description": "<p>Canvas will responsively scale and rerender if scaled more than\n<code>renderUpdateThreshold</code> pixels.</p>\n",
                    "line": 39
                },
                {
                    "name": "shadow",
                    "defaultValue": "false",
                    "line": 33
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_documentSubject",
                    "defaultValue": "new ReplaySubject<any>(1)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 116,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_pageNumber",
                    "defaultValue": "-1",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_pageNumbers",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 114,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_pageNumbersSubject",
                    "defaultValue": "new BehaviorSubject<number[] | undefined>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "<p>Undefined means all a pages</p>\n",
                    "line": 123,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_pageRange",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_pdfUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "document$",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pages$",
                    "type": "Observable<any[]>",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { coerceArray, coerceNumberProperty } from '@angular/cdk/coercion'\nimport { Component, Input, OnInit } from '@angular/core'\nimport { BehaviorSubject, from, Observable, ReplaySubject } from 'rxjs'\nimport { map, switchMap } from 'rxjs/operators'\n\nconst pdfjsLib = require('pdfjs-dist/build/pdf')\n\n@Component({\n  selector: 'seam-pdf-viewer',\n  template: `\n  <ng-container *ngFor=\"let page of pages$ | async\">\n    <seam-pdf-page\n      class=\"mb-2\"\n      [page]=\"page | async\"\n      [responsive]=\"responsive\"\n      [shadow]=\"shadow\"\n      [renderUpdateThreshold]=\"renderUpdateThreshold\">\n    </seam-pdf-page>\n  </ng-container>\n  `,\n  styles: [`:host { display: block; }`]\n})\nexport class PdfViewerComponent implements OnInit {\n\n  @Input()\n  get pdfUrl(): string { return this._pdfUrl }\n  set pdfUrl(value: string) {\n    this._pdfUrl = value\n    this._documentSubject.next(value)\n  }\n  private _pdfUrl: string\n\n  @Input() shadow = false\n\n  /**\n   * Canvas will responsively scale and rerender if scaled more than\n   * `renderUpdateThreshold` pixels.\n   */\n  @Input() responsive = false\n\n  /**\n   * The canvas will be rerendered if the canvas size changes by this many\n   * pixels from the last render.\n   *\n   * To make the canvas responsive using only the initial size for its render\n   * set the threshold to `-1`. You can still trigger a rerender by calling the\n   * `render()` method.\n   *\n   * NOTE: Only used when `responsive` is `true`.\n   */\n  @Input() renderUpdateThreshold = 100\n\n  /**\n   * Range of pages to render.\n   *\n   * Example(page 1 to page 3):\n   *  [pageRange]=\"[1,3]\"\n   */\n  @Input()\n  get pageRange(): number[] { return this._pageRange }\n  set pageRange(value: number[]) {\n    this._pageRange = value\n\n    if (!this._pageRange) {\n      this._pageNumbersSubject.next(undefined)\n    }\n\n    try {\n      const range = coerceArray(this._pageRange)\n      if (range.length !== 2) {\n        throw new Error('[pdf-viewer] Invalid Page Range. Range array must have two numbers only.')\n      }\n      if (range[0] > range[1]) {\n        throw new Error('[pdf-viewer] Invalid Page Range. Start of the range must be less than or equal to the end.')\n      }\n\n      const nums: number[] = []\n      for (let i = range[0]; i <= range[1]; i++) {\n        nums.push(i)\n      }\n      this._pageNumbersSubject.next(nums)\n    } catch (err) {\n      // TODO: Decide how to conveniently display these errors.\n      console.error(err)\n      this._pageNumbersSubject.next([])\n    }\n  }\n  private _pageRange: number[]\n\n  /**\n   * Render a specific page.\n   */\n  @Input()\n  get pageNumber(): number { return this._pageNumber }\n  set pageNumber(value: number) {\n    this._pageNumber = coerceNumberProperty(value, -1)\n    this._pageNumbersSubject.next(this._pageNumber === -1 ? undefined : [ this._pageNumber ])\n  }\n  private _pageNumber = -1\n\n  /**\n   * Specific page numbers to render.\n   */\n  @Input()\n  get pageNumbers(): number[] { return this._pageNumbers }\n  set pageNumbers(value: number[]) {\n    this._pageNumbers = value\n    if (Array.isArray(this._pageNumbers)) {\n      this._pageNumbersSubject.next(this._pageNumbers)\n    } else {\n      this._pageNumbersSubject.next(undefined)\n    }\n  }\n  private _pageNumbers: number[]\n\n  private _documentSubject = new ReplaySubject<any>(1)\n  public document$: Observable<any>\n  public pages$: Observable<any[]>\n\n  /**\n   * Undefined means all a pages\n   */\n  private _pageNumbersSubject = new BehaviorSubject<number[] | undefined>(undefined)\n\n  constructor() {\n    if (!pdfjsLib.GlobalWorkerOptions.workerSrc) {\n      // tslint:disable-next-line:max-line-length\n      pdfjsLib.GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${ (pdfjsLib as any).version }/pdf.worker.min.js`\n    }\n  }\n\n  ngOnInit() {\n    this.document$ = this._documentSubject.asObservable()\n      .pipe(switchMap(url => from(pdfjsLib.getDocument(url).promise)))\n\n    const pageNumbers$ = this._pageNumbersSubject.asObservable()\n\n    this.pages$ = this.document$\n      .pipe(\n        switchMap(doc => pageNumbers$.pipe(\n          map(pageNumbers => {\n            const pages: any[] = []\n            for (let i = 0; i < doc.numPages; i++) {\n              if (!pageNumbers || pageNumbers.indexOf(i + 1) !== -1) {\n                pages.push(from(doc.getPage(i + 1)))\n              }\n            }\n            return pages\n          })\n        ))\n      )\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ":host { display: block; }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 123
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "pdfUrl": {
                    "name": "pdfUrl",
                    "setSignature": {
                        "name": "pdfUrl",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "pageRange": {
                    "name": "pageRange",
                    "setSignature": {
                        "name": "pageRange",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 61,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "pageNumber": {
                    "name": "pageNumber",
                    "setSignature": {
                        "name": "pageNumber",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 95,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "pageNumbers": {
                    "name": "pageNumbers",
                    "setSignature": {
                        "name": "pageNumbers",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 106,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ProgressCircleButtonComponent",
            "id": "component-ProgressCircleButtonComponent-f0d3b3bc1f0052501dcbf2f4439569d2",
            "file": "projects/ui-common/src/lib/buttons/progress-circle-button/progress-circle-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "seamProgressCircleButton",
            "host": {},
            "inputs": [
                "disabled",
                "theme",
                "size"
            ],
            "outputs": [],
            "providers": [],
            "selector": "button[seamProgressCircleButton]",
            "styleUrls": [
                "./progress-circle-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-circle-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fillBackground",
                    "defaultValue": "false",
                    "line": 24
                },
                {
                    "name": "hiddenOnEmpty",
                    "defaultValue": "true",
                    "line": 26
                },
                {
                    "name": "percentage",
                    "defaultValue": "100",
                    "line": 28
                },
                {
                    "name": "showText",
                    "defaultValue": "false",
                    "line": 25
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "description": "<p>ARIA type for the button. </p>\n",
                    "line": 60,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y'\nimport { Component, ElementRef, Input, OnDestroy, Renderer2 } from '@angular/core'\n\nimport { ButtonComponent } from '../button/button.component'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seamProgressCircleButton]',\n  templateUrl: './progress-circle-button.component.html',\n  styleUrls: ['./progress-circle-button.component.scss'],\n  exportAs: 'seamProgressCircleButton',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled', 'theme', 'size' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    '[attr.type]': 'type',\n    'class': 'btn',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null'\n  },\n})\nexport class ProgressCircleButtonComponent extends ButtonComponent implements OnDestroy {\n\n  @Input() fillBackground = false\n  @Input() showText = false\n  @Input() hiddenOnEmpty = true\n\n  @Input() percentage = 100\n\n  constructor(\n    _elementRef: ElementRef,\n    _focusMonitor: FocusMonitor,\n    _renderer: Renderer2\n  ) { super(_elementRef, _focusMonitor, _renderer) }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  padding-right: 45px;\n  position: relative;\n\n  &.btn-sm {\n    padding-right: 40px;\n\n    ::ng-deep .seam-progress-circle {\n      padding: 8px;\n    }\n  }\n\n  &.btn-lg {\n    padding-right: 50px;\n\n    ::ng-deep .seam-progress-circle {\n      padding: 0px;\n    }\n  }\n\n  seam-progress-circle.progress-circle-btn--icon {\n    top: 0;\n    right: 0;\n    height: 100%;\n    width: 45px;\n    position: absolute;\n  }\n}\n",
                    "styleUrl": "./progress-circle-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ButtonComponent",
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<ng-content></ng-content>\n<seam-progress-circle\n  class=\"progress-circle-btn--icon\"\n  [fillBackground]=\"fillBackground\"\n  [showText]=\"showText\"\n  [hiddenOnEmpty]=\"hiddenOnEmpty\"\n  [percentage]=\"percentage\">\n</seam-progress-circle>\n"
        },
        {
            "name": "ProgressCircleComponent",
            "id": "component-ProgressCircleComponent-270fec4459b063f5ff3361b3214cc167",
            "file": "projects/ui-common/src/lib/progress/progress-circle/progress-circle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-progress-circle",
            "styleUrls": [
                "./progress-circle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-circle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fillBackground",
                    "defaultValue": "false",
                    "line": 20
                },
                {
                    "name": "hiddenOnEmpty",
                    "defaultValue": "true",
                    "line": 22
                },
                {
                    "name": "numComplete",
                    "defaultValue": "0",
                    "line": 27
                },
                {
                    "name": "percentage",
                    "defaultValue": "null",
                    "line": 23
                },
                {
                    "name": "showText",
                    "defaultValue": "false",
                    "line": 21
                },
                {
                    "name": "total",
                    "defaultValue": "0",
                    "line": 26
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "circumference",
                    "defaultValue": "2 * Math.PI * this.radius",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "radius",
                    "defaultValue": "15",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getProgress",
                    "args": [],
                    "optional": false,
                    "returnType": "{ dashoffset: number; circumference: number; percent: any; }",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core'\n\nexport function calcDashoffset(value: number, circumference: number) {\n  const progress = value / 100\n  const dashoffset = circumference * (1 - progress)\n  return dashoffset\n}\n\nexport function calcPercentage(total: number, n: number) {\n  return total && total > 0 ? (n / total) * 100 : 0\n}\n\n@Component({\n  selector: 'seam-progress-circle',\n  templateUrl: './progress-circle.component.html',\n  styleUrls: [ './progress-circle.component.scss' ]\n})\nexport class ProgressCircleComponent implements OnInit {\n\n  @Input() fillBackground = false\n  @Input() showText = false\n  @Input() hiddenOnEmpty = true\n  @Input() percentage = null\n\n  // TODO: Consider removing the percentage calculation from this component\n  @Input() total = 0\n  @Input() numComplete = 0\n\n  public readonly radius = 15\n  public readonly circumference = 2 * Math.PI * this.radius\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  public getProgress() {\n    const percent = this.percentage !== undefined && this.percentage !== null\n      ? this.percentage : calcPercentage(this.total, this.numComplete)\n\n    return {\n      dashoffset: calcDashoffset(percent || 0, this.circumference),\n      circumference: this.circumference,\n      percent: Math.floor(percent || 0)\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/utilities';\n\n:host {\n  display: block;\n}\n\n.seam-progress-circle--absolute-fill {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.seam-progress-circle {\n  @extend .seam-progress-circle--absolute-fill;\n  padding: 5px;\n\n  .seam-progress-circle-inner {\n    position: relative;\n    height: 100%;\n    width: 100%;\n  }\n\n  .seam-progress-circle--icon-check {\n    padding-top: 4px;\n    font-size: 1.3rem;\n    line-height: 1.3rem;\n    color: $green;\n  }\n\n  .seam-progress-circle--icon-text {\n    @extend .seam-progress-circle--absolute-fill;\n    text-align: center;\n    align-items: center;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    color: $green;\n    font-size: 19px;\n    font-weight: 700;\n    transform: translateZ(0); // Move text up to transition layers\n  }\n\n  .seam-progress-circle--icon-center {\n    @extend .seam-progress-circle--absolute-fill;\n    transform-origin: center center;\n    text-align: center;\n    align-items: center;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n  }\n\n  .seam-progress-circle--icon-spinner {\n    @extend .seam-progress-circle--absolute-fill;\n    // transform-origin: center center;\n    margin: auto;\n    // transform: rotate(-90deg);\n\n    .seam-progress-circle--icon-spinner-path {\n      stroke-linecap: round;\n      stroke: $green;\n\n      transition: 500ms;\n      &:not(path) {\n        stroke-dasharray: 0;\n        // transform-origin: center center;\n        transform-origin: 40px 40px;\n        transform: rotate(-90deg);\n      }\n    }\n\n    .seam-progress-circle--icon-spinner-path-bg {\n      stroke-linecap: round;\n      stroke: lighten($green, 40%);\n      // fill: $white;\n    }\n  }\n}\n\n.seam-progress-circle--in-complete {\n  .seam-progress-circle--icon-spinner {\n    .seam-progress-circle--icon-spinner-path {\n      stroke: $orange;\n    }\n\n    .seam-progress-circle--icon-spinner-path-bg {\n      stroke: lighten($orange, 40%);\n    }\n\n    &[data-percent='0'] {\n      .seam-progress-circle--icon-spinner-path {\n        stroke: $gray-600;\n      }\n\n      .seam-progress-circle--icon-spinner-path-bg {\n        stroke: lighten($gray-600, 40%);\n      }\n    }\n  }\n}\n\n.seam-progress-circle--fill-bg {\n  .seam-progress-circle--icon-spinner-path-bg {\n    fill: $white;\n  }\n}\n",
                    "styleUrl": "./progress-circle.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 30
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"seam-progress-circle\" *ngIf=\"getProgress() as p\"\n  [class.seam-progress-circle--in-complete]=\"p.percent < 100\"\n  [class.seam-progress-circle--fill-bg]=\"fillBackground\">\n  <div class=\"seam-progress-circle-inner\">\n    <ng-container *ngIf=\"p.percent > 0 || !hiddenOnEmpty\">\n      <svg class=\"seam-progress-circle--icon-spinner\" viewBox=\"20 20 40 40\" [attr.data-percent]=\"p.percent\">\n        <circle class=\"seam-progress-circle--icon-spinner-path seam-progress-circle--icon-spinner-path-bg\" cx=\"40\" cy=\"40\" r=\"15\" fill=\"none\"\n          stroke-width=\"4\">\n        </circle>\n        <circle class=\"seam-progress-circle--icon-spinner-path\" cx=\"40\" cy=\"40\" r=\"15\" fill=\"none\"\n          stroke-width=\"4\"\n          stroke-miterlimit=\"10\"\n          [attr.stroke-dashoffset]=\"p.dashoffset\"\n          [style.stroke-dasharray]=\"p.circumference\">\n        </circle>\n        <path *ngIf=\"p.percent === 100\"\n          class=\"seam-progress-circle--icon-spinner-path\"\n          fill=\"none\"\n          stroke-width=\"4\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          d=\"M 31,42 L 38,48 L 48.5,37\">\n        </path>\n      </svg>\n    </ng-container>\n    <div class=\"seam-progress-circle--icon-text\" *ngIf=\"showText && p.percent > 0 && p.percent < 100\">\n      <span>{{ p.percent }}</span>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "RecursiveIdOneComponent",
            "id": "component-RecursiveIdOneComponent-0445e6101affbb92502f4eb9ae11a9fc",
            "file": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "recursive-id-start-1",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <div>{{ type$ | async }} : {{ id$ | async }}</div>\n  <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n  <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n  <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n  <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n</div>\n<router-outlet></router-outlet>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id$",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "nextId",
                    "defaultValue": "(Math.random() * 1 * 50).toFixed(0)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "type$",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 113
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { TheSeamFormFieldModule } from '../../../form-field/index'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router.module'\nimport { HierarchyLevelResolver } from '../resolvers/hierarchy-level.resolver'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'sub-name-ex',\n  template: `<div>Sub Name: {{ name$ | async }}</div><router-outlet></router-outlet>`,\n})\nclass StorySubNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute\n  ) {\n    console.log('sub-name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n    <router-outlet></router-outlet>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-base',\n  template: `\n    URL: {{ _router.url }}\n    <div class=\"my-2 p-2\">\n      <form class=\"mb-2\" (ngSubmit)=\"go()\">\n        <input seamInput [formControl]=\"_control\">\n      </form>\n      <button class=\"btn btn-sm btn-light\" type=\"button\" [routerLink]=\"_control.value\">Go</button>\n    </div>\n    <div>\n      <router-outlet></router-outlet>\n    </div>\n  `\n})\nclass StoryExBaseComponent {\n\n  _control = new FormControl('/name-ex/sub-name')\n\n  constructor(\n    private _route: ActivatedRoute,\n    public _router: Router\n  ) {\n    console.log('this._route', this._route)\n    console.log('this._router', this._router)\n  }\n\n  public go() {\n    this._router.navigateByUrl(this._control.value)\n  }\n}\n\n\n\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id Start\n// ////////////////////////////////////////////////////////////////////////////\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-1',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdOneComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-2',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdTwoComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    // this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-3',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <div>\n        <div>Type: {{ type$ | async }}</div>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"{{ nextId }}\">Next Random</button>\n      </div>\n    </seam-hierarchy-router-outlet>\n    <!--<router-outlet></router-outlet>-->\n  `,\n  styles: [`\n    :host {\n      display: block;\n      background: rgba(30,30,80,0.3);\n      outline: red;\n      width: 100%;\n      height: 100px;\n    }\n  `]\n})\nclass RecursiveIdThreeComponent {\n\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@NgModule({\n  declarations: [\n    RecursiveIdOneComponent,\n    RecursiveIdTwoComponent,\n    RecursiveIdThreeComponent\n  ],\n  imports: [\n    CommonModule,\n    TheSeamDynamicRouterModule,\n    RouterModule.forChild([\n      // {\n      //   path: 'table/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'table' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'new/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'new' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'edit/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'edit' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'view/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      // {\n      //   path: ':type/:id',\n      //   component: RecursiveIdTwoComponent,\n      //   // data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      {\n        path: ':type',\n        component: RecursiveIdThreeComponent,\n        resolve: {\n          hierLevel: HierarchyLevelResolver\n        },\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [ ]\n})\nclass RecursiveIdModule { }\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id End\n// ////////////////////////////////////////////////////////////////////////////\n\n\n\n@NgModule({\n  declarations: [\n    StorySubNameExComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: 'sub-name',\n        component: StorySubNameExComponent,\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [\n    StorySubNameExComponent\n  ]\n})\nclass LevelTwoModule { }\n\n\n\n\n//\n// Example\n//\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-1',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx1Component {\n  constructor() {\n    console.log('[StoryEx1Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1\">Prev</button>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2/ex-3\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx2Component {\n  constructor() {\n    console.log('[StoryEx2Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Prev</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx3Component {\n  constructor() {\n    console.log('[StoryEx3Component]')\n  }\n}\n\n\n\n\n\n\n// storiesOf('Framework/DynamicRouter', module)\n//   .addDecorator(withKnobs)\n\n//   .add('Recursive', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryNameExComponent,\n//         StoryExBaseComponent\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: 'name-ex',\n//             component: StoryNameExComponent,\n//             data: {\n//               name: 'Mark'\n//             },\n//             // loadChildren: () => Promise.resolve(LevelTwoModule)\n//             loadChildren: () => of(LevelTwoModule)\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n//         StoryNameExComponent\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <story-ex-base></story-ex-base>\n//     `\n//   }))\n\n\n//   .add('Example', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryEx1Component,\n//         StoryEx2Component,\n//         StoryEx3Component\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: '',\n//             pathMatch: 'full',\n//             redirectTo: '/ex-1',\n//           },\n//           {\n//             path: 'ex-1',\n//             component: StoryEx1Component,\n//             children: [\n//               {\n//                 path: 'ex-2',\n//                 component: StoryEx2Component,\n//                 children: [\n//                   {\n//                     path: 'ex-3',\n//                     component: StoryEx3Component\n//                   }\n//                 ]\n//               }\n//             ]\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <router-outlet></router-outlet>\n//     `\n//   }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 115,
                "jsdoctags": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "RecursiveIdThreeComponent",
            "id": "component-RecursiveIdThreeComponent-0445e6101affbb92502f4eb9ae11a9fc",
            "file": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "recursive-id-start-3",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      display: block;\n      background: rgba(30,30,80,0.3);\n      outline: red;\n      width: 100%;\n      height: 100px;\n    }\n  "
            ],
            "template": "<seam-hierarchy-router-outlet>\n  <div>\n    <div>Type: {{ type$ | async }}</div>\n    <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n    <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n    <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n    <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"{{ nextId }}\">Next Random</button>\n  </div>\n</seam-hierarchy-router-outlet>\n<!--<router-outlet></router-outlet>-->\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "nextId",
                    "defaultValue": "(Math.random() * 1 * 50).toFixed(0)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 189
                },
                {
                    "name": "type$",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 187
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { TheSeamFormFieldModule } from '../../../form-field/index'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router.module'\nimport { HierarchyLevelResolver } from '../resolvers/hierarchy-level.resolver'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'sub-name-ex',\n  template: `<div>Sub Name: {{ name$ | async }}</div><router-outlet></router-outlet>`,\n})\nclass StorySubNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute\n  ) {\n    console.log('sub-name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n    <router-outlet></router-outlet>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-base',\n  template: `\n    URL: {{ _router.url }}\n    <div class=\"my-2 p-2\">\n      <form class=\"mb-2\" (ngSubmit)=\"go()\">\n        <input seamInput [formControl]=\"_control\">\n      </form>\n      <button class=\"btn btn-sm btn-light\" type=\"button\" [routerLink]=\"_control.value\">Go</button>\n    </div>\n    <div>\n      <router-outlet></router-outlet>\n    </div>\n  `\n})\nclass StoryExBaseComponent {\n\n  _control = new FormControl('/name-ex/sub-name')\n\n  constructor(\n    private _route: ActivatedRoute,\n    public _router: Router\n  ) {\n    console.log('this._route', this._route)\n    console.log('this._router', this._router)\n  }\n\n  public go() {\n    this._router.navigateByUrl(this._control.value)\n  }\n}\n\n\n\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id Start\n// ////////////////////////////////////////////////////////////////////////////\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-1',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdOneComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-2',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdTwoComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    // this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-3',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <div>\n        <div>Type: {{ type$ | async }}</div>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"{{ nextId }}\">Next Random</button>\n      </div>\n    </seam-hierarchy-router-outlet>\n    <!--<router-outlet></router-outlet>-->\n  `,\n  styles: [`\n    :host {\n      display: block;\n      background: rgba(30,30,80,0.3);\n      outline: red;\n      width: 100%;\n      height: 100px;\n    }\n  `]\n})\nclass RecursiveIdThreeComponent {\n\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@NgModule({\n  declarations: [\n    RecursiveIdOneComponent,\n    RecursiveIdTwoComponent,\n    RecursiveIdThreeComponent\n  ],\n  imports: [\n    CommonModule,\n    TheSeamDynamicRouterModule,\n    RouterModule.forChild([\n      // {\n      //   path: 'table/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'table' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'new/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'new' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'edit/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'edit' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'view/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      // {\n      //   path: ':type/:id',\n      //   component: RecursiveIdTwoComponent,\n      //   // data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      {\n        path: ':type',\n        component: RecursiveIdThreeComponent,\n        resolve: {\n          hierLevel: HierarchyLevelResolver\n        },\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [ ]\n})\nclass RecursiveIdModule { }\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id End\n// ////////////////////////////////////////////////////////////////////////////\n\n\n\n@NgModule({\n  declarations: [\n    StorySubNameExComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: 'sub-name',\n        component: StorySubNameExComponent,\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [\n    StorySubNameExComponent\n  ]\n})\nclass LevelTwoModule { }\n\n\n\n\n//\n// Example\n//\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-1',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx1Component {\n  constructor() {\n    console.log('[StoryEx1Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1\">Prev</button>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2/ex-3\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx2Component {\n  constructor() {\n    console.log('[StoryEx2Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Prev</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx3Component {\n  constructor() {\n    console.log('[StoryEx3Component]')\n  }\n}\n\n\n\n\n\n\n// storiesOf('Framework/DynamicRouter', module)\n//   .addDecorator(withKnobs)\n\n//   .add('Recursive', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryNameExComponent,\n//         StoryExBaseComponent\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: 'name-ex',\n//             component: StoryNameExComponent,\n//             data: {\n//               name: 'Mark'\n//             },\n//             // loadChildren: () => Promise.resolve(LevelTwoModule)\n//             loadChildren: () => of(LevelTwoModule)\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n//         StoryNameExComponent\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <story-ex-base></story-ex-base>\n//     `\n//   }))\n\n\n//   .add('Example', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryEx1Component,\n//         StoryEx2Component,\n//         StoryEx3Component\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: '',\n//             pathMatch: 'full',\n//             redirectTo: '/ex-1',\n//           },\n//           {\n//             path: 'ex-1',\n//             component: StoryEx1Component,\n//             children: [\n//               {\n//                 path: 'ex-2',\n//                 component: StoryEx2Component,\n//                 children: [\n//                   {\n//                     path: 'ex-3',\n//                     component: StoryEx3Component\n//                   }\n//                 ]\n//               }\n//             ]\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <router-outlet></router-outlet>\n//     `\n//   }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      display: block;\n      background: rgba(30,30,80,0.3);\n      outline: red;\n      width: 100%;\n      height: 100px;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 189,
                "jsdoctags": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "RecursiveIdTwoComponent",
            "id": "component-RecursiveIdTwoComponent-0445e6101affbb92502f4eb9ae11a9fc",
            "file": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "recursive-id-start-2",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n  <div>{{ type$ | async }} : {{ id$ | async }}</div>\n  <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n  <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n  <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n  <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n</div>\n<router-outlet></router-outlet>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id$",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 143
                },
                {
                    "name": "nextId",
                    "defaultValue": "(Math.random() * 1 * 50).toFixed(0)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 146
                },
                {
                    "name": "type$",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 144
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { TheSeamFormFieldModule } from '../../../form-field/index'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router.module'\nimport { HierarchyLevelResolver } from '../resolvers/hierarchy-level.resolver'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'sub-name-ex',\n  template: `<div>Sub Name: {{ name$ | async }}</div><router-outlet></router-outlet>`,\n})\nclass StorySubNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute\n  ) {\n    console.log('sub-name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n    <router-outlet></router-outlet>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-base',\n  template: `\n    URL: {{ _router.url }}\n    <div class=\"my-2 p-2\">\n      <form class=\"mb-2\" (ngSubmit)=\"go()\">\n        <input seamInput [formControl]=\"_control\">\n      </form>\n      <button class=\"btn btn-sm btn-light\" type=\"button\" [routerLink]=\"_control.value\">Go</button>\n    </div>\n    <div>\n      <router-outlet></router-outlet>\n    </div>\n  `\n})\nclass StoryExBaseComponent {\n\n  _control = new FormControl('/name-ex/sub-name')\n\n  constructor(\n    private _route: ActivatedRoute,\n    public _router: Router\n  ) {\n    console.log('this._route', this._route)\n    console.log('this._router', this._router)\n  }\n\n  public go() {\n    this._router.navigateByUrl(this._control.value)\n  }\n}\n\n\n\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id Start\n// ////////////////////////////////////////////////////////////////////////////\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-1',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdOneComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-2',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdTwoComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    // this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-3',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <div>\n        <div>Type: {{ type$ | async }}</div>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"{{ nextId }}\">Next Random</button>\n      </div>\n    </seam-hierarchy-router-outlet>\n    <!--<router-outlet></router-outlet>-->\n  `,\n  styles: [`\n    :host {\n      display: block;\n      background: rgba(30,30,80,0.3);\n      outline: red;\n      width: 100%;\n      height: 100px;\n    }\n  `]\n})\nclass RecursiveIdThreeComponent {\n\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@NgModule({\n  declarations: [\n    RecursiveIdOneComponent,\n    RecursiveIdTwoComponent,\n    RecursiveIdThreeComponent\n  ],\n  imports: [\n    CommonModule,\n    TheSeamDynamicRouterModule,\n    RouterModule.forChild([\n      // {\n      //   path: 'table/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'table' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'new/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'new' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'edit/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'edit' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'view/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      // {\n      //   path: ':type/:id',\n      //   component: RecursiveIdTwoComponent,\n      //   // data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      {\n        path: ':type',\n        component: RecursiveIdThreeComponent,\n        resolve: {\n          hierLevel: HierarchyLevelResolver\n        },\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [ ]\n})\nclass RecursiveIdModule { }\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id End\n// ////////////////////////////////////////////////////////////////////////////\n\n\n\n@NgModule({\n  declarations: [\n    StorySubNameExComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: 'sub-name',\n        component: StorySubNameExComponent,\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [\n    StorySubNameExComponent\n  ]\n})\nclass LevelTwoModule { }\n\n\n\n\n//\n// Example\n//\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-1',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx1Component {\n  constructor() {\n    console.log('[StoryEx1Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1\">Prev</button>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2/ex-3\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx2Component {\n  constructor() {\n    console.log('[StoryEx2Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Prev</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx3Component {\n  constructor() {\n    console.log('[StoryEx3Component]')\n  }\n}\n\n\n\n\n\n\n// storiesOf('Framework/DynamicRouter', module)\n//   .addDecorator(withKnobs)\n\n//   .add('Recursive', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryNameExComponent,\n//         StoryExBaseComponent\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: 'name-ex',\n//             component: StoryNameExComponent,\n//             data: {\n//               name: 'Mark'\n//             },\n//             // loadChildren: () => Promise.resolve(LevelTwoModule)\n//             loadChildren: () => of(LevelTwoModule)\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n//         StoryNameExComponent\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <story-ex-base></story-ex-base>\n//     `\n//   }))\n\n\n//   .add('Example', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryEx1Component,\n//         StoryEx2Component,\n//         StoryEx3Component\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: '',\n//             pathMatch: 'full',\n//             redirectTo: '/ex-1',\n//           },\n//           {\n//             path: 'ex-1',\n//             component: StoryEx1Component,\n//             children: [\n//               {\n//                 path: 'ex-2',\n//                 component: StoryEx2Component,\n//                 children: [\n//                   {\n//                     path: 'ex-3',\n//                     component: StoryEx3Component\n//                   }\n//                 ]\n//               }\n//             ]\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <router-outlet></router-outlet>\n//     `\n//   }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 146,
                "jsdoctags": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "RouteModalComponent",
            "id": "component-RouteModalComponent-9e366be9c2ce485acc9a106fd3294f2b",
            "file": "projects/ui-common/src/lib/modal/route-modal/route-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-route-modal",
            "styleUrls": [
                "./route-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./route-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "_onDetached",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getOutletParent",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "isRouteModal",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core'\nimport { ActivatedRoute, ActivatedRouteSnapshot, Router } from '@angular/router'\n\nimport { untilDestroyed } from 'ngx-take-until-destroy'\n\n// import { ModalComponent } from '../modal/modal.component'\nimport { Modal } from '../modal.service'\n\n@Component({\n  selector: 'seam-route-modal',\n  templateUrl: './route-modal.component.html',\n  styleUrls: ['./route-modal.component.scss']\n})\nexport class RouteModalComponent implements OnInit, OnDestroy, AfterViewInit {\n\n  // @ViewChild(ModalComponent, { static: true }) _modal: ModalComponent\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router,\n    private _modal: Modal\n  ) { }\n\n  ngOnInit() {\n    this._route.data\n      .pipe(\n        untilDestroyed(this)\n      )\n      .subscribe(data => {\n        // console.log('data', data)\n        if (data.routeComponent) {\n          // console.log(this._route.snapshot)\n          const modalRef = this._modal.openFromComponent(data.routeComponent, {\n            modalSize: 'lg',\n            data\n          })\n          modalRef.afterClosed().subscribe(() => {\n            const parent = this.getOutletParent()\n            this._router.navigate(\n              [{ outlets: { modal: null, primary: ['.'] } }],\n              // { relativeTo: this._route.parent }\n              { relativeTo: parent }\n            )\n          })\n        }\n      })\n  }\n\n  ngOnDestroy() { }\n\n  ngAfterViewInit() { }\n\n  getOutletParent() {\n    let route: ActivatedRoute | null = this._route\n    while (route && route.outlet !== 'modal') { route = route.parent }\n    return route ? route.parent : route\n  }\n\n  public _onDetached() {\n    if (this.isRouteModal()) {\n      this._router.navigate(\n        [{ outlets: { modal: null, primary: ['.'] } }],\n        { relativeTo: this._route.parent }\n      )\n    }\n  }\n\n  public isRouteModal() {\n    return this._route.outlet === 'modal'\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./route-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    },
                    {
                        "name": "_modal",
                        "type": "Modal"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modal",
                        "type": "Modal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<!-- <seam-modal (overlayDetached)=\"_onDetached()\">\n  <router-outlet></router-outlet>\n</seam-modal> -->\n"
        },
        {
            "name": "SideNavComponent",
            "id": "component-SideNavComponent-e024e035e159b4fdd7e4a77c24188e08",
            "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-side-nav",
            "styleUrls": [
                "./side-nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./side-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expanded",
                    "line": 157,
                    "type": "boolean"
                },
                {
                    "name": "hasHeaderToggle",
                    "defaultValue": "true",
                    "line": 148
                },
                {
                    "name": "items",
                    "line": 151,
                    "type": "ISideNavItem[]"
                },
                {
                    "name": "overlay",
                    "line": 163,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_backdropHidden",
                    "defaultValue": "new BehaviorSubject<boolean>(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 170,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_expanded",
                    "defaultValue": "new BehaviorSubject<boolean>(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 159,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_items",
                    "defaultValue": "new BehaviorSubject<ISideNavItem[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 153,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_overlay",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 165,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "expanded$",
                    "defaultValue": "this._expanded.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 160,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isMobile$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 168,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "items$",
                    "defaultValue": "this._items.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 154,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "overlay$",
                    "defaultValue": "this._overlay.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 166,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sideNavExpandedState$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 169,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "animateEnd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "animateStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "collapse",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "expand",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "@sideNavAnim",
                    "defaultValue": "'initial'",
                    "line": 146
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  animate,\n  animateChild,\n  animation,\n  group,\n  keyframes,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n  useAnimation,\n} from '@angular/animations'\nimport { coerceBooleanProperty } from '@angular/cdk/coercion'\nimport { ChangeDetectionStrategy, Component, HostBinding, Inject, Input, OnDestroy, OnInit, Optional } from '@angular/core'\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router'\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs'\nimport { distinctUntilChanged, filter, map, mapTo, pairwise, startWith, tap } from 'rxjs/operators'\n\nimport { untilDestroyed } from 'ngx-take-until-destroy'\n\nimport { TheSeamLayoutService } from '../../layout/index'\nimport { ITheSeamBaseLayoutNav, ITheSeamBaseLayoutRef, THESEAM_BASE_LAYOUT_REF } from '../base-layout/index'\n\nimport { ISideNavItem } from './side-nav.models'\n\nconst EXPANDED_STATE = 'expanded'\nconst COLLAPSED_STATE = 'collapsed'\n\nconst EXPANDED_OVERLAY_STATE = 'expanded-overlay'\nconst COLLAPSED_OVERLAY_STATE = 'collapsed-overlay'\n\nconst EXPANDED_STATES = [ EXPANDED_STATE, EXPANDED_OVERLAY_STATE ]\nconst COLLAPSED_STATES = [ COLLAPSED_STATE, COLLAPSED_OVERLAY_STATE ]\nconst EXPAND_STATES = [ ...EXPANDED_STATES, ...COLLAPSED_STATES ]\n\nexport function sideNavExpandStateChangeFn(fromState: string, toState: string) {\n  // console.log({ fromState, toState })\n  return fromState !== toState &&\n    (\n      // NOTE: The current way the side nav is being used it causes the\n      // component to sometimes get placed in the wrong location initially. It\n      // is fast enough to not be noticed without an initial animation usually,\n      // so it is commented out below until the initial placement issue it\n      // fixed.\n      //\n      // (\n      //   fromState === 'void' && EXPAND_STATES.indexOf(toState) !== -1\n      //   ||\n      //   toState === 'void' && EXPAND_STATES.indexOf(fromState) !== -1\n      // )\n      // ||\n      (\n        (EXPANDED_STATES.indexOf(fromState) !== -1 && COLLAPSED_STATES.indexOf(toState) !== -1)\n        ||\n        (EXPANDED_STATES.indexOf(toState) !== -1 && COLLAPSED_STATES.indexOf(fromState) !== -1)\n      )\n    )\n}\n\n@Component({\n  selector: 'seam-side-nav',\n  templateUrl: './side-nav.component.html',\n  styleUrls: ['./side-nav.component.scss'],\n  animations: [\n\n    //\n    // TODO: This animation code turned into a mess. Clean it up and make it\n    // more smooth.\n    //\n\n    trigger('sideNavAnim', [\n      transition(sideNavExpandStateChangeFn, [\n        group([\n          query('@sideNavBackdrop', animateChild(), { optional: true }),\n          query('@sideNavExpand', animateChild(), { optional: true }),\n        ]),\n      ]),\n    ]),\n\n    trigger('sideNavBackdrop', [\n      state(EXPANDED_OVERLAY_STATE, style({ opacity: '1' })),\n      state(COLLAPSED_OVERLAY_STATE, style({ opacity: '0' })),\n\n      // transition((fromState, toState, element, params) => {\n      //   console.log('sideNavBackdrop v', fromState, toState, element, params)\n      //   return false\n      // }, []),\n\n      transition(sideNavExpandStateChangeFn, animate('0.2s ease-in-out')),\n    ]),\n\n    trigger('sideNavExpand', [\n      // TODO: Make width configurable.\n      state(EXPANDED_STATE, style({ width: '260px' })),\n      state(COLLAPSED_STATE, style({ width: '50px', 'overflow-x': 'hidden' })),\n\n      state(EXPANDED_OVERLAY_STATE, style({\n        position: 'absolute',\n        top: 0,\n        height: '100%',\n        bottom: 0,\n        left: 0,\n        float: 'left',\n        zIndex: '9999',\n        width: 'calc(100vw - 50px)',\n        transform: 'translateX(0)'\n      })),\n      state(COLLAPSED_OVERLAY_STATE, style({\n        position: 'absolute',\n        top: 0,\n        height: '100%',\n        bottom: 0,\n        left: 0,\n        float: 'left',\n        zIndex: '9999',\n        width: 'calc(100vw - 50px)',\n        transform: 'translateX(calc(-100vw + 50px))',\n        'overflow-x': 'hidden'\n      })),\n\n      // transition(`${EXPANDED_STATE} <=> ${COLLAPSED_STATE}`, animate('0.2s ease-in-out')),\n\n      transition(sideNavExpandStateChangeFn, animate('0.2s ease-in-out')),\n\n      // transition(`${EXPANDED_STATE} <=> ${COLLAPSED_STATE}`, [\n      //   // query(':leave', animateChild(), { optional: true }),\n      //   // query(':enter', animateChild(), { optional: true }),\n      //   group([\n      //     query(':leave', animateChild(), { optional: true }),\n      //     query(':enter', animateChild(), { optional: true }),\n      //     query('@compactAnim', animateChild(), { optional: true }),\n      //     animate('5.2s ease-in-out')\n      //   ])\n      // ]),\n    ])\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SideNavComponent implements OnInit, OnDestroy, ITheSeamBaseLayoutNav {\n\n  // @HostBinding('@sideNavExpand') _sideNavExpand = EXPANDED_STATE\n  // _sideNavExpand = EXPANDED_STATE\n\n  // @HostBinding('@sideNavAnim') _sideNavExpand = EXPANDED_STATE\n  @HostBinding('@sideNavAnim') _sideNavExpand = 'initial'\n\n  @Input() hasHeaderToggle = true\n\n  @Input()\n  get items(): ISideNavItem[] { return this._items.value }\n  set items(value: ISideNavItem[]) { this._items.next(value) }\n  private _items = new BehaviorSubject<ISideNavItem[]>([])\n  public items$ = this._items.asObservable()\n\n  @Input()\n  get expanded(): boolean { return this._expanded.value }\n  set expanded(value: boolean) { this._expanded.next(coerceBooleanProperty(value)) }\n  private _expanded = new BehaviorSubject<boolean>(true)\n  public expanded$ = this._expanded.asObservable()\n\n  @Input()\n  get overlay(): boolean { return this._overlay.value }\n  set overlay(value: boolean) { this._overlay.next(coerceBooleanProperty(value)) }\n  private _overlay = new BehaviorSubject<boolean>(false)\n  public overlay$ = this._overlay.asObservable()\n\n  public isMobile$: Observable<boolean>\n  public sideNavExpandedState$: Observable<string>\n  public _backdropHidden = new BehaviorSubject<boolean>(true)\n\n  constructor(\n    private _router: Router,\n    private activatedRoute: ActivatedRoute,\n    private _layout: TheSeamLayoutService,\n    @Optional() @Inject(THESEAM_BASE_LAYOUT_REF) private _baseLayoutRef: ITheSeamBaseLayoutRef\n  ) { }\n\n  ngOnInit() {\n    if (this._baseLayoutRef) { this._baseLayoutRef.registerNav(this) }\n\n    this.isMobile$ = this._layout.isMobile$\n      .pipe(tap(isMobile => isMobile && this.collapse()))\n\n    const routed$ = this._router.events\n      .pipe(\n        filter(e => e instanceof NavigationEnd),\n        mapTo(undefined)\n      )\n\n    combineLatest(this.items$, routed$.pipe(startWith(undefined)))\n      .pipe(\n        map(v => v[0]),\n        map(items => {\n          const checkNode = node => {\n            if (node.children) {\n              for (const _n of node.children) {\n                checkNode(_n)\n              }\n            }\n          }\n\n          for (const _n of items) {\n            checkNode(_n)\n          }\n        })\n      )\n      .subscribe()\n\n    this.isMobile$\n      .pipe(untilDestroyed(this))\n      .subscribe(b => this.overlay = b)\n\n    this.sideNavExpandedState$ = combineLatest([ this.expanded$, this.overlay$ ])\n      .pipe(\n        map(([ expanded, overlay ]) => expanded\n          ? overlay ? EXPANDED_OVERLAY_STATE : EXPANDED_STATE\n          : overlay ? COLLAPSED_OVERLAY_STATE : COLLAPSED_STATE\n        ),\n        distinctUntilChanged()\n      )\n\n    this.sideNavExpandedState$\n      .pipe(untilDestroyed(this))\n      .subscribe(v => this._sideNavExpand = v)\n  }\n\n  ngOnDestroy() {\n    if (this._baseLayoutRef) { this._baseLayoutRef.unregisterNav(this) }\n  }\n\n  public expand() {\n    this.expanded = true\n  }\n\n  public collapse() {\n    this.expanded = false\n  }\n\n  public toggle() {\n    this.expanded = !this.expanded\n  }\n\n  public animateStart() {\n    if (this.expanded) {\n      this._backdropHidden.next(false)\n    }\n  }\n\n  public animateEnd() {\n    if (!this.expanded) {\n      this._backdropHidden.next(true)\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './styles/utilities';\n\n:host {\n  display: block;\n  height: 100%;\n\n  // Prevent main page content layer overlapping the side-nav while animating.\n  position: relative;\n  z-index: 2;\n\n  .side-nav-inner-wrapper {\n    background-color: $seam-side-nav-bg-color;\n    height: 100%;\n  }\n\n  .side-nav-backdrop {\n    background-color: $seam-side-nav-background-bg-color;\n    width: 100vw;\n    height: 100vh;\n\n    &.side-nav-backdrop-hidden {\n      display: none;\n      width: 0;\n      height: 0;\n      padding: 0;\n      margin: 0;\n    }\n  }\n\n  overflow: hidden;\n}\n\n.side-nav-content {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  flex-wrap: nowrap;\n}\n\n.side-nav-items-container {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  flex: 1 1 100%;\n}\n",
                    "styleUrl": "./side-nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_layout",
                        "type": "TheSeamLayoutService"
                    },
                    {
                        "name": "_baseLayoutRef",
                        "type": "ITheSeamBaseLayoutRef"
                    }
                ],
                "line": 170,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_layout",
                        "type": "TheSeamLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_baseLayoutRef",
                        "type": "ITheSeamBaseLayoutRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "ITheSeamBaseLayoutNav"
            ],
            "accessors": {
                "items": {
                    "name": "items",
                    "setSignature": {
                        "name": "items",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 152,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "expanded": {
                    "name": "expanded",
                    "setSignature": {
                        "name": "expanded",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 158,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "overlay": {
                    "name": "overlay",
                    "setSignature": {
                        "name": "overlay",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 164,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"side-nav-backdrop\" *ngIf=\"isMobile$ | async\"\n  [@sideNavBackdrop]=\"_sideNavExpand\"\n  [class.side-nav-backdrop-hidden]=\"_backdropHidden | async\"></div>\n\n<div class=\"side-nav-inner-wrapper\" [@sideNavExpand]=\"_sideNavExpand\"\n  (@sideNavExpand.start)=\"animateStart()\"\n  (@sideNavExpand.done)=\"animateEnd()\">\n  <nav class=\"nav side-nav-content\">\n    <seam-side-nav-toggle *ngIf=\"hasHeaderToggle\"\n      [expanded]=\"expanded$ | async\"\n      (toggleExpand)=\"toggle()\">\n    </seam-side-nav-toggle>\n    <div class=\"side-nav-items-container\" seamOverlayScrollbar>\n      <seam-side-nav-item *ngFor=\"let item of items$ | async\"\n        [compact]=\"!(expanded$ | async)\"\n        [itemType]=\"item.itemType\"\n        [icon]=\"item.icon\"\n        [label]=\"item.label\"\n        [link]=\"item.link\"\n        [queryParams]=\"item.queryParams\"\n        [children]=\"item.children\">\n      </seam-side-nav-item>\n    </div>\n  </nav>\n</div>\n"
        },
        {
            "name": "SideNavItemComponent",
            "id": "component-SideNavItemComponent-b143811ee4196d174767f65727a7d62f",
            "file": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "seamSideNavItem",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-side-nav-item",
            "styleUrls": [
                "./side-nav-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./side-nav-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "children",
                    "line": 105,
                    "type": "ISideNavItem[]"
                },
                {
                    "name": "compact",
                    "line": 121,
                    "type": ""
                },
                {
                    "name": "expanded",
                    "line": 115,
                    "type": ""
                },
                {
                    "name": "hierLevel",
                    "line": 108,
                    "type": "number"
                },
                {
                    "name": "icon",
                    "line": 93,
                    "type": "SeamIcon"
                },
                {
                    "name": "indentSize",
                    "defaultValue": "10",
                    "line": 112
                },
                {
                    "name": "itemType",
                    "line": 91,
                    "type": "\"divider\" | \"basic\" | \"link\" | \"button\" | \"title\""
                },
                {
                    "name": "label",
                    "line": 95,
                    "type": "string"
                },
                {
                    "name": "link",
                    "line": 98,
                    "type": ""
                },
                {
                    "name": "queryParams",
                    "line": 103,
                    "type": "literal type"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_compact",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 123,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_expanded",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_hierLevel",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_initializad",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_link",
                    "defaultValue": "new BehaviorSubject<string | undefined>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_registeredChildren",
                    "defaultValue": "new BehaviorSubject<SideNavItemComponent[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "childGroupAnimState$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 127,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "compact$",
                    "defaultValue": "this._compact.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 124,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "compactAnimState$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 128,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "expanded$",
                    "defaultValue": "this._expanded.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "faAngleLeft",
                    "defaultValue": "faAngleLeft",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "hasActiveChild$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 129,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isActive$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 126,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "link$",
                    "defaultValue": "this._link.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_linkClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229
                },
                {
                    "name": "_registerChild",
                    "args": [
                        {
                            "name": "child",
                            "type": "SideNavItemComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "jsdoctags": [
                        {
                            "name": "child",
                            "type": "SideNavItemComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_unregisterChild",
                    "args": [
                        {
                            "name": "child",
                            "type": "SideNavItemComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "jsdoctags": [
                        {
                            "name": "child",
                            "type": "SideNavItemComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162
                },
                {
                    "name": "toggleChildren",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  animate,\n  animateChild,\n  group,\n  keyframes,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations'\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion'\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Host,\n  Input,\n  isDevMode,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Renderer2,\n  SkipSelf\n} from '@angular/core'\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs'\nimport { auditTime, distinctUntilChanged, map, switchMap, take, tap } from 'rxjs/operators'\n\nimport { faAngleLeft } from '@fortawesome/free-solid-svg-icons'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\n\nimport { SeamIcon } from '../../../icon/index'\nimport { RouterHelpersService } from '../../../services/router-helpers.service'\n\nimport { SideNavComponent } from '../side-nav.component'\nimport { ISideNavItem } from '../side-nav.models'\n\nconst EXPANDED_STATE = 'expanded'\nconst COLLAPSED_STATE = 'collapsed'\n\nconst FULL_STATE = 'full'\nconst COMPACT_STATE = 'compact'\n\n@Component({\n  selector: 'seam-side-nav-item',\n  templateUrl: './side-nav-item.component.html',\n  styleUrls: ['./side-nav-item.component.scss'],\n  exportAs: 'seamSideNavItem',\n  animations: [\n    trigger('childGroupAnim', [\n      state(EXPANDED_STATE, style({ height: '*' })),\n      state(COLLAPSED_STATE, style({ height: 0, 'overflow-y': 'hidden', visibility: 'hidden' })),\n      transition(`${EXPANDED_STATE} <=> ${COLLAPSED_STATE}`, animate('0.2s ease-in-out')),\n    ]),\n\n\n    trigger('compactAnim', [\n      // transition('* <=> *', [\n      //   query(':enter', [\n      //     style({ opacity: '0' }),\n      //     animate('5.2s ease-in-out', style({ opacity: '1' }))\n      //   ], { optional: true }),\n      //   query(':leave', [\n      //     style({ opacity: '1' }),\n      //     animate('5.2s ease-in-out', style({ opacity: '0' }))\n      //   ], { optional: true })\n      // ])\n\n      // state(FULL_STATE, style({ opacity: '1' })),\n      // state(COMPACT_STATE, style({ opacity: '0' })),\n      // transition(`${FULL_STATE} <=> ${COMPACT_STATE}`, animate('5.2s ease-in-out')),\n      // transition(`${FULL_STATE} <=> ${COMPACT_STATE}`, [\n      // transition('* <=> *', [\n      //   query(':leave', [\n      //     style({ opacity: '1' }),\n      //     animate('5.2s ease-in-out', style({ opacity: '0' }))\n      //   ], { optional: true })\n      // ]),\n\n\n    ])\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SideNavItemComponent implements OnInit, OnDestroy {\n\n  faAngleLeft = faAngleLeft\n\n  private _initializad = false\n\n  @Input() itemType: 'divider' | 'basic' | 'link' | 'button' | 'title'\n\n  @Input() icon?: SeamIcon\n\n  @Input() label: string\n\n  @Input()\n  set link(value: string | undefined) { this._link.next(value) }\n  get link() { return this._link.value }\n  private _link = new BehaviorSubject<string | undefined>(undefined)\n  public link$ = this._link.asObservable()\n\n  @Input() queryParams?: { [k: string]: any }\n\n  @Input() children?: ISideNavItem[]\n\n  @Input()\n  set hierLevel(value: number) { this._hierLevel = coerceNumberProperty(value, 0) }\n  get hierLevel(): number { return this._hierLevel }\n  private _hierLevel = 0\n\n  @Input() indentSize = 10\n\n  @Input()\n  set expanded(value: boolean | undefined) { this._expanded.next(coerceBooleanProperty(value)) }\n  get expanded() { return this._expanded.value }\n  private _expanded = new BehaviorSubject<boolean>(false)\n  public expanded$ = this._expanded.asObservable()\n\n  @Input()\n  set compact(value: boolean | undefined) { this._compact.next(coerceBooleanProperty(value)) }\n  get compact() { return this._compact.value }\n  private _compact = new BehaviorSubject<boolean>(false)\n  public compact$ = this._compact.asObservable()\n\n  public isActive$: Observable<boolean>\n  public childGroupAnimState$: Observable<string>\n  public compactAnimState$: Observable<string>\n  public hasActiveChild$: Observable<boolean>\n\n  private _registeredChildren = new BehaviorSubject<SideNavItemComponent[]>([])\n\n  constructor(\n    private _routerHelpers: RouterHelpersService,\n    private _renderer: Renderer2,\n    private _element: ElementRef,\n    private _sideNav: SideNavComponent,\n    @Optional() @SkipSelf() @Host() private _parent?: SideNavItemComponent\n  ) {\n\n    this.hasActiveChild$ = this._registeredChildren.pipe(\n      switchMap(children => Array.isArray(children) && children.length > 0\n        ? combineLatest(children.map(c => c.isActive$)) : of([])\n      ),\n      auditTime(0),\n      map(v => v.findIndex(b => !!b) !== -1),\n      distinctUntilChanged()\n    )\n\n    this.isActive$ = this.link$.pipe(\n      switchMap(link => link ? this._routerHelpers.isActive(link, true) : of(false)),\n    )\n\n    this.childGroupAnimState$ = this.expanded$\n      .pipe(map(expanded => expanded ? EXPANDED_STATE : COLLAPSED_STATE))\n\n    this.compactAnimState$ = this.compact$\n      .pipe(map(compact => compact ? COMPACT_STATE : FULL_STATE))\n      // .pipe(tap(compact => console.log('compactState', compact)))\n  }\n\n  ngOnInit() {\n    if (this._parent) { this._parent._registerChild(this) }\n\n    const isActive2 = combineLatest(this.hasActiveChild$, this.expanded$, this.isActive$).pipe(\n      map(([ hasActiveChild, expanded, isActive]) => {\n        if (!expanded && hasActiveChild) {\n          return true\n        }\n        return isActive\n      })\n    )\n\n    isActive2\n      .pipe(untilDestroyed(this))\n      .subscribe(isActive => {\n        const c = 'seam-side-nav-item--active'\n        if (isActive) {\n          this._renderer.addClass(this._element.nativeElement, c)\n        } else {\n          this._renderer.removeClass(this._element.nativeElement, c)\n        }\n      })\n\n    // TODO: Make parent nodes of active child expanded on initialization.\n    //\n    // This worked for children of root nodes only. This will probably not work\n    // in a clean way from the node components only, because the child\n    // components are rendered as needed and register with the parent component\n    // when it initializes.\n    this.hasActiveChild$.pipe(\n      take(1),\n      // tap(hasChildren => console.log('hasChildren', hasChildren)),\n      tap(() => {\n        if (isDevMode() && this.hierLevel > 1) {\n          console.warn(\n            '[SideNavItem] SideNav has a bug expanding nodes to the active node ' +\n            'when it initializes. Initial side nav state may be incorrect until ' +\n            'fixed.'\n          )\n        }\n      }),\n      tap(hasChildren => hasChildren ? this.expanded = true : false)\n    ).subscribe()\n  }\n\n  ngOnDestroy() {\n    if (this._parent) { this._parent._unregisterChild(this) }\n  }\n\n  get hasChildren() {\n    return Array.isArray(this.children) && this.children.length > 0\n  }\n\n  public toggleChildren(): void {\n    this.expanded = !this.expanded\n  }\n\n  _registerChild(child: SideNavItemComponent) {\n    const children = this._registeredChildren.value\n    this._registeredChildren.next([ ...children, child ])\n  }\n\n  _unregisterChild(child: SideNavItemComponent) {\n    const children = this._registeredChildren.value.filter(c => c !== child)\n    this._registeredChildren.next([ ...children ])\n  }\n\n  _linkClicked() {\n    // Close nav when link is clicked while in overlay state\n    if (this._sideNav.overlay) {\n      this._sideNav.collapse()\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles/utilities';\n\n:host {\n  display: block;\n\n  transition: 250ms ease-in-out background-color;\n  &.seam-side-nav-item--active {\n    background-color: $seam-side-nav-item-bg-color-active;\n\n    .active,\n    &:active {\n      background-color: $seam-side-nav-item-bg-color-active;\n    }\n\n    .side-nav-item {\n      &:hover {\n        background-color: $seam-side-nav-item-bg-color-hover;\n      }\n    }\n\n    .nav-link {\n      color: $seam-side-nav-item-color-active;\n    }\n  }\n}\n\n.side-nav-item--icon {\n  width: 24px;\n  max-width: 24px;\n  min-width: 24px;\n  height: 24px;\n  max-height: 24px;\n  min-height: 24px;\n  text-align: center;\n}\n\n.side-nav-item {\n  min-height: 45px;\n  transition: 250ms ease-in-out background-color;\n\n  &:hover {\n    background-color: $seam-side-nav-item-bg-color-hover;\n  }\n\n  &.active {\n    pointer-events: none;\n    cursor: default;\n  }\n}\n\na.side-nav-item:not([href]):not([tabindex]) {\n  color: $seam-side-nav-item-disabled-color;\n\n  &:hover {\n    background-color: transparent;\n  }\n}\n\n.nav-link {\n  color: $seam-side-nav-item-color;\n}\n\n.side-nav-btn {\n  font-weight: $font-weight-normal;\n  color: $seam-side-nav-item-color;\n  text-decoration: $link-decoration;\n\n  @include hover {\n    color: $seam-side-nav-item-bg-color-hover;\n    text-decoration: $link-hover-decoration;\n  }\n\n  &:focus,\n  &.focus {\n    text-decoration: $link-hover-decoration;\n    box-shadow: none;\n  }\n\n  &:disabled,\n  &.disabled {\n    color: $seam-side-nav-item-disabled-color;\n    pointer-events: none;\n  }\n}\n\n// Add the button focus like a link when navigating with keyboard.\n.cdk-keyboard-focused {\n  // outline: -webkit-focus-ring-color auto 1px;\n  outline: 1px dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n}\n\n.side-nav-item--toggle-btn-container {\n  transition: 250ms ease-in-out background-color;\n  padding: 0.5rem 1rem;\n}\nbutton.side-nav-item--toggle-btn-container {\n  &:hover {\n    background-color: $seam-side-nav-item-bg-color-hover;\n  }\n}\n\n.side-nav-item--toggle-btn {\n  color: $seam-side-nav-item-color-active;\n\n  ::ng-deep .svg-inline--fa {\n    transition: 100ms ease-in-out transform;\n  }\n\n  &.side-nav-item--toggle-btn-expanded {\n    ::ng-deep .svg-inline--fa {\n      transform: rotate(-90deg);\n    }\n  }\n}\n\n.side-nav--group {\n  will-change: height;\n  overflow: hidden;\n}\n\n@for $i from 1 through 9 {\n  .side-nav--group--level-#{$i} {\n    background-color: darken($seam-side-nav-bg-color, ($i * $seam-side-nav-group-bg-variation-amount));\n  }\n}\n\n.side-nav-item--divider {\n  display: block;\n  border-top: $seam-side-nav-divider-size solid $seam-side-nav-divider-color;\n  width: 100%;\n}\n\n.side-nav-item--title {\n  color: $seam-side-nav-title-color;\n  font-size: $seam-side-nav-title-font-size;\n  padding-left: $seam-side-nav-title-padding-left;\n}\n",
                    "styleUrl": "./side-nav-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_routerHelpers",
                        "type": "RouterHelpersService"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_sideNav",
                        "type": "SideNavComponent"
                    },
                    {
                        "name": "_parent",
                        "type": "SideNavItemComponent",
                        "optional": true
                    }
                ],
                "line": 131,
                "jsdoctags": [
                    {
                        "name": "_routerHelpers",
                        "type": "RouterHelpersService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_sideNav",
                        "type": "SideNavComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_parent",
                        "type": "SideNavItemComponent",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "link": {
                    "name": "link",
                    "setSignature": {
                        "name": "link",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 98,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "link",
                        "type": "",
                        "returnType": "",
                        "line": 99
                    }
                },
                "hierLevel": {
                    "name": "hierLevel",
                    "setSignature": {
                        "name": "hierLevel",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 108,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "hierLevel",
                        "type": "number",
                        "returnType": "number",
                        "line": 109
                    }
                },
                "expanded": {
                    "name": "expanded",
                    "setSignature": {
                        "name": "expanded",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 115,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "expanded",
                        "type": "",
                        "returnType": "",
                        "line": 116
                    }
                },
                "compact": {
                    "name": "compact",
                    "setSignature": {
                        "name": "compact",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 121,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "compact",
                        "type": "",
                        "returnType": "",
                        "line": 122
                    }
                },
                "hasChildren": {
                    "name": "hasChildren",
                    "getSignature": {
                        "name": "hasChildren",
                        "type": "",
                        "returnType": "",
                        "line": 211
                    }
                }
            },
            "templateData": "<div class=\"d-flex flex-row\">\n  <ng-container *ngIf=\"itemType === 'basic'\">\n    <ng-template [ngTemplateOutlet]=\"itemTypeBasic\"></ng-template>\n  </ng-container>\n  <ng-container *ngIf=\"itemType === 'link'\">\n    <ng-template [ngTemplateOutlet]=\"itemTypeLink\"></ng-template>\n  </ng-container>\n  <ng-container *ngIf=\"itemType === 'divider'\">\n    <ng-template [ngTemplateOutlet]=\"itemTypeDivider\"></ng-template>\n  </ng-container>\n  <ng-container *ngIf=\"itemType === 'title'\">\n    <ng-template [ngTemplateOutlet]=\"itemTypeTitle\"></ng-template>\n  </ng-container>\n</div>\n\n<ng-container *ngIf=\"hasChildren\">\n  <div class=\"side-nav--group side-nav--group--level-{{ hierLevel + 1 }}\"\n    [@childGroupAnim]=\"childGroupAnimState$ | async\">\n    <seam-side-nav-item *ngFor=\"let child of children\"\n      [hierLevel]=\"compact ? 0 : (hierLevel + 1)\"\n      [compact]=\"compact\"\n      [itemType]=\"child.itemType\"\n      [icon]=\"child.icon\"\n      [label]=\"child.label\"\n      [link]=\"child.link\"\n      [queryParams]=\"child.queryParams\"\n      routerLinkActive=\"active\"\n      [routerLinkActiveOptions]=\"{ exact: true }\"\n      [children]=\"child.children\">\n    </seam-side-nav-item>\n  </div>\n</ng-container>\n\n<ng-template #itemTypeBasic>\n  <button class=\"side-nav-item btn side-nav-btn p-0 d-flex flex-row rounded-0 text-decoration-none text-nowrap w-100\"\n    cdkMonitorElementFocus\n    (click)=\"toggleChildren()\"\n    [attr.aria-expanded]=\"expanded\">\n    <div class=\"nav-link d-flex flex-row w-100\" [class.pr-0]=\"compact\">\n      <div [style.padding-left.px]=\"hierLevel * indentSize\"></div>\n      <div class=\"side-nav-item--icon\">\n        <seam-icon *ngIf=\"icon\" [icon]=\"icon\"></seam-icon>\n      </div>\n      <!-- NOTE: This is temporarily formatted oddly while fixing animation. -->\n      <span style=\"margin-left: 11px;\" [@compactAnim]=\"compactAnimState$ | async\">\n        <span *ngIf=\"!compact\">\n          {{ label }}\n        </span>\n      </span>\n      <span *ngIf=\"compact\" class=\"sr-only\">{{ label }}</span>\n    </div>\n\n    <div *ngIf=\"hasChildren && !compact\"\n      class=\"btn side-nav-btn side-nav-item--toggle-btn-container rounded-0 side-nav-item--icon\">\n      <seam-icon\n        class=\"side-nav-item--toggle-btn\"\n        [class.side-nav-item--toggle-btn-expanded]=\"expanded\"\n        [icon]=\"faAngleLeft\"\n        type>\n      </seam-icon>\n    </div>\n  </button>\n</ng-template>\n\n<ng-template #itemTypeLink>\n  <a *ngIf=\"link; else noLink\" class=\"side-nav-item nav-link d-flex flex-row text-nowrap w-100\"\n    [class.pr-0]=\"compact\"\n    [routerLink]=\"link\"\n    [queryParams]=\"queryParams\"\n    routerLinkActive=\"active\"\n    [routerLinkActiveOptions]=\"{ exact: true }\"\n    (click)=\"_linkClicked()\">\n    <div [style.padding-left.px]=\"hierLevel * indentSize\"></div>\n    <div class=\"side-nav-item--icon\">\n      <seam-icon *ngIf=\"icon\" [icon]=\"icon\"></seam-icon>\n    </div>\n    <span *ngIf=\"!compact\" style=\"margin-left: 11px;\">\n      {{ label }}\n    </span>\n    <span *ngIf=\"compact\" class=\"sr-only\">{{ label }}</span>\n  </a>\n\n  <ng-template #noLink>\n    <a class=\"side-nav-item nav-link d-flex flex-row text-nowrap w-100\" [class.pr-0]=\"compact\">\n      <div [style.padding-left.px]=\"hierLevel * indentSize\"></div>\n      <div class=\"side-nav-item--icon\">\n        <seam-icon *ngIf=\"icon\" [icon]=\"icon\"></seam-icon>\n      </div>\n      <span *ngIf=\"!compact\" style=\"margin-left: 11px;\">\n        {{ label }}\n      </span>\n      <span *ngIf=\"compact\" class=\"sr-only\">{{ label }}</span>\n    </a>\n  </ng-template>\n\n  <button *ngIf=\"hasChildren && !compact\"\n    type=\"button\"\n    class=\"btn side-nav-btn side-nav-item--toggle-btn-container rounded-0\"\n    (click)=\"toggleChildren()\"\n    [attr.aria-expanded]=\"expanded\"\n    cdkMonitorElementFocus>\n    <seam-icon\n      class=\"side-nav-item--toggle-btn\"\n      [class.side-nav-item--toggle-btn-expanded]=\"expanded\"\n      [icon]=\"faAngleLeft\"\n      type>\n    </seam-icon>\n    <span class=\"sr-only\">Group Toggle</span>\n  </button>\n</ng-template>\n\n<ng-template #itemTypeDivider>\n  <div class=\"px-2 w-100\">\n    <hr class=\"side-nav-item--divider\" />\n  </div>\n</ng-template>\n\n<ng-template #itemTypeTitle>\n  <ng-container *ngIf=\"!compact\">\n    <span class=\"side-nav-item--title pt-1\">{{ label }}</span>\n  </ng-container>\n</ng-template>\n"
        },
        {
            "name": "SideNavToggleComponent",
            "id": "component-SideNavToggleComponent-128e092988e2b503ee5521223b8fb5cd",
            "file": "projects/ui-common/src/lib/framework/side-nav/side-nav-toggle/side-nav-toggle.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-side-nav-toggle",
            "styleUrls": [
                "./side-nav-toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./side-nav-toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expanded",
                    "defaultValue": "false",
                    "line": 18
                }
            ],
            "outputsClass": [
                {
                    "name": "toggleExpand",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faBars",
                    "defaultValue": "faBars",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Host, Input, OnInit, Optional, Output, SkipSelf } from '@angular/core'\n\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\n\n@Component({\n  selector: 'seam-side-nav-toggle',\n  templateUrl: './side-nav-toggle.component.html',\n  styleUrls: ['./side-nav-toggle.component.scss'],\n  host: {\n    '[class.side-nav-toggle--compact]': '!expanded'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SideNavToggleComponent implements OnInit {\n\n  faBars = faBars\n\n  @Input() expanded = false\n\n  @Output() toggleExpand = new EventEmitter<void>()\n\n  constructor() { }\n\n  ngOnInit() { }\n\n  toggle() {\n    this.toggleExpand.emit()\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles/utilities';\n\n:host {\n  display: flex;\n  flex-direction: row;\n  flex-shrink: 0;\n\n  // &.side-nav-toggle--compact {\n  //   width: 50px;\n  // }\n  position: relative;\n  height: 45px;\n  width: 100%;\n}\n\n.side-nav-toggle--content {\n  flex: 1 1 0;\n}\n\n.side-nav-toggle--btn {\n  // flex: 0 0 auto;\n  // align-self: flex-end;\n  position: absolute;\n  top: 0;\n  right: 5px;\n  color: $seam-side-nav-toggle-btn-color;\n\n  ::ng-deep seam-icon {\n      padding: 5px;\n  }\n}\n",
                    "styleUrl": "./side-nav-toggle.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"side-nav-toggle--content\" *ngIf=\"expanded\">\n  <ng-content></ng-content>\n</div>\n<button seamIconBtn [icon]=\"faBars\"\n  iconType=\"borderless-styled-square\"\n  btnSize=\"sm\"\n  class=\"side-nav-toggle--btn ml-1\"\n  (click)=\"toggle()\">\n  <span class=\"sr-only\">Toggle sidebar</span>\n</button>\n"
        },
        {
            "name": "StoryEmptyComponent",
            "id": "component-StoryEmptyComponent-0d5b42cb32eea5054905fb9585774a35",
            "file": "projects/ui-common/src/lib/story-helpers/story-empty.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\n\n@Component({ template: `` })\nexport class StoryEmptyComponent { }\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoryEmptyWithRouteComponent",
            "id": "component-StoryEmptyWithRouteComponent-526b1c4eed1287cbc4291ecdfceff572",
            "file": "projects/ui-common/src/lib/story-helpers/story-empty-with-route.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<router-outlet></router-outlet>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\n\n@Component({ template: `<router-outlet></router-outlet>` })\nexport class StoryEmptyWithRouteComponent { }\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoryEx1Component",
            "id": "component-StoryEx1Component-0445e6101affbb92502f4eb9ae11a9fc",
            "file": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ex-1",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-hierarchy-router-outlet>\n  <button type=\"button\" routerLink=\"/ex-1/ex-2\">Next</button>\n</seam-hierarchy-router-outlet>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { TheSeamFormFieldModule } from '../../../form-field/index'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router.module'\nimport { HierarchyLevelResolver } from '../resolvers/hierarchy-level.resolver'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'sub-name-ex',\n  template: `<div>Sub Name: {{ name$ | async }}</div><router-outlet></router-outlet>`,\n})\nclass StorySubNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute\n  ) {\n    console.log('sub-name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n    <router-outlet></router-outlet>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-base',\n  template: `\n    URL: {{ _router.url }}\n    <div class=\"my-2 p-2\">\n      <form class=\"mb-2\" (ngSubmit)=\"go()\">\n        <input seamInput [formControl]=\"_control\">\n      </form>\n      <button class=\"btn btn-sm btn-light\" type=\"button\" [routerLink]=\"_control.value\">Go</button>\n    </div>\n    <div>\n      <router-outlet></router-outlet>\n    </div>\n  `\n})\nclass StoryExBaseComponent {\n\n  _control = new FormControl('/name-ex/sub-name')\n\n  constructor(\n    private _route: ActivatedRoute,\n    public _router: Router\n  ) {\n    console.log('this._route', this._route)\n    console.log('this._router', this._router)\n  }\n\n  public go() {\n    this._router.navigateByUrl(this._control.value)\n  }\n}\n\n\n\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id Start\n// ////////////////////////////////////////////////////////////////////////////\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-1',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdOneComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-2',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdTwoComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    // this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-3',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <div>\n        <div>Type: {{ type$ | async }}</div>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"{{ nextId }}\">Next Random</button>\n      </div>\n    </seam-hierarchy-router-outlet>\n    <!--<router-outlet></router-outlet>-->\n  `,\n  styles: [`\n    :host {\n      display: block;\n      background: rgba(30,30,80,0.3);\n      outline: red;\n      width: 100%;\n      height: 100px;\n    }\n  `]\n})\nclass RecursiveIdThreeComponent {\n\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@NgModule({\n  declarations: [\n    RecursiveIdOneComponent,\n    RecursiveIdTwoComponent,\n    RecursiveIdThreeComponent\n  ],\n  imports: [\n    CommonModule,\n    TheSeamDynamicRouterModule,\n    RouterModule.forChild([\n      // {\n      //   path: 'table/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'table' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'new/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'new' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'edit/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'edit' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'view/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      // {\n      //   path: ':type/:id',\n      //   component: RecursiveIdTwoComponent,\n      //   // data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      {\n        path: ':type',\n        component: RecursiveIdThreeComponent,\n        resolve: {\n          hierLevel: HierarchyLevelResolver\n        },\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [ ]\n})\nclass RecursiveIdModule { }\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id End\n// ////////////////////////////////////////////////////////////////////////////\n\n\n\n@NgModule({\n  declarations: [\n    StorySubNameExComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: 'sub-name',\n        component: StorySubNameExComponent,\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [\n    StorySubNameExComponent\n  ]\n})\nclass LevelTwoModule { }\n\n\n\n\n//\n// Example\n//\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-1',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx1Component {\n  constructor() {\n    console.log('[StoryEx1Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1\">Prev</button>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2/ex-3\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx2Component {\n  constructor() {\n    console.log('[StoryEx2Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Prev</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx3Component {\n  constructor() {\n    console.log('[StoryEx3Component]')\n  }\n}\n\n\n\n\n\n\n// storiesOf('Framework/DynamicRouter', module)\n//   .addDecorator(withKnobs)\n\n//   .add('Recursive', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryNameExComponent,\n//         StoryExBaseComponent\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: 'name-ex',\n//             component: StoryNameExComponent,\n//             data: {\n//               name: 'Mark'\n//             },\n//             // loadChildren: () => Promise.resolve(LevelTwoModule)\n//             loadChildren: () => of(LevelTwoModule)\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n//         StoryNameExComponent\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <story-ex-base></story-ex-base>\n//     `\n//   }))\n\n\n//   .add('Example', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryEx1Component,\n//         StoryEx2Component,\n//         StoryEx3Component\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: '',\n//             pathMatch: 'full',\n//             redirectTo: '/ex-1',\n//           },\n//           {\n//             path: 'ex-1',\n//             component: StoryEx1Component,\n//             children: [\n//               {\n//                 path: 'ex-2',\n//                 component: StoryEx2Component,\n//                 children: [\n//                   {\n//                     path: 'ex-3',\n//                     component: StoryEx3Component\n//                   }\n//                 ]\n//               }\n//             ]\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <router-outlet></router-outlet>\n//     `\n//   }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 297
            }
        },
        {
            "name": "StoryEx2Component",
            "id": "component-StoryEx2Component-0445e6101affbb92502f4eb9ae11a9fc",
            "file": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ex-2",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-hierarchy-router-outlet>\n  <button type=\"button\" routerLink=\"/ex-1\">Prev</button>\n  <button type=\"button\" routerLink=\"/ex-1/ex-2/ex-3\">Next</button>\n</seam-hierarchy-router-outlet>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { TheSeamFormFieldModule } from '../../../form-field/index'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router.module'\nimport { HierarchyLevelResolver } from '../resolvers/hierarchy-level.resolver'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'sub-name-ex',\n  template: `<div>Sub Name: {{ name$ | async }}</div><router-outlet></router-outlet>`,\n})\nclass StorySubNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute\n  ) {\n    console.log('sub-name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n    <router-outlet></router-outlet>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-base',\n  template: `\n    URL: {{ _router.url }}\n    <div class=\"my-2 p-2\">\n      <form class=\"mb-2\" (ngSubmit)=\"go()\">\n        <input seamInput [formControl]=\"_control\">\n      </form>\n      <button class=\"btn btn-sm btn-light\" type=\"button\" [routerLink]=\"_control.value\">Go</button>\n    </div>\n    <div>\n      <router-outlet></router-outlet>\n    </div>\n  `\n})\nclass StoryExBaseComponent {\n\n  _control = new FormControl('/name-ex/sub-name')\n\n  constructor(\n    private _route: ActivatedRoute,\n    public _router: Router\n  ) {\n    console.log('this._route', this._route)\n    console.log('this._router', this._router)\n  }\n\n  public go() {\n    this._router.navigateByUrl(this._control.value)\n  }\n}\n\n\n\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id Start\n// ////////////////////////////////////////////////////////////////////////////\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-1',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdOneComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-2',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdTwoComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    // this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-3',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <div>\n        <div>Type: {{ type$ | async }}</div>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"{{ nextId }}\">Next Random</button>\n      </div>\n    </seam-hierarchy-router-outlet>\n    <!--<router-outlet></router-outlet>-->\n  `,\n  styles: [`\n    :host {\n      display: block;\n      background: rgba(30,30,80,0.3);\n      outline: red;\n      width: 100%;\n      height: 100px;\n    }\n  `]\n})\nclass RecursiveIdThreeComponent {\n\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@NgModule({\n  declarations: [\n    RecursiveIdOneComponent,\n    RecursiveIdTwoComponent,\n    RecursiveIdThreeComponent\n  ],\n  imports: [\n    CommonModule,\n    TheSeamDynamicRouterModule,\n    RouterModule.forChild([\n      // {\n      //   path: 'table/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'table' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'new/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'new' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'edit/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'edit' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'view/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      // {\n      //   path: ':type/:id',\n      //   component: RecursiveIdTwoComponent,\n      //   // data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      {\n        path: ':type',\n        component: RecursiveIdThreeComponent,\n        resolve: {\n          hierLevel: HierarchyLevelResolver\n        },\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [ ]\n})\nclass RecursiveIdModule { }\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id End\n// ////////////////////////////////////////////////////////////////////////////\n\n\n\n@NgModule({\n  declarations: [\n    StorySubNameExComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: 'sub-name',\n        component: StorySubNameExComponent,\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [\n    StorySubNameExComponent\n  ]\n})\nclass LevelTwoModule { }\n\n\n\n\n//\n// Example\n//\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-1',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx1Component {\n  constructor() {\n    console.log('[StoryEx1Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1\">Prev</button>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2/ex-3\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx2Component {\n  constructor() {\n    console.log('[StoryEx2Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Prev</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx3Component {\n  constructor() {\n    console.log('[StoryEx3Component]')\n  }\n}\n\n\n\n\n\n\n// storiesOf('Framework/DynamicRouter', module)\n//   .addDecorator(withKnobs)\n\n//   .add('Recursive', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryNameExComponent,\n//         StoryExBaseComponent\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: 'name-ex',\n//             component: StoryNameExComponent,\n//             data: {\n//               name: 'Mark'\n//             },\n//             // loadChildren: () => Promise.resolve(LevelTwoModule)\n//             loadChildren: () => of(LevelTwoModule)\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n//         StoryNameExComponent\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <story-ex-base></story-ex-base>\n//     `\n//   }))\n\n\n//   .add('Example', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryEx1Component,\n//         StoryEx2Component,\n//         StoryEx3Component\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: '',\n//             pathMatch: 'full',\n//             redirectTo: '/ex-1',\n//           },\n//           {\n//             path: 'ex-1',\n//             component: StoryEx1Component,\n//             children: [\n//               {\n//                 path: 'ex-2',\n//                 component: StoryEx2Component,\n//                 children: [\n//                   {\n//                     path: 'ex-3',\n//                     component: StoryEx3Component\n//                   }\n//                 ]\n//               }\n//             ]\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <router-outlet></router-outlet>\n//     `\n//   }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 313
            }
        },
        {
            "name": "StoryEx3Component",
            "id": "component-StoryEx3Component-0445e6101affbb92502f4eb9ae11a9fc",
            "file": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ex-2",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-hierarchy-router-outlet>\n  <button type=\"button\" routerLink=\"/ex-1/ex-2\">Prev</button>\n</seam-hierarchy-router-outlet>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { TheSeamFormFieldModule } from '../../../form-field/index'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router.module'\nimport { HierarchyLevelResolver } from '../resolvers/hierarchy-level.resolver'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'sub-name-ex',\n  template: `<div>Sub Name: {{ name$ | async }}</div><router-outlet></router-outlet>`,\n})\nclass StorySubNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute\n  ) {\n    console.log('sub-name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n    <router-outlet></router-outlet>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-base',\n  template: `\n    URL: {{ _router.url }}\n    <div class=\"my-2 p-2\">\n      <form class=\"mb-2\" (ngSubmit)=\"go()\">\n        <input seamInput [formControl]=\"_control\">\n      </form>\n      <button class=\"btn btn-sm btn-light\" type=\"button\" [routerLink]=\"_control.value\">Go</button>\n    </div>\n    <div>\n      <router-outlet></router-outlet>\n    </div>\n  `\n})\nclass StoryExBaseComponent {\n\n  _control = new FormControl('/name-ex/sub-name')\n\n  constructor(\n    private _route: ActivatedRoute,\n    public _router: Router\n  ) {\n    console.log('this._route', this._route)\n    console.log('this._router', this._router)\n  }\n\n  public go() {\n    this._router.navigateByUrl(this._control.value)\n  }\n}\n\n\n\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id Start\n// ////////////////////////////////////////////////////////////////////////////\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-1',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdOneComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-2',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdTwoComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    // this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-3',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <div>\n        <div>Type: {{ type$ | async }}</div>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"{{ nextId }}\">Next Random</button>\n      </div>\n    </seam-hierarchy-router-outlet>\n    <!--<router-outlet></router-outlet>-->\n  `,\n  styles: [`\n    :host {\n      display: block;\n      background: rgba(30,30,80,0.3);\n      outline: red;\n      width: 100%;\n      height: 100px;\n    }\n  `]\n})\nclass RecursiveIdThreeComponent {\n\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@NgModule({\n  declarations: [\n    RecursiveIdOneComponent,\n    RecursiveIdTwoComponent,\n    RecursiveIdThreeComponent\n  ],\n  imports: [\n    CommonModule,\n    TheSeamDynamicRouterModule,\n    RouterModule.forChild([\n      // {\n      //   path: 'table/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'table' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'new/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'new' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'edit/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'edit' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'view/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      // {\n      //   path: ':type/:id',\n      //   component: RecursiveIdTwoComponent,\n      //   // data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      {\n        path: ':type',\n        component: RecursiveIdThreeComponent,\n        resolve: {\n          hierLevel: HierarchyLevelResolver\n        },\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [ ]\n})\nclass RecursiveIdModule { }\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id End\n// ////////////////////////////////////////////////////////////////////////////\n\n\n\n@NgModule({\n  declarations: [\n    StorySubNameExComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: 'sub-name',\n        component: StorySubNameExComponent,\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [\n    StorySubNameExComponent\n  ]\n})\nclass LevelTwoModule { }\n\n\n\n\n//\n// Example\n//\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-1',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx1Component {\n  constructor() {\n    console.log('[StoryEx1Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1\">Prev</button>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2/ex-3\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx2Component {\n  constructor() {\n    console.log('[StoryEx2Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Prev</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx3Component {\n  constructor() {\n    console.log('[StoryEx3Component]')\n  }\n}\n\n\n\n\n\n\n// storiesOf('Framework/DynamicRouter', module)\n//   .addDecorator(withKnobs)\n\n//   .add('Recursive', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryNameExComponent,\n//         StoryExBaseComponent\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: 'name-ex',\n//             component: StoryNameExComponent,\n//             data: {\n//               name: 'Mark'\n//             },\n//             // loadChildren: () => Promise.resolve(LevelTwoModule)\n//             loadChildren: () => of(LevelTwoModule)\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n//         StoryNameExComponent\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <story-ex-base></story-ex-base>\n//     `\n//   }))\n\n\n//   .add('Example', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryEx1Component,\n//         StoryEx2Component,\n//         StoryEx3Component\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: '',\n//             pathMatch: 'full',\n//             redirectTo: '/ex-1',\n//           },\n//           {\n//             path: 'ex-1',\n//             component: StoryEx1Component,\n//             children: [\n//               {\n//                 path: 'ex-2',\n//                 component: StoryEx2Component,\n//                 children: [\n//                   {\n//                     path: 'ex-3',\n//                     component: StoryEx3Component\n//                   }\n//                 ]\n//               }\n//             ]\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <router-outlet></router-outlet>\n//     `\n//   }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 328
            }
        },
        {
            "name": "StoryExBaseComponent",
            "id": "component-StoryExBaseComponent-0445e6101affbb92502f4eb9ae11a9fc",
            "file": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-base",
            "styleUrls": [],
            "styles": [],
            "template": "URL: {{ _router.url }}\n<div class=\"my-2 p-2\">\n  <form class=\"mb-2\" (ngSubmit)=\"go()\">\n    <input seamInput [formControl]=\"_control\">\n  </form>\n  <button class=\"btn btn-sm btn-light\" type=\"button\" [routerLink]=\"_control.value\">Go</button>\n</div>\n<div>\n  <router-outlet></router-outlet>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_control",
                    "defaultValue": "new FormControl('/name-ex/sub-name')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "_router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "go",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { TheSeamFormFieldModule } from '../../../form-field/index'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router.module'\nimport { HierarchyLevelResolver } from '../resolvers/hierarchy-level.resolver'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'sub-name-ex',\n  template: `<div>Sub Name: {{ name$ | async }}</div><router-outlet></router-outlet>`,\n})\nclass StorySubNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute\n  ) {\n    console.log('sub-name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n    <router-outlet></router-outlet>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-base',\n  template: `\n    URL: {{ _router.url }}\n    <div class=\"my-2 p-2\">\n      <form class=\"mb-2\" (ngSubmit)=\"go()\">\n        <input seamInput [formControl]=\"_control\">\n      </form>\n      <button class=\"btn btn-sm btn-light\" type=\"button\" [routerLink]=\"_control.value\">Go</button>\n    </div>\n    <div>\n      <router-outlet></router-outlet>\n    </div>\n  `\n})\nclass StoryExBaseComponent {\n\n  _control = new FormControl('/name-ex/sub-name')\n\n  constructor(\n    private _route: ActivatedRoute,\n    public _router: Router\n  ) {\n    console.log('this._route', this._route)\n    console.log('this._router', this._router)\n  }\n\n  public go() {\n    this._router.navigateByUrl(this._control.value)\n  }\n}\n\n\n\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id Start\n// ////////////////////////////////////////////////////////////////////////////\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-1',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdOneComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-2',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdTwoComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    // this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-3',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <div>\n        <div>Type: {{ type$ | async }}</div>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"{{ nextId }}\">Next Random</button>\n      </div>\n    </seam-hierarchy-router-outlet>\n    <!--<router-outlet></router-outlet>-->\n  `,\n  styles: [`\n    :host {\n      display: block;\n      background: rgba(30,30,80,0.3);\n      outline: red;\n      width: 100%;\n      height: 100px;\n    }\n  `]\n})\nclass RecursiveIdThreeComponent {\n\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@NgModule({\n  declarations: [\n    RecursiveIdOneComponent,\n    RecursiveIdTwoComponent,\n    RecursiveIdThreeComponent\n  ],\n  imports: [\n    CommonModule,\n    TheSeamDynamicRouterModule,\n    RouterModule.forChild([\n      // {\n      //   path: 'table/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'table' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'new/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'new' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'edit/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'edit' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'view/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      // {\n      //   path: ':type/:id',\n      //   component: RecursiveIdTwoComponent,\n      //   // data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      {\n        path: ':type',\n        component: RecursiveIdThreeComponent,\n        resolve: {\n          hierLevel: HierarchyLevelResolver\n        },\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [ ]\n})\nclass RecursiveIdModule { }\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id End\n// ////////////////////////////////////////////////////////////////////////////\n\n\n\n@NgModule({\n  declarations: [\n    StorySubNameExComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: 'sub-name',\n        component: StorySubNameExComponent,\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [\n    StorySubNameExComponent\n  ]\n})\nclass LevelTwoModule { }\n\n\n\n\n//\n// Example\n//\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-1',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx1Component {\n  constructor() {\n    console.log('[StoryEx1Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1\">Prev</button>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2/ex-3\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx2Component {\n  constructor() {\n    console.log('[StoryEx2Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Prev</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx3Component {\n  constructor() {\n    console.log('[StoryEx3Component]')\n  }\n}\n\n\n\n\n\n\n// storiesOf('Framework/DynamicRouter', module)\n//   .addDecorator(withKnobs)\n\n//   .add('Recursive', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryNameExComponent,\n//         StoryExBaseComponent\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: 'name-ex',\n//             component: StoryNameExComponent,\n//             data: {\n//               name: 'Mark'\n//             },\n//             // loadChildren: () => Promise.resolve(LevelTwoModule)\n//             loadChildren: () => of(LevelTwoModule)\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n//         StoryNameExComponent\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <story-ex-base></story-ex-base>\n//     `\n//   }))\n\n\n//   .add('Example', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryEx1Component,\n//         StoryEx2Component,\n//         StoryEx3Component\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: '',\n//             pathMatch: 'full',\n//             redirectTo: '/ex-1',\n//           },\n//           {\n//             path: 'ex-1',\n//             component: StoryEx1Component,\n//             children: [\n//               {\n//                 path: 'ex-2',\n//                 component: StoryEx2Component,\n//                 children: [\n//                   {\n//                     path: 'ex-3',\n//                     component: StoryEx3Component\n//                   }\n//                 ]\n//               }\n//             ]\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <router-outlet></router-outlet>\n//     `\n//   }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StoryExModalLazyComponent",
            "id": "component-StoryExModalLazyComponent-b8c1136eb010bd580398a8c823b051ca",
            "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-modal-lazy",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-modal-header>\n  <h4 seamModalTitle>\n    Example Header\n  </h4>\n  <button seamModalClose class=\"close\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n</seam-modal-header>\n\n<seam-modal-body>\n  Example Body\n</seam-modal-body>\n\n<seam-modal-footer>\n  <button class=\"btn btn-lightgray\" seamModalClose>Cancel</button>\n  <button class=\"btn btn-success\" type=\"submit\">Share</button>\n</seam-modal-footer>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { CommonModule } from '@angular/common'\nimport { HttpClientModule } from '@angular/common/http'\nimport { Component, NgModule } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, RouterModule } from '@angular/router'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { TheSeamDynamicComponentLoaderModule } from '../dynamic-component-loader/dynamic-component-loader.module'\nimport { TheSeamModalModule } from '../modal/index'\n\nimport { exampleData1 } from './_story-data/dynamic-data-1'\nimport { TheSeamDatatableDynamicModule } from './datatable-dynamic.module'\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'story-ex-modal-lazy',\n  template: `\n    <seam-modal-header>\n      <h4 seamModalTitle>\n        Example Header\n      </h4>\n      <button seamModalClose class=\"close\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </seam-modal-header>\n\n    <seam-modal-body>\n      Example Body\n    </seam-modal-body>\n\n    <seam-modal-footer>\n      <button class=\"btn btn-lightgray\" seamModalClose>Cancel</button>\n      <button class=\"btn btn-success\" type=\"submit\">Share</button>\n    </seam-modal-footer>\n  `\n})\nexport class StoryExModalLazyComponent { }\n\n@NgModule({\n  declarations: [\n    StoryExModalLazyComponent\n  ],\n  imports: [\n    CommonModule,\n    TheSeamModalModule,\n    TheSeamDynamicComponentLoaderModule.forChild(StoryExModalLazyComponent),\n  ],\n  entryComponents: [\n    StoryExModalLazyComponent\n  ]\n})\nexport class StoryExModalLazyModule { }\n\n// This array defines which \"componentId\" maps to which lazy-loaded module.\n// const manifest: IDynamicComponentManifest[] = [\n//   {\n//     componentId: 'widget-one',\n//     path: 'widget-one',\n\n//     // Lazy Load. Lazy load if you can to avoid us accidentally making the\n//     // inital app bundle to large as we keep adding modals.\n//     // loadChildren: () => import('./story-ex-modal-lazy/story-ex-modal-lazy.module').then(m => m.StoryExModalLazyModule)\n\n//     // Non-lazy Load\n//     loadChildren: () => StoryExModalLazyModule\n//   }\n// ]\n\n// @NgModule({\n//   declarations: [\n//     // StoryExRouteModalComponent\n//   ],\n//   imports: [\n//     // RouterModule.forChild([\n//     //   {\n//     //     path: '',\n//     //     component: StoryExRouteModalComponent\n//     //   }\n//     // ]),\n//     TheSeamDynamicComponentLoaderModule.forModule({\n//       componentId: 'widget-one',\n//       path: 'widget-one',\n\n//       // Lazy Load. Lazy load if you can to avoid us accidentally making the\n//       // inital app bundle to large as we keep adding modals.\n//       // loadChildren: () => import('./story-ex-modal-lazy/story-ex-modal-lazy.module').then(m => m.StoryExModalLazyModule)\n\n//       // Non-lazy Load\n//       loadChildren: () => StoryExModalLazyModule\n//     }),\n//     TheSeamModalModule\n//   ],\n//   exports: [\n//     // RouterModule\n//   ],\n//   entryComponents: [\n//     // StoryExRouteModalComponent\n//   ]\n// })\n// class ExampleModalModule { }\n\nconst routes = [\n  // {\n  //   path: 'story-ex-modal',\n  //   loadChildren: () => ExampleModalModule,\n  //   outlet: 'modal'\n  // }\n]\n\nstoriesOf('Components/Datatable/Dynamic', module)\n  .addDecorator(withKnobs)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      declarations: [ ],\n      imports: [\n        BrowserAnimationsModule,\n        HttpClientModule,\n        RouterModule.forRoot(routes, { useHash: true }),\n        TheSeamDatatableDynamicModule,\n        // ExampleModalModule\n        TheSeamDynamicComponentLoaderModule.forRoot([\n          {\n            componentId: 'story-ex-modal',\n            path: 'story-ex-modal',\n\n            // Lazy Load. Lazy load if you can to avoid us accidentally making the\n            // inital app bundle to large as we keep adding modals.\n            // loadChildren: () => import('./story-ex-modal-lazy/story-ex-modal-lazy.module').then(m => m.StoryExModalLazyModule)\n\n            // Non-lazy Load\n            loadChildren: () => StoryExModalLazyModule\n          }\n        ])\n      ],\n      entryComponents: [ ]\n    },\n    props: {\n      data: exampleData1\n    },\n    template: `\n      <div style=\"width: 100vw; height: 100vh;\" class=\"p-1\">\n        <div class=\"alert alert-danger\">\n          This component is still being worked on. Not all features are guaranteed\n          to work yet, but eventually we plan to start building the datatables in\n          our app from json with this component when all necessary features are stable.\n        </div>\n        <seam-datatable-dynamic class=\"w-100 h-100\" [data]=\"data\"></seam-datatable-dynamic>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoryExWidget1Component",
            "id": "component-StoryExWidget1Component-27ff9f1fd87edef8e0f5a34ac7e5a393",
            "file": "projects/ui-common/src/lib/widgets-grid/widgets-grid.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-1",
            "styleUrls": [],
            "styles": [],
            "template": "Example Widget 1",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n\nimport { TheSeamWidgetsGridModule } from './widgets-grid.module'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `Example Widget 1`\n})\nclass StoryExWidget1Component {  }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `Example Widget 2`\n})\nclass StoryExWidget2Component {  }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `Example Widget 3`\n})\nclass StoryExWidget3Component {  }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `Example Widget 4`\n})\nclass StoryExWidget4Component {  }\n\n// storiesOf('WidgetsGrid', module)\n//   .addDecorator(withKnobs)\n\n//   .add('Basic', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryExWidget1Component,\n//         StoryExWidget2Component,\n//         StoryExWidget3Component,\n//         StoryExWidget4Component\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         TheSeamWidgetsGridModule\n//       ],\n//       entryComponents: [\n//         StoryExWidget1Component,\n//         StoryExWidget2Component,\n//         StoryExWidget3Component,\n//         StoryExWidget4Component\n//       ]\n//     },\n//     props: {\n//       widgets: [\n//         { type: StoryExWidget1Component },\n//         { type: StoryExWidget2Component },\n//         { type: StoryExWidget3Component },\n//         { type: StoryExWidget4Component }\n//       ]\n//     },\n//     template: `\n//       <div style=\"height: 100vh;\">\n//         <seam-widgets-grid [widgets]=\"widgets\"></seam-widgets-grid>\n//       </div>\n//     `\n//   }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoryExWidget1Component",
            "id": "component-StoryExWidget1Component-c96a1065d75981025a74b0eea588d5c9-1",
            "file": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-1",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faBell",
                    "defaultValue": "faBell",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "faWrench",
                    "defaultValue": "faWrench",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true).pipe(delay(1000))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "items",
                    "defaultValue": "[ 'one', 'two', 'three', 'four' ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF } from '@angular/common'\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { Route, Router, RouterModule } from '@angular/router'\nimport { of } from 'rxjs'\nimport { delay } from 'rxjs/operators'\n\nimport {\n  faBell,\n  faComment\n} from '@fortawesome/free-regular-svg-icons'\nimport {\n  faBook,\n  faBuilding,\n  faExclamationTriangle,\n  faQuestionCircle,\n  faSignature,\n  faSignOutAlt,\n  faUserAlt,\n  faWrench\n} from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamBreadcrumbsModule } from '../../breadcrumbs/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamDashboardModule } from '../dashboard/dashboard.module'\nimport { ISideNavItem } from '../side-nav/side-nav.models'\nimport { TheSeamSideNavModule } from '../side-nav/side-nav.module'\nimport { TheSeamTopBarModule } from '../top-bar/top-bar.module'\n\nimport { TheSeamBaseLayoutModule } from './base-layout.module'\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({ template: `Url: {{ router.url }}` })\nclass StoryRoutePlacholderComponent {\n  constructor(public router: Router) { }\n}\n\n\nconst routes: Route[] = [\n  {\n    path: '',\n    data: { breadcrumb: 'Dashboard' },\n    children: [\n      { path: 'example1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1' } },\n      {\n        path: 'example2',\n        component: StoryRoutePlacholderComponent,\n        data: { breadcrumb: 'example2' },\n        children: [\n          { path: 'example1.1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.1' } },\n          { path: 'example1.2', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.2' } },\n          { path: 'example1.3', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.3' } },\n          { path: 'example1.4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.4' } }\n        ]\n      },\n      {\n        path: 'example3',\n        component: StoryRoutePlacholderComponent,\n        data: { breadcrumb: 'example3' },\n        children: [\n          { path: 'example1.1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.1' } },\n          { path: 'example1.2', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.2' } },\n          { path: 'example1.3', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.3' } },\n          { path: 'example1.4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.4' } }\n        ]\n      },\n      { path: 'example4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example4' } },\n      { path: 'example5', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example5' } }\n    ]\n  }\n]\n\nconst navItems: ISideNavItem[] = [\n  {\n    itemType: 'link',\n    label: 'Example 1',\n    icon: faSignature,\n    link: 'example1',\n  },\n  {\n    itemType: 'link',\n    label: 'Example 2',\n    icon: faBuilding,\n    link: 'example2',\n    children: [\n      {\n        itemType: 'link',\n        label: 'Example 1.1',\n        icon: faSignature,\n        link: 'example2/example1.1',\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.2',\n        icon: faBuilding,\n        link: 'example2/example1.2'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.3',\n        link: 'example2/example1.3'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.4',\n        // link: 'example2/example1.4'\n      }\n    ]\n  },\n  {\n    itemType: 'basic',\n    label: 'Example 3',\n    icon: faBook,\n    children: [\n      {\n        itemType: 'link',\n        label: 'Example 1.1',\n        icon: faSignature,\n        link: 'example3/example1.1',\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.2',\n        icon: faBuilding,\n        link: 'example3/example1.2'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.3',\n        link: 'example3/example1.3'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.4',\n        // link: 'example3/example1.4'\n      }\n    ]\n  },\n  {\n    itemType: 'link',\n    label: 'Example 4',\n    link: 'example4'\n  },\n  {\n    itemType: 'link',\n    label: 'Example 5',\n    // link: 'example5'\n  }\n]\n\nstoriesOf('Framework/BaseLayout', module)\n  .addDecorator(withKnobs)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryRoutePlacholderComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        RouterModule.forRoot(routes, { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        TheSeamBreadcrumbsModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component\n      ]\n    },\n    props: {\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      hasTitle: boolean('hasTitle', false),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n      hasNotificationsMenu: boolean('hasNotificationsMenu', true),\n      navItems,\n      widgets: [\n        { col: 1, order: 0, type: StoryExWidget1Component },\n        { col: 2, order: 0, type: StoryExWidget2Component },\n        { col: 3, order: 0, type: StoryExWidget3Component },\n        { col: 2, order: 1, type: StoryExWidget4Component }\n      ],\n      faUserAlt,\n      faQuestionCircle,\n      faSignOutAlt,\n      faBell,\n      faExclamationTriangle,\n      faComment\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <div class=\"p-1\" *seamBaseLayoutContentHeader>\n            <seam-breadcrumbs></seam-breadcrumbs>\n          </div>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [hasTitle]=\"hasTitle\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n            <seam-menu seamTopBarMenu>\n              <a seamMenuItem [icon]=\"faUserAlt\" routerLink=\"/profile\">Profile</a>\n              <button seamMenuItem [icon]=\"faQuestionCircle\">About</button>\n              <seam-menu-divider></seam-menu-divider>\n              <a seamMenuItem [icon]=\"faSignOutAlt\" routerLink=\"/logout\">Sign out</a>\n            </seam-menu>\n\n            <button seamIconBtn *seamTopBarItem\n              [icon]=\"faBell\"\n              iconType=\"borderless-styled-square\"\n              [seamMenuToggle]=\"notificationMenu\">\n              <span class=\"sr-only\">Notifications</span>\n              <seam-icon-notification iconClass=\"text-danger\"></seam-icon-notification>\n            </button>\n            <seam-menu #notificationMenu>\n              <div style=\"width: 400px\">\n                <a seamMenuItem [icon]=\"faExclamationTriangle\" iconClass=\"text-warning\" routerLink=\"/profile\">\n                  There is a problem with you self-assessment answers.\n                </a>\n                <a seamMenuItem [icon]=\"faExclamationTriangle\" iconClass=\"text-warning\" routerLink=\"/profile\">\n                  Your password expires in 10 days.\n                </a>\n                <button seamMenuItem [icon]=\"faComment\" iconClass=\"text-primary\">\n                  You have unread feedback on your document.\n                </button>\n                <seam-menu-footer>\n                  <a seamMenuFooterAction routerLink=\"/notifications\">See All</a>\n                </seam-menu-footer>\n              </div>\n            </seam-menu>\n          </seam-top-bar>\n          <seam-dashboard\n            *seamBaseLayoutContent\n            [widgets]=\"widgets\">\n          </seam-dashboard>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "StoryExWidget1Component-1"
        },
        {
            "name": "StoryExWidget1Component",
            "id": "component-StoryExWidget1Component-b298494ff06005973a966ef61983d5c3-2",
            "file": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-1",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\"    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faBell",
                    "defaultValue": "faBell",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "faWrench",
                    "defaultValue": "faWrench",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "items",
                    "defaultValue": "[ 'one', 'two', 'three', 'four' ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF, CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { delay, map } from 'rxjs/operators'\n\nimport {\n  faBell, faBuilding, faChartLine, faCompass, faFilePdf, faSignature,\n  faUsers, faWrench\n} from '@fortawesome/free-solid-svg-icons'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamFormFieldModule } from '../../form-field/index'\nimport { TheSeamIconModule } from '../../icon/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamBaseLayoutModule } from '../base-layout/index'\nimport { TheSeamDashboardModule } from '../dashboard/index'\nimport { DynamicDatatablePageComponent } from '../dynamic-pages/dynamic-datatable-page/dynamic-datatable-page.component'\nimport { DynamicPagesModule } from '../dynamic-pages/dynamic-pages.module'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router/dynamic-router.module'\nimport { HierarchyLevelResolver } from '../dynamic-router/resolvers/hierarchy-level.resolver'\nimport { TheSeamSideNavModule } from '../side-nav/index'\nimport { TheSeamTopBarModule } from '../top-bar/index'\n\nimport { exampleData2 } from '../../datatable-dynamic/_story-data/dynamic-data-2'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-5',\n  template: `<seam-widget [icon]=\"faUsers\" titleText=\"2019 Member Enrollments\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <seam-widget-tile-list>\n    <button seam-widget-tile [icon]=\"tileIcon\">17 members.</button>\n    <button seam-widget-tile [icon]=\"tileIcon\"\n      [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\">13 pending approvals.</button>\n    [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\"\n  </seam-widget-tile-list>\n</seam-widget>`\n})\nclass StoryExWidget5Component {\n  faUsers = faUsers\n  faClock = faClock\n  tileIcon = 'assets/images/icons8-user-groups-ab17c7.png'\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-6',\n  template: `<seam-widget [icon]=\"faSignature\" titleText=\"Bill of Ladings\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <table class=\"table table-striped mb-0\">\n    <thead>\n      <tr>\n        <th scope=\"col\"></th>\n        <th scope=\"col\">Bill of Lading</th>\n        <th scope=\"col\">Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514071</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513935</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514006</td>\n        <td>Awaiting Signature</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513991</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514077</td>\n        <td>Complete</td>\n      </tr>\n    </tbody>\n  </table>\n\n</seam-widget>`\n})\nclass StoryExWidget6Component {\n  faSignature = faSignature\n  faFilePdf = faFilePdf\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-7',\n  template: `<seam-widget [icon]=\"faChartLine\" titleText=\"Product Trends By Month\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <img [src]=\"figureImg\" />\n\n</seam-widget>`\n})\nclass StoryExWidget7Component {\n  faChartLine = faChartLine\n  initialized$ = of(true)\n  figureImg = 'assets/images/chart.png'\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-8',\n  template: `<seam-widget [icon]=\"faClock\" titleText=\"Example Text\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa\n  qui officia deserunt mollit anim id est laborum. <a>More…</a></p>\n\n</seam-widget>`\n})\nclass StoryExWidget8Component {\n  faClock = faClock\n  initialized$ = of(true)\n}\n\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'user-details-ex',\n  template: `\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Dashboard</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/users\">Users</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Detail</li>\n      </ol>\n    </nav>\n\n    <div>User Details</div>\n  `\n})\nclass UserDetailsExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('user-details-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    // console.log('config', this._router.config)\n    // console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n\n\nstoriesOf('Framework/Examples', module)\n  .addDecorator(withKnobs)\n\n  .add('Table With Detail Nav', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n\n        StoryNameExComponent,\n        UserDetailsExComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        ReactiveFormsModule,\n        TheSeamFormFieldModule,\n        TheSeamDynamicRouterModule,\n        RouterModule.forRoot([\n          {\n            path: 'users',\n            component: DynamicDatatablePageComponent,\n            data: {\n              name: 'Users',\n              tableDef: exampleData2\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n            children: [\n              {\n                path: 'details',\n                component: UserDetailsExComponent,\n                data: { },\n                resolve: {\n                  hierLevel: HierarchyLevelResolver\n                }\n              },\n            ]\n          },\n          {\n            path: 'documents',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Documents'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'settings',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Settings'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'status',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Status'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          }\n        ], { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        DynamicPagesModule,\n        TheSeamIconModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n        UserDetailsExComponent\n      ]\n    },\n    props: {\n      navItems: [\n        {\n          itemType: 'link',\n          label: 'Dashboard',\n          icon: faSignature,\n          link: '/',\n        },\n        {\n          itemType: 'basic',\n          label: 'Tables',\n          icon: faBuilding,\n          children: [\n            {\n              itemType: 'link',\n              label: 'Users',\n              icon: faSignature,\n              link: 'users',\n            },\n            {\n              itemType: 'link',\n              label: 'Documents',\n              icon: faBuilding,\n              link: 'documents'\n            }\n          ]\n        },\n        { itemType: 'divider' },\n        {\n          itemType: 'title',\n          label: 'Admin'\n        },\n        {\n          itemType: 'link',\n          label: 'Settings',\n          icon: faSignature,\n          link: 'settings'\n        },\n        {\n          itemType: 'link',\n          label: 'Status',\n          icon: faBuilding,\n          link: 'status'\n        }\n      ],\n      widgets: [\n        { col: 1, order: 1, type: StoryExWidget1Component },\n        { col: 2, order: 2, type: StoryExWidget2Component },\n        { col: 3, order: 1, type: StoryExWidget3Component },\n        { col: 2, order: 2, type: StoryExWidget4Component },\n        { col: 3, order: 0, type: StoryExWidget5Component },\n        { col: 1, order: 0, type: StoryExWidget6Component },\n        { col: 2, order: 0, type: StoryExWidget7Component },\n        { col: 2, order: 1, type: StoryExWidget8Component }\n      ],\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n\n      dashboardBreadcrubs: boolean('Breadcrumbs on Dashboard', true),\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n          </seam-top-bar>\n\n          <seam-hierarchy-router-outlet *seamBaseLayoutContent>\n            <nav aria-label=\"breadcrumb\" *ngIf=\"dashboardBreadcrubs\">\n              <ol class=\"breadcrumb\">\n                <li class=\"breadcrumb-item active\" aria-current=\"page\">Dashboard</li>\n              </ol>\n            </nav>\n            <seam-dashboard [widgets]=\"widgets\"></seam-dashboard>\n          </seam-hierarchy-router-outlet>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "StoryExWidget1Component-2"
        },
        {
            "name": "StoryExWidget1Component",
            "id": "component-StoryExWidget1Component-32c3fb6c4dea3bd1c016f051a0519b5a-3",
            "file": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-1",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\" [loading]=\"!(initialized$ | async)\">  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faBell",
                    "defaultValue": "faBell",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "faWrench",
                    "defaultValue": "faWrench",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true).pipe(delay(1000))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "items",
                    "defaultValue": "[ 'one', 'two', 'three', 'four' ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { of } from 'rxjs'\nimport { delay } from 'rxjs/operators'\n\nimport { faBell, faWrench } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamWidgetModule } from '../../../widget/index'\n\nimport { TheSeamDashboardModule } from '../dashboard.module'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 2\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 3\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 4\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\nstoriesOf('Framework/Dashboard', module)\n  .addDecorator(withKnobs)\n\n  .add('Widgets', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        TheSeamWidgetModule,\n        TheSeamDashboardModule\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component\n      ]\n    },\n    props: {\n      widgets: [\n        { col: 1, order: 0, type: StoryExWidget1Component },\n        { col: 2, order: 0, type: StoryExWidget2Component },\n        { col: 3, order: 0, type: StoryExWidget3Component },\n        { col: 2, order: 1, type: StoryExWidget4Component }\n      ]\n    },\n    template: `\n      <div style=\"height: 100vh;\">\n        <seam-dashboard-widgets [widgets]=\"widgets\"></seam-dashboard-widgets>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "StoryExWidget1Component-3"
        },
        {
            "name": "StoryExWidget2Component",
            "id": "component-StoryExWidget2Component-27ff9f1fd87edef8e0f5a34ac7e5a393",
            "file": "projects/ui-common/src/lib/widgets-grid/widgets-grid.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-2",
            "styleUrls": [],
            "styles": [],
            "template": "Example Widget 2",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n\nimport { TheSeamWidgetsGridModule } from './widgets-grid.module'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `Example Widget 1`\n})\nclass StoryExWidget1Component {  }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `Example Widget 2`\n})\nclass StoryExWidget2Component {  }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `Example Widget 3`\n})\nclass StoryExWidget3Component {  }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `Example Widget 4`\n})\nclass StoryExWidget4Component {  }\n\n// storiesOf('WidgetsGrid', module)\n//   .addDecorator(withKnobs)\n\n//   .add('Basic', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryExWidget1Component,\n//         StoryExWidget2Component,\n//         StoryExWidget3Component,\n//         StoryExWidget4Component\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         TheSeamWidgetsGridModule\n//       ],\n//       entryComponents: [\n//         StoryExWidget1Component,\n//         StoryExWidget2Component,\n//         StoryExWidget3Component,\n//         StoryExWidget4Component\n//       ]\n//     },\n//     props: {\n//       widgets: [\n//         { type: StoryExWidget1Component },\n//         { type: StoryExWidget2Component },\n//         { type: StoryExWidget3Component },\n//         { type: StoryExWidget4Component }\n//       ]\n//     },\n//     template: `\n//       <div style=\"height: 100vh;\">\n//         <seam-widgets-grid [widgets]=\"widgets\"></seam-widgets-grid>\n//       </div>\n//     `\n//   }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoryExWidget2Component",
            "id": "component-StoryExWidget2Component-c96a1065d75981025a74b0eea588d5c9-1",
            "file": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-2",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faBell",
                    "defaultValue": "faBell",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "faWrench",
                    "defaultValue": "faWrench",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true).pipe(delay(1000))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "items",
                    "defaultValue": "[ 'one', 'two', 'three', 'four' ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF } from '@angular/common'\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { Route, Router, RouterModule } from '@angular/router'\nimport { of } from 'rxjs'\nimport { delay } from 'rxjs/operators'\n\nimport {\n  faBell,\n  faComment\n} from '@fortawesome/free-regular-svg-icons'\nimport {\n  faBook,\n  faBuilding,\n  faExclamationTriangle,\n  faQuestionCircle,\n  faSignature,\n  faSignOutAlt,\n  faUserAlt,\n  faWrench\n} from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamBreadcrumbsModule } from '../../breadcrumbs/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamDashboardModule } from '../dashboard/dashboard.module'\nimport { ISideNavItem } from '../side-nav/side-nav.models'\nimport { TheSeamSideNavModule } from '../side-nav/side-nav.module'\nimport { TheSeamTopBarModule } from '../top-bar/top-bar.module'\n\nimport { TheSeamBaseLayoutModule } from './base-layout.module'\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({ template: `Url: {{ router.url }}` })\nclass StoryRoutePlacholderComponent {\n  constructor(public router: Router) { }\n}\n\n\nconst routes: Route[] = [\n  {\n    path: '',\n    data: { breadcrumb: 'Dashboard' },\n    children: [\n      { path: 'example1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1' } },\n      {\n        path: 'example2',\n        component: StoryRoutePlacholderComponent,\n        data: { breadcrumb: 'example2' },\n        children: [\n          { path: 'example1.1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.1' } },\n          { path: 'example1.2', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.2' } },\n          { path: 'example1.3', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.3' } },\n          { path: 'example1.4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.4' } }\n        ]\n      },\n      {\n        path: 'example3',\n        component: StoryRoutePlacholderComponent,\n        data: { breadcrumb: 'example3' },\n        children: [\n          { path: 'example1.1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.1' } },\n          { path: 'example1.2', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.2' } },\n          { path: 'example1.3', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.3' } },\n          { path: 'example1.4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.4' } }\n        ]\n      },\n      { path: 'example4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example4' } },\n      { path: 'example5', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example5' } }\n    ]\n  }\n]\n\nconst navItems: ISideNavItem[] = [\n  {\n    itemType: 'link',\n    label: 'Example 1',\n    icon: faSignature,\n    link: 'example1',\n  },\n  {\n    itemType: 'link',\n    label: 'Example 2',\n    icon: faBuilding,\n    link: 'example2',\n    children: [\n      {\n        itemType: 'link',\n        label: 'Example 1.1',\n        icon: faSignature,\n        link: 'example2/example1.1',\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.2',\n        icon: faBuilding,\n        link: 'example2/example1.2'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.3',\n        link: 'example2/example1.3'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.4',\n        // link: 'example2/example1.4'\n      }\n    ]\n  },\n  {\n    itemType: 'basic',\n    label: 'Example 3',\n    icon: faBook,\n    children: [\n      {\n        itemType: 'link',\n        label: 'Example 1.1',\n        icon: faSignature,\n        link: 'example3/example1.1',\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.2',\n        icon: faBuilding,\n        link: 'example3/example1.2'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.3',\n        link: 'example3/example1.3'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.4',\n        // link: 'example3/example1.4'\n      }\n    ]\n  },\n  {\n    itemType: 'link',\n    label: 'Example 4',\n    link: 'example4'\n  },\n  {\n    itemType: 'link',\n    label: 'Example 5',\n    // link: 'example5'\n  }\n]\n\nstoriesOf('Framework/BaseLayout', module)\n  .addDecorator(withKnobs)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryRoutePlacholderComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        RouterModule.forRoot(routes, { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        TheSeamBreadcrumbsModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component\n      ]\n    },\n    props: {\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      hasTitle: boolean('hasTitle', false),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n      hasNotificationsMenu: boolean('hasNotificationsMenu', true),\n      navItems,\n      widgets: [\n        { col: 1, order: 0, type: StoryExWidget1Component },\n        { col: 2, order: 0, type: StoryExWidget2Component },\n        { col: 3, order: 0, type: StoryExWidget3Component },\n        { col: 2, order: 1, type: StoryExWidget4Component }\n      ],\n      faUserAlt,\n      faQuestionCircle,\n      faSignOutAlt,\n      faBell,\n      faExclamationTriangle,\n      faComment\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <div class=\"p-1\" *seamBaseLayoutContentHeader>\n            <seam-breadcrumbs></seam-breadcrumbs>\n          </div>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [hasTitle]=\"hasTitle\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n            <seam-menu seamTopBarMenu>\n              <a seamMenuItem [icon]=\"faUserAlt\" routerLink=\"/profile\">Profile</a>\n              <button seamMenuItem [icon]=\"faQuestionCircle\">About</button>\n              <seam-menu-divider></seam-menu-divider>\n              <a seamMenuItem [icon]=\"faSignOutAlt\" routerLink=\"/logout\">Sign out</a>\n            </seam-menu>\n\n            <button seamIconBtn *seamTopBarItem\n              [icon]=\"faBell\"\n              iconType=\"borderless-styled-square\"\n              [seamMenuToggle]=\"notificationMenu\">\n              <span class=\"sr-only\">Notifications</span>\n              <seam-icon-notification iconClass=\"text-danger\"></seam-icon-notification>\n            </button>\n            <seam-menu #notificationMenu>\n              <div style=\"width: 400px\">\n                <a seamMenuItem [icon]=\"faExclamationTriangle\" iconClass=\"text-warning\" routerLink=\"/profile\">\n                  There is a problem with you self-assessment answers.\n                </a>\n                <a seamMenuItem [icon]=\"faExclamationTriangle\" iconClass=\"text-warning\" routerLink=\"/profile\">\n                  Your password expires in 10 days.\n                </a>\n                <button seamMenuItem [icon]=\"faComment\" iconClass=\"text-primary\">\n                  You have unread feedback on your document.\n                </button>\n                <seam-menu-footer>\n                  <a seamMenuFooterAction routerLink=\"/notifications\">See All</a>\n                </seam-menu-footer>\n              </div>\n            </seam-menu>\n          </seam-top-bar>\n          <seam-dashboard\n            *seamBaseLayoutContent\n            [widgets]=\"widgets\">\n          </seam-dashboard>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "StoryExWidget2Component-1"
        },
        {
            "name": "StoryExWidget2Component",
            "id": "component-StoryExWidget2Component-b298494ff06005973a966ef61983d5c3-2",
            "file": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-2",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\"    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faBell",
                    "defaultValue": "faBell",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "faWrench",
                    "defaultValue": "faWrench",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "items",
                    "defaultValue": "[ 'one', 'two', 'three', 'four' ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF, CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { delay, map } from 'rxjs/operators'\n\nimport {\n  faBell, faBuilding, faChartLine, faCompass, faFilePdf, faSignature,\n  faUsers, faWrench\n} from '@fortawesome/free-solid-svg-icons'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamFormFieldModule } from '../../form-field/index'\nimport { TheSeamIconModule } from '../../icon/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamBaseLayoutModule } from '../base-layout/index'\nimport { TheSeamDashboardModule } from '../dashboard/index'\nimport { DynamicDatatablePageComponent } from '../dynamic-pages/dynamic-datatable-page/dynamic-datatable-page.component'\nimport { DynamicPagesModule } from '../dynamic-pages/dynamic-pages.module'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router/dynamic-router.module'\nimport { HierarchyLevelResolver } from '../dynamic-router/resolvers/hierarchy-level.resolver'\nimport { TheSeamSideNavModule } from '../side-nav/index'\nimport { TheSeamTopBarModule } from '../top-bar/index'\n\nimport { exampleData2 } from '../../datatable-dynamic/_story-data/dynamic-data-2'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-5',\n  template: `<seam-widget [icon]=\"faUsers\" titleText=\"2019 Member Enrollments\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <seam-widget-tile-list>\n    <button seam-widget-tile [icon]=\"tileIcon\">17 members.</button>\n    <button seam-widget-tile [icon]=\"tileIcon\"\n      [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\">13 pending approvals.</button>\n    [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\"\n  </seam-widget-tile-list>\n</seam-widget>`\n})\nclass StoryExWidget5Component {\n  faUsers = faUsers\n  faClock = faClock\n  tileIcon = 'assets/images/icons8-user-groups-ab17c7.png'\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-6',\n  template: `<seam-widget [icon]=\"faSignature\" titleText=\"Bill of Ladings\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <table class=\"table table-striped mb-0\">\n    <thead>\n      <tr>\n        <th scope=\"col\"></th>\n        <th scope=\"col\">Bill of Lading</th>\n        <th scope=\"col\">Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514071</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513935</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514006</td>\n        <td>Awaiting Signature</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513991</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514077</td>\n        <td>Complete</td>\n      </tr>\n    </tbody>\n  </table>\n\n</seam-widget>`\n})\nclass StoryExWidget6Component {\n  faSignature = faSignature\n  faFilePdf = faFilePdf\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-7',\n  template: `<seam-widget [icon]=\"faChartLine\" titleText=\"Product Trends By Month\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <img [src]=\"figureImg\" />\n\n</seam-widget>`\n})\nclass StoryExWidget7Component {\n  faChartLine = faChartLine\n  initialized$ = of(true)\n  figureImg = 'assets/images/chart.png'\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-8',\n  template: `<seam-widget [icon]=\"faClock\" titleText=\"Example Text\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa\n  qui officia deserunt mollit anim id est laborum. <a>More…</a></p>\n\n</seam-widget>`\n})\nclass StoryExWidget8Component {\n  faClock = faClock\n  initialized$ = of(true)\n}\n\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'user-details-ex',\n  template: `\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Dashboard</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/users\">Users</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Detail</li>\n      </ol>\n    </nav>\n\n    <div>User Details</div>\n  `\n})\nclass UserDetailsExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('user-details-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    // console.log('config', this._router.config)\n    // console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n\n\nstoriesOf('Framework/Examples', module)\n  .addDecorator(withKnobs)\n\n  .add('Table With Detail Nav', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n\n        StoryNameExComponent,\n        UserDetailsExComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        ReactiveFormsModule,\n        TheSeamFormFieldModule,\n        TheSeamDynamicRouterModule,\n        RouterModule.forRoot([\n          {\n            path: 'users',\n            component: DynamicDatatablePageComponent,\n            data: {\n              name: 'Users',\n              tableDef: exampleData2\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n            children: [\n              {\n                path: 'details',\n                component: UserDetailsExComponent,\n                data: { },\n                resolve: {\n                  hierLevel: HierarchyLevelResolver\n                }\n              },\n            ]\n          },\n          {\n            path: 'documents',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Documents'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'settings',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Settings'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'status',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Status'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          }\n        ], { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        DynamicPagesModule,\n        TheSeamIconModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n        UserDetailsExComponent\n      ]\n    },\n    props: {\n      navItems: [\n        {\n          itemType: 'link',\n          label: 'Dashboard',\n          icon: faSignature,\n          link: '/',\n        },\n        {\n          itemType: 'basic',\n          label: 'Tables',\n          icon: faBuilding,\n          children: [\n            {\n              itemType: 'link',\n              label: 'Users',\n              icon: faSignature,\n              link: 'users',\n            },\n            {\n              itemType: 'link',\n              label: 'Documents',\n              icon: faBuilding,\n              link: 'documents'\n            }\n          ]\n        },\n        { itemType: 'divider' },\n        {\n          itemType: 'title',\n          label: 'Admin'\n        },\n        {\n          itemType: 'link',\n          label: 'Settings',\n          icon: faSignature,\n          link: 'settings'\n        },\n        {\n          itemType: 'link',\n          label: 'Status',\n          icon: faBuilding,\n          link: 'status'\n        }\n      ],\n      widgets: [\n        { col: 1, order: 1, type: StoryExWidget1Component },\n        { col: 2, order: 2, type: StoryExWidget2Component },\n        { col: 3, order: 1, type: StoryExWidget3Component },\n        { col: 2, order: 2, type: StoryExWidget4Component },\n        { col: 3, order: 0, type: StoryExWidget5Component },\n        { col: 1, order: 0, type: StoryExWidget6Component },\n        { col: 2, order: 0, type: StoryExWidget7Component },\n        { col: 2, order: 1, type: StoryExWidget8Component }\n      ],\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n\n      dashboardBreadcrubs: boolean('Breadcrumbs on Dashboard', true),\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n          </seam-top-bar>\n\n          <seam-hierarchy-router-outlet *seamBaseLayoutContent>\n            <nav aria-label=\"breadcrumb\" *ngIf=\"dashboardBreadcrubs\">\n              <ol class=\"breadcrumb\">\n                <li class=\"breadcrumb-item active\" aria-current=\"page\">Dashboard</li>\n              </ol>\n            </nav>\n            <seam-dashboard [widgets]=\"widgets\"></seam-dashboard>\n          </seam-hierarchy-router-outlet>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "StoryExWidget2Component-2"
        },
        {
            "name": "StoryExWidget2Component",
            "id": "component-StoryExWidget2Component-32c3fb6c4dea3bd1c016f051a0519b5a-3",
            "file": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-2",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 2\" [loading]=\"!(initialized$ | async)\">  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faBell",
                    "defaultValue": "faBell",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "faWrench",
                    "defaultValue": "faWrench",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true).pipe(delay(1000))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "items",
                    "defaultValue": "[ 'one', 'two', 'three', 'four' ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { of } from 'rxjs'\nimport { delay } from 'rxjs/operators'\n\nimport { faBell, faWrench } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamWidgetModule } from '../../../widget/index'\n\nimport { TheSeamDashboardModule } from '../dashboard.module'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 2\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 3\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 4\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\nstoriesOf('Framework/Dashboard', module)\n  .addDecorator(withKnobs)\n\n  .add('Widgets', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        TheSeamWidgetModule,\n        TheSeamDashboardModule\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component\n      ]\n    },\n    props: {\n      widgets: [\n        { col: 1, order: 0, type: StoryExWidget1Component },\n        { col: 2, order: 0, type: StoryExWidget2Component },\n        { col: 3, order: 0, type: StoryExWidget3Component },\n        { col: 2, order: 1, type: StoryExWidget4Component }\n      ]\n    },\n    template: `\n      <div style=\"height: 100vh;\">\n        <seam-dashboard-widgets [widgets]=\"widgets\"></seam-dashboard-widgets>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "StoryExWidget2Component-3"
        },
        {
            "name": "StoryExWidget3Component",
            "id": "component-StoryExWidget3Component-27ff9f1fd87edef8e0f5a34ac7e5a393",
            "file": "projects/ui-common/src/lib/widgets-grid/widgets-grid.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-3",
            "styleUrls": [],
            "styles": [],
            "template": "Example Widget 3",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n\nimport { TheSeamWidgetsGridModule } from './widgets-grid.module'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `Example Widget 1`\n})\nclass StoryExWidget1Component {  }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `Example Widget 2`\n})\nclass StoryExWidget2Component {  }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `Example Widget 3`\n})\nclass StoryExWidget3Component {  }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `Example Widget 4`\n})\nclass StoryExWidget4Component {  }\n\n// storiesOf('WidgetsGrid', module)\n//   .addDecorator(withKnobs)\n\n//   .add('Basic', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryExWidget1Component,\n//         StoryExWidget2Component,\n//         StoryExWidget3Component,\n//         StoryExWidget4Component\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         TheSeamWidgetsGridModule\n//       ],\n//       entryComponents: [\n//         StoryExWidget1Component,\n//         StoryExWidget2Component,\n//         StoryExWidget3Component,\n//         StoryExWidget4Component\n//       ]\n//     },\n//     props: {\n//       widgets: [\n//         { type: StoryExWidget1Component },\n//         { type: StoryExWidget2Component },\n//         { type: StoryExWidget3Component },\n//         { type: StoryExWidget4Component }\n//       ]\n//     },\n//     template: `\n//       <div style=\"height: 100vh;\">\n//         <seam-widgets-grid [widgets]=\"widgets\"></seam-widgets-grid>\n//       </div>\n//     `\n//   }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoryExWidget3Component",
            "id": "component-StoryExWidget3Component-c96a1065d75981025a74b0eea588d5c9-1",
            "file": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-3",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faBell",
                    "defaultValue": "faBell",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "faWrench",
                    "defaultValue": "faWrench",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true).pipe(delay(1000))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "items",
                    "defaultValue": "[ 'one', 'two', 'three', 'four' ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF } from '@angular/common'\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { Route, Router, RouterModule } from '@angular/router'\nimport { of } from 'rxjs'\nimport { delay } from 'rxjs/operators'\n\nimport {\n  faBell,\n  faComment\n} from '@fortawesome/free-regular-svg-icons'\nimport {\n  faBook,\n  faBuilding,\n  faExclamationTriangle,\n  faQuestionCircle,\n  faSignature,\n  faSignOutAlt,\n  faUserAlt,\n  faWrench\n} from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamBreadcrumbsModule } from '../../breadcrumbs/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamDashboardModule } from '../dashboard/dashboard.module'\nimport { ISideNavItem } from '../side-nav/side-nav.models'\nimport { TheSeamSideNavModule } from '../side-nav/side-nav.module'\nimport { TheSeamTopBarModule } from '../top-bar/top-bar.module'\n\nimport { TheSeamBaseLayoutModule } from './base-layout.module'\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({ template: `Url: {{ router.url }}` })\nclass StoryRoutePlacholderComponent {\n  constructor(public router: Router) { }\n}\n\n\nconst routes: Route[] = [\n  {\n    path: '',\n    data: { breadcrumb: 'Dashboard' },\n    children: [\n      { path: 'example1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1' } },\n      {\n        path: 'example2',\n        component: StoryRoutePlacholderComponent,\n        data: { breadcrumb: 'example2' },\n        children: [\n          { path: 'example1.1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.1' } },\n          { path: 'example1.2', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.2' } },\n          { path: 'example1.3', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.3' } },\n          { path: 'example1.4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.4' } }\n        ]\n      },\n      {\n        path: 'example3',\n        component: StoryRoutePlacholderComponent,\n        data: { breadcrumb: 'example3' },\n        children: [\n          { path: 'example1.1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.1' } },\n          { path: 'example1.2', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.2' } },\n          { path: 'example1.3', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.3' } },\n          { path: 'example1.4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.4' } }\n        ]\n      },\n      { path: 'example4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example4' } },\n      { path: 'example5', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example5' } }\n    ]\n  }\n]\n\nconst navItems: ISideNavItem[] = [\n  {\n    itemType: 'link',\n    label: 'Example 1',\n    icon: faSignature,\n    link: 'example1',\n  },\n  {\n    itemType: 'link',\n    label: 'Example 2',\n    icon: faBuilding,\n    link: 'example2',\n    children: [\n      {\n        itemType: 'link',\n        label: 'Example 1.1',\n        icon: faSignature,\n        link: 'example2/example1.1',\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.2',\n        icon: faBuilding,\n        link: 'example2/example1.2'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.3',\n        link: 'example2/example1.3'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.4',\n        // link: 'example2/example1.4'\n      }\n    ]\n  },\n  {\n    itemType: 'basic',\n    label: 'Example 3',\n    icon: faBook,\n    children: [\n      {\n        itemType: 'link',\n        label: 'Example 1.1',\n        icon: faSignature,\n        link: 'example3/example1.1',\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.2',\n        icon: faBuilding,\n        link: 'example3/example1.2'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.3',\n        link: 'example3/example1.3'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.4',\n        // link: 'example3/example1.4'\n      }\n    ]\n  },\n  {\n    itemType: 'link',\n    label: 'Example 4',\n    link: 'example4'\n  },\n  {\n    itemType: 'link',\n    label: 'Example 5',\n    // link: 'example5'\n  }\n]\n\nstoriesOf('Framework/BaseLayout', module)\n  .addDecorator(withKnobs)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryRoutePlacholderComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        RouterModule.forRoot(routes, { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        TheSeamBreadcrumbsModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component\n      ]\n    },\n    props: {\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      hasTitle: boolean('hasTitle', false),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n      hasNotificationsMenu: boolean('hasNotificationsMenu', true),\n      navItems,\n      widgets: [\n        { col: 1, order: 0, type: StoryExWidget1Component },\n        { col: 2, order: 0, type: StoryExWidget2Component },\n        { col: 3, order: 0, type: StoryExWidget3Component },\n        { col: 2, order: 1, type: StoryExWidget4Component }\n      ],\n      faUserAlt,\n      faQuestionCircle,\n      faSignOutAlt,\n      faBell,\n      faExclamationTriangle,\n      faComment\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <div class=\"p-1\" *seamBaseLayoutContentHeader>\n            <seam-breadcrumbs></seam-breadcrumbs>\n          </div>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [hasTitle]=\"hasTitle\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n            <seam-menu seamTopBarMenu>\n              <a seamMenuItem [icon]=\"faUserAlt\" routerLink=\"/profile\">Profile</a>\n              <button seamMenuItem [icon]=\"faQuestionCircle\">About</button>\n              <seam-menu-divider></seam-menu-divider>\n              <a seamMenuItem [icon]=\"faSignOutAlt\" routerLink=\"/logout\">Sign out</a>\n            </seam-menu>\n\n            <button seamIconBtn *seamTopBarItem\n              [icon]=\"faBell\"\n              iconType=\"borderless-styled-square\"\n              [seamMenuToggle]=\"notificationMenu\">\n              <span class=\"sr-only\">Notifications</span>\n              <seam-icon-notification iconClass=\"text-danger\"></seam-icon-notification>\n            </button>\n            <seam-menu #notificationMenu>\n              <div style=\"width: 400px\">\n                <a seamMenuItem [icon]=\"faExclamationTriangle\" iconClass=\"text-warning\" routerLink=\"/profile\">\n                  There is a problem with you self-assessment answers.\n                </a>\n                <a seamMenuItem [icon]=\"faExclamationTriangle\" iconClass=\"text-warning\" routerLink=\"/profile\">\n                  Your password expires in 10 days.\n                </a>\n                <button seamMenuItem [icon]=\"faComment\" iconClass=\"text-primary\">\n                  You have unread feedback on your document.\n                </button>\n                <seam-menu-footer>\n                  <a seamMenuFooterAction routerLink=\"/notifications\">See All</a>\n                </seam-menu-footer>\n              </div>\n            </seam-menu>\n          </seam-top-bar>\n          <seam-dashboard\n            *seamBaseLayoutContent\n            [widgets]=\"widgets\">\n          </seam-dashboard>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "StoryExWidget3Component-1"
        },
        {
            "name": "StoryExWidget3Component",
            "id": "component-StoryExWidget3Component-b298494ff06005973a966ef61983d5c3-2",
            "file": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-3",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\"    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faBell",
                    "defaultValue": "faBell",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "faWrench",
                    "defaultValue": "faWrench",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "items",
                    "defaultValue": "[ 'one', 'two', 'three', 'four' ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 92
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF, CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { delay, map } from 'rxjs/operators'\n\nimport {\n  faBell, faBuilding, faChartLine, faCompass, faFilePdf, faSignature,\n  faUsers, faWrench\n} from '@fortawesome/free-solid-svg-icons'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamFormFieldModule } from '../../form-field/index'\nimport { TheSeamIconModule } from '../../icon/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamBaseLayoutModule } from '../base-layout/index'\nimport { TheSeamDashboardModule } from '../dashboard/index'\nimport { DynamicDatatablePageComponent } from '../dynamic-pages/dynamic-datatable-page/dynamic-datatable-page.component'\nimport { DynamicPagesModule } from '../dynamic-pages/dynamic-pages.module'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router/dynamic-router.module'\nimport { HierarchyLevelResolver } from '../dynamic-router/resolvers/hierarchy-level.resolver'\nimport { TheSeamSideNavModule } from '../side-nav/index'\nimport { TheSeamTopBarModule } from '../top-bar/index'\n\nimport { exampleData2 } from '../../datatable-dynamic/_story-data/dynamic-data-2'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-5',\n  template: `<seam-widget [icon]=\"faUsers\" titleText=\"2019 Member Enrollments\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <seam-widget-tile-list>\n    <button seam-widget-tile [icon]=\"tileIcon\">17 members.</button>\n    <button seam-widget-tile [icon]=\"tileIcon\"\n      [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\">13 pending approvals.</button>\n    [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\"\n  </seam-widget-tile-list>\n</seam-widget>`\n})\nclass StoryExWidget5Component {\n  faUsers = faUsers\n  faClock = faClock\n  tileIcon = 'assets/images/icons8-user-groups-ab17c7.png'\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-6',\n  template: `<seam-widget [icon]=\"faSignature\" titleText=\"Bill of Ladings\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <table class=\"table table-striped mb-0\">\n    <thead>\n      <tr>\n        <th scope=\"col\"></th>\n        <th scope=\"col\">Bill of Lading</th>\n        <th scope=\"col\">Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514071</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513935</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514006</td>\n        <td>Awaiting Signature</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513991</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514077</td>\n        <td>Complete</td>\n      </tr>\n    </tbody>\n  </table>\n\n</seam-widget>`\n})\nclass StoryExWidget6Component {\n  faSignature = faSignature\n  faFilePdf = faFilePdf\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-7',\n  template: `<seam-widget [icon]=\"faChartLine\" titleText=\"Product Trends By Month\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <img [src]=\"figureImg\" />\n\n</seam-widget>`\n})\nclass StoryExWidget7Component {\n  faChartLine = faChartLine\n  initialized$ = of(true)\n  figureImg = 'assets/images/chart.png'\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-8',\n  template: `<seam-widget [icon]=\"faClock\" titleText=\"Example Text\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa\n  qui officia deserunt mollit anim id est laborum. <a>More…</a></p>\n\n</seam-widget>`\n})\nclass StoryExWidget8Component {\n  faClock = faClock\n  initialized$ = of(true)\n}\n\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'user-details-ex',\n  template: `\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Dashboard</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/users\">Users</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Detail</li>\n      </ol>\n    </nav>\n\n    <div>User Details</div>\n  `\n})\nclass UserDetailsExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('user-details-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    // console.log('config', this._router.config)\n    // console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n\n\nstoriesOf('Framework/Examples', module)\n  .addDecorator(withKnobs)\n\n  .add('Table With Detail Nav', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n\n        StoryNameExComponent,\n        UserDetailsExComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        ReactiveFormsModule,\n        TheSeamFormFieldModule,\n        TheSeamDynamicRouterModule,\n        RouterModule.forRoot([\n          {\n            path: 'users',\n            component: DynamicDatatablePageComponent,\n            data: {\n              name: 'Users',\n              tableDef: exampleData2\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n            children: [\n              {\n                path: 'details',\n                component: UserDetailsExComponent,\n                data: { },\n                resolve: {\n                  hierLevel: HierarchyLevelResolver\n                }\n              },\n            ]\n          },\n          {\n            path: 'documents',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Documents'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'settings',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Settings'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'status',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Status'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          }\n        ], { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        DynamicPagesModule,\n        TheSeamIconModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n        UserDetailsExComponent\n      ]\n    },\n    props: {\n      navItems: [\n        {\n          itemType: 'link',\n          label: 'Dashboard',\n          icon: faSignature,\n          link: '/',\n        },\n        {\n          itemType: 'basic',\n          label: 'Tables',\n          icon: faBuilding,\n          children: [\n            {\n              itemType: 'link',\n              label: 'Users',\n              icon: faSignature,\n              link: 'users',\n            },\n            {\n              itemType: 'link',\n              label: 'Documents',\n              icon: faBuilding,\n              link: 'documents'\n            }\n          ]\n        },\n        { itemType: 'divider' },\n        {\n          itemType: 'title',\n          label: 'Admin'\n        },\n        {\n          itemType: 'link',\n          label: 'Settings',\n          icon: faSignature,\n          link: 'settings'\n        },\n        {\n          itemType: 'link',\n          label: 'Status',\n          icon: faBuilding,\n          link: 'status'\n        }\n      ],\n      widgets: [\n        { col: 1, order: 1, type: StoryExWidget1Component },\n        { col: 2, order: 2, type: StoryExWidget2Component },\n        { col: 3, order: 1, type: StoryExWidget3Component },\n        { col: 2, order: 2, type: StoryExWidget4Component },\n        { col: 3, order: 0, type: StoryExWidget5Component },\n        { col: 1, order: 0, type: StoryExWidget6Component },\n        { col: 2, order: 0, type: StoryExWidget7Component },\n        { col: 2, order: 1, type: StoryExWidget8Component }\n      ],\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n\n      dashboardBreadcrubs: boolean('Breadcrumbs on Dashboard', true),\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n          </seam-top-bar>\n\n          <seam-hierarchy-router-outlet *seamBaseLayoutContent>\n            <nav aria-label=\"breadcrumb\" *ngIf=\"dashboardBreadcrubs\">\n              <ol class=\"breadcrumb\">\n                <li class=\"breadcrumb-item active\" aria-current=\"page\">Dashboard</li>\n              </ol>\n            </nav>\n            <seam-dashboard [widgets]=\"widgets\"></seam-dashboard>\n          </seam-hierarchy-router-outlet>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "StoryExWidget3Component-2"
        },
        {
            "name": "StoryExWidget3Component",
            "id": "component-StoryExWidget3Component-32c3fb6c4dea3bd1c016f051a0519b5a-3",
            "file": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-3",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 3\" [loading]=\"!(initialized$ | async)\">  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faBell",
                    "defaultValue": "faBell",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "faWrench",
                    "defaultValue": "faWrench",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true).pipe(delay(1000))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "items",
                    "defaultValue": "[ 'one', 'two', 'three', 'four' ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 72
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { of } from 'rxjs'\nimport { delay } from 'rxjs/operators'\n\nimport { faBell, faWrench } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamWidgetModule } from '../../../widget/index'\n\nimport { TheSeamDashboardModule } from '../dashboard.module'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 2\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 3\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 4\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\nstoriesOf('Framework/Dashboard', module)\n  .addDecorator(withKnobs)\n\n  .add('Widgets', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        TheSeamWidgetModule,\n        TheSeamDashboardModule\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component\n      ]\n    },\n    props: {\n      widgets: [\n        { col: 1, order: 0, type: StoryExWidget1Component },\n        { col: 2, order: 0, type: StoryExWidget2Component },\n        { col: 3, order: 0, type: StoryExWidget3Component },\n        { col: 2, order: 1, type: StoryExWidget4Component }\n      ]\n    },\n    template: `\n      <div style=\"height: 100vh;\">\n        <seam-dashboard-widgets [widgets]=\"widgets\"></seam-dashboard-widgets>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "StoryExWidget3Component-3"
        },
        {
            "name": "StoryExWidget4Component",
            "id": "component-StoryExWidget4Component-27ff9f1fd87edef8e0f5a34ac7e5a393",
            "file": "projects/ui-common/src/lib/widgets-grid/widgets-grid.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-4",
            "styleUrls": [],
            "styles": [],
            "template": "Example Widget 4",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n\nimport { TheSeamWidgetsGridModule } from './widgets-grid.module'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `Example Widget 1`\n})\nclass StoryExWidget1Component {  }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `Example Widget 2`\n})\nclass StoryExWidget2Component {  }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `Example Widget 3`\n})\nclass StoryExWidget3Component {  }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `Example Widget 4`\n})\nclass StoryExWidget4Component {  }\n\n// storiesOf('WidgetsGrid', module)\n//   .addDecorator(withKnobs)\n\n//   .add('Basic', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryExWidget1Component,\n//         StoryExWidget2Component,\n//         StoryExWidget3Component,\n//         StoryExWidget4Component\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         TheSeamWidgetsGridModule\n//       ],\n//       entryComponents: [\n//         StoryExWidget1Component,\n//         StoryExWidget2Component,\n//         StoryExWidget3Component,\n//         StoryExWidget4Component\n//       ]\n//     },\n//     props: {\n//       widgets: [\n//         { type: StoryExWidget1Component },\n//         { type: StoryExWidget2Component },\n//         { type: StoryExWidget3Component },\n//         { type: StoryExWidget4Component }\n//       ]\n//     },\n//     template: `\n//       <div style=\"height: 100vh;\">\n//         <seam-widgets-grid [widgets]=\"widgets\"></seam-widgets-grid>\n//       </div>\n//     `\n//   }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoryExWidget4Component",
            "id": "component-StoryExWidget4Component-c96a1065d75981025a74b0eea588d5c9-1",
            "file": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-4",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faBell",
                    "defaultValue": "faBell",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "faWrench",
                    "defaultValue": "faWrench",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true).pipe(delay(1000))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "items",
                    "defaultValue": "[ 'one', 'two', 'three', 'four' ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 113
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF } from '@angular/common'\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { Route, Router, RouterModule } from '@angular/router'\nimport { of } from 'rxjs'\nimport { delay } from 'rxjs/operators'\n\nimport {\n  faBell,\n  faComment\n} from '@fortawesome/free-regular-svg-icons'\nimport {\n  faBook,\n  faBuilding,\n  faExclamationTriangle,\n  faQuestionCircle,\n  faSignature,\n  faSignOutAlt,\n  faUserAlt,\n  faWrench\n} from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamBreadcrumbsModule } from '../../breadcrumbs/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamDashboardModule } from '../dashboard/dashboard.module'\nimport { ISideNavItem } from '../side-nav/side-nav.models'\nimport { TheSeamSideNavModule } from '../side-nav/side-nav.module'\nimport { TheSeamTopBarModule } from '../top-bar/top-bar.module'\n\nimport { TheSeamBaseLayoutModule } from './base-layout.module'\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({ template: `Url: {{ router.url }}` })\nclass StoryRoutePlacholderComponent {\n  constructor(public router: Router) { }\n}\n\n\nconst routes: Route[] = [\n  {\n    path: '',\n    data: { breadcrumb: 'Dashboard' },\n    children: [\n      { path: 'example1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1' } },\n      {\n        path: 'example2',\n        component: StoryRoutePlacholderComponent,\n        data: { breadcrumb: 'example2' },\n        children: [\n          { path: 'example1.1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.1' } },\n          { path: 'example1.2', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.2' } },\n          { path: 'example1.3', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.3' } },\n          { path: 'example1.4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.4' } }\n        ]\n      },\n      {\n        path: 'example3',\n        component: StoryRoutePlacholderComponent,\n        data: { breadcrumb: 'example3' },\n        children: [\n          { path: 'example1.1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.1' } },\n          { path: 'example1.2', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.2' } },\n          { path: 'example1.3', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.3' } },\n          { path: 'example1.4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.4' } }\n        ]\n      },\n      { path: 'example4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example4' } },\n      { path: 'example5', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example5' } }\n    ]\n  }\n]\n\nconst navItems: ISideNavItem[] = [\n  {\n    itemType: 'link',\n    label: 'Example 1',\n    icon: faSignature,\n    link: 'example1',\n  },\n  {\n    itemType: 'link',\n    label: 'Example 2',\n    icon: faBuilding,\n    link: 'example2',\n    children: [\n      {\n        itemType: 'link',\n        label: 'Example 1.1',\n        icon: faSignature,\n        link: 'example2/example1.1',\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.2',\n        icon: faBuilding,\n        link: 'example2/example1.2'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.3',\n        link: 'example2/example1.3'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.4',\n        // link: 'example2/example1.4'\n      }\n    ]\n  },\n  {\n    itemType: 'basic',\n    label: 'Example 3',\n    icon: faBook,\n    children: [\n      {\n        itemType: 'link',\n        label: 'Example 1.1',\n        icon: faSignature,\n        link: 'example3/example1.1',\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.2',\n        icon: faBuilding,\n        link: 'example3/example1.2'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.3',\n        link: 'example3/example1.3'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.4',\n        // link: 'example3/example1.4'\n      }\n    ]\n  },\n  {\n    itemType: 'link',\n    label: 'Example 4',\n    link: 'example4'\n  },\n  {\n    itemType: 'link',\n    label: 'Example 5',\n    // link: 'example5'\n  }\n]\n\nstoriesOf('Framework/BaseLayout', module)\n  .addDecorator(withKnobs)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryRoutePlacholderComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        RouterModule.forRoot(routes, { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        TheSeamBreadcrumbsModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component\n      ]\n    },\n    props: {\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      hasTitle: boolean('hasTitle', false),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n      hasNotificationsMenu: boolean('hasNotificationsMenu', true),\n      navItems,\n      widgets: [\n        { col: 1, order: 0, type: StoryExWidget1Component },\n        { col: 2, order: 0, type: StoryExWidget2Component },\n        { col: 3, order: 0, type: StoryExWidget3Component },\n        { col: 2, order: 1, type: StoryExWidget4Component }\n      ],\n      faUserAlt,\n      faQuestionCircle,\n      faSignOutAlt,\n      faBell,\n      faExclamationTriangle,\n      faComment\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <div class=\"p-1\" *seamBaseLayoutContentHeader>\n            <seam-breadcrumbs></seam-breadcrumbs>\n          </div>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [hasTitle]=\"hasTitle\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n            <seam-menu seamTopBarMenu>\n              <a seamMenuItem [icon]=\"faUserAlt\" routerLink=\"/profile\">Profile</a>\n              <button seamMenuItem [icon]=\"faQuestionCircle\">About</button>\n              <seam-menu-divider></seam-menu-divider>\n              <a seamMenuItem [icon]=\"faSignOutAlt\" routerLink=\"/logout\">Sign out</a>\n            </seam-menu>\n\n            <button seamIconBtn *seamTopBarItem\n              [icon]=\"faBell\"\n              iconType=\"borderless-styled-square\"\n              [seamMenuToggle]=\"notificationMenu\">\n              <span class=\"sr-only\">Notifications</span>\n              <seam-icon-notification iconClass=\"text-danger\"></seam-icon-notification>\n            </button>\n            <seam-menu #notificationMenu>\n              <div style=\"width: 400px\">\n                <a seamMenuItem [icon]=\"faExclamationTriangle\" iconClass=\"text-warning\" routerLink=\"/profile\">\n                  There is a problem with you self-assessment answers.\n                </a>\n                <a seamMenuItem [icon]=\"faExclamationTriangle\" iconClass=\"text-warning\" routerLink=\"/profile\">\n                  Your password expires in 10 days.\n                </a>\n                <button seamMenuItem [icon]=\"faComment\" iconClass=\"text-primary\">\n                  You have unread feedback on your document.\n                </button>\n                <seam-menu-footer>\n                  <a seamMenuFooterAction routerLink=\"/notifications\">See All</a>\n                </seam-menu-footer>\n              </div>\n            </seam-menu>\n          </seam-top-bar>\n          <seam-dashboard\n            *seamBaseLayoutContent\n            [widgets]=\"widgets\">\n          </seam-dashboard>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "StoryExWidget4Component-1"
        },
        {
            "name": "StoryExWidget4Component",
            "id": "component-StoryExWidget4Component-b298494ff06005973a966ef61983d5c3-2",
            "file": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-4",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\"    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faBell",
                    "defaultValue": "faBell",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "faWrench",
                    "defaultValue": "faWrench",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "items",
                    "defaultValue": "[ 'one', 'two', 'three', 'four' ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 113
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF, CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { delay, map } from 'rxjs/operators'\n\nimport {\n  faBell, faBuilding, faChartLine, faCompass, faFilePdf, faSignature,\n  faUsers, faWrench\n} from '@fortawesome/free-solid-svg-icons'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamFormFieldModule } from '../../form-field/index'\nimport { TheSeamIconModule } from '../../icon/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamBaseLayoutModule } from '../base-layout/index'\nimport { TheSeamDashboardModule } from '../dashboard/index'\nimport { DynamicDatatablePageComponent } from '../dynamic-pages/dynamic-datatable-page/dynamic-datatable-page.component'\nimport { DynamicPagesModule } from '../dynamic-pages/dynamic-pages.module'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router/dynamic-router.module'\nimport { HierarchyLevelResolver } from '../dynamic-router/resolvers/hierarchy-level.resolver'\nimport { TheSeamSideNavModule } from '../side-nav/index'\nimport { TheSeamTopBarModule } from '../top-bar/index'\n\nimport { exampleData2 } from '../../datatable-dynamic/_story-data/dynamic-data-2'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-5',\n  template: `<seam-widget [icon]=\"faUsers\" titleText=\"2019 Member Enrollments\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <seam-widget-tile-list>\n    <button seam-widget-tile [icon]=\"tileIcon\">17 members.</button>\n    <button seam-widget-tile [icon]=\"tileIcon\"\n      [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\">13 pending approvals.</button>\n    [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\"\n  </seam-widget-tile-list>\n</seam-widget>`\n})\nclass StoryExWidget5Component {\n  faUsers = faUsers\n  faClock = faClock\n  tileIcon = 'assets/images/icons8-user-groups-ab17c7.png'\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-6',\n  template: `<seam-widget [icon]=\"faSignature\" titleText=\"Bill of Ladings\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <table class=\"table table-striped mb-0\">\n    <thead>\n      <tr>\n        <th scope=\"col\"></th>\n        <th scope=\"col\">Bill of Lading</th>\n        <th scope=\"col\">Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514071</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513935</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514006</td>\n        <td>Awaiting Signature</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513991</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514077</td>\n        <td>Complete</td>\n      </tr>\n    </tbody>\n  </table>\n\n</seam-widget>`\n})\nclass StoryExWidget6Component {\n  faSignature = faSignature\n  faFilePdf = faFilePdf\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-7',\n  template: `<seam-widget [icon]=\"faChartLine\" titleText=\"Product Trends By Month\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <img [src]=\"figureImg\" />\n\n</seam-widget>`\n})\nclass StoryExWidget7Component {\n  faChartLine = faChartLine\n  initialized$ = of(true)\n  figureImg = 'assets/images/chart.png'\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-8',\n  template: `<seam-widget [icon]=\"faClock\" titleText=\"Example Text\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa\n  qui officia deserunt mollit anim id est laborum. <a>More…</a></p>\n\n</seam-widget>`\n})\nclass StoryExWidget8Component {\n  faClock = faClock\n  initialized$ = of(true)\n}\n\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'user-details-ex',\n  template: `\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Dashboard</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/users\">Users</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Detail</li>\n      </ol>\n    </nav>\n\n    <div>User Details</div>\n  `\n})\nclass UserDetailsExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('user-details-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    // console.log('config', this._router.config)\n    // console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n\n\nstoriesOf('Framework/Examples', module)\n  .addDecorator(withKnobs)\n\n  .add('Table With Detail Nav', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n\n        StoryNameExComponent,\n        UserDetailsExComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        ReactiveFormsModule,\n        TheSeamFormFieldModule,\n        TheSeamDynamicRouterModule,\n        RouterModule.forRoot([\n          {\n            path: 'users',\n            component: DynamicDatatablePageComponent,\n            data: {\n              name: 'Users',\n              tableDef: exampleData2\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n            children: [\n              {\n                path: 'details',\n                component: UserDetailsExComponent,\n                data: { },\n                resolve: {\n                  hierLevel: HierarchyLevelResolver\n                }\n              },\n            ]\n          },\n          {\n            path: 'documents',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Documents'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'settings',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Settings'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'status',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Status'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          }\n        ], { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        DynamicPagesModule,\n        TheSeamIconModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n        UserDetailsExComponent\n      ]\n    },\n    props: {\n      navItems: [\n        {\n          itemType: 'link',\n          label: 'Dashboard',\n          icon: faSignature,\n          link: '/',\n        },\n        {\n          itemType: 'basic',\n          label: 'Tables',\n          icon: faBuilding,\n          children: [\n            {\n              itemType: 'link',\n              label: 'Users',\n              icon: faSignature,\n              link: 'users',\n            },\n            {\n              itemType: 'link',\n              label: 'Documents',\n              icon: faBuilding,\n              link: 'documents'\n            }\n          ]\n        },\n        { itemType: 'divider' },\n        {\n          itemType: 'title',\n          label: 'Admin'\n        },\n        {\n          itemType: 'link',\n          label: 'Settings',\n          icon: faSignature,\n          link: 'settings'\n        },\n        {\n          itemType: 'link',\n          label: 'Status',\n          icon: faBuilding,\n          link: 'status'\n        }\n      ],\n      widgets: [\n        { col: 1, order: 1, type: StoryExWidget1Component },\n        { col: 2, order: 2, type: StoryExWidget2Component },\n        { col: 3, order: 1, type: StoryExWidget3Component },\n        { col: 2, order: 2, type: StoryExWidget4Component },\n        { col: 3, order: 0, type: StoryExWidget5Component },\n        { col: 1, order: 0, type: StoryExWidget6Component },\n        { col: 2, order: 0, type: StoryExWidget7Component },\n        { col: 2, order: 1, type: StoryExWidget8Component }\n      ],\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n\n      dashboardBreadcrubs: boolean('Breadcrumbs on Dashboard', true),\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n          </seam-top-bar>\n\n          <seam-hierarchy-router-outlet *seamBaseLayoutContent>\n            <nav aria-label=\"breadcrumb\" *ngIf=\"dashboardBreadcrubs\">\n              <ol class=\"breadcrumb\">\n                <li class=\"breadcrumb-item active\" aria-current=\"page\">Dashboard</li>\n              </ol>\n            </nav>\n            <seam-dashboard [widgets]=\"widgets\"></seam-dashboard>\n          </seam-hierarchy-router-outlet>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "StoryExWidget4Component-2"
        },
        {
            "name": "StoryExWidget4Component",
            "id": "component-StoryExWidget4Component-32c3fb6c4dea3bd1c016f051a0519b5a-3",
            "file": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-4",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 4\" [loading]=\"!(initialized$ | async)\">  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faBell",
                    "defaultValue": "faBell",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "faWrench",
                    "defaultValue": "faWrench",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true).pipe(delay(1000))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "items",
                    "defaultValue": "[ 'one', 'two', 'three', 'four' ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 92
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { of } from 'rxjs'\nimport { delay } from 'rxjs/operators'\n\nimport { faBell, faWrench } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamWidgetModule } from '../../../widget/index'\n\nimport { TheSeamDashboardModule } from '../dashboard.module'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 2\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 3\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Lazy Widget 4\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\nstoriesOf('Framework/Dashboard', module)\n  .addDecorator(withKnobs)\n\n  .add('Widgets', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        TheSeamWidgetModule,\n        TheSeamDashboardModule\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component\n      ]\n    },\n    props: {\n      widgets: [\n        { col: 1, order: 0, type: StoryExWidget1Component },\n        { col: 2, order: 0, type: StoryExWidget2Component },\n        { col: 3, order: 0, type: StoryExWidget3Component },\n        { col: 2, order: 1, type: StoryExWidget4Component }\n      ]\n    },\n    template: `\n      <div style=\"height: 100vh;\">\n        <seam-dashboard-widgets [widgets]=\"widgets\"></seam-dashboard-widgets>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "StoryExWidget4Component-3"
        },
        {
            "name": "StoryExWidget5Component",
            "id": "component-StoryExWidget5Component-b298494ff06005973a966ef61983d5c3",
            "file": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-5",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faUsers\" titleText=\"2019 Member Enrollments\"    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <seam-widget-tile-list>\n    <button seam-widget-tile [icon]=\"tileIcon\">17 members.</button>\n    <button seam-widget-tile [icon]=\"tileIcon\"\n      [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\">13 pending approvals.</button>\n    [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\"\n  </seam-widget-tile-list>\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faClock",
                    "defaultValue": "faClock",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "faUsers",
                    "defaultValue": "faUsers",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "tileIcon",
                    "defaultValue": "'assets/images/icons8-user-groups-ab17c7.png'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 133
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF, CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { delay, map } from 'rxjs/operators'\n\nimport {\n  faBell, faBuilding, faChartLine, faCompass, faFilePdf, faSignature,\n  faUsers, faWrench\n} from '@fortawesome/free-solid-svg-icons'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamFormFieldModule } from '../../form-field/index'\nimport { TheSeamIconModule } from '../../icon/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamBaseLayoutModule } from '../base-layout/index'\nimport { TheSeamDashboardModule } from '../dashboard/index'\nimport { DynamicDatatablePageComponent } from '../dynamic-pages/dynamic-datatable-page/dynamic-datatable-page.component'\nimport { DynamicPagesModule } from '../dynamic-pages/dynamic-pages.module'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router/dynamic-router.module'\nimport { HierarchyLevelResolver } from '../dynamic-router/resolvers/hierarchy-level.resolver'\nimport { TheSeamSideNavModule } from '../side-nav/index'\nimport { TheSeamTopBarModule } from '../top-bar/index'\n\nimport { exampleData2 } from '../../datatable-dynamic/_story-data/dynamic-data-2'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-5',\n  template: `<seam-widget [icon]=\"faUsers\" titleText=\"2019 Member Enrollments\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <seam-widget-tile-list>\n    <button seam-widget-tile [icon]=\"tileIcon\">17 members.</button>\n    <button seam-widget-tile [icon]=\"tileIcon\"\n      [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\">13 pending approvals.</button>\n    [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\"\n  </seam-widget-tile-list>\n</seam-widget>`\n})\nclass StoryExWidget5Component {\n  faUsers = faUsers\n  faClock = faClock\n  tileIcon = 'assets/images/icons8-user-groups-ab17c7.png'\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-6',\n  template: `<seam-widget [icon]=\"faSignature\" titleText=\"Bill of Ladings\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <table class=\"table table-striped mb-0\">\n    <thead>\n      <tr>\n        <th scope=\"col\"></th>\n        <th scope=\"col\">Bill of Lading</th>\n        <th scope=\"col\">Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514071</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513935</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514006</td>\n        <td>Awaiting Signature</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513991</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514077</td>\n        <td>Complete</td>\n      </tr>\n    </tbody>\n  </table>\n\n</seam-widget>`\n})\nclass StoryExWidget6Component {\n  faSignature = faSignature\n  faFilePdf = faFilePdf\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-7',\n  template: `<seam-widget [icon]=\"faChartLine\" titleText=\"Product Trends By Month\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <img [src]=\"figureImg\" />\n\n</seam-widget>`\n})\nclass StoryExWidget7Component {\n  faChartLine = faChartLine\n  initialized$ = of(true)\n  figureImg = 'assets/images/chart.png'\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-8',\n  template: `<seam-widget [icon]=\"faClock\" titleText=\"Example Text\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa\n  qui officia deserunt mollit anim id est laborum. <a>More…</a></p>\n\n</seam-widget>`\n})\nclass StoryExWidget8Component {\n  faClock = faClock\n  initialized$ = of(true)\n}\n\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'user-details-ex',\n  template: `\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Dashboard</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/users\">Users</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Detail</li>\n      </ol>\n    </nav>\n\n    <div>User Details</div>\n  `\n})\nclass UserDetailsExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('user-details-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    // console.log('config', this._router.config)\n    // console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n\n\nstoriesOf('Framework/Examples', module)\n  .addDecorator(withKnobs)\n\n  .add('Table With Detail Nav', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n\n        StoryNameExComponent,\n        UserDetailsExComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        ReactiveFormsModule,\n        TheSeamFormFieldModule,\n        TheSeamDynamicRouterModule,\n        RouterModule.forRoot([\n          {\n            path: 'users',\n            component: DynamicDatatablePageComponent,\n            data: {\n              name: 'Users',\n              tableDef: exampleData2\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n            children: [\n              {\n                path: 'details',\n                component: UserDetailsExComponent,\n                data: { },\n                resolve: {\n                  hierLevel: HierarchyLevelResolver\n                }\n              },\n            ]\n          },\n          {\n            path: 'documents',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Documents'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'settings',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Settings'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'status',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Status'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          }\n        ], { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        DynamicPagesModule,\n        TheSeamIconModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n        UserDetailsExComponent\n      ]\n    },\n    props: {\n      navItems: [\n        {\n          itemType: 'link',\n          label: 'Dashboard',\n          icon: faSignature,\n          link: '/',\n        },\n        {\n          itemType: 'basic',\n          label: 'Tables',\n          icon: faBuilding,\n          children: [\n            {\n              itemType: 'link',\n              label: 'Users',\n              icon: faSignature,\n              link: 'users',\n            },\n            {\n              itemType: 'link',\n              label: 'Documents',\n              icon: faBuilding,\n              link: 'documents'\n            }\n          ]\n        },\n        { itemType: 'divider' },\n        {\n          itemType: 'title',\n          label: 'Admin'\n        },\n        {\n          itemType: 'link',\n          label: 'Settings',\n          icon: faSignature,\n          link: 'settings'\n        },\n        {\n          itemType: 'link',\n          label: 'Status',\n          icon: faBuilding,\n          link: 'status'\n        }\n      ],\n      widgets: [\n        { col: 1, order: 1, type: StoryExWidget1Component },\n        { col: 2, order: 2, type: StoryExWidget2Component },\n        { col: 3, order: 1, type: StoryExWidget3Component },\n        { col: 2, order: 2, type: StoryExWidget4Component },\n        { col: 3, order: 0, type: StoryExWidget5Component },\n        { col: 1, order: 0, type: StoryExWidget6Component },\n        { col: 2, order: 0, type: StoryExWidget7Component },\n        { col: 2, order: 1, type: StoryExWidget8Component }\n      ],\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n\n      dashboardBreadcrubs: boolean('Breadcrumbs on Dashboard', true),\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n          </seam-top-bar>\n\n          <seam-hierarchy-router-outlet *seamBaseLayoutContent>\n            <nav aria-label=\"breadcrumb\" *ngIf=\"dashboardBreadcrubs\">\n              <ol class=\"breadcrumb\">\n                <li class=\"breadcrumb-item active\" aria-current=\"page\">Dashboard</li>\n              </ol>\n            </nav>\n            <seam-dashboard [widgets]=\"widgets\"></seam-dashboard>\n          </seam-hierarchy-router-outlet>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoryExWidget6Component",
            "id": "component-StoryExWidget6Component-b298494ff06005973a966ef61983d5c3",
            "file": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-6",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faSignature\" titleText=\"Bill of Ladings\"    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <table class=\"table table-striped mb-0\">\n    <thead>\n      <tr>\n        <th scope=\"col\"></th>\n        <th scope=\"col\">Bill of Lading</th>\n        <th scope=\"col\">Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514071</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513935</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514006</td>\n        <td>Awaiting Signature</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513991</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514077</td>\n        <td>Complete</td>\n      </tr>\n    </tbody>\n  </table>\n\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faFilePdf",
                    "defaultValue": "faFilePdf",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 194
                },
                {
                    "name": "faSignature",
                    "defaultValue": "faSignature",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 193
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 195
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF, CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { delay, map } from 'rxjs/operators'\n\nimport {\n  faBell, faBuilding, faChartLine, faCompass, faFilePdf, faSignature,\n  faUsers, faWrench\n} from '@fortawesome/free-solid-svg-icons'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamFormFieldModule } from '../../form-field/index'\nimport { TheSeamIconModule } from '../../icon/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamBaseLayoutModule } from '../base-layout/index'\nimport { TheSeamDashboardModule } from '../dashboard/index'\nimport { DynamicDatatablePageComponent } from '../dynamic-pages/dynamic-datatable-page/dynamic-datatable-page.component'\nimport { DynamicPagesModule } from '../dynamic-pages/dynamic-pages.module'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router/dynamic-router.module'\nimport { HierarchyLevelResolver } from '../dynamic-router/resolvers/hierarchy-level.resolver'\nimport { TheSeamSideNavModule } from '../side-nav/index'\nimport { TheSeamTopBarModule } from '../top-bar/index'\n\nimport { exampleData2 } from '../../datatable-dynamic/_story-data/dynamic-data-2'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-5',\n  template: `<seam-widget [icon]=\"faUsers\" titleText=\"2019 Member Enrollments\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <seam-widget-tile-list>\n    <button seam-widget-tile [icon]=\"tileIcon\">17 members.</button>\n    <button seam-widget-tile [icon]=\"tileIcon\"\n      [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\">13 pending approvals.</button>\n    [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\"\n  </seam-widget-tile-list>\n</seam-widget>`\n})\nclass StoryExWidget5Component {\n  faUsers = faUsers\n  faClock = faClock\n  tileIcon = 'assets/images/icons8-user-groups-ab17c7.png'\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-6',\n  template: `<seam-widget [icon]=\"faSignature\" titleText=\"Bill of Ladings\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <table class=\"table table-striped mb-0\">\n    <thead>\n      <tr>\n        <th scope=\"col\"></th>\n        <th scope=\"col\">Bill of Lading</th>\n        <th scope=\"col\">Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514071</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513935</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514006</td>\n        <td>Awaiting Signature</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513991</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514077</td>\n        <td>Complete</td>\n      </tr>\n    </tbody>\n  </table>\n\n</seam-widget>`\n})\nclass StoryExWidget6Component {\n  faSignature = faSignature\n  faFilePdf = faFilePdf\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-7',\n  template: `<seam-widget [icon]=\"faChartLine\" titleText=\"Product Trends By Month\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <img [src]=\"figureImg\" />\n\n</seam-widget>`\n})\nclass StoryExWidget7Component {\n  faChartLine = faChartLine\n  initialized$ = of(true)\n  figureImg = 'assets/images/chart.png'\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-8',\n  template: `<seam-widget [icon]=\"faClock\" titleText=\"Example Text\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa\n  qui officia deserunt mollit anim id est laborum. <a>More…</a></p>\n\n</seam-widget>`\n})\nclass StoryExWidget8Component {\n  faClock = faClock\n  initialized$ = of(true)\n}\n\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'user-details-ex',\n  template: `\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Dashboard</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/users\">Users</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Detail</li>\n      </ol>\n    </nav>\n\n    <div>User Details</div>\n  `\n})\nclass UserDetailsExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('user-details-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    // console.log('config', this._router.config)\n    // console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n\n\nstoriesOf('Framework/Examples', module)\n  .addDecorator(withKnobs)\n\n  .add('Table With Detail Nav', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n\n        StoryNameExComponent,\n        UserDetailsExComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        ReactiveFormsModule,\n        TheSeamFormFieldModule,\n        TheSeamDynamicRouterModule,\n        RouterModule.forRoot([\n          {\n            path: 'users',\n            component: DynamicDatatablePageComponent,\n            data: {\n              name: 'Users',\n              tableDef: exampleData2\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n            children: [\n              {\n                path: 'details',\n                component: UserDetailsExComponent,\n                data: { },\n                resolve: {\n                  hierLevel: HierarchyLevelResolver\n                }\n              },\n            ]\n          },\n          {\n            path: 'documents',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Documents'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'settings',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Settings'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'status',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Status'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          }\n        ], { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        DynamicPagesModule,\n        TheSeamIconModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n        UserDetailsExComponent\n      ]\n    },\n    props: {\n      navItems: [\n        {\n          itemType: 'link',\n          label: 'Dashboard',\n          icon: faSignature,\n          link: '/',\n        },\n        {\n          itemType: 'basic',\n          label: 'Tables',\n          icon: faBuilding,\n          children: [\n            {\n              itemType: 'link',\n              label: 'Users',\n              icon: faSignature,\n              link: 'users',\n            },\n            {\n              itemType: 'link',\n              label: 'Documents',\n              icon: faBuilding,\n              link: 'documents'\n            }\n          ]\n        },\n        { itemType: 'divider' },\n        {\n          itemType: 'title',\n          label: 'Admin'\n        },\n        {\n          itemType: 'link',\n          label: 'Settings',\n          icon: faSignature,\n          link: 'settings'\n        },\n        {\n          itemType: 'link',\n          label: 'Status',\n          icon: faBuilding,\n          link: 'status'\n        }\n      ],\n      widgets: [\n        { col: 1, order: 1, type: StoryExWidget1Component },\n        { col: 2, order: 2, type: StoryExWidget2Component },\n        { col: 3, order: 1, type: StoryExWidget3Component },\n        { col: 2, order: 2, type: StoryExWidget4Component },\n        { col: 3, order: 0, type: StoryExWidget5Component },\n        { col: 1, order: 0, type: StoryExWidget6Component },\n        { col: 2, order: 0, type: StoryExWidget7Component },\n        { col: 2, order: 1, type: StoryExWidget8Component }\n      ],\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n\n      dashboardBreadcrubs: boolean('Breadcrumbs on Dashboard', true),\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n          </seam-top-bar>\n\n          <seam-hierarchy-router-outlet *seamBaseLayoutContent>\n            <nav aria-label=\"breadcrumb\" *ngIf=\"dashboardBreadcrubs\">\n              <ol class=\"breadcrumb\">\n                <li class=\"breadcrumb-item active\" aria-current=\"page\">Dashboard</li>\n              </ol>\n            </nav>\n            <seam-dashboard [widgets]=\"widgets\"></seam-dashboard>\n          </seam-hierarchy-router-outlet>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoryExWidget7Component",
            "id": "component-StoryExWidget7Component-b298494ff06005973a966ef61983d5c3",
            "file": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-7",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faChartLine\" titleText=\"Product Trends By Month\"    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <img [src]=\"figureImg\" />\n\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faChartLine",
                    "defaultValue": "faChartLine",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 209
                },
                {
                    "name": "figureImg",
                    "defaultValue": "'assets/images/chart.png'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 211
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 210
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF, CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { delay, map } from 'rxjs/operators'\n\nimport {\n  faBell, faBuilding, faChartLine, faCompass, faFilePdf, faSignature,\n  faUsers, faWrench\n} from '@fortawesome/free-solid-svg-icons'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamFormFieldModule } from '../../form-field/index'\nimport { TheSeamIconModule } from '../../icon/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamBaseLayoutModule } from '../base-layout/index'\nimport { TheSeamDashboardModule } from '../dashboard/index'\nimport { DynamicDatatablePageComponent } from '../dynamic-pages/dynamic-datatable-page/dynamic-datatable-page.component'\nimport { DynamicPagesModule } from '../dynamic-pages/dynamic-pages.module'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router/dynamic-router.module'\nimport { HierarchyLevelResolver } from '../dynamic-router/resolvers/hierarchy-level.resolver'\nimport { TheSeamSideNavModule } from '../side-nav/index'\nimport { TheSeamTopBarModule } from '../top-bar/index'\n\nimport { exampleData2 } from '../../datatable-dynamic/_story-data/dynamic-data-2'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-5',\n  template: `<seam-widget [icon]=\"faUsers\" titleText=\"2019 Member Enrollments\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <seam-widget-tile-list>\n    <button seam-widget-tile [icon]=\"tileIcon\">17 members.</button>\n    <button seam-widget-tile [icon]=\"tileIcon\"\n      [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\">13 pending approvals.</button>\n    [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\"\n  </seam-widget-tile-list>\n</seam-widget>`\n})\nclass StoryExWidget5Component {\n  faUsers = faUsers\n  faClock = faClock\n  tileIcon = 'assets/images/icons8-user-groups-ab17c7.png'\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-6',\n  template: `<seam-widget [icon]=\"faSignature\" titleText=\"Bill of Ladings\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <table class=\"table table-striped mb-0\">\n    <thead>\n      <tr>\n        <th scope=\"col\"></th>\n        <th scope=\"col\">Bill of Lading</th>\n        <th scope=\"col\">Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514071</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513935</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514006</td>\n        <td>Awaiting Signature</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513991</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514077</td>\n        <td>Complete</td>\n      </tr>\n    </tbody>\n  </table>\n\n</seam-widget>`\n})\nclass StoryExWidget6Component {\n  faSignature = faSignature\n  faFilePdf = faFilePdf\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-7',\n  template: `<seam-widget [icon]=\"faChartLine\" titleText=\"Product Trends By Month\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <img [src]=\"figureImg\" />\n\n</seam-widget>`\n})\nclass StoryExWidget7Component {\n  faChartLine = faChartLine\n  initialized$ = of(true)\n  figureImg = 'assets/images/chart.png'\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-8',\n  template: `<seam-widget [icon]=\"faClock\" titleText=\"Example Text\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa\n  qui officia deserunt mollit anim id est laborum. <a>More…</a></p>\n\n</seam-widget>`\n})\nclass StoryExWidget8Component {\n  faClock = faClock\n  initialized$ = of(true)\n}\n\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'user-details-ex',\n  template: `\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Dashboard</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/users\">Users</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Detail</li>\n      </ol>\n    </nav>\n\n    <div>User Details</div>\n  `\n})\nclass UserDetailsExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('user-details-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    // console.log('config', this._router.config)\n    // console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n\n\nstoriesOf('Framework/Examples', module)\n  .addDecorator(withKnobs)\n\n  .add('Table With Detail Nav', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n\n        StoryNameExComponent,\n        UserDetailsExComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        ReactiveFormsModule,\n        TheSeamFormFieldModule,\n        TheSeamDynamicRouterModule,\n        RouterModule.forRoot([\n          {\n            path: 'users',\n            component: DynamicDatatablePageComponent,\n            data: {\n              name: 'Users',\n              tableDef: exampleData2\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n            children: [\n              {\n                path: 'details',\n                component: UserDetailsExComponent,\n                data: { },\n                resolve: {\n                  hierLevel: HierarchyLevelResolver\n                }\n              },\n            ]\n          },\n          {\n            path: 'documents',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Documents'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'settings',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Settings'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'status',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Status'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          }\n        ], { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        DynamicPagesModule,\n        TheSeamIconModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n        UserDetailsExComponent\n      ]\n    },\n    props: {\n      navItems: [\n        {\n          itemType: 'link',\n          label: 'Dashboard',\n          icon: faSignature,\n          link: '/',\n        },\n        {\n          itemType: 'basic',\n          label: 'Tables',\n          icon: faBuilding,\n          children: [\n            {\n              itemType: 'link',\n              label: 'Users',\n              icon: faSignature,\n              link: 'users',\n            },\n            {\n              itemType: 'link',\n              label: 'Documents',\n              icon: faBuilding,\n              link: 'documents'\n            }\n          ]\n        },\n        { itemType: 'divider' },\n        {\n          itemType: 'title',\n          label: 'Admin'\n        },\n        {\n          itemType: 'link',\n          label: 'Settings',\n          icon: faSignature,\n          link: 'settings'\n        },\n        {\n          itemType: 'link',\n          label: 'Status',\n          icon: faBuilding,\n          link: 'status'\n        }\n      ],\n      widgets: [\n        { col: 1, order: 1, type: StoryExWidget1Component },\n        { col: 2, order: 2, type: StoryExWidget2Component },\n        { col: 3, order: 1, type: StoryExWidget3Component },\n        { col: 2, order: 2, type: StoryExWidget4Component },\n        { col: 3, order: 0, type: StoryExWidget5Component },\n        { col: 1, order: 0, type: StoryExWidget6Component },\n        { col: 2, order: 0, type: StoryExWidget7Component },\n        { col: 2, order: 1, type: StoryExWidget8Component }\n      ],\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n\n      dashboardBreadcrubs: boolean('Breadcrumbs on Dashboard', true),\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n          </seam-top-bar>\n\n          <seam-hierarchy-router-outlet *seamBaseLayoutContent>\n            <nav aria-label=\"breadcrumb\" *ngIf=\"dashboardBreadcrubs\">\n              <ol class=\"breadcrumb\">\n                <li class=\"breadcrumb-item active\" aria-current=\"page\">Dashboard</li>\n              </ol>\n            </nav>\n            <seam-dashboard [widgets]=\"widgets\"></seam-dashboard>\n          </seam-hierarchy-router-outlet>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoryExWidget8Component",
            "id": "component-StoryExWidget8Component-b298494ff06005973a966ef61983d5c3",
            "file": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-ex-widget-8",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-widget [icon]=\"faClock\" titleText=\"Example Text\"    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa\n  qui officia deserunt mollit anim id est laborum. <a>More…</a></p>\n\n</seam-widget>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faClock",
                    "defaultValue": "faClock",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 231
                },
                {
                    "name": "initialized$",
                    "defaultValue": "of(true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 232
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF, CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { delay, map } from 'rxjs/operators'\n\nimport {\n  faBell, faBuilding, faChartLine, faCompass, faFilePdf, faSignature,\n  faUsers, faWrench\n} from '@fortawesome/free-solid-svg-icons'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamFormFieldModule } from '../../form-field/index'\nimport { TheSeamIconModule } from '../../icon/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamBaseLayoutModule } from '../base-layout/index'\nimport { TheSeamDashboardModule } from '../dashboard/index'\nimport { DynamicDatatablePageComponent } from '../dynamic-pages/dynamic-datatable-page/dynamic-datatable-page.component'\nimport { DynamicPagesModule } from '../dynamic-pages/dynamic-pages.module'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router/dynamic-router.module'\nimport { HierarchyLevelResolver } from '../dynamic-router/resolvers/hierarchy-level.resolver'\nimport { TheSeamSideNavModule } from '../side-nav/index'\nimport { TheSeamTopBarModule } from '../top-bar/index'\n\nimport { exampleData2 } from '../../datatable-dynamic/_story-data/dynamic-data-2'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-5',\n  template: `<seam-widget [icon]=\"faUsers\" titleText=\"2019 Member Enrollments\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <seam-widget-tile-list>\n    <button seam-widget-tile [icon]=\"tileIcon\">17 members.</button>\n    <button seam-widget-tile [icon]=\"tileIcon\"\n      [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\">13 pending approvals.</button>\n    [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\"\n  </seam-widget-tile-list>\n</seam-widget>`\n})\nclass StoryExWidget5Component {\n  faUsers = faUsers\n  faClock = faClock\n  tileIcon = 'assets/images/icons8-user-groups-ab17c7.png'\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-6',\n  template: `<seam-widget [icon]=\"faSignature\" titleText=\"Bill of Ladings\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <table class=\"table table-striped mb-0\">\n    <thead>\n      <tr>\n        <th scope=\"col\"></th>\n        <th scope=\"col\">Bill of Lading</th>\n        <th scope=\"col\">Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514071</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513935</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514006</td>\n        <td>Awaiting Signature</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513991</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514077</td>\n        <td>Complete</td>\n      </tr>\n    </tbody>\n  </table>\n\n</seam-widget>`\n})\nclass StoryExWidget6Component {\n  faSignature = faSignature\n  faFilePdf = faFilePdf\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-7',\n  template: `<seam-widget [icon]=\"faChartLine\" titleText=\"Product Trends By Month\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <img [src]=\"figureImg\" />\n\n</seam-widget>`\n})\nclass StoryExWidget7Component {\n  faChartLine = faChartLine\n  initialized$ = of(true)\n  figureImg = 'assets/images/chart.png'\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-8',\n  template: `<seam-widget [icon]=\"faClock\" titleText=\"Example Text\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa\n  qui officia deserunt mollit anim id est laborum. <a>More…</a></p>\n\n</seam-widget>`\n})\nclass StoryExWidget8Component {\n  faClock = faClock\n  initialized$ = of(true)\n}\n\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'user-details-ex',\n  template: `\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Dashboard</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/users\">Users</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Detail</li>\n      </ol>\n    </nav>\n\n    <div>User Details</div>\n  `\n})\nclass UserDetailsExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('user-details-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    // console.log('config', this._router.config)\n    // console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n\n\nstoriesOf('Framework/Examples', module)\n  .addDecorator(withKnobs)\n\n  .add('Table With Detail Nav', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n\n        StoryNameExComponent,\n        UserDetailsExComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        ReactiveFormsModule,\n        TheSeamFormFieldModule,\n        TheSeamDynamicRouterModule,\n        RouterModule.forRoot([\n          {\n            path: 'users',\n            component: DynamicDatatablePageComponent,\n            data: {\n              name: 'Users',\n              tableDef: exampleData2\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n            children: [\n              {\n                path: 'details',\n                component: UserDetailsExComponent,\n                data: { },\n                resolve: {\n                  hierLevel: HierarchyLevelResolver\n                }\n              },\n            ]\n          },\n          {\n            path: 'documents',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Documents'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'settings',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Settings'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'status',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Status'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          }\n        ], { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        DynamicPagesModule,\n        TheSeamIconModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n        UserDetailsExComponent\n      ]\n    },\n    props: {\n      navItems: [\n        {\n          itemType: 'link',\n          label: 'Dashboard',\n          icon: faSignature,\n          link: '/',\n        },\n        {\n          itemType: 'basic',\n          label: 'Tables',\n          icon: faBuilding,\n          children: [\n            {\n              itemType: 'link',\n              label: 'Users',\n              icon: faSignature,\n              link: 'users',\n            },\n            {\n              itemType: 'link',\n              label: 'Documents',\n              icon: faBuilding,\n              link: 'documents'\n            }\n          ]\n        },\n        { itemType: 'divider' },\n        {\n          itemType: 'title',\n          label: 'Admin'\n        },\n        {\n          itemType: 'link',\n          label: 'Settings',\n          icon: faSignature,\n          link: 'settings'\n        },\n        {\n          itemType: 'link',\n          label: 'Status',\n          icon: faBuilding,\n          link: 'status'\n        }\n      ],\n      widgets: [\n        { col: 1, order: 1, type: StoryExWidget1Component },\n        { col: 2, order: 2, type: StoryExWidget2Component },\n        { col: 3, order: 1, type: StoryExWidget3Component },\n        { col: 2, order: 2, type: StoryExWidget4Component },\n        { col: 3, order: 0, type: StoryExWidget5Component },\n        { col: 1, order: 0, type: StoryExWidget6Component },\n        { col: 2, order: 0, type: StoryExWidget7Component },\n        { col: 2, order: 1, type: StoryExWidget8Component }\n      ],\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n\n      dashboardBreadcrubs: boolean('Breadcrumbs on Dashboard', true),\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n          </seam-top-bar>\n\n          <seam-hierarchy-router-outlet *seamBaseLayoutContent>\n            <nav aria-label=\"breadcrumb\" *ngIf=\"dashboardBreadcrubs\">\n              <ol class=\"breadcrumb\">\n                <li class=\"breadcrumb-item active\" aria-current=\"page\">Dashboard</li>\n              </ol>\n            </nav>\n            <seam-dashboard [widgets]=\"widgets\"></seam-dashboard>\n          </seam-hierarchy-router-outlet>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoryLibConfirmDialogAlertServiceComponent",
            "id": "component-StoryLibConfirmDialogAlertServiceComponent-0cb32ab792f8ec6e9dcb4eae433f90a4",
            "file": "projects/ui-common/src/lib/confirm-dialog/stories/confirm-dialog.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-seam-confirm-dialog-alert-service",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"p-4\">\n  <button type=\"button\"\n    class=\"btn btn-lightgray\"\n    (click)=\"open()\">\n    Open Dialog\n  </button>\n</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alertMsgText",
                    "line": 122,
                    "type": "string"
                },
                {
                    "name": "msgText",
                    "line": 121,
                    "type": "string"
                },
                {
                    "name": "theme",
                    "line": 123,
                    "type": "ThemeTypes"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { Component, Input } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n\nimport { ThemeNames, ThemeTypes } from '../../models/index'\n\nimport { TheSeamConfirmDialogModule } from '../confirm-dialog.module'\nimport { SeamConfirmDialogService } from '../confirm-dialog.service'\n\nstoriesOf('Components/ConfirmDialog/Directive', module)\n  .addDecorator(withKnobs)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamConfirmDialogModule,\n        BrowserAnimationsModule\n      ]\n    },\n    props: {\n      msgText: text('Message', 'Do you confirm?'),\n      confirmed() {\n        console.log('Confirmed')\n      }\n    },\n    template: `\n      <div class=\"p-4\">\n        <button type=\"button\"\n          class=\"btn btn-lightgray\"\n          [libConfirmMsg]=\"msgText\"\n          (seamConfirmClick)=\"confirmed()\">\n          Open Dialog\n        </button>\n      </div>\n      `\n  }))\n\n  .add('With Alert', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamConfirmDialogModule,\n        BrowserAnimationsModule\n      ]\n    },\n    props: {\n      msgText: text('Message', 'Do you confirm?'),\n      alertMsgText: text('Alert Message', 'This is an alert'),\n      theme: select('Theme', ThemeNames, 'warning'),\n      confirmed() {\n        console.log('Confirmed')\n      }\n    },\n    template: `\n      <div class=\"p-4\">\n        <button type=\"button\"\n          class=\"btn m-2\"\n          [libConfirmMsg]=\"msgText\"\n          [libConfirmAlert]=\"{ message: alertMsgText, type: theme }\"\n          (seamConfirmClick)=\"confirmed()\">\n          Open Dialog\n        </button>\n      </div>\n      `\n  }))\n\n\n\n\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-confirm-dialog-basic-service',\n  styles: [],\n  template: `\n    <div class=\"p-4\">\n      <button type=\"button\"\n        class=\"btn btn-lightgray\"\n        (click)=\"open()\">\n        Open Dialog\n      </button>\n    </div>`\n})\nexport class StoryLibConfirmDialogBasicServiceComponent {\n\n  @Input() msgText: string\n\n  constructor(\n    private _confirmDialog: SeamConfirmDialogService\n  ) { }\n\n  open() {\n    this._confirmDialog.open(this.msgText).afterClosed().subscribe(result => {\n      if (result === 'confirm') {\n        console.log('confirmed')\n      } else {\n        console.log('canceled')\n      }\n    })\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-confirm-dialog-alert-service',\n  styles: [],\n  template: `\n    <div class=\"p-4\">\n      <button type=\"button\"\n        class=\"btn btn-lightgray\"\n        (click)=\"open()\">\n        Open Dialog\n      </button>\n    </div>`\n})\nexport class StoryLibConfirmDialogAlertServiceComponent {\n\n  @Input() msgText: string\n  @Input() alertMsgText: string\n  @Input() theme: ThemeTypes\n\n  constructor(\n    private _confirmDialog: SeamConfirmDialogService\n  ) { }\n\n  open() {\n    if (this.theme) {\n      this._confirmDialog.open(\n        this.msgText,\n        { message: this.alertMsgText, type: this.theme }\n      ).afterClosed().subscribe(result => {\n        if (result === 'confirm') {\n          console.log('confirmed')\n        } else {\n          console.log('canceled')\n        }\n      })\n    } else {\n      this._confirmDialog.open(this.msgText).afterClosed()\n        .subscribe(result => {\n          if (result === 'confirm') {\n            console.log('confirmed')\n          } else {\n            console.log('canceled')\n          }\n        })\n    }\n  }\n\n}\n\nstoriesOf('Components/ConfirmDialog/Service', module)\n  .addDecorator(withKnobs)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamConfirmDialogModule,\n        BrowserAnimationsModule\n      ],\n    },\n    component: StoryLibConfirmDialogBasicServiceComponent,\n    props: {\n      msgText: text('Message', 'Do you confirm?'),\n    }\n  }))\n\n  .add('With Alert', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamConfirmDialogModule,\n        BrowserAnimationsModule\n      ]\n    },\n    props: {\n      msgText: text('Message', 'Do you confirm?'),\n      alertMsgText: text('Alert Message', 'This is an alert'),\n      theme: select('Theme', ThemeNames, 'warning'),\n    },\n    component: StoryLibConfirmDialogAlertServiceComponent\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_confirmDialog",
                        "type": "SeamConfirmDialogService"
                    }
                ],
                "line": 123,
                "jsdoctags": [
                    {
                        "name": "_confirmDialog",
                        "type": "SeamConfirmDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StoryLibConfirmDialogBasicServiceComponent",
            "id": "component-StoryLibConfirmDialogBasicServiceComponent-0cb32ab792f8ec6e9dcb4eae433f90a4",
            "file": "projects/ui-common/src/lib/confirm-dialog/stories/confirm-dialog.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-seam-confirm-dialog-basic-service",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"p-4\">\n  <button type=\"button\"\n    class=\"btn btn-lightgray\"\n    (click)=\"open()\">\n    Open Dialog\n  </button>\n</div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "msgText",
                    "line": 88,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { Component, Input } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n\nimport { ThemeNames, ThemeTypes } from '../../models/index'\n\nimport { TheSeamConfirmDialogModule } from '../confirm-dialog.module'\nimport { SeamConfirmDialogService } from '../confirm-dialog.service'\n\nstoriesOf('Components/ConfirmDialog/Directive', module)\n  .addDecorator(withKnobs)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamConfirmDialogModule,\n        BrowserAnimationsModule\n      ]\n    },\n    props: {\n      msgText: text('Message', 'Do you confirm?'),\n      confirmed() {\n        console.log('Confirmed')\n      }\n    },\n    template: `\n      <div class=\"p-4\">\n        <button type=\"button\"\n          class=\"btn btn-lightgray\"\n          [libConfirmMsg]=\"msgText\"\n          (seamConfirmClick)=\"confirmed()\">\n          Open Dialog\n        </button>\n      </div>\n      `\n  }))\n\n  .add('With Alert', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamConfirmDialogModule,\n        BrowserAnimationsModule\n      ]\n    },\n    props: {\n      msgText: text('Message', 'Do you confirm?'),\n      alertMsgText: text('Alert Message', 'This is an alert'),\n      theme: select('Theme', ThemeNames, 'warning'),\n      confirmed() {\n        console.log('Confirmed')\n      }\n    },\n    template: `\n      <div class=\"p-4\">\n        <button type=\"button\"\n          class=\"btn m-2\"\n          [libConfirmMsg]=\"msgText\"\n          [libConfirmAlert]=\"{ message: alertMsgText, type: theme }\"\n          (seamConfirmClick)=\"confirmed()\">\n          Open Dialog\n        </button>\n      </div>\n      `\n  }))\n\n\n\n\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-confirm-dialog-basic-service',\n  styles: [],\n  template: `\n    <div class=\"p-4\">\n      <button type=\"button\"\n        class=\"btn btn-lightgray\"\n        (click)=\"open()\">\n        Open Dialog\n      </button>\n    </div>`\n})\nexport class StoryLibConfirmDialogBasicServiceComponent {\n\n  @Input() msgText: string\n\n  constructor(\n    private _confirmDialog: SeamConfirmDialogService\n  ) { }\n\n  open() {\n    this._confirmDialog.open(this.msgText).afterClosed().subscribe(result => {\n      if (result === 'confirm') {\n        console.log('confirmed')\n      } else {\n        console.log('canceled')\n      }\n    })\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-confirm-dialog-alert-service',\n  styles: [],\n  template: `\n    <div class=\"p-4\">\n      <button type=\"button\"\n        class=\"btn btn-lightgray\"\n        (click)=\"open()\">\n        Open Dialog\n      </button>\n    </div>`\n})\nexport class StoryLibConfirmDialogAlertServiceComponent {\n\n  @Input() msgText: string\n  @Input() alertMsgText: string\n  @Input() theme: ThemeTypes\n\n  constructor(\n    private _confirmDialog: SeamConfirmDialogService\n  ) { }\n\n  open() {\n    if (this.theme) {\n      this._confirmDialog.open(\n        this.msgText,\n        { message: this.alertMsgText, type: this.theme }\n      ).afterClosed().subscribe(result => {\n        if (result === 'confirm') {\n          console.log('confirmed')\n        } else {\n          console.log('canceled')\n        }\n      })\n    } else {\n      this._confirmDialog.open(this.msgText).afterClosed()\n        .subscribe(result => {\n          if (result === 'confirm') {\n            console.log('confirmed')\n          } else {\n            console.log('canceled')\n          }\n        })\n    }\n  }\n\n}\n\nstoriesOf('Components/ConfirmDialog/Service', module)\n  .addDecorator(withKnobs)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamConfirmDialogModule,\n        BrowserAnimationsModule\n      ],\n    },\n    component: StoryLibConfirmDialogBasicServiceComponent,\n    props: {\n      msgText: text('Message', 'Do you confirm?'),\n    }\n  }))\n\n  .add('With Alert', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamConfirmDialogModule,\n        BrowserAnimationsModule\n      ]\n    },\n    props: {\n      msgText: text('Message', 'Do you confirm?'),\n      alertMsgText: text('Alert Message', 'This is an alert'),\n      theme: select('Theme', ThemeNames, 'warning'),\n    },\n    component: StoryLibConfirmDialogAlertServiceComponent\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_confirmDialog",
                        "type": "SeamConfirmDialogService"
                    }
                ],
                "line": 88,
                "jsdoctags": [
                    {
                        "name": "_confirmDialog",
                        "type": "SeamConfirmDialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StoryNameExComponent",
            "id": "component-StoryNameExComponent-b298494ff06005973a966ef61983d5c3",
            "file": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "name-ex",
            "styleUrls": [],
            "styles": [],
            "template": "<div>Name: {{ name$ | async }}</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "name$",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 246
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF, CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { delay, map } from 'rxjs/operators'\n\nimport {\n  faBell, faBuilding, faChartLine, faCompass, faFilePdf, faSignature,\n  faUsers, faWrench\n} from '@fortawesome/free-solid-svg-icons'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamFormFieldModule } from '../../form-field/index'\nimport { TheSeamIconModule } from '../../icon/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamBaseLayoutModule } from '../base-layout/index'\nimport { TheSeamDashboardModule } from '../dashboard/index'\nimport { DynamicDatatablePageComponent } from '../dynamic-pages/dynamic-datatable-page/dynamic-datatable-page.component'\nimport { DynamicPagesModule } from '../dynamic-pages/dynamic-pages.module'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router/dynamic-router.module'\nimport { HierarchyLevelResolver } from '../dynamic-router/resolvers/hierarchy-level.resolver'\nimport { TheSeamSideNavModule } from '../side-nav/index'\nimport { TheSeamTopBarModule } from '../top-bar/index'\n\nimport { exampleData2 } from '../../datatable-dynamic/_story-data/dynamic-data-2'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-5',\n  template: `<seam-widget [icon]=\"faUsers\" titleText=\"2019 Member Enrollments\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <seam-widget-tile-list>\n    <button seam-widget-tile [icon]=\"tileIcon\">17 members.</button>\n    <button seam-widget-tile [icon]=\"tileIcon\"\n      [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\">13 pending approvals.</button>\n    [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\"\n  </seam-widget-tile-list>\n</seam-widget>`\n})\nclass StoryExWidget5Component {\n  faUsers = faUsers\n  faClock = faClock\n  tileIcon = 'assets/images/icons8-user-groups-ab17c7.png'\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-6',\n  template: `<seam-widget [icon]=\"faSignature\" titleText=\"Bill of Ladings\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <table class=\"table table-striped mb-0\">\n    <thead>\n      <tr>\n        <th scope=\"col\"></th>\n        <th scope=\"col\">Bill of Lading</th>\n        <th scope=\"col\">Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514071</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513935</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514006</td>\n        <td>Awaiting Signature</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513991</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514077</td>\n        <td>Complete</td>\n      </tr>\n    </tbody>\n  </table>\n\n</seam-widget>`\n})\nclass StoryExWidget6Component {\n  faSignature = faSignature\n  faFilePdf = faFilePdf\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-7',\n  template: `<seam-widget [icon]=\"faChartLine\" titleText=\"Product Trends By Month\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <img [src]=\"figureImg\" />\n\n</seam-widget>`\n})\nclass StoryExWidget7Component {\n  faChartLine = faChartLine\n  initialized$ = of(true)\n  figureImg = 'assets/images/chart.png'\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-8',\n  template: `<seam-widget [icon]=\"faClock\" titleText=\"Example Text\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa\n  qui officia deserunt mollit anim id est laborum. <a>More…</a></p>\n\n</seam-widget>`\n})\nclass StoryExWidget8Component {\n  faClock = faClock\n  initialized$ = of(true)\n}\n\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'user-details-ex',\n  template: `\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Dashboard</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/users\">Users</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Detail</li>\n      </ol>\n    </nav>\n\n    <div>User Details</div>\n  `\n})\nclass UserDetailsExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('user-details-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    // console.log('config', this._router.config)\n    // console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n\n\nstoriesOf('Framework/Examples', module)\n  .addDecorator(withKnobs)\n\n  .add('Table With Detail Nav', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n\n        StoryNameExComponent,\n        UserDetailsExComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        ReactiveFormsModule,\n        TheSeamFormFieldModule,\n        TheSeamDynamicRouterModule,\n        RouterModule.forRoot([\n          {\n            path: 'users',\n            component: DynamicDatatablePageComponent,\n            data: {\n              name: 'Users',\n              tableDef: exampleData2\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n            children: [\n              {\n                path: 'details',\n                component: UserDetailsExComponent,\n                data: { },\n                resolve: {\n                  hierLevel: HierarchyLevelResolver\n                }\n              },\n            ]\n          },\n          {\n            path: 'documents',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Documents'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'settings',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Settings'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'status',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Status'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          }\n        ], { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        DynamicPagesModule,\n        TheSeamIconModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n        UserDetailsExComponent\n      ]\n    },\n    props: {\n      navItems: [\n        {\n          itemType: 'link',\n          label: 'Dashboard',\n          icon: faSignature,\n          link: '/',\n        },\n        {\n          itemType: 'basic',\n          label: 'Tables',\n          icon: faBuilding,\n          children: [\n            {\n              itemType: 'link',\n              label: 'Users',\n              icon: faSignature,\n              link: 'users',\n            },\n            {\n              itemType: 'link',\n              label: 'Documents',\n              icon: faBuilding,\n              link: 'documents'\n            }\n          ]\n        },\n        { itemType: 'divider' },\n        {\n          itemType: 'title',\n          label: 'Admin'\n        },\n        {\n          itemType: 'link',\n          label: 'Settings',\n          icon: faSignature,\n          link: 'settings'\n        },\n        {\n          itemType: 'link',\n          label: 'Status',\n          icon: faBuilding,\n          link: 'status'\n        }\n      ],\n      widgets: [\n        { col: 1, order: 1, type: StoryExWidget1Component },\n        { col: 2, order: 2, type: StoryExWidget2Component },\n        { col: 3, order: 1, type: StoryExWidget3Component },\n        { col: 2, order: 2, type: StoryExWidget4Component },\n        { col: 3, order: 0, type: StoryExWidget5Component },\n        { col: 1, order: 0, type: StoryExWidget6Component },\n        { col: 2, order: 0, type: StoryExWidget7Component },\n        { col: 2, order: 1, type: StoryExWidget8Component }\n      ],\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n\n      dashboardBreadcrubs: boolean('Breadcrumbs on Dashboard', true),\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n          </seam-top-bar>\n\n          <seam-hierarchy-router-outlet *seamBaseLayoutContent>\n            <nav aria-label=\"breadcrumb\" *ngIf=\"dashboardBreadcrubs\">\n              <ol class=\"breadcrumb\">\n                <li class=\"breadcrumb-item active\" aria-current=\"page\">Dashboard</li>\n              </ol>\n            </nav>\n            <seam-dashboard [widgets]=\"widgets\"></seam-dashboard>\n          </seam-hierarchy-router-outlet>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 246,
                "jsdoctags": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StoryNameExComponent",
            "id": "component-StoryNameExComponent-0445e6101affbb92502f4eb9ae11a9fc-1",
            "file": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "name-ex",
            "styleUrls": [],
            "styles": [],
            "template": "<div>Name: {{ name$ | async }}</div>\n<router-outlet></router-outlet>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "name$",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { TheSeamFormFieldModule } from '../../../form-field/index'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router.module'\nimport { HierarchyLevelResolver } from '../resolvers/hierarchy-level.resolver'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'sub-name-ex',\n  template: `<div>Sub Name: {{ name$ | async }}</div><router-outlet></router-outlet>`,\n})\nclass StorySubNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute\n  ) {\n    console.log('sub-name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n    <router-outlet></router-outlet>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-base',\n  template: `\n    URL: {{ _router.url }}\n    <div class=\"my-2 p-2\">\n      <form class=\"mb-2\" (ngSubmit)=\"go()\">\n        <input seamInput [formControl]=\"_control\">\n      </form>\n      <button class=\"btn btn-sm btn-light\" type=\"button\" [routerLink]=\"_control.value\">Go</button>\n    </div>\n    <div>\n      <router-outlet></router-outlet>\n    </div>\n  `\n})\nclass StoryExBaseComponent {\n\n  _control = new FormControl('/name-ex/sub-name')\n\n  constructor(\n    private _route: ActivatedRoute,\n    public _router: Router\n  ) {\n    console.log('this._route', this._route)\n    console.log('this._router', this._router)\n  }\n\n  public go() {\n    this._router.navigateByUrl(this._control.value)\n  }\n}\n\n\n\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id Start\n// ////////////////////////////////////////////////////////////////////////////\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-1',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdOneComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-2',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdTwoComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    // this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-3',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <div>\n        <div>Type: {{ type$ | async }}</div>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"{{ nextId }}\">Next Random</button>\n      </div>\n    </seam-hierarchy-router-outlet>\n    <!--<router-outlet></router-outlet>-->\n  `,\n  styles: [`\n    :host {\n      display: block;\n      background: rgba(30,30,80,0.3);\n      outline: red;\n      width: 100%;\n      height: 100px;\n    }\n  `]\n})\nclass RecursiveIdThreeComponent {\n\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@NgModule({\n  declarations: [\n    RecursiveIdOneComponent,\n    RecursiveIdTwoComponent,\n    RecursiveIdThreeComponent\n  ],\n  imports: [\n    CommonModule,\n    TheSeamDynamicRouterModule,\n    RouterModule.forChild([\n      // {\n      //   path: 'table/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'table' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'new/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'new' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'edit/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'edit' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'view/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      // {\n      //   path: ':type/:id',\n      //   component: RecursiveIdTwoComponent,\n      //   // data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      {\n        path: ':type',\n        component: RecursiveIdThreeComponent,\n        resolve: {\n          hierLevel: HierarchyLevelResolver\n        },\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [ ]\n})\nclass RecursiveIdModule { }\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id End\n// ////////////////////////////////////////////////////////////////////////////\n\n\n\n@NgModule({\n  declarations: [\n    StorySubNameExComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: 'sub-name',\n        component: StorySubNameExComponent,\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [\n    StorySubNameExComponent\n  ]\n})\nclass LevelTwoModule { }\n\n\n\n\n//\n// Example\n//\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-1',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx1Component {\n  constructor() {\n    console.log('[StoryEx1Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1\">Prev</button>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2/ex-3\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx2Component {\n  constructor() {\n    console.log('[StoryEx2Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Prev</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx3Component {\n  constructor() {\n    console.log('[StoryEx3Component]')\n  }\n}\n\n\n\n\n\n\n// storiesOf('Framework/DynamicRouter', module)\n//   .addDecorator(withKnobs)\n\n//   .add('Recursive', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryNameExComponent,\n//         StoryExBaseComponent\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: 'name-ex',\n//             component: StoryNameExComponent,\n//             data: {\n//               name: 'Mark'\n//             },\n//             // loadChildren: () => Promise.resolve(LevelTwoModule)\n//             loadChildren: () => of(LevelTwoModule)\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n//         StoryNameExComponent\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <story-ex-base></story-ex-base>\n//     `\n//   }))\n\n\n//   .add('Example', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryEx1Component,\n//         StoryEx2Component,\n//         StoryEx3Component\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: '',\n//             pathMatch: 'full',\n//             redirectTo: '/ex-1',\n//           },\n//           {\n//             path: 'ex-1',\n//             component: StoryEx1Component,\n//             children: [\n//               {\n//                 path: 'ex-2',\n//                 component: StoryEx2Component,\n//                 children: [\n//                   {\n//                     path: 'ex-3',\n//                     component: StoryEx3Component\n//                   }\n//                 ]\n//               }\n//             ]\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <router-outlet></router-outlet>\n//     `\n//   }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "StoryNameExComponent-1"
        },
        {
            "name": "StoryRoutePlacholderComponent",
            "id": "component-StoryRoutePlacholderComponent-c96a1065d75981025a74b0eea588d5c9",
            "file": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "Url: {{ router.url }}",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF } from '@angular/common'\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { Route, Router, RouterModule } from '@angular/router'\nimport { of } from 'rxjs'\nimport { delay } from 'rxjs/operators'\n\nimport {\n  faBell,\n  faComment\n} from '@fortawesome/free-regular-svg-icons'\nimport {\n  faBook,\n  faBuilding,\n  faExclamationTriangle,\n  faQuestionCircle,\n  faSignature,\n  faSignOutAlt,\n  faUserAlt,\n  faWrench\n} from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamBreadcrumbsModule } from '../../breadcrumbs/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamDashboardModule } from '../dashboard/dashboard.module'\nimport { ISideNavItem } from '../side-nav/side-nav.models'\nimport { TheSeamSideNavModule } from '../side-nav/side-nav.module'\nimport { TheSeamTopBarModule } from '../top-bar/top-bar.module'\n\nimport { TheSeamBaseLayoutModule } from './base-layout.module'\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\" [hasConfig]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true).pipe(delay(1000))\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({ template: `Url: {{ router.url }}` })\nclass StoryRoutePlacholderComponent {\n  constructor(public router: Router) { }\n}\n\n\nconst routes: Route[] = [\n  {\n    path: '',\n    data: { breadcrumb: 'Dashboard' },\n    children: [\n      { path: 'example1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1' } },\n      {\n        path: 'example2',\n        component: StoryRoutePlacholderComponent,\n        data: { breadcrumb: 'example2' },\n        children: [\n          { path: 'example1.1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.1' } },\n          { path: 'example1.2', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.2' } },\n          { path: 'example1.3', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.3' } },\n          { path: 'example1.4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.4' } }\n        ]\n      },\n      {\n        path: 'example3',\n        component: StoryRoutePlacholderComponent,\n        data: { breadcrumb: 'example3' },\n        children: [\n          { path: 'example1.1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.1' } },\n          { path: 'example1.2', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.2' } },\n          { path: 'example1.3', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.3' } },\n          { path: 'example1.4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.4' } }\n        ]\n      },\n      { path: 'example4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example4' } },\n      { path: 'example5', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example5' } }\n    ]\n  }\n]\n\nconst navItems: ISideNavItem[] = [\n  {\n    itemType: 'link',\n    label: 'Example 1',\n    icon: faSignature,\n    link: 'example1',\n  },\n  {\n    itemType: 'link',\n    label: 'Example 2',\n    icon: faBuilding,\n    link: 'example2',\n    children: [\n      {\n        itemType: 'link',\n        label: 'Example 1.1',\n        icon: faSignature,\n        link: 'example2/example1.1',\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.2',\n        icon: faBuilding,\n        link: 'example2/example1.2'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.3',\n        link: 'example2/example1.3'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.4',\n        // link: 'example2/example1.4'\n      }\n    ]\n  },\n  {\n    itemType: 'basic',\n    label: 'Example 3',\n    icon: faBook,\n    children: [\n      {\n        itemType: 'link',\n        label: 'Example 1.1',\n        icon: faSignature,\n        link: 'example3/example1.1',\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.2',\n        icon: faBuilding,\n        link: 'example3/example1.2'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.3',\n        link: 'example3/example1.3'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.4',\n        // link: 'example3/example1.4'\n      }\n    ]\n  },\n  {\n    itemType: 'link',\n    label: 'Example 4',\n    link: 'example4'\n  },\n  {\n    itemType: 'link',\n    label: 'Example 5',\n    // link: 'example5'\n  }\n]\n\nstoriesOf('Framework/BaseLayout', module)\n  .addDecorator(withKnobs)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryRoutePlacholderComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        RouterModule.forRoot(routes, { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        TheSeamBreadcrumbsModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component\n      ]\n    },\n    props: {\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      hasTitle: boolean('hasTitle', false),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n      hasNotificationsMenu: boolean('hasNotificationsMenu', true),\n      navItems,\n      widgets: [\n        { col: 1, order: 0, type: StoryExWidget1Component },\n        { col: 2, order: 0, type: StoryExWidget2Component },\n        { col: 3, order: 0, type: StoryExWidget3Component },\n        { col: 2, order: 1, type: StoryExWidget4Component }\n      ],\n      faUserAlt,\n      faQuestionCircle,\n      faSignOutAlt,\n      faBell,\n      faExclamationTriangle,\n      faComment\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <div class=\"p-1\" *seamBaseLayoutContentHeader>\n            <seam-breadcrumbs></seam-breadcrumbs>\n          </div>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [hasTitle]=\"hasTitle\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n            <seam-menu seamTopBarMenu>\n              <a seamMenuItem [icon]=\"faUserAlt\" routerLink=\"/profile\">Profile</a>\n              <button seamMenuItem [icon]=\"faQuestionCircle\">About</button>\n              <seam-menu-divider></seam-menu-divider>\n              <a seamMenuItem [icon]=\"faSignOutAlt\" routerLink=\"/logout\">Sign out</a>\n            </seam-menu>\n\n            <button seamIconBtn *seamTopBarItem\n              [icon]=\"faBell\"\n              iconType=\"borderless-styled-square\"\n              [seamMenuToggle]=\"notificationMenu\">\n              <span class=\"sr-only\">Notifications</span>\n              <seam-icon-notification iconClass=\"text-danger\"></seam-icon-notification>\n            </button>\n            <seam-menu #notificationMenu>\n              <div style=\"width: 400px\">\n                <a seamMenuItem [icon]=\"faExclamationTriangle\" iconClass=\"text-warning\" routerLink=\"/profile\">\n                  There is a problem with you self-assessment answers.\n                </a>\n                <a seamMenuItem [icon]=\"faExclamationTriangle\" iconClass=\"text-warning\" routerLink=\"/profile\">\n                  Your password expires in 10 days.\n                </a>\n                <button seamMenuItem [icon]=\"faComment\" iconClass=\"text-primary\">\n                  You have unread feedback on your document.\n                </button>\n                <seam-menu-footer>\n                  <a seamMenuFooterAction routerLink=\"/notifications\">See All</a>\n                </seam-menu-footer>\n              </div>\n            </seam-menu>\n          </seam-top-bar>\n          <seam-dashboard\n            *seamBaseLayoutContent\n            [widgets]=\"widgets\">\n          </seam-dashboard>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 117,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StoryRoutePlacholderComponent",
            "id": "component-StoryRoutePlacholderComponent-ccdb810bef530a41257c2cc88efd1027-1",
            "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "Url: {{ router.url }}",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF } from '@angular/common'\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { Router, RouterModule } from '@angular/router'\n\nimport { faBuilding, faCompass } from '@fortawesome/free-regular-svg-icons'\nimport { faSignature } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamSideNavModule } from './side-nav.module'\n\n@Component({ template: `Url: {{ router.url }}` })\nclass StoryRoutePlacholderComponent {\n  constructor(public router: Router) { }\n}\n\nstoriesOf('Framework/SideNav', module)\n  .addDecorator(withKnobs)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryRoutePlacholderComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        RouterModule.forRoot([\n          { path: 'example1', component: StoryRoutePlacholderComponent },\n          {\n            path: 'example2',\n            component: StoryRoutePlacholderComponent,\n            children: [\n              { path: 'example1.1', component: StoryRoutePlacholderComponent },\n              { path: 'example1.2', component: StoryRoutePlacholderComponent },\n              { path: 'example1.3', component: StoryRoutePlacholderComponent },\n              { path: 'example1.4', component: StoryRoutePlacholderComponent }\n            ]\n          },\n          {\n            path: 'example3',\n            component: StoryRoutePlacholderComponent,\n            children: [\n              { path: 'example1.1', component: StoryRoutePlacholderComponent },\n              { path: 'example1.2', component: StoryRoutePlacholderComponent },\n              { path: 'example1.3', component: StoryRoutePlacholderComponent },\n              { path: 'example1.4', component: StoryRoutePlacholderComponent },\n              {\n                path: 'ex2',\n                component: StoryRoutePlacholderComponent,\n                children: [\n                  { path: 'example1.1', component: StoryRoutePlacholderComponent },\n                  { path: 'example1.2', component: StoryRoutePlacholderComponent },\n                  { path: 'example1.3', component: StoryRoutePlacholderComponent },\n                  { path: 'example1.4', component: StoryRoutePlacholderComponent }\n                ]\n              }\n            ]\n          },\n          { path: 'example4', component: StoryRoutePlacholderComponent },\n          { path: 'example5', component: StoryRoutePlacholderComponent }\n        ], { useHash: true }),\n        TheSeamSideNavModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ]\n    },\n    props: {\n      navItems: [\n        {\n          itemType: 'link',\n          label: 'Example 1',\n          icon: faSignature,\n          link: 'example1',\n        },\n        {\n          itemType: 'link',\n          label: 'Example 2',\n          icon: faBuilding,\n          link: 'example2',\n          children: [\n            {\n              itemType: 'link',\n              label: 'Example 1.1',\n              icon: faSignature,\n              link: 'example2/example1.1',\n            },\n            {\n              itemType: 'link',\n              label: 'Example 1.2',\n              icon: faBuilding,\n              link: 'example2/example1.2'\n            },\n            {\n              itemType: 'link',\n              label: 'Example 1.3',\n              link: 'example2/example1.3'\n            },\n            {\n              itemType: 'link',\n              label: 'Example 1.4',\n              // link: 'example2/example1.4'\n            }\n          ]\n        },\n        {\n          itemType: 'basic',\n          label: 'Example 3',\n          icon: faCompass,\n          children: [\n            {\n              itemType: 'link',\n              label: 'Example 1.1',\n              icon: faSignature,\n              link: 'example3/example1.1',\n            },\n            {\n              itemType: 'link',\n              label: 'Example 1.2',\n              icon: faBuilding,\n              link: 'example3/example1.2'\n            },\n            {\n              itemType: 'link',\n              label: 'Example 1.3',\n              link: 'example3/example1.3'\n            },\n            {\n              itemType: 'link',\n              label: 'Example 1.4',\n              // link: 'example3/example1.4'\n            },\n            {\n              itemType: 'basic',\n              label: 'Example 3.2',\n              icon: faCompass,\n              children: [\n                {\n                  itemType: 'link',\n                  label: 'Example 1.1',\n                  icon: faSignature,\n                  link: 'example3/ex2/example1.1',\n                },\n                {\n                  itemType: 'link',\n                  label: 'Example 1.2',\n                  icon: faBuilding,\n                  link: 'example3/ex2/example1.2'\n                },\n                {\n                  itemType: 'link',\n                  label: 'Example 1.3',\n                  link: 'example3/ex2/example1.3'\n                },\n                {\n                  itemType: 'link',\n                  label: 'Example 1.4',\n                  // link: 'example3/ex2/example1.4'\n                },\n                {\n                  itemType: 'link',\n                  label: 'Example 1.3',\n                  link: 'example3/ex2/example1.3'\n                },\n              ]\n            },\n            {\n              itemType: 'link',\n              label: 'Example 1.3',\n              link: 'example3/example1.3'\n            },\n          ]\n        },\n        { itemType: 'divider' },\n        {\n          itemType: 'title',\n          label: 'Extra'\n        },\n        {\n          itemType: 'link',\n          label: 'Example 4',\n          icon: faSignature,\n          link: 'example4'\n        },\n        {\n          itemType: 'link',\n          label: 'Example 5',\n          icon: faBuilding,\n          // link: 'example5'\n        }\n      ]\n    },\n    template: `\n      <div class=\"d-flex flex-row vh-100\">\n        <div style=\"width: 260px;\" class=\"h-100\">\n          <seam-side-nav [items]=\"navItems\"></seam-side-nav>\n        </div>\n\n\n        <div class=\"p-4\">\n          <router-outlet></router-outlet>\n        </div>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "StoryRoutePlacholderComponent-1"
        },
        {
            "name": "StoryRoutePlacholderComponent",
            "id": "component-StoryRoutePlacholderComponent-4cbcd31b091dda298ac3924cffc7833d-2",
            "file": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "Url: {{ router.url }}",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF } from '@angular/common'\nimport { Component, Directive, Input } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { Router, RouterModule } from '@angular/router'\n\nimport { faBuilding, faCompass } from '@fortawesome/free-regular-svg-icons'\nimport { faSignature } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamSideNavModule } from '../side-nav.module'\n\n@Component({ template: `Url: {{ router.url }}` })\nclass StoryRoutePlacholderComponent {\n  constructor(public router: Router) { }\n}\n\n// tslint:disable-next-line:directive-selector\n@Directive({ selector: '[storyNavToggle]' })\nclass StoryNavToggleDirective {\n  @Input() set storyNavToggle(value: string) { this._router.navigateByUrl(value) }\n  constructor(private _router: Router) { }\n}\n\nstoriesOf('Framework/SideNav/Item/Basic', module)\n  .addDecorator(withKnobs)\n\n  .add('No Children', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryRoutePlacholderComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        RouterModule.forRoot([], { useHash: true }),\n        TheSeamSideNavModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ]\n    },\n    props: {\n      itemType: 'basic',\n      label: 'Example 1',\n      icon: faBuilding\n    },\n    template: `\n      <div class=\"d-flex flex-row vh-100\">\n        <div style=\"width: 260px; background-color: #e9ecef;\" class=\"h-100\">\n          <seam-side-nav-item\n            [itemType]=\"itemType\"\n            [icon]=\"icon\"\n            [label]=\"label\">\n          </seam-side-nav-item>\n        </div>\n      </div>\n    `\n  }))\n\n  .add('With Children', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryRoutePlacholderComponent,\n        StoryNavToggleDirective\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        RouterModule.forRoot([\n          { path: 'example1', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.1', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.2', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.3', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.2.1', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.2.2', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.2.3', component: StoryRoutePlacholderComponent },\n          { path: 'example2', component: StoryRoutePlacholderComponent }\n        ], { useHash: true }),\n        TheSeamSideNavModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ]\n    },\n    props: {\n      currentUrl: 'example1',\n\n      itemType: 'basic',\n      label: 'Example 1',\n      icon: faBuilding,\n      children: [\n        {\n          itemType: 'link',\n          label: 'Example 1.1',\n          icon: faSignature,\n          link: 'example1/example1.1'\n        },\n        // {\n        //   itemType: 'link',\n        //   label: 'Example 1.2',\n        //   icon: faBuilding,\n        //   link: 'example1/example1.2',\n        // },\n        {\n          itemType: 'basic',\n          label: 'Example 1.2',\n          icon: faBuilding,\n          children: [\n            {\n              itemType: 'link',\n              label: 'Example 1.1',\n              icon: faSignature,\n              link: 'example1/example1.2.1'\n            },\n            {\n              itemType: 'link',\n              label: 'Example 1.2',\n              icon: faBuilding,\n              link: 'example1/example1.2.2'\n            },\n            {\n              itemType: 'link',\n              label: 'Example 1.3',\n              link: 'example1/example1.2.3'\n            },\n          ]\n        },\n        {\n          itemType: 'link',\n          label: 'Example 1.3',\n          link: 'example1/example1.3'\n        },\n      ]\n    },\n    template: `\n      <div class=\"d-flex flex-row vh-100\" [storyNavToggle]=\"currentUrl\">\n        <div style=\"width: 260px; background-color: #e9ecef;\" class=\"h-100\">\n          <seam-side-nav-item\n            [itemType]=\"itemType\"\n            [icon]=\"icon\"\n            [label]=\"label\"\n            [children]=\"children\">\n          </seam-side-nav-item>\n        </div>\n\n\n        <div class=\"p-4\">\n          <router-outlet></router-outlet>\n          <div>\n            <a routerLink=\"/example1\">Set Route: '/example1'</a><br>\n            <a routerLink=\"/example1/example1.1\">Set Route: '/example1/example1.1'</a><br>\n            <a routerLink=\"/example1/example1.2\">Set Route: '/example1/example1.2'</a><br>\n            <a routerLink=\"/example1/example1.3\">Set Route: '/example1/example1.3'</a><br>\n          </div>\n        </div>\n      </div>\n    `\n  }))\n\n\nstoriesOf('Framework/SideNav/Item/Link', module)\n  .addDecorator(withKnobs)\n\n  .add('No Children', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryRoutePlacholderComponent,\n        StoryNavToggleDirective\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        RouterModule.forRoot([\n          { path: 'example1', component: StoryRoutePlacholderComponent },\n          { path: 'example2', component: StoryRoutePlacholderComponent }\n        ], { useHash: true }),\n        TheSeamSideNavModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ]\n    },\n    props: {\n      currentUrl: 'example2',\n\n      itemType: 'link',\n      label: 'Example 1',\n      icon: faBuilding,\n      link: 'example1',\n      queryParams: [],\n      children: []\n    },\n    template: `\n      <div class=\"d-flex flex-row vh-100\" [storyNavToggle]=\"currentUrl\">\n        <div style=\"width: 260px; background-color: #e9ecef;\" class=\"h-100\">\n          <seam-side-nav-item\n            [itemType]=\"itemType\"\n            [icon]=\"icon\"\n            [label]=\"label\"\n            [link]=\"link\"\n            [queryParams]=\"queryParams\"\n            [children]=\"children\">\n          </seam-side-nav-item>\n        </div>\n\n\n        <div class=\"p-4\">\n          <router-outlet></router-outlet>\n          <div>\n            <a routerLink=\"/example1\">Set Active</a><br>\n            <a routerLink=\"/example2\">Set Inactive</a>\n          </div>\n        </div>\n      </div>\n    `\n  }))\n\n  .add('With Children', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryRoutePlacholderComponent,\n        StoryNavToggleDirective\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        RouterModule.forRoot([\n          { path: 'example1', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.1', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.2', component: StoryRoutePlacholderComponent },\n          { path: 'example1/example1.3', component: StoryRoutePlacholderComponent },\n          { path: 'example2', component: StoryRoutePlacholderComponent },\n        ], { useHash: true }),\n        TheSeamSideNavModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ]\n    },\n    props: {\n      currentUrl: 'example1',\n\n      itemType: 'link',\n      label: 'Example 1',\n      icon: faBuilding,\n      link: 'example1',\n      children: [\n        {\n          itemType: 'link',\n          label: 'Example 1.1',\n          icon: faSignature,\n          link: 'example1/example1.1'\n        },\n        {\n          itemType: 'link',\n          label: 'Example 1.2',\n          icon: faBuilding,\n          link: 'example1/example1.2'\n        },\n        {\n          itemType: 'link',\n          label: 'Example 1.3',\n          link: 'example1/example1.3'\n        },\n      ]\n    },\n    template: `\n      <div class=\"d-flex flex-row vh-100\" [storyNavToggle]=\"currentUrl\">\n        <div style=\"width: 260px; background-color: #e9ecef;\" class=\"h-100\">\n          <seam-side-nav-item\n            [itemType]=\"itemType\"\n            [icon]=\"icon\"\n            [label]=\"label\"\n            [link]=\"link\"\n            [children]=\"children\">\n          </seam-side-nav-item>\n        </div>\n\n\n        <div class=\"p-4\">\n          <router-outlet></router-outlet>\n          <div>\n            <a routerLink=\"/example1\">Set Route: '/example1'</a><br>\n            <a routerLink=\"/example1/example1.1\">Set Route: '/example1/example1.1'</a><br>\n            <a routerLink=\"/example1/example1.2\">Set Route: '/example1/example1.2'</a><br>\n            <a routerLink=\"/example1/example1.3\">Set Route: '/example1/example1.3'</a><br>\n            <a routerLink=\"/example2\">Set Route: '/example2'</a><br>\n          </div>\n        </div>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "StoryRoutePlacholderComponent-2"
        },
        {
            "name": "StoryseamModalBasicComponent",
            "id": "component-StoryseamModalBasicComponent-a1914d3e110575fadf6f0dff56ee5dd8",
            "file": "projects/ui-common/src/lib/modal/stories/modal.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-seam-modal-basic",
            "styleUrls": [],
            "styles": [],
            "template": "<span>Example</span>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { storiesOf } from '@storybook/angular'\n\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n\nimport { TheSeamScrollbarModule } from '../../scrollbar/index'\n\nimport { ModalConfig } from '../modal-config'\nimport { TheSeamModalModule } from '../modal.module'\nimport { Modal } from '../modal.service'\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-basic',\n  styles: [],\n  template: `<span>Example</span>`\n})\nexport class StoryseamModalBasicComponent { }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-simple',\n  styles: [],\n  template: `\n    <seam-modal-header>\n      <h4 seamModalTitle>Title</h4>\n      <button seamModalClose=\"cancel\" class=\"close\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </seam-modal-header>\n    <seam-modal-body>\n      Example\n    </seam-modal-body>\n    <seam-modal-footer>\n      <button class=\"btn btn-primary\" seamModalClose=\"Yes\">Yes</button>\n      <button class=\"btn btn-lightgray\" seamModalClose=\"No\">No</button>\n    </seam-modal-footer>\n  `\n})\nexport class StoryseamModalSimpleComponent { }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-basic-example',\n  styles: [],\n  template: `\n    <div class=\"p-4\">\n      <button type=\"button\" class=\"btn btn-lightgray\" (click)=\"open()\">Open</button>\n    </div>\n  `\n})\nexport class StoryseamModalBasicExampleComponent {\n\n  constructor(\n    private modal: Modal\n  ) { }\n\n  open() {\n    const modalRef = this.modal.openFromComponent(StoryseamModalBasicComponent)\n\n    modalRef.afterClosed().subscribe(v => console.log('result', v))\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-simple-example',\n  styles: [],\n  template: `\n    <div class=\"p-4\">\n      <button type=\"button\" class=\"btn btn-lightgray\" (click)=\"open()\">Open</button>\n    </div>\n  `\n})\nexport class StoryseamModalSimpleExampleComponent {\n\n  constructor(\n    private modal: Modal\n  ) { }\n\n  open() {\n    const modalRef = this.modal.openFromComponent(StoryseamModalSimpleComponent)\n\n    modalRef.afterClosed().subscribe(v => console.log('result', v))\n  }\n}\n\n\nstoriesOf('Components/Modal/Service/Component', module)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryseamModalBasicComponent,\n        StoryseamModalBasicExampleComponent\n      ],\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ],\n      entryComponents: [\n        StoryseamModalBasicComponent\n      ],\n    },\n    props: { },\n    template: `<story-seam-modal-basic-example></story-seam-modal-basic-example>`\n  }))\n\n  .add('Simple', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryseamModalSimpleComponent,\n        StoryseamModalSimpleExampleComponent\n      ],\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ],\n      entryComponents: [\n        StoryseamModalSimpleComponent\n      ],\n    },\n    props: { },\n    template: `<story-seam-modal-simple-example></story-seam-modal-simple-example>`\n  }))\n\n\n\n\nstoriesOf('Components/Modal/Directive/Template', module)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ]\n    },\n    props: { },\n    template: `\n      <div class=\"p-4\">\n        <button type=\"button\" class=\"btn btn-lightgray\"\n          (click)=\"modal.open()\">Open Modal</button>\n      </div>\n\n      <ng-template seamModal #modal=\"seamModal\">\n        Example\n      </ng-template>\n      `\n  }))\n\n  .add('Simple', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ]\n    },\n    props: { },\n    template: `\n      <div class=\"p-4\">\n        <button type=\"button\" class=\"btn btn-lightgray\"\n          (click)=\"modal.open()\">Open Modal</button>\n      </div>\n\n      <ng-template seamModal #modal=\"seamModal\">\n        <seam-modal-header>\n          <h4 seamModalTitle>Title</h4>\n          <button seamModalClose=\"cancel\" class=\"close\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </seam-modal-header>\n        <seam-modal-body>\n          Example\n        </seam-modal-body>\n        <seam-modal-footer>\n          <button class=\"btn btn-primary\" seamModalClose=\"Yes\">Yes</button>\n          <button class=\"btn btn-lightgray\" seamModalClose=\"No\">No</button>\n        </seam-modal-footer>\n      </ng-template>\n      `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoryseamModalBasicExampleComponent",
            "id": "component-StoryseamModalBasicExampleComponent-a1914d3e110575fadf6f0dff56ee5dd8",
            "file": "projects/ui-common/src/lib/modal/stories/modal.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-seam-modal-basic-example",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"p-4\">\n  <button type=\"button\" class=\"btn btn-lightgray\" (click)=\"open()\">Open</button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { storiesOf } from '@storybook/angular'\n\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n\nimport { TheSeamScrollbarModule } from '../../scrollbar/index'\n\nimport { ModalConfig } from '../modal-config'\nimport { TheSeamModalModule } from '../modal.module'\nimport { Modal } from '../modal.service'\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-basic',\n  styles: [],\n  template: `<span>Example</span>`\n})\nexport class StoryseamModalBasicComponent { }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-simple',\n  styles: [],\n  template: `\n    <seam-modal-header>\n      <h4 seamModalTitle>Title</h4>\n      <button seamModalClose=\"cancel\" class=\"close\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </seam-modal-header>\n    <seam-modal-body>\n      Example\n    </seam-modal-body>\n    <seam-modal-footer>\n      <button class=\"btn btn-primary\" seamModalClose=\"Yes\">Yes</button>\n      <button class=\"btn btn-lightgray\" seamModalClose=\"No\">No</button>\n    </seam-modal-footer>\n  `\n})\nexport class StoryseamModalSimpleComponent { }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-basic-example',\n  styles: [],\n  template: `\n    <div class=\"p-4\">\n      <button type=\"button\" class=\"btn btn-lightgray\" (click)=\"open()\">Open</button>\n    </div>\n  `\n})\nexport class StoryseamModalBasicExampleComponent {\n\n  constructor(\n    private modal: Modal\n  ) { }\n\n  open() {\n    const modalRef = this.modal.openFromComponent(StoryseamModalBasicComponent)\n\n    modalRef.afterClosed().subscribe(v => console.log('result', v))\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-simple-example',\n  styles: [],\n  template: `\n    <div class=\"p-4\">\n      <button type=\"button\" class=\"btn btn-lightgray\" (click)=\"open()\">Open</button>\n    </div>\n  `\n})\nexport class StoryseamModalSimpleExampleComponent {\n\n  constructor(\n    private modal: Modal\n  ) { }\n\n  open() {\n    const modalRef = this.modal.openFromComponent(StoryseamModalSimpleComponent)\n\n    modalRef.afterClosed().subscribe(v => console.log('result', v))\n  }\n}\n\n\nstoriesOf('Components/Modal/Service/Component', module)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryseamModalBasicComponent,\n        StoryseamModalBasicExampleComponent\n      ],\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ],\n      entryComponents: [\n        StoryseamModalBasicComponent\n      ],\n    },\n    props: { },\n    template: `<story-seam-modal-basic-example></story-seam-modal-basic-example>`\n  }))\n\n  .add('Simple', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryseamModalSimpleComponent,\n        StoryseamModalSimpleExampleComponent\n      ],\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ],\n      entryComponents: [\n        StoryseamModalSimpleComponent\n      ],\n    },\n    props: { },\n    template: `<story-seam-modal-simple-example></story-seam-modal-simple-example>`\n  }))\n\n\n\n\nstoriesOf('Components/Modal/Directive/Template', module)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ]\n    },\n    props: { },\n    template: `\n      <div class=\"p-4\">\n        <button type=\"button\" class=\"btn btn-lightgray\"\n          (click)=\"modal.open()\">Open Modal</button>\n      </div>\n\n      <ng-template seamModal #modal=\"seamModal\">\n        Example\n      </ng-template>\n      `\n  }))\n\n  .add('Simple', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ]\n    },\n    props: { },\n    template: `\n      <div class=\"p-4\">\n        <button type=\"button\" class=\"btn btn-lightgray\"\n          (click)=\"modal.open()\">Open Modal</button>\n      </div>\n\n      <ng-template seamModal #modal=\"seamModal\">\n        <seam-modal-header>\n          <h4 seamModalTitle>Title</h4>\n          <button seamModalClose=\"cancel\" class=\"close\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </seam-modal-header>\n        <seam-modal-body>\n          Example\n        </seam-modal-body>\n        <seam-modal-footer>\n          <button class=\"btn btn-primary\" seamModalClose=\"Yes\">Yes</button>\n          <button class=\"btn btn-lightgray\" seamModalClose=\"No\">No</button>\n        </seam-modal-footer>\n      </ng-template>\n      `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "Modal"
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "Modal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StoryseamModalSimpleComponent",
            "id": "component-StoryseamModalSimpleComponent-a1914d3e110575fadf6f0dff56ee5dd8",
            "file": "projects/ui-common/src/lib/modal/stories/modal.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-seam-modal-simple",
            "styleUrls": [],
            "styles": [],
            "template": "<seam-modal-header>\n  <h4 seamModalTitle>Title</h4>\n  <button seamModalClose=\"cancel\" class=\"close\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n</seam-modal-header>\n<seam-modal-body>\n  Example\n</seam-modal-body>\n<seam-modal-footer>\n  <button class=\"btn btn-primary\" seamModalClose=\"Yes\">Yes</button>\n  <button class=\"btn btn-lightgray\" seamModalClose=\"No\">No</button>\n</seam-modal-footer>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { storiesOf } from '@storybook/angular'\n\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n\nimport { TheSeamScrollbarModule } from '../../scrollbar/index'\n\nimport { ModalConfig } from '../modal-config'\nimport { TheSeamModalModule } from '../modal.module'\nimport { Modal } from '../modal.service'\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-basic',\n  styles: [],\n  template: `<span>Example</span>`\n})\nexport class StoryseamModalBasicComponent { }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-simple',\n  styles: [],\n  template: `\n    <seam-modal-header>\n      <h4 seamModalTitle>Title</h4>\n      <button seamModalClose=\"cancel\" class=\"close\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </seam-modal-header>\n    <seam-modal-body>\n      Example\n    </seam-modal-body>\n    <seam-modal-footer>\n      <button class=\"btn btn-primary\" seamModalClose=\"Yes\">Yes</button>\n      <button class=\"btn btn-lightgray\" seamModalClose=\"No\">No</button>\n    </seam-modal-footer>\n  `\n})\nexport class StoryseamModalSimpleComponent { }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-basic-example',\n  styles: [],\n  template: `\n    <div class=\"p-4\">\n      <button type=\"button\" class=\"btn btn-lightgray\" (click)=\"open()\">Open</button>\n    </div>\n  `\n})\nexport class StoryseamModalBasicExampleComponent {\n\n  constructor(\n    private modal: Modal\n  ) { }\n\n  open() {\n    const modalRef = this.modal.openFromComponent(StoryseamModalBasicComponent)\n\n    modalRef.afterClosed().subscribe(v => console.log('result', v))\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-simple-example',\n  styles: [],\n  template: `\n    <div class=\"p-4\">\n      <button type=\"button\" class=\"btn btn-lightgray\" (click)=\"open()\">Open</button>\n    </div>\n  `\n})\nexport class StoryseamModalSimpleExampleComponent {\n\n  constructor(\n    private modal: Modal\n  ) { }\n\n  open() {\n    const modalRef = this.modal.openFromComponent(StoryseamModalSimpleComponent)\n\n    modalRef.afterClosed().subscribe(v => console.log('result', v))\n  }\n}\n\n\nstoriesOf('Components/Modal/Service/Component', module)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryseamModalBasicComponent,\n        StoryseamModalBasicExampleComponent\n      ],\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ],\n      entryComponents: [\n        StoryseamModalBasicComponent\n      ],\n    },\n    props: { },\n    template: `<story-seam-modal-basic-example></story-seam-modal-basic-example>`\n  }))\n\n  .add('Simple', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryseamModalSimpleComponent,\n        StoryseamModalSimpleExampleComponent\n      ],\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ],\n      entryComponents: [\n        StoryseamModalSimpleComponent\n      ],\n    },\n    props: { },\n    template: `<story-seam-modal-simple-example></story-seam-modal-simple-example>`\n  }))\n\n\n\n\nstoriesOf('Components/Modal/Directive/Template', module)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ]\n    },\n    props: { },\n    template: `\n      <div class=\"p-4\">\n        <button type=\"button\" class=\"btn btn-lightgray\"\n          (click)=\"modal.open()\">Open Modal</button>\n      </div>\n\n      <ng-template seamModal #modal=\"seamModal\">\n        Example\n      </ng-template>\n      `\n  }))\n\n  .add('Simple', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ]\n    },\n    props: { },\n    template: `\n      <div class=\"p-4\">\n        <button type=\"button\" class=\"btn btn-lightgray\"\n          (click)=\"modal.open()\">Open Modal</button>\n      </div>\n\n      <ng-template seamModal #modal=\"seamModal\">\n        <seam-modal-header>\n          <h4 seamModalTitle>Title</h4>\n          <button seamModalClose=\"cancel\" class=\"close\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </seam-modal-header>\n        <seam-modal-body>\n          Example\n        </seam-modal-body>\n        <seam-modal-footer>\n          <button class=\"btn btn-primary\" seamModalClose=\"Yes\">Yes</button>\n          <button class=\"btn btn-lightgray\" seamModalClose=\"No\">No</button>\n        </seam-modal-footer>\n      </ng-template>\n      `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "StoryseamModalSimpleExampleComponent",
            "id": "component-StoryseamModalSimpleExampleComponent-a1914d3e110575fadf6f0dff56ee5dd8",
            "file": "projects/ui-common/src/lib/modal/stories/modal.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-seam-modal-simple-example",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"p-4\">\n  <button type=\"button\" class=\"btn btn-lightgray\" (click)=\"open()\">Open</button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { storiesOf } from '@storybook/angular'\n\nimport { Component } from '@angular/core'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n\nimport { TheSeamScrollbarModule } from '../../scrollbar/index'\n\nimport { ModalConfig } from '../modal-config'\nimport { TheSeamModalModule } from '../modal.module'\nimport { Modal } from '../modal.service'\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-basic',\n  styles: [],\n  template: `<span>Example</span>`\n})\nexport class StoryseamModalBasicComponent { }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-simple',\n  styles: [],\n  template: `\n    <seam-modal-header>\n      <h4 seamModalTitle>Title</h4>\n      <button seamModalClose=\"cancel\" class=\"close\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </seam-modal-header>\n    <seam-modal-body>\n      Example\n    </seam-modal-body>\n    <seam-modal-footer>\n      <button class=\"btn btn-primary\" seamModalClose=\"Yes\">Yes</button>\n      <button class=\"btn btn-lightgray\" seamModalClose=\"No\">No</button>\n    </seam-modal-footer>\n  `\n})\nexport class StoryseamModalSimpleComponent { }\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-basic-example',\n  styles: [],\n  template: `\n    <div class=\"p-4\">\n      <button type=\"button\" class=\"btn btn-lightgray\" (click)=\"open()\">Open</button>\n    </div>\n  `\n})\nexport class StoryseamModalBasicExampleComponent {\n\n  constructor(\n    private modal: Modal\n  ) { }\n\n  open() {\n    const modalRef = this.modal.openFromComponent(StoryseamModalBasicComponent)\n\n    modalRef.afterClosed().subscribe(v => console.log('result', v))\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-seam-modal-simple-example',\n  styles: [],\n  template: `\n    <div class=\"p-4\">\n      <button type=\"button\" class=\"btn btn-lightgray\" (click)=\"open()\">Open</button>\n    </div>\n  `\n})\nexport class StoryseamModalSimpleExampleComponent {\n\n  constructor(\n    private modal: Modal\n  ) { }\n\n  open() {\n    const modalRef = this.modal.openFromComponent(StoryseamModalSimpleComponent)\n\n    modalRef.afterClosed().subscribe(v => console.log('result', v))\n  }\n}\n\n\nstoriesOf('Components/Modal/Service/Component', module)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryseamModalBasicComponent,\n        StoryseamModalBasicExampleComponent\n      ],\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ],\n      entryComponents: [\n        StoryseamModalBasicComponent\n      ],\n    },\n    props: { },\n    template: `<story-seam-modal-basic-example></story-seam-modal-basic-example>`\n  }))\n\n  .add('Simple', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryseamModalSimpleComponent,\n        StoryseamModalSimpleExampleComponent\n      ],\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ],\n      entryComponents: [\n        StoryseamModalSimpleComponent\n      ],\n    },\n    props: { },\n    template: `<story-seam-modal-simple-example></story-seam-modal-simple-example>`\n  }))\n\n\n\n\nstoriesOf('Components/Modal/Directive/Template', module)\n\n  .add('Basic', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ]\n    },\n    props: { },\n    template: `\n      <div class=\"p-4\">\n        <button type=\"button\" class=\"btn btn-lightgray\"\n          (click)=\"modal.open()\">Open Modal</button>\n      </div>\n\n      <ng-template seamModal #modal=\"seamModal\">\n        Example\n      </ng-template>\n      `\n  }))\n\n  .add('Simple', () => ({\n    moduleMetadata: {\n      imports: [\n        TheSeamModalModule,\n        BrowserAnimationsModule,\n        TheSeamScrollbarModule\n      ]\n    },\n    props: { },\n    template: `\n      <div class=\"p-4\">\n        <button type=\"button\" class=\"btn btn-lightgray\"\n          (click)=\"modal.open()\">Open Modal</button>\n      </div>\n\n      <ng-template seamModal #modal=\"seamModal\">\n        <seam-modal-header>\n          <h4 seamModalTitle>Title</h4>\n          <button seamModalClose=\"cancel\" class=\"close\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </seam-modal-header>\n        <seam-modal-body>\n          Example\n        </seam-modal-body>\n        <seam-modal-footer>\n          <button class=\"btn btn-primary\" seamModalClose=\"Yes\">Yes</button>\n          <button class=\"btn btn-lightgray\" seamModalClose=\"No\">No</button>\n        </seam-modal-footer>\n      </ng-template>\n      `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "Modal"
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "Modal",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StorySubNameExComponent",
            "id": "component-StorySubNameExComponent-0445e6101affbb92502f4eb9ae11a9fc",
            "file": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sub-name-ex",
            "styleUrls": [],
            "styles": [],
            "template": "<div>Sub Name: {{ name$ | async }}</div><router-outlet></router-outlet>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "name$",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { TheSeamFormFieldModule } from '../../../form-field/index'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router.module'\nimport { HierarchyLevelResolver } from '../resolvers/hierarchy-level.resolver'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'sub-name-ex',\n  template: `<div>Sub Name: {{ name$ | async }}</div><router-outlet></router-outlet>`,\n})\nclass StorySubNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute\n  ) {\n    console.log('sub-name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n    <router-outlet></router-outlet>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-base',\n  template: `\n    URL: {{ _router.url }}\n    <div class=\"my-2 p-2\">\n      <form class=\"mb-2\" (ngSubmit)=\"go()\">\n        <input seamInput [formControl]=\"_control\">\n      </form>\n      <button class=\"btn btn-sm btn-light\" type=\"button\" [routerLink]=\"_control.value\">Go</button>\n    </div>\n    <div>\n      <router-outlet></router-outlet>\n    </div>\n  `\n})\nclass StoryExBaseComponent {\n\n  _control = new FormControl('/name-ex/sub-name')\n\n  constructor(\n    private _route: ActivatedRoute,\n    public _router: Router\n  ) {\n    console.log('this._route', this._route)\n    console.log('this._router', this._router)\n  }\n\n  public go() {\n    this._router.navigateByUrl(this._control.value)\n  }\n}\n\n\n\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id Start\n// ////////////////////////////////////////////////////////////////////////////\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-1',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdOneComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-2',\n  template: `\n    <div>\n      <div>{{ type$ | async }} : {{ id$ | async }}</div>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n      <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n    </div>\n    <router-outlet></router-outlet>\n  `\n})\nclass RecursiveIdTwoComponent {\n\n  id$: Observable<string | undefined>\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.id$ = this._route.paramMap.pipe(map(v => v.get('id') || undefined))\n    // this.type$ = this._route.data.pipe(map(v => v['type'] || undefined))\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'recursive-id-start-3',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <div>\n        <div>Type: {{ type$ | async }}</div>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"table/{{ nextId }}\">Next[table]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"new/{{ nextId }}\">Next[new]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"edit/{{ nextId }}\">Next[edit]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"view/{{ nextId }}\">Next[view]</button>\n        <button type=\"button\" class=\"btn btn-sm btn-light px-4\" routerLink=\"{{ nextId }}\">Next Random</button>\n      </div>\n    </seam-hierarchy-router-outlet>\n    <!--<router-outlet></router-outlet>-->\n  `,\n  styles: [`\n    :host {\n      display: block;\n      background: rgba(30,30,80,0.3);\n      outline: red;\n      width: 100%;\n      height: 100px;\n    }\n  `]\n})\nclass RecursiveIdThreeComponent {\n\n  type$: Observable<string | undefined>\n\n  nextId = (Math.random() * 1 * 50).toFixed(0)\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    this.type$ = this._route.paramMap.pipe(map(v => v.get('type') || undefined))\n  }\n\n}\n\n@NgModule({\n  declarations: [\n    RecursiveIdOneComponent,\n    RecursiveIdTwoComponent,\n    RecursiveIdThreeComponent\n  ],\n  imports: [\n    CommonModule,\n    TheSeamDynamicRouterModule,\n    RouterModule.forChild([\n      // {\n      //   path: 'table/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'table' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'new/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'new' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'edit/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'edit' },\n      //   loadChildren: () => RecursiveIdModule\n      // },\n      // {\n      //   path: 'view/:id',\n      //   component: RecursiveIdOneComponent,\n      //   data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      // {\n      //   path: ':type/:id',\n      //   component: RecursiveIdTwoComponent,\n      //   // data: { type: 'view' },\n      //   loadChildren: () => RecursiveIdModule\n      // }\n\n      {\n        path: ':type',\n        component: RecursiveIdThreeComponent,\n        resolve: {\n          hierLevel: HierarchyLevelResolver\n        },\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [ ]\n})\nclass RecursiveIdModule { }\n// ////////////////////////////////////////////////////////////////////////////\n// Recursive Id End\n// ////////////////////////////////////////////////////////////////////////////\n\n\n\n@NgModule({\n  declarations: [\n    StorySubNameExComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: 'sub-name',\n        component: StorySubNameExComponent,\n        loadChildren: () => RecursiveIdModule\n      }\n    ])\n  ],\n  entryComponents: [\n    StorySubNameExComponent\n  ]\n})\nclass LevelTwoModule { }\n\n\n\n\n//\n// Example\n//\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-1',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx1Component {\n  constructor() {\n    console.log('[StoryEx1Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1\">Prev</button>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2/ex-3\">Next</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx2Component {\n  constructor() {\n    console.log('[StoryEx2Component]')\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ex-2',\n  template: `\n    <seam-hierarchy-router-outlet>\n      <button type=\"button\" routerLink=\"/ex-1/ex-2\">Prev</button>\n    </seam-hierarchy-router-outlet>\n  `\n})\nclass StoryEx3Component {\n  constructor() {\n    console.log('[StoryEx3Component]')\n  }\n}\n\n\n\n\n\n\n// storiesOf('Framework/DynamicRouter', module)\n//   .addDecorator(withKnobs)\n\n//   .add('Recursive', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryNameExComponent,\n//         StoryExBaseComponent\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: 'name-ex',\n//             component: StoryNameExComponent,\n//             data: {\n//               name: 'Mark'\n//             },\n//             // loadChildren: () => Promise.resolve(LevelTwoModule)\n//             loadChildren: () => of(LevelTwoModule)\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n//         StoryNameExComponent\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <story-ex-base></story-ex-base>\n//     `\n//   }))\n\n\n//   .add('Example', () => ({\n//     moduleMetadata: {\n//       declarations: [\n//         StoryEx1Component,\n//         StoryEx2Component,\n//         StoryEx3Component\n//       ],\n//       imports: [\n//         BrowserAnimationsModule,\n//         ReactiveFormsModule,\n//         TheSeamFormFieldModule,\n//         TheSeamDynamicRouterModule,\n//         RouterModule.forRoot([\n//           {\n//             path: '',\n//             pathMatch: 'full',\n//             redirectTo: '/ex-1',\n//           },\n//           {\n//             path: 'ex-1',\n//             component: StoryEx1Component,\n//             children: [\n//               {\n//                 path: 'ex-2',\n//                 component: StoryEx2Component,\n//                 children: [\n//                   {\n//                     path: 'ex-3',\n//                     component: StoryEx3Component\n//                   }\n//                 ]\n//               }\n//             ]\n//           }\n//         ], { useHash: true })\n//       ],\n//       entryComponents: [\n\n//       ]\n//     },\n//     props: { },\n//     template: `\n//       <router-outlet></router-outlet>\n//     `\n//   }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TabbedComponent",
            "id": "component-TabbedComponent-6fa7825aff8b05fb649c18ac6f90b365",
            "file": "projects/ui-common/src/lib/tabbed/tabbed.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TabbedService"
                }
            ],
            "selector": "seam-tabbed",
            "styleUrls": [
                "./tabbed.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabbed.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeTabName",
                    "line": 61,
                    "type": "string"
                },
                {
                    "name": "direction",
                    "line": 25,
                    "type": ""
                },
                {
                    "name": "hideTabs",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "onlyRouteContent",
                    "defaultValue": "false",
                    "line": 43
                }
            ],
            "outputsClass": [
                {
                    "name": "tabChanged",
                    "defaultValue": "new EventEmitter<TabbedItemComponent>()",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_activeTabNameTimeout",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_direction",
                    "defaultValue": "'vertical'",
                    "type": "TabsDirection",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_hideTabs",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_selectedTab",
                    "type": "TabbedItemComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "tabbedItems",
                    "type": "QueryList<TabbedItemComponent>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabbedItemComponent"
                        }
                    ]
                },
                {
                    "name": "tabbedService",
                    "type": "TabbedService",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "onClickTab",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "tab",
                            "type": "TabbedItemComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "description": "",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tab",
                            "type": "TabbedItemComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "description": "<p>TODO: Make more generic, so that the name isn&#39;t the only way\n  to select a tab</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit, Component, ContentChildren, EventEmitter, Input, OnDestroy, OnInit, Output, QueryList\n} from '@angular/core'\nimport { ActivatedRoute, Router } from '@angular/router'\n\nimport { TabbedItemComponent } from './tabbed-item/tabbed-item.component'\nimport { TabbedService, TabsDirection } from './tabbed.service'\n\n@Component({\n  selector: 'seam-tabbed',\n  templateUrl: './tabbed.component.html',\n  styleUrls: ['./tabbed.component.scss'],\n  providers: [ TabbedService ]\n})\nexport class TabbedComponent implements OnInit, AfterContentInit, OnDestroy {\n\n  private _direction: TabsDirection = 'vertical'\n  private _hideTabs = false\n\n  @ContentChildren(TabbedItemComponent) tabbedItems: QueryList<TabbedItemComponent>\n\n  @Output() tabChanged = new EventEmitter<TabbedItemComponent>()\n\n  @Input()\n  set direction(val: TabsDirection) {\n    this._direction = val\n  }\n  get direction() {\n    return this._direction\n  }\n\n  @Input()\n  set hideTabs(val: boolean) {\n    setTimeout(_ => {\n      this._hideTabs = val\n    })\n  }\n  get hideTabs(): boolean {\n    return this._hideTabs\n  }\n\n  @Input()\n  public onlyRouteContent = false\n\n  get selectedTab(): TabbedItemComponent | undefined {\n    if (this.onlyRouteContent) {\n      if (this.route.snapshot.children.length > 0) {\n        const config = this.route.snapshot.children[0].routeConfig\n        const childPath = config && config.path\n        return this.tabbedItems.find(t => t.name === childPath)\n      }\n    } else {\n      return this._selectedTab\n    }\n  }\n  set selectedTab(tab: TabbedItemComponent | undefined) { this._selectedTab = tab }\n  private _selectedTab: TabbedItemComponent | undefined\n\n  private _activeTabNameTimeout: any\n  @Input()\n  set activeTabName(val: string) {\n    clearTimeout(this._activeTabNameTimeout)\n    this._activeTabNameTimeout = setTimeout(() => {\n      if (!val) {\n        this.selectedTab = undefined\n      } else {\n        this.selectTab(val)\n      }\n    })\n  }\n\n  constructor(\n    public tabbedService: TabbedService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    this.tabbedService.registerTab(this, 'main')\n  }\n\n  ngOnDestroy() {\n    this.tabbedService.unregisterTab(this, 'main')\n  }\n\n  ngAfterContentInit() {\n    if (this.tabbedItems.length > 0) {\n      this.selectedTab = this.tabbedItems.first\n    }\n  }\n\n  /**\n   *\n   */\n  public onClickTab(event: any, tab: TabbedItemComponent) {\n    this.selectedTab = tab\n    if (this.onlyRouteContent) {\n      this.router.navigate([ tab.name ], { relativeTo: this.route })\n    }\n    this.tabChanged.emit(tab)\n  }\n\n  /**\n   * TODO: Make more generic, so that the name isn't the only way\n   *  to select a tab\n   */\n  public selectTab(name: string) {\n    const tab = this.tabbedItems.find(t => t.name === name)\n    if (tab) {\n      this.selectedTab = tab\n    } else {\n      throw new Error(`Tab with name '${name}' not found`)\n    }\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/utilities';\n\n:host {\n  display: block;\n}\n\n.tabbed-tab {\n  box-sizing: border-box;\n  font-weight: normal;\n  font-size: 10pt;\n  min-width: 130px;\n  transform: translateZ(0);\n  overflow: hidden;\n\n  border: $border-width solid $border-color;\n\n  &:not(.active) {\n    background-color: $white !important;\n  }\n\n  &.active {\n    font-weight: bold;\n    color: $primary;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  &.tab-dir-horizontal {\n    border-bottom: 0;\n\n    &:first-child {\n      border-top-left-radius: $border-radius;\n    }\n    &:last-child {\n      border-top-right-radius: $border-radius;\n    }\n    &:not(:last-child) {\n      border-right: 0;\n    }\n\n    &.active {\n      // border-bottom: 4px solid $primary;\n      margin-bottom: -2px;\n      // box-shadow: inset 0px 40px 35px -50px;\n    }\n  }\n\n  &.tab-dir-vertical {\n    border-right: 0;\n\n    &:first-child {\n      border-top-left-radius: $border-radius;\n    }\n    &:last-child {\n      border-bottom-left-radius: $border-radius;\n    }\n    &:not(:last-child) {\n      border-bottom: 0;\n    }\n\n    &.active {\n      // border-left: 4px solid $primary;\n      margin-right: -2px;\n      // box-shadow: inset 40px 0px 35px -50px;\n    }\n  }\n\n}\n\n.tabbed-tabs-content {\n  display: block;\n  flex: 1 1 auto;\n  overflow: hidden;\n\n  border: $border-width solid $border-color;\n  border-top-right-radius: $border-radius;\n  border-bottom-right-radius: $border-radius;\n}\n\napp-slide-over-router-outlet {\n  // position: absolute;\n  width: 100%;\n  height: 100%;\n  min-width: 0;\n  min-height: 0;\n}\n\n\n// .active-indicator {\n//   transition: .5s cubic-bezier(.79,.14,.15,.86);\n//   position: absolute;\n//   transform: translateZ(0);\n//   background-color: $primary;\n//   z-index: 1;\n\n//   &.active-indicator-horizontal {\n//     bottom: 0;\n//     height: 4px;\n//   }\n\n//   &.active-indicator-vertical {\n//     left: 0;\n//     width: 4px;\n//     height: 36px;\n//   }\n// }\n",
                    "styleUrl": "./tabbed.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "tabbedService",
                        "type": "TabbedService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "tabbedService",
                        "type": "TabbedService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit",
                "OnDestroy"
            ],
            "accessors": {
                "direction": {
                    "name": "direction",
                    "setSignature": {
                        "name": "direction",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "direction",
                        "type": "",
                        "returnType": "",
                        "line": 28
                    }
                },
                "hideTabs": {
                    "name": "hideTabs",
                    "setSignature": {
                        "name": "hideTabs",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "hideTabs",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 38
                    }
                },
                "selectedTab": {
                    "name": "selectedTab",
                    "setSignature": {
                        "name": "selectedTab",
                        "type": "void",
                        "args": [
                            {
                                "name": "tab",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "tab",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selectedTab",
                        "type": "",
                        "returnType": "TabbedItemComponent | undefined",
                        "line": 45
                    }
                },
                "activeTabName": {
                    "name": "activeTabName",
                    "setSignature": {
                        "name": "activeTabName",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 61,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div [fxLayout]=\"(direction === 'horizontal') ? 'column' : 'row'\" fxFlexFill>\n\n  <!-- Tabs -->\n  <div *ngIf=\"!hideTabs\"\n    [fxLayout]=\"(direction === 'horizontal') ? 'row' : 'column'\"\n    style=\"position: relative;\">\n    <ng-container *ngFor=\"let tabbedItem of tabbedItems\">\n      <div class=\"tabbed-tab pt-2 pb-2 pl-4 pr-4 bg-light text-nowrap\"\n        [class.tab-dir-horizontal]=\"direction === 'horizontal'\"\n        [class.tab-dir-vertical]=\"direction === 'vertical'\"\n        (click)=\"onClickTab($event, tabbedItem)\"\n        [class.active]=\"tabbedItem === selectedTab\">\n        <ng-template *ngIf=\"tabbedItem.tabbedTabTpl; else tabLabelTpl\" [ngTemplateOutlet]=\"tabbedItem.tabbedTabTpl\"></ng-template>\n        <ng-template #tabLabelTpl>{{ tabbedItem?.label }}</ng-template>\n      </div>\n    </ng-container>\n    <!-- <div class=\"active-indicator\"\n      [class.active-indicator-horizontal]=\"direction === 'horizontal'\"\n      [class.active-indicator-vertical]=\"direction === 'vertical'\">\n    </div> -->\n  </div>\n\n  <!-- Tabs Content -->\n  <div class=\"tabbed-tabs-content bg-light\">\n    <ng-container *ngIf=\"onlyRouteContent; else notOnlyRouteContent\">\n      <!-- <app-slide-over-router-outlet></app-slide-over-router-outlet> -->\n      <router-outlet></router-outlet>\n    </ng-container>\n    <ng-template #notOnlyRouteContent>\n      <ng-container *ngIf=\"!selectedTab; else findContentTpl\">\n        <seam-tabbed-content fxFlexFill [tabbedItem]=\"tabbedItems.first\"></seam-tabbed-content>\n      </ng-container>\n      <ng-template #findContentTpl>\n        <ng-container *ngFor=\"let tabbedItem of tabbedItems\">\n          <ng-container *ngIf=\"selectedTab === tabbedItem\">\n            <seam-tabbed-content fxFlexFill [tabbedItem]=\"tabbedItem\"></seam-tabbed-content>\n          </ng-container>\n        </ng-container>\n      </ng-template>\n    </ng-template>\n  </div>\n\n</div>\n"
        },
        {
            "name": "TabbedContentComponent",
            "id": "component-TabbedContentComponent-2248084e3bdee74616fd2bafa62ff290",
            "file": "projects/ui-common/src/lib/tabbed/tabbed-content/tabbed-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-tabbed-content",
            "styleUrls": [
                "./tabbed-content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabbed-content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tabbedItem",
                    "line": 12,
                    "type": "TabbedItemComponent"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core'\n\nimport { TabbedItemComponent } from '../tabbed-item/tabbed-item.component'\n\n@Component({\n  selector: 'seam-tabbed-content',\n  templateUrl: './tabbed-content.component.html',\n  styleUrls: ['./tabbed-content.component.scss']\n})\nexport class TabbedContentComponent implements OnInit {\n\n  @Input() tabbedItem: TabbedItemComponent\n\n  constructor() { }\n\n  ngOnInit() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tabbed-content.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div class=\"fade-left\" fxFlexFill> -->\n<div fxFlexFill>\n  <ng-container *ngIf=\"tabbedItem\">\n    <ng-template *ngIf=\"tabbedItem.tabbedContentTpl\" [ngTemplateOutlet]=\"tabbedItem.tabbedContentTpl\"></ng-template>\n    <ng-container *ngIf=\"tabbedItem.contentFromRoute\"><router-outlet></router-outlet></ng-container>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "TabbedItemComponent",
            "id": "component-TabbedItemComponent-eeb330adb4bb8f008aa61654c328be92",
            "file": "projects/ui-common/src/lib/tabbed/tabbed-item/tabbed-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-tabbed-item",
            "styleUrls": [
                "./tabbed-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabbed-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "contentFromRoute",
                    "defaultValue": "false",
                    "line": 21
                },
                {
                    "name": "label",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "name",
                    "line": 19,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabbedContentTpl",
                    "type": "TemplateRef<TabbedTabContentDirective>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TabbedTabContentDirective, {read: TemplateRef, static: true}"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tabbedTabTpl",
                    "type": "TemplateRef<TabbedTabDirective>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TabbedTabDirective, {read: TemplateRef, static: true}"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, Input, OnInit, TemplateRef } from '@angular/core'\n\nimport { TabbedTabContentDirective } from '../directives/tabbed-tab-content.directive'\nimport { TabbedTabDirective } from '../directives/tabbed-tab.directive'\n\n@Component({\n  selector: 'seam-tabbed-item',\n  templateUrl: './tabbed-item.component.html',\n  styleUrls: ['./tabbed-item.component.scss']\n})\nexport class TabbedItemComponent implements OnInit {\n\n  @ContentChild(TabbedTabDirective, { read: TemplateRef, static: true })\n  public tabbedTabTpl: TemplateRef<TabbedTabDirective>\n\n  @ContentChild(TabbedTabContentDirective, { read: TemplateRef, static: true })\n  public tabbedContentTpl: TemplateRef<TabbedTabContentDirective>\n\n  @Input() name: string\n  @Input() label: string\n  @Input() contentFromRoute = false\n\n  constructor() { }\n\n  ngOnInit() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tabbed-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  tabbed-item works!\n</p>"
        },
        {
            "name": "TableCellTypeDateComponent",
            "id": "component-TableCellTypeDateComponent-c8ee07f572879f1fea611159ebc6f1db",
            "file": "projects/ui-common/src/lib/table-cell-types/table-cell-type-date/table-cell-type-date.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-table-cell-type-date",
            "styleUrls": [
                "./table-cell-type-date.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-cell-type-date.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "format",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "value",
                    "line": 16,
                    "type": "string | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Inject, Input, OnDestroy, OnInit, Optional } from '@angular/core'\n\nimport { untilDestroyed } from 'ngx-take-until-destroy'\n\nimport { TABLE_CELL_DATA } from '../../table/table-cell-tokens'\nimport { ITableCellData } from '../../table/table-cell.models'\n\n@Component({\n  selector: 'seam-table-cell-type-date',\n  templateUrl: './table-cell-type-date.component.html',\n  styleUrls: ['./table-cell-type-date.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableCellTypeDateComponent implements OnInit, OnDestroy {\n\n  @Input() value?: string | null\n  @Input() format?: string\n\n  constructor(\n    @Optional() @Inject(TABLE_CELL_DATA) _tableData?: ITableCellData<any, string>\n  ) {\n    const _data = _tableData\n\n    this.value = _data && _data.value\n    this.format = _data && _data.colData && _data.colData.cellProps\n\n    if (_data) {\n      _data.changed\n        .pipe(untilDestroyed(this))\n        .subscribe(v => {\n          if (v.changes.hasOwnProperty('value')) {\n            this.value = v.changes.value.currentValue\n          }\n\n          if (v.changes.hasOwnProperty('colData')) {\n            const colData = v.changes.colData.currentValue\n            if (colData && colData.format !== this.format) {\n              this.format = colData.format\n            } else {\n              this.format = undefined\n            }\n          }\n        })\n    }\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./table-cell-type-date.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_tableData",
                        "type": "ITableCellData<any | string>",
                        "optional": true
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_tableData",
                        "type": "ITableCellData<any | string>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"td-text-truncate\" [title]=\"value | date: format || 'MM-dd-yyyy h:mm aaa'\">\n  {{ value | date: format || 'MM-dd-yyyy h:mm aaa' }}\n</div>\n"
        },
        {
            "name": "TableCellTypeIconComponent",
            "id": "component-TableCellTypeIconComponent-ef08bdf0bbde2620a2be89bcc9a9a673",
            "file": "projects/ui-common/src/lib/table-cell-types/table-cell-type-icon/table-cell-type-icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-table-cell-type-icon",
            "styleUrls": [
                "./table-cell-type-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-cell-type-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "line": 41
                },
                {
                    "name": "value",
                    "line": 33
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_buttonAction",
                    "type": "DynamicDatatableCellTypeConfigIconAction",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "_colData",
                    "type": "ITheSeamTableColumn<R>",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "_config",
                    "type": "DynamicDatatableCellTypeConfigIcon | undefined | null",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_icon",
                    "type": "SeamIcon | undefined | null",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "_iconClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "_iconType",
                    "type": "TheSeamIconType",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "_link",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "_linkClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "_row",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "_rowIndex",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "_srOnly",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "_tableCellData",
                    "type": "ITableCellData<any | string>",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "_title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "_tplType",
                    "defaultValue": "'default'",
                    "type": "IconTemplateType",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "_value",
                    "type": "string | undefined | null",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_actionRefreshRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_doButtonAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146
                },
                {
                    "name": "_parseConfigValue",
                    "args": [
                        {
                            "name": "val",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 141,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117
                },
                {
                    "name": "setAction",
                    "args": [
                        {
                            "name": "configAction",
                            "type": "DynamicDatatableCellTypeConfigIconAction",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "configAction",
                            "type": "DynamicDatatableCellTypeConfigIconAction",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.datatable-cell-type",
                    "defaultValue": "false",
                    "line": 69
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, HostBinding, Inject, Input, OnDestroy, OnInit, Optional } from '@angular/core'\n\nimport { untilDestroyed } from 'ngx-take-until-destroy'\n\nimport jexl from 'jexl'\n\nimport {\n  DynamicDatatableCellActionModal,\n  DynamicDatatableCellTypeConfigIcon,\n  DynamicDatatableCellTypeConfigIconAction\n} from '../../datatable-dynamic/index'\nimport { getKnownIcon, SeamIcon, TheSeamIconType } from '../../icon/index'\n\nimport { TABLE_CELL_DATA } from '../../table/table-cell-tokens'\nimport { ITableCellData } from '../../table/table-cell.models'\nimport { ITheSeamTableColumn } from '../../table/table-column'\nimport { TableComponent } from '../../table/table/table.component'\n\nimport { DatatableComponent, THESEAM_DATATABLE } from '../../datatable/datatable/datatable.component'\nimport { TableCellTypesHelpersService } from '../services/table-cell-types-helpers.service'\n\nexport type IconTemplateType = 'default' | 'link' | 'link-external' | 'link-encrypted' | 'button'\n\n@Component({\n  selector: 'seam-table-cell-type-icon',\n  templateUrl: './table-cell-type-icon.component.html',\n  styleUrls: ['./table-cell-type-icon.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableCellTypeIconComponent<R = any, V = any> implements OnInit, OnDestroy {\n\n  @Input()\n  get value() { return this._value }\n  set value(value: string | undefined | null) {\n    this._value = value\n    this._icon = value ? getKnownIcon(value) || value : value\n  }\n  private _value: string | undefined | null\n\n  @Input()\n  get config() { return this._config }\n  set config(value: DynamicDatatableCellTypeConfigIcon | undefined | null) {\n    this._config = value\n    if (value) {\n      this.setAction(value.action)\n      this._linkClass = this._parseConfigValue(value.linkClass)\n      this._iconClass = this._parseConfigValue(value.iconClass)\n      this._iconType = value.iconType\n    }\n  }\n  private _config: DynamicDatatableCellTypeConfigIcon | undefined | null\n\n  _icon: SeamIcon | undefined | null\n  _link?: string\n  _tplType: IconTemplateType = 'default'\n  _title?: string\n  _srOnly?: string\n  _linkClass?: string\n  _iconClass?: string\n  _iconType?: TheSeamIconType\n\n  _buttonAction?: DynamicDatatableCellTypeConfigIconAction\n\n  _tableCellData?: ITableCellData<any, string>\n  _row?: any\n  _rowIndex?: number\n  _colData?: ITheSeamTableColumn<R>\n\n  @HostBinding('class.datatable-cell-type') _isDatatable = false\n\n  constructor(\n    private _tableCellTypeHelpers: TableCellTypesHelpersService,\n    @Optional() private _datatable?: DatatableComponent,\n    @Optional() private _table?: TableComponent,\n    @Optional() @Inject(TABLE_CELL_DATA) _tableData?: ITableCellData<any, string>\n  ) {\n    if (_datatable) {\n      this._isDatatable = true\n      // console.log('isDataTable')\n    }\n    // if (_table) {\n    //   console.log('isTable')\n    // }\n\n    const _data = _tableData\n    this._tableCellData = _tableData\n\n    this._row = _data && _data.row\n    this._rowIndex = _data && _data.rowIndex\n\n    this.value = _data && _data.value\n    this._colData = _data && _data.colData\n    if (_data && _data.colData && (<any>_data.colData).cellTypeConfig) {\n      this.config = (<any>_data.colData).cellTypeConfig\n    }\n\n    if (_data) {\n      _data.changed\n        .pipe(untilDestroyed(this))\n        .subscribe(v => {\n          if (v.changes.hasOwnProperty('value')) {\n            this.value = v.changes.value.currentValue\n          }\n\n          if (v.changes.hasOwnProperty('colData')) {\n            const colData = v.changes.colData.currentValue\n            if (colData && colData.cellTypeConfig !== this.config) {\n              this.config = colData.cellTypeConfig\n            } else {\n              this.config = undefined\n            }\n          }\n        })\n    }\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { }\n\n  public setAction(configAction?: DynamicDatatableCellTypeConfigIconAction) {\n    let newTplType: IconTemplateType = 'default'\n    let link: string | undefined\n\n    if (configAction) {\n      if (configAction.type === 'link') {\n        link = this._parseConfigValue(configAction.link)\n        if (link !== undefined && link !== null) {\n          newTplType = configAction.encrypted ? 'link-encrypted' : 'link'\n        }\n      } else if (configAction.type === 'modal') {\n        newTplType = 'button'\n        this._buttonAction = configAction\n      }\n    }\n\n    this._tplType = newTplType\n    this._link = link\n  }\n\n  private _parseConfigValue(val) {\n    const contextFn = () => this._tableCellTypeHelpers.getValueContext(val, this._tableCellData)\n    return this._tableCellTypeHelpers.parseValueProp(val, contextFn)\n  }\n\n  _doButtonAction() {\n    if (this._buttonAction && this._buttonAction.type === 'modal') {\n      const contextFn = () => this._tableCellTypeHelpers.getValueContext(this.value, this._tableCellData)\n      this._tableCellTypeHelpers.handleModalAction(this._buttonAction, contextFn)\n        .subscribe(\n          r => {},\n          err => console.error(err),\n          () => this._actionRefreshRequest()\n        )\n    }\n  }\n\n  private _actionRefreshRequest() {\n    if (this._datatable) {\n      this._datatable.triggerActionRefreshRequest()\n    } else if (this._table) {\n      this._table.triggerActionRefreshRequest()\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  &.datatable-cell-type {\n    ::ng-deep {\n      .seam-icon--img {\n        max-height: 40px;\n      }\n    }\n\n    a {\n      max-height: 40px;\n    }\n\n    button {\n      max-height: 40px;\n    }\n  }\n  &:not(.datatable-cell-type) {\n    ::ng-deep {\n      .seam-icon--img {\n        max-height: 20px;\n      }\n    }\n\n    a {\n      max-height: 20px;\n    }\n\n    button {\n      max-height: 20px;\n    }\n  }\n}\n\n.datatable-icon-fix {\n  margin-top: calc(-1px - 0.75rem);\n  height: calc(50px);\n}\n",
                    "styleUrl": "./table-cell-type-icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_tableCellTypeHelpers",
                        "type": "TableCellTypesHelpersService"
                    },
                    {
                        "name": "_datatable",
                        "type": "DatatableComponent",
                        "optional": true
                    },
                    {
                        "name": "_table",
                        "type": "TableComponent",
                        "optional": true
                    },
                    {
                        "name": "_tableData",
                        "type": "ITableCellData<any | string>",
                        "optional": true
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "_tableCellTypeHelpers",
                        "type": "TableCellTypesHelpersService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_datatable",
                        "type": "DatatableComponent",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_table",
                        "type": "TableComponent",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_tableData",
                        "type": "ITableCellData<any | string>",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "config": {
                    "name": "config",
                    "setSignature": {
                        "name": "config",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 42,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div *ngIf=\"!_tplType || _tplType === 'default'\"\n  class=\"d-flex align-items-center justify-center\"\n  [class.datatable-icon-fix]=\"_isDatatable\">\n  <a class=\"d-block m-auto{{ _linkClass ? ' ' + _linkClass : '' }}\"\n    [attr.title]=\"_title\">\n    <seam-icon *ngIf=\"_icon\" [icon]=\"_icon\" size=\"lg\" [iconType]=\"_iconType\" [iconClass]=\"_iconClass\"></seam-icon>\n    <span *ngIf=\"_srOnly\" class=\"sr-only\">{{ _srOnly }}</span>\n  </a>\n</div>\n\n<div *ngIf=\"_tplType === 'link'\"\n  class=\"d-flex align-items-center justify-center\"\n  [class.datatable-icon-fix]=\"_isDatatable\">\n  <a class=\"d-block m-auto{{ _linkClass ? ' ' + _linkClass : '' }}\"\n    [routerLink]=\"_link\"\n    [attr.title]=\"_title\">\n    <seam-icon *ngIf=\"_icon\" [icon]=\"_icon\" size=\"lg\" [iconType]=\"_iconType\" [iconClass]=\"_iconClass\"></seam-icon>\n    <span *ngIf=\"_srOnly\" class=\"sr-only\">{{ _srOnly }}</span>\n  </a>\n</div>\n\n<div *ngIf=\"_tplType === 'link-external'\"\n  class=\"d-flex align-items-center justify-center\"\n  [class.datatable-icon-fix]=\"_isDatatable\">\n  <a class=\"d-block m-auto{{ _linkClass ? ' ' + _linkClass : '' }}\"\n    [attr.href]=\"_link\"\n    [attr.title]=\"_title\">\n    <seam-icon *ngIf=\"_icon\" [icon]=\"_icon\" size=\"lg\" [iconType]=\"_iconType\" [iconClass]=\"_iconClass\"></seam-icon>\n    <span *ngIf=\"_srOnly\" class=\"sr-only\">{{ _srOnly }}</span>\n  </a>\n</div>\n\n<div *ngIf=\"_tplType === 'link-encrypted'\"\n  class=\"d-flex align-items-center justify-center\"\n  [class.datatable-icon-fix]=\"_isDatatable\">\n  <button\n    class=\"btn btn-link p-0 m-auto{{ _linkClass ? ' ' + _linkClass : '' }}\"\n    type=\"button\"\n    [seamEncryptedAssetLink]=\"_link\"\n    [attr.title]=\"_title\">\n    <seam-icon *ngIf=\"_icon\" iconType=\"styled-square\" [icon]=\"_icon\" size=\"lg\" [iconType]=\"_iconType\" [iconClass]=\"_iconClass\"></seam-icon>\n    <span *ngIf=\"_srOnly\" class=\"sr-only\">{{ _srOnly }}</span>\n  </button>\n</div>\n\n<div *ngIf=\"_tplType === 'button'\"\n  class=\"d-flex align-items-center justify-center\"\n  [class.datatable-icon-fix]=\"_isDatatable\"\n  (click)=\"_doButtonAction()\">\n  <button\n    class=\"btn btn-link p-0 m-auto{{ _linkClass ? ' ' + _linkClass : '' }}\"\n    type=\"button\"\n    [attr.title]=\"_title\">\n    <seam-icon *ngIf=\"_icon\" iconType=\"styled-square\" [icon]=\"_icon\" size=\"lg\" [iconType]=\"_iconType\" [iconClass]=\"_iconClass\"></seam-icon>\n    <span *ngIf=\"_srOnly\" class=\"sr-only\">{{ _srOnly }}</span>\n  </button>\n</div>\n"
        },
        {
            "name": "TableCellTypeSelectorComponent",
            "id": "component-TableCellTypeSelectorComponent-44ad7418dd018e811b7926ac75de08b8",
            "file": "projects/ui-common/src/lib/table-cell-types/table-cell-type-selector.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-table-cell-type-selector",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-template *ngIf=\"componentPortal; else noPortal\" [cdkPortalOutlet]=\"componentPortal\"></ng-template>\n<ng-template #noPortal>{{ value }}</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "colData",
                    "line": 41,
                    "type": "ITheSeamTableColumn<D>"
                },
                {
                    "name": "row",
                    "line": 40,
                    "type": "D"
                },
                {
                    "name": "rowIndex",
                    "line": 39,
                    "type": "number"
                },
                {
                    "name": "type",
                    "line": 37,
                    "type": "TheSeamTableCellType"
                },
                {
                    "name": "value",
                    "line": 38,
                    "type": "V"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_data",
                    "type": "ITableCellData | undefined",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_dataChangeSubject",
                    "type": "Subject<ITableCellDataChange>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_manifests",
                    "type": "ITableCellTypeManifest[]",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "componentPortal",
                    "type": "ComponentPortal<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_createInjector",
                    "args": [
                        {
                            "name": "cellData",
                            "type": "ITableCellData"
                        }
                    ],
                    "optional": false,
                    "returnType": "PortalInjector",
                    "typeParameters": [],
                    "line": 86,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "cellData",
                            "type": "ITableCellData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_getComponent",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentType | undefined",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_tryUpdateDataProp",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        },
                        {
                            "name": "prop",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 110,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prop",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ComponentPortal, PortalInjector } from '@angular/cdk/portal'\nimport { ComponentType } from '@angular/cdk/portal'\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Inject,\n  Injector,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges\n} from '@angular/core'\nimport { Subject } from 'rxjs'\n\nimport { TABLE_CELL_DATA } from '../table/table-cell-tokens'\nimport { ITableCellData, ITableCellDataChange } from '../table/table-cell.models'\nimport { ITheSeamTableColumn, TheSeamTableCellType } from '../table/table-column'\n\nimport { ITableCellTypeManifest } from '../table-cell-types/table-cell-types-models'\nimport { TABLE_CELL_TYPE_MANIFEST } from '../table-cell-types/table-cell-types-tokens'\n\n@Component({\n  selector: 'seam-table-cell-type-selector',\n  template: `\n    <ng-template *ngIf=\"componentPortal; else noPortal\" [cdkPortalOutlet]=\"componentPortal\"></ng-template>\n    <ng-template #noPortal>{{ value }}</ng-template>\n  `,\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableCellTypeSelectorComponent<D = any, V = any> implements OnInit, AfterViewInit, OnChanges {\n\n  @Input() type: TheSeamTableCellType\n  @Input() value: V\n  @Input() rowIndex: number\n  @Input() row: D\n  @Input() colData: ITheSeamTableColumn<D>\n\n  public componentPortal: ComponentPortal<{}>\n\n  private _data: ITableCellData | undefined\n  private _dataChangeSubject: Subject<ITableCellDataChange>\n  private _manifests: ITableCellTypeManifest[]\n\n  constructor(\n    private _injector: Injector,\n    private _ref: ChangeDetectorRef,\n    @Optional() @Inject(TABLE_CELL_TYPE_MANIFEST) manifests?: ITableCellTypeManifest[]\n  ) { this._manifests = manifests || [] }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {\n    const comp = this._getComponent(this.type)\n    if (comp) {\n      this._dataChangeSubject = new Subject<ITableCellDataChange>()\n\n      this._data = {\n        row: this.row,\n        rowIndex: this.rowIndex,\n        colData: this.colData,\n        value: this.value,\n        changed: this._dataChangeSubject.asObservable()\n      }\n\n      this.componentPortal = new ComponentPortal(comp, null, this._createInjector(this._data))\n      this._ref.detectChanges()\n    } else {\n      if (isDevMode()) {\n        throw new Error(`CellType '${this.type}' not found.`)\n      } else {\n        // TODO: Implement fallback\n      }\n    }\n  }\n\n  private _getComponent(name: string): ComponentType<{}> | undefined {\n    const manifest = this._manifests.find(m => m.name === name)\n    return manifest ? manifest.component : undefined\n  }\n\n  private _createInjector(cellData: ITableCellData): PortalInjector {\n    const injectorTokens = new WeakMap()\n    injectorTokens.set(TABLE_CELL_DATA, cellData)\n    return new PortalInjector(this._injector, injectorTokens)\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._data) {\n      const dataChanged = [\n        this._tryUpdateDataProp(changes, 'row'),\n        this._tryUpdateDataProp(changes, 'rowIndex'),\n        this._tryUpdateDataProp(changes, 'colData'),\n        this._tryUpdateDataProp(changes, 'value')\n      ].findIndex(b => b === true) !== -1\n\n      if (dataChanged && this._dataChangeSubject) {\n        this._dataChangeSubject.next({\n          data: this._data,\n          changes\n        })\n      }\n    }\n  }\n\n  private _tryUpdateDataProp(changes: SimpleChanges, prop: keyof Omit<ITableCellData, 'changed'>): boolean {\n    if (this._data && changes.hasOwnProperty(prop)) {\n      this._data[prop] = changes[prop].currentValue\n      return true\n    }\n    return false\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_injector",
                        "type": "Injector"
                    },
                    {
                        "name": "_ref",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "manifests",
                        "type": "ITableCellTypeManifest[]",
                        "optional": true
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "_injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "manifests",
                        "type": "ITableCellTypeManifest[]",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnChanges"
            ]
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-7e89baee8ab1840c5037eaf4e84521e1",
            "file": "projects/ui-common/src/lib/table/table/table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "line": 31
                },
                {
                    "name": "hasHeader",
                    "defaultValue": "true",
                    "line": 60
                },
                {
                    "name": "rows",
                    "line": 39,
                    "type": "T[]"
                },
                {
                    "name": "size",
                    "line": 58,
                    "type": "\"sm\" | \"md\" | undefined | null"
                },
                {
                    "name": "trackBy",
                    "line": 56,
                    "type": "TrackByFunction<T>"
                }
            ],
            "outputsClass": [
                {
                    "name": "actionRefreshRequest",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 65,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_columns",
                    "type": "(string | ITableColumn)[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_displayedRows",
                    "defaultValue": "[]",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_rows",
                    "defaultValue": "[]",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "displayedColumns",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "displayedRecords",
                    "type": "ITableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_setColumns",
                    "args": [
                        {
                            "name": "cols",
                            "type": "(string | ITableColumn)[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "cols",
                            "type": "(string | ITableColumn)[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "triggerActionRefreshRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { coerceArray } from '@angular/cdk/coercion'\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core'\nimport { DomSanitizer } from '@angular/platform-browser'\n\n/**\n * An optional function passed into the `NgForOf` directive that defines how to track\n * changes for items in an iterable.\n * The function takes the iteration index and item ID.\n * When supplied, Angular tracks changes by the return value of the function.\n *\n * NOTE: Can't import the type from'@angular/core', because of a bug in angular-cli's\n * build that can't find exported types that only exist at compile time if there\n * are exports that exist at runtime in the same file.\n */\nexport type TrackByFunction<T> = (index: number, item: T) => any\n\nexport interface ITableColumn {\n  prop: string\n  name?: string\n}\n\n@Component({\n  selector: 'seam-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TableComponent<T = any> implements OnInit {\n\n  @Input()\n  get columns() { return this._columns }\n  set columns(value: (string | ITableColumn)[]) {\n    this._columns = value\n    this._setColumns(value)\n  }\n  private _columns: (string | ITableColumn)[]\n\n  @Input()\n  get rows(): T[] { return this._rows }\n  set rows(value: T[]) {\n    this._rows = !!value ? coerceArray(value) : []\n\n    if (this._rows.length < 1) {\n      this._displayedRows = [\n        { _emptyDisplay: true } as any\n      ]\n    } else {\n      this._displayedRows = this._rows\n    }\n  }\n  private _rows: T[] = []\n\n  get displayedRows() { return this._displayedRows }\n  private _displayedRows: T[] & { _colSpan?: number } = []\n\n  @Input() trackBy: TrackByFunction<T>\n\n  @Input() size: 'sm' | 'md' | undefined | null\n\n  @Input() hasHeader = true\n\n  public displayedRecords: ITableColumn[]\n  public displayedColumns: string[]\n\n  @Output() readonly actionRefreshRequest = new EventEmitter<void>()\n\n  constructor(\n    private _sanitizer: DomSanitizer\n  ) { }\n\n  ngOnInit() { }\n\n  private _setColumns(cols: (string | ITableColumn)[]) {\n    const newCols: ITableColumn[] = []\n\n    for (const col of cols) {\n      if (typeof col === 'string') {\n        const newCol: ITableColumn = {\n          prop: col,\n          name: col\n        }\n        newCols.push(newCol)\n      } else {\n        let name = col.name\n        if (name === undefined || name === null) {\n          name = col.prop\n        }\n        const newCol: ITableColumn = {\n          ...col,\n          prop: col.prop,\n          name\n        }\n        newCols.push(newCol)\n      }\n    }\n\n    for (const col of newCols) {\n      const _col = col as any\n      if (_col && _col.cellTypeConfig && _col.cellTypeConfig.styles) {\n        _col.cellTypeConfig.styles = this._sanitizer.bypassSecurityTrustStyle(_col.cellTypeConfig.styles)\n      }\n    }\n\n    this.displayedRecords = newCols\n    this.displayedColumns = newCols.map(c => c.prop)\n  }\n\n  public triggerActionRefreshRequest() {\n    this.actionRefreshRequest.emit(undefined)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n\n  .table-no-header {\n    ::ng-deep thead {\n      display: none;\n    }\n  }\n}\n",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_sanitizer",
                        "type": "DomSanitizer"
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "_sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "columns": {
                    "name": "columns",
                    "setSignature": {
                        "name": "columns",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "rows": {
                    "name": "rows",
                    "setSignature": {
                        "name": "rows",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "displayedRows": {
                    "name": "displayedRows",
                    "getSignature": {
                        "name": "displayedRows",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                }
            },
            "templateData": "<table cdk-table [dataSource]=\"displayedRows\" class=\"table table-header-divider-indented mb-0\"\n  [class.table-striped]=\"rows?.length > 0\"\n  [class.table-sm]=\"size === 'sm'\"\n  [class.table-no-header]=\"!hasHeader\">\n  <ng-container *ngFor=\"let r of displayedRecords; first as isFirst\">\n    <ng-container [cdkColumnDef]=\"r.prop\">\n      <th cdk-header-cell *cdkHeaderCellDef>\n        <ng-container *ngIf=\"hasHeader\">\n          {{ r.name }}\n        </ng-container>\n      </th>\n      <td cdk-cell *cdkCellDef=\"let element; index as rowIndex\"\n        [attr.colspan]=\"element?._emptyDisplay && isFirst ? 2 : undefined\"\n        [class.border-top-0]=\"element?._emptyDisplay && isFirst\"\n        [class.d-none]=\"element?._emptyDisplay && !isFirst\"\n        [style]=\"r?.cellTypeConfig?.styles\">\n\n        <span [style]=\"r?.cellTypeConfig?.styles\"></span>\n\n        <ng-container *ngIf=\"element?._emptyDisplay && isFirst; else hasDataTpl\">\n          No data to display\n        </ng-container>\n\n        <ng-template #hasDataTpl>\n          <seam-table-cell-type-selector *ngIf=\"r?.cellType; else noCellType\"\n            [type]=\"r?.cellType\"\n            [value]=\"element[r.prop]\"\n            [rowIndex]=\"rowIndex\"\n            [row]=\"element\"\n            [colData]=\"r\">\n          </seam-table-cell-type-selector>\n          <ng-template #noCellType>\n            <div class=\"td-text-truncate\" [title]=\"element[r.prop]\">\n              {{ element[r.prop] }}\n            </div>\n          </ng-template>\n        </ng-template>\n\n      </td>\n    </ng-container>\n  </ng-container>\n\n  <tr cdk-header-row *cdkHeaderRowDef=\"displayedColumns\"></tr>\n  <tr cdk-row *cdkRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n"
        },
        {
            "name": "TheSeamBaseLayoutComponent",
            "id": "component-TheSeamBaseLayoutComponent-f338d385445bc445fa43879acd450e09",
            "file": "projects/ui-common/src/lib/framework/base-layout/base-layout.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "THE_SEAM_BASE_LAYOUT"
                }
            ],
            "selector": "seam-base-layout",
            "styleUrls": [
                "./base-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./base-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "overlayNav",
                    "defaultValue": "false",
                    "line": 37
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_contentFooterPortal",
                    "type": "TemplatePortal",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "_contentFooterTpl",
                    "type": "TemplateRef<any> | null",
                    "optional": true,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "BaseLayoutContentFooterDirective, {static: true, read: TemplateRef}"
                        }
                    ]
                },
                {
                    "name": "_contentHeaderPortal",
                    "type": "TemplatePortal",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "_contentHeaderTpl",
                    "type": "TemplateRef<any> | null",
                    "optional": true,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "BaseLayoutContentHeaderDirective, {static: true, read: TemplateRef}"
                        }
                    ]
                },
                {
                    "name": "_contentPortal",
                    "type": "TemplatePortal",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "_contentTpl",
                    "type": "TemplateRef<any> | null",
                    "optional": true,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "BaseLayoutContentDirective, {static: true, read: TemplateRef}"
                        }
                    ]
                },
                {
                    "name": "_hasSideBar",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_registeredNav",
                    "defaultValue": "new BehaviorSubject<ITheSeamBaseLayoutNav | undefined>(undefined)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_sideBarPortal",
                    "type": "TemplatePortal",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "_sideBarTpl",
                    "type": "TemplateRef<any> | null",
                    "optional": true,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "BaseLayoutSideBarDirective, {static: true, read: TemplateRef}"
                        }
                    ]
                },
                {
                    "name": "_topBarPortal",
                    "type": "TemplatePortal",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "_topBarTpl",
                    "type": "TemplateRef<any> | null",
                    "optional": true,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "BaseLayoutTopBarDirective, {static: true, read: TemplateRef}"
                        }
                    ]
                },
                {
                    "name": "faAngleDoubleLeft",
                    "defaultValue": "faAngleDoubleLeft",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "faAngleDoubleRight",
                    "defaultValue": "faAngleDoubleRight",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "hasSideBar$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isMobile$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "registeredNav$",
                    "defaultValue": "this._registeredNav.asObservable()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                },
                {
                    "name": "registerNav",
                    "args": [
                        {
                            "name": "nav",
                            "type": "ITheSeamBaseLayoutNav"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "nav",
                            "type": "ITheSeamBaseLayoutNav",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unregisterNav",
                    "args": [
                        {
                            "name": "nav",
                            "type": "ITheSeamBaseLayoutNav"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "nav",
                            "type": "ITheSeamBaseLayoutNav",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { TemplatePortal } from '@angular/cdk/portal'\nimport { ChangeDetectionStrategy, Component, ContentChild, forwardRef, Input, OnInit, TemplateRef, ViewContainerRef } from '@angular/core'\nimport { BehaviorSubject, Observable } from 'rxjs'\n\nimport { faAngleDoubleLeft, faAngleDoubleRight } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamLayoutService } from '../../layout/index'\n\nimport { ITheSeamBaseLayoutNav } from './base-layout-nav'\nimport { ITheSeamBaseLayoutRef } from './base-layout-ref'\nimport { THESEAM_BASE_LAYOUT_REF } from './base-layout-tokens'\nimport { BaseLayoutContentFooterDirective } from './directives/base-layout-content-footer.directive'\nimport { BaseLayoutContentHeaderDirective } from './directives/base-layout-content-header.directive'\nimport { BaseLayoutContentDirective } from './directives/base-layout-content.directive'\nimport { BaseLayoutSideBarDirective } from './directives/base-layout-side-bar.directive'\nimport { BaseLayoutTopBarDirective } from './directives/base-layout-top-bar.directive'\n\nexport const THE_SEAM_BASE_LAYOUT: any = {\n  provide: THESEAM_BASE_LAYOUT_REF,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => TheSeamBaseLayoutComponent),\n  multi: false,\n}\n\n@Component({\n  selector: 'seam-base-layout',\n  templateUrl: './base-layout.component.html',\n  styleUrls: ['./base-layout.component.scss'],\n  providers: [ THE_SEAM_BASE_LAYOUT ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TheSeamBaseLayoutComponent implements OnInit, ITheSeamBaseLayoutRef {\n\n  faAngleDoubleRight = faAngleDoubleRight\n  faAngleDoubleLeft = faAngleDoubleLeft\n\n  @Input() overlayNav = false\n\n  // TODO: Consider making the template queries not be dynamic. I can see this\n  // potentially causing confusion or issues with potential layouts built with\n  // this component.\n  @ContentChild(BaseLayoutTopBarDirective, { static: true, read: TemplateRef }) _topBarTpl?: TemplateRef<any> | null\n  @ContentChild(BaseLayoutSideBarDirective, { static: true, read: TemplateRef }) _sideBarTpl?: TemplateRef<any> | null\n  @ContentChild(BaseLayoutContentDirective, { static: true, read: TemplateRef }) _contentTpl?: TemplateRef<any> | null\n  @ContentChild(BaseLayoutContentHeaderDirective, { static: true, read: TemplateRef }) _contentHeaderTpl?: TemplateRef<any> | null\n  @ContentChild(BaseLayoutContentFooterDirective, { static: true, read: TemplateRef }) _contentFooterTpl?: TemplateRef<any> | null\n\n  _topBarPortal: TemplatePortal\n  _sideBarPortal: TemplatePortal\n  _contentPortal: TemplatePortal\n  _contentHeaderPortal: TemplatePortal\n  _contentFooterPortal: TemplatePortal\n\n  private _hasSideBar = new BehaviorSubject<boolean>(false)\n\n  public hasSideBar$: Observable<boolean>\n  public isMobile$: Observable<boolean>\n\n  get registeredNav() { return this._registeredNav.value }\n  private _registeredNav = new BehaviorSubject<ITheSeamBaseLayoutNav | undefined>(undefined)\n  public registeredNav$ = this._registeredNav.asObservable()\n\n  constructor(\n    private _viewContainerRef: ViewContainerRef,\n    private _layout: TheSeamLayoutService\n  ) { }\n\n  ngOnInit() {\n    this.isMobile$ = this._layout.isMobile$\n\n    if (this._topBarTpl) {\n      this._topBarPortal = new TemplatePortal(this._topBarTpl, this._viewContainerRef)\n    }\n\n    if (this._sideBarTpl) {\n      this._sideBarPortal = new TemplatePortal(this._sideBarTpl, this._viewContainerRef)\n      this._hasSideBar.next(true)\n    }\n\n    if (this._contentTpl) {\n      this._contentPortal = new TemplatePortal(this._contentTpl, this._viewContainerRef)\n    }\n\n    if (this._contentHeaderTpl) {\n      this._contentHeaderPortal = new TemplatePortal(this._contentHeaderTpl, this._viewContainerRef)\n    }\n\n    if (this._contentFooterTpl) {\n      this._contentFooterPortal = new TemplatePortal(this._contentFooterTpl, this._viewContainerRef)\n    }\n\n    this.hasSideBar$ = this._hasSideBar.asObservable()\n  }\n\n  public registerNav(nav: ITheSeamBaseLayoutNav): void {\n    // TODO: Allow multiple registered navs\n    // if (this.registeredNav) {\n    //   throw new Error('[TheSeamBaseLayoutComponent] A nav is already registered.')\n    // }\n    // console.log('register nav', nav)\n    this._registeredNav.next(nav)\n  }\n\n  public unregisterNav(nav: ITheSeamBaseLayoutNav): void {\n    if (this.registeredNav === nav) {\n      this._registeredNav.next(undefined)\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n}\n\n.base-layout-side-bar-nav-content-mobile {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  float: left;\n  z-index: 9999;\n}\n\n.base-layout-side-bar-container {\n  flex: 0 0 auto;\n  display: flex;\n  flex-direction: column;\n\n  .base-layout-side-bar-nav-content {\n    flex: 1 1 0;\n  }\n}\n\n.base-layout-main-container {\n  flex: 1 1 100%;\n  display: flex;\n  flex-direction: row;\n  transform: translateZ(0);\n}\n\n.base-layout-top-bar-container {\n  flex: 0 0 auto;\n}\n\n.base-layout-content-container {\n  flex: 1 1 auto;\n  display: flex;\n  flex-direction: column;\n\n  .base-layout-content-container-header {\n    flex: 0 0 auto;\n  }\n\n  .base-layout-content-container-inner {\n    flex: 1 1 auto;\n  }\n\n  .base-layout-content-container-footer {\n    flex: 0 0 auto;\n  }\n}\n",
                    "styleUrl": "./base-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_layout",
                        "type": "TheSeamLayoutService"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_layout",
                        "type": "TheSeamLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ITheSeamBaseLayoutRef"
            ],
            "accessors": {
                "registeredNav": {
                    "name": "registeredNav",
                    "getSignature": {
                        "name": "registeredNav",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                }
            },
            "templateData": "<div class=\"base-layout-side-bar-nav-content-mobile\" *ngIf=\"isMobile$ | async\">\n  <ng-template [cdkPortalOutlet]=\"_sideBarPortal\"></ng-template>\n</div>\n\n<div class=\"base-layout-top-bar-container border-bottom bordered\">\n  <ng-template [cdkPortalOutlet]=\"_topBarPortal\"></ng-template>\n</div>\n<div class=\"base-layout-main-container bg-white\">\n  <div *ngIf=\"hasSideBar$ | async\"\n    class=\"base-layout-side-bar-container border-right bordered\">\n    <div class=\"base-layout-side-bar-nav-content\" *ngIf=\"!(isMobile$ | async)\">\n      <ng-template [cdkPortalOutlet]=\"_sideBarPortal\"></ng-template>\n    </div>\n  </div>\n  <div class=\"base-layout-content-container\">\n    <div class=\"base-layout-content-container-header\">\n      <ng-template [cdkPortalOutlet]=\"_contentHeaderPortal\"></ng-template>\n    </div>\n    <div class=\"base-layout-content-container-inner\" seamOverlayScrollbar>\n      <ng-template [cdkPortalOutlet]=\"_contentPortal\"></ng-template>\n    </div>\n    <div class=\"base-layout-content-container-footer\">\n      <ng-template [cdkPortalOutlet]=\"_contentFooterPortal\"></ng-template>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "TheSeamCheckboxComponent",
            "id": "component-TheSeamCheckboxComponent-c52aee2ea827f077213f0d5b5bddac17",
            "file": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "seamCheckbox",
            "host": {},
            "inputs": [
                "tabIndex"
            ],
            "outputs": [],
            "providers": [
                {
                    "name": "THESEAM_CHECKBOX_CONTROL_VALUE_ACCESSOR"
                }
            ],
            "selector": "seam-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "aria-label",
                    "defaultValue": "''",
                    "description": "<p>Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\ntake precedence so this may be omitted.</p>\n",
                    "line": 82,
                    "type": "string"
                },
                {
                    "name": "aria-labelledby",
                    "defaultValue": "null",
                    "description": "<p>Users can specify the <code>aria-labelledby</code> attribute which will be forwarded to the input element</p>\n",
                    "line": 87,
                    "type": "string | null"
                },
                {
                    "name": "checked",
                    "description": "<p>Whether the checkbox is checked.</p>\n",
                    "line": 100,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "description": "<p>Whether the checkbox is disabled.</p>\n",
                    "line": 116,
                    "type": "boolean"
                },
                {
                    "name": "id",
                    "defaultValue": "this._uid",
                    "description": "<p>A unique id for the checkbox input. If none is supplied, it will be auto-generated. </p>\n",
                    "line": 73,
                    "type": "string"
                },
                {
                    "name": "indeterminate",
                    "description": "<p>Whether the checkbox is indeterminate. This is also known as &quot;mixed&quot; mode and can be used to\nrepresent a checkbox with three states, e.g. a checkbox that represents a nested list of\ncheckable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\nset to false.</p>\n",
                    "line": 135,
                    "type": "boolean"
                },
                {
                    "name": "name",
                    "defaultValue": "null",
                    "description": "<p>Name value will be applied to the input element if present </p>\n",
                    "line": 150,
                    "type": "string | null"
                },
                {
                    "name": "required",
                    "description": "<p>Whether the checkbox is required. </p>\n",
                    "line": 91,
                    "type": "boolean"
                },
                {
                    "name": "value",
                    "description": "<p>The value attribute of the native input element </p>\n",
                    "line": 159,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<TheSeamCheckboxChange>()",
                    "description": "<p>Event emitted when the checkbox&#39;s <code>checked</code> value changes. </p>\n",
                    "line": 153,
                    "type": "EventEmitter"
                },
                {
                    "name": "indeterminateChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "description": "<p>Event emitted when the checkbox&#39;s <code>indeterminate</code> value changes. </p>\n",
                    "line": 156,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "defaultValue": "'keyboard'"
                        },
                        {
                            "name": "options",
                            "type": "FocusOptions",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301,
                    "description": "<p>Focuses the checkbox. </p>\n",
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "FocusOrigin",
                            "defaultValue": "'keyboard'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "FocusOptions",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 268,
                    "description": "<p>Toggles the <code>checked</code> state of the checkbox. </p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>A Checkbox.</p>\n",
            "rawdescription": "A Checkbox.",
            "type": "component",
            "sourceCode": "import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y'\nimport { coerceBooleanProperty } from '@angular/cdk/coercion'\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core'\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms'\n\nimport { CanDisable, CanDisableCtor, HasTabIndex, HasTabIndexCtor, mixinDisabled, mixinTabIndex } from '../core/common-behaviors/index'\n\n// NOTE: Partially based on mat-checkbox: https://github.com/angular/components/blob/master/src/material/checkbox/checkbox.ts\n\n/** Change event object emitted by TheSeamCheckboxComponent. */\nexport class TheSeamCheckboxChange {\n  /** The source TheSeamCheckboxComponent of the event. */\n  source: TheSeamCheckboxComponent\n  /** The new `checked` value of the checkbox. */\n  checked: boolean\n}\n\nexport const THESEAM_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => TheSeamCheckboxComponent),\n  multi: true\n}\n\nclass TheSeamCheckboxComponentBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatCheckboxMixinBase: HasTabIndexCtor & CanDisableCtor &\n  typeof TheSeamCheckboxComponentBase =\n    mixinTabIndex(mixinDisabled(TheSeamCheckboxComponentBase))\n\nlet _uid = 0\n\n/**\n * A Checkbox.\n */\n@Component({\n  selector: 'seam-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss'],\n  exportAs: 'seamCheckbox',\n  host: {\n    '[attr.tabindex]': 'null',\n    'class': 'custom-control custom-checkbox'\n  },\n  providers: [ THESEAM_CHECKBOX_CONTROL_VALUE_ACCESSOR ],\n  inputs: [ 'tabIndex' ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TheSeamCheckboxComponent extends _MatCheckboxMixinBase\n  implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor, CanDisable, HasTabIndex {\n\n  /** @ignore */\n  private _uid = `seam-chk-${_uid++}`\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id?: string = this._uid\n\n  /** Returns the unique id for the input. */\n  get inputId(): string { return `${this.id || this._uid}` }\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel?: string = ''\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby?: string | null = null\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value) }\n  /** @ignore */\n  private _required: boolean\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value\n      this._changeDetectorRef.markForCheck()\n    }\n  }\n  /** @ignore */\n  private _checked = false\n\n  /**\n   * Whether the checkbox is disabled.\n   */\n  // This fully overrides the implementation provided by mixinDisabled, but the\n  // mixin is still required because mixinTabIndex requires it.\n  @Input()\n  get disabled(): boolean { return this._disabled }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value)\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue\n      this._changeDetectorRef.markForCheck()\n    }\n  }\n  /** @ignore */\n  private _disabled = false\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate }\n  set indeterminate(value: boolean) {\n    const changed = value !== this._indeterminate\n    this._indeterminate = coerceBooleanProperty(value)\n\n    if (changed) {\n      this.indeterminateChange.emit(this._indeterminate)\n    }\n\n    this._syncIndeterminate(this._indeterminate)\n  }\n  /** @ignore */\n  private _indeterminate = false\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change = new EventEmitter<TheSeamCheckboxChange>()\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>()\n\n  /** The value attribute of the native input element */\n  @Input() value: string\n\n  /**\n   * The native `<input type=\"checkbox\">` element\n   * @ignore\n   */\n  @ViewChild('input', { static: true }) _inputElement: ElementRef<HTMLInputElement>\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @ignore\n   */\n  _onTouched: () => any = () => {}\n\n  /** @ignore */\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {}\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusMonitor: FocusMonitor,\n    private _ngZone: NgZone,\n    @Attribute('tabindex') tabIndex: string\n  ) {\n    super(elementRef)\n\n    this.tabIndex = parseInt(tabIndex, 10) || 0\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched()\n          _changeDetectorRef.markForCheck()\n        })\n      }\n    })\n  }\n\n  /** @ignore */\n  ngOnInit() { }\n\n  /** @ignore */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef)\n  }\n\n  /** @ignore */\n  ngAfterViewInit() {\n    this._syncIndeterminate(this._indeterminate)\n  }\n\n  /**\n   * Method being called whenever the label text changes.\n   * @ignore\n   */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges()\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  /** @ignore */\n  writeValue(value: any) {\n    this.checked = !!value\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  /** @ignore */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  /** @ignore */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  /** @ignore */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled\n  }\n\n  /** @ignore */\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false')\n  }\n\n  /** @ignore */\n  private _emitChangeEvent() {\n    const event = new TheSeamCheckboxChange()\n    event.source = this\n    event.checked = this.checked\n\n    this._controlValueAccessorChangeFn(this.checked)\n    this.change.emit(event)\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @ignore\n   */\n  _onInputClick(event: Event) {\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate) {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false\n          this.indeterminateChange.emit(this._indeterminate)\n        })\n      }\n\n      this.toggle()\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent()\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin: FocusOrigin = 'keyboard', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, origin, options)\n  }\n\n  /** @ignore */\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation()\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   * @ignore\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._inputElement\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone"
                    },
                    {
                        "name": "tabIndex",
                        "type": "string"
                    }
                ],
                "line": 174,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tabIndex",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "_MatCheckboxMixinBase",
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy",
                "ControlValueAccessor",
                "CanDisable",
                "HasTabIndex"
            ],
            "accessors": {
                "inputId": {
                    "name": "inputId",
                    "getSignature": {
                        "name": "inputId",
                        "type": "string",
                        "returnType": "string",
                        "line": 76,
                        "description": "<p>Returns the unique id for the input. </p>\n"
                    }
                },
                "required": {
                    "name": "required",
                    "setSignature": {
                        "name": "required",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 92,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 101,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 117,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "indeterminate": {
                    "name": "indeterminate",
                    "setSignature": {
                        "name": "indeterminate",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 136,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<input #input\n  type=\"checkbox\"\n  class=\"custom-control-input\"\n  [id]=\"inputId\"\n  [required]=\"required\"\n  [checked]=\"checked\"\n  [attr.value]=\"value\"\n  [disabled]=\"disabled\"\n  [attr.name]=\"name\"\n  [tabIndex]=\"tabIndex\"\n  [attr.aria-label]=\"ariaLabel || null\"\n  [attr.aria-labelledby]=\"ariaLabelledby\"\n  [attr.aria-checked]=\"_getAriaChecked()\"\n  (change)=\"_onInteractionEvent($event)\"\n  (click)=\"_onInputClick($event)\">\n<label #checkboxLabel\n  class=\"custom-control-label\"\n  [attr.for]=\"inputId\"\n  (cdkObserveContent)=\"_onLabelTextChange()\">\n  <ng-content></ng-content>\n</label>\n"
        },
        {
            "name": "TiledSelectComponent",
            "id": "component-TiledSelectComponent-8bd06a1fd55380936a52382dc46d944f",
            "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select/tiled-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TILED_SELECT_VALUE_ACCESSOR"
                }
            ],
            "selector": "seam-tiled-select",
            "styleUrls": [
                "./tiled-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tiled-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "animationsDisabled",
                    "defaultValue": "this._platform.IOS",
                    "line": 77
                },
                {
                    "name": "disabled",
                    "line": 72,
                    "type": "boolean"
                },
                {
                    "name": "layout",
                    "defaultValue": "'grid'",
                    "line": 40,
                    "type": "TiledSelectLayout"
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "line": 73
                },
                {
                    "name": "selectionToggleable",
                    "defaultValue": "true",
                    "line": 74
                },
                {
                    "name": "showSelectedIcon",
                    "defaultValue": "true",
                    "line": 76
                },
                {
                    "name": "tileBackdrop",
                    "defaultValue": "false",
                    "line": 75
                },
                {
                    "name": "tiles",
                    "line": 42
                },
                {
                    "name": "value",
                    "line": 71,
                    "type": "string | string[] | undefined"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<string | string[] | undefined>()",
                    "line": 79,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_tiles",
                    "defaultValue": "[]",
                    "type": "ITiledSelectItem[]",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onChange",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "onTouched",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "overlayTpls",
                    "type": "QueryList<TiledSelectTileOverlayDirective>",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TiledSelectTileOverlayDirective"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tilesAnimationState",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                }
            ],
            "methodsClass": [
                {
                    "name": "getOverlayTpl",
                    "args": [
                        {
                            "name": "tile",
                            "type": "ITiledSelectItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 182,
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "ITiledSelectItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedTiles",
                    "args": [],
                    "optional": false,
                    "returnType": "ITiledSelectItem[]",
                    "typeParameters": [],
                    "line": 178,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "tile",
                            "type": "ITiledSelectItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 128,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "ITiledSelectItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93
                },
                {
                    "name": "onTileSelected",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        },
                        {
                            "name": "tile",
                            "type": "ITiledSelectItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tile",
                            "type": "ITiledSelectItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTile",
                    "args": [
                        {
                            "name": "tile",
                            "type": "ITiledSelectItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "ITiledSelectItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleTileSelected",
                    "args": [
                        {
                            "name": "tile",
                            "type": "ITiledSelectItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "ITiledSelectItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unselectTile",
                    "args": [
                        {
                            "name": "tile",
                            "type": "ITiledSelectItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "tile",
                            "type": "ITiledSelectItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { animate, animation, query, stagger, style, transition, trigger, useAnimation } from '@angular/animations'\nimport { coerceArray } from '@angular/cdk/coercion'\nimport { Platform } from '@angular/cdk/platform'\nimport { Component, ContentChildren, EventEmitter, forwardRef, Input, OnInit, Output, QueryList } from '@angular/core'\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms'\n\nimport { TiledSelectTileOverlayDirective } from './../../directives/tiled-select-tile-overlay.directive'\n\nimport { ITiledSelectItem, TiledSelectLayout } from '../../tiled-select.models'\n\nexport const slideEnterAnimation = animation([\n  style({ opacity: 0, transform: 'translateX(-15px)' }),\n  stagger(100, [\n    animate('0.5s', style({ opacity: 1, transform: 'translateX(0)' }))\n  ])\n])\n\nexport const TILED_SELECT_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => TiledSelectComponent),\n  multi: true,\n}\n\n@Component({\n  selector: 'seam-tiled-select',\n  templateUrl: './tiled-select.component.html',\n  styleUrls: ['./tiled-select.component.scss'],\n  providers: [ TILED_SELECT_VALUE_ACCESSOR ],\n  animations: [\n    trigger('tiles', [\n      transition('* => *', [\n        query(':enter', useAnimation(slideEnterAnimation), { optional: true })\n      ])\n    ])\n  ],\n})\nexport class TiledSelectComponent implements OnInit, ControlValueAccessor {\n\n  @Input() layout: TiledSelectLayout = 'grid'\n  @Input()\n  get tiles() { return this._tiles }\n  set tiles(value: ITiledSelectItem[]) {\n    const _value = [ ...(value || []) ]\n    for (const v of _value) {\n      if (v.value === undefined) {\n        if (v.name === undefined) {\n          throw new Error('If value is undefined then name must be defined.')\n        }\n        v.value = v.name\n      }\n    }\n\n    const prev = this._tiles\n    if (prev.length !== _value.length) {\n      this.tilesAnimationState = !this.tilesAnimationState\n    } else {\n      for (const t of _value) {\n        if (!prev.find(p => p.name === t.name)) {\n          this.tilesAnimationState = !this.tilesAnimationState\n          break\n        }\n      }\n    }\n\n    this._tiles = _value\n  }\n  private _tiles: ITiledSelectItem[] = []\n\n  // tslint:disable-next-line:no-input-rename\n  @Input('value') val: string | string[] | undefined\n  @Input() disabled: boolean\n  @Input() multiple = false\n  @Input() selectionToggleable = true\n  @Input() tileBackdrop = false\n  @Input() showSelectedIcon = true\n  @Input() animationsDisabled = this._platform.IOS\n\n  @Output() readonly change = new EventEmitter<string | string[] | undefined>()\n\n  tilesAnimationState = false\n\n  onChange: any\n  onTouched: any\n\n  @ContentChildren(TiledSelectTileOverlayDirective)\n  public overlayTpls: QueryList<TiledSelectTileOverlayDirective>\n\n  constructor(\n    private _platform: Platform\n  ) { }\n\n  ngOnInit() { }\n\n  get value(): string | string[] | undefined {\n    return this.val\n  }\n\n  set value(value: string | string[] | undefined) {\n    this.val = (this.multiple) ? [ ...(<string[]>value || []) ] : value || ''\n    if (this.onChange) {\n      this.onChange(this.val)\n      this.change.emit(this.val)\n    }\n    if (this.onTouched) { this.onTouched() }\n  }\n\n  writeValue(value: any): void {\n    this.value = value\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled\n  }\n\n  onTileSelected(event: MouseEvent, tile: ITiledSelectItem) {\n    this.toggleTileSelected(tile)\n  }\n\n  public isSelected(tile: ITiledSelectItem) {\n    if (!this.multiple) {\n      if (this.value === tile.value) {\n        return true\n      }\n    } else {\n      if (this.value) {\n        for (const v of this.value) {\n          if (v === tile.value) {\n            return true\n          }\n        }\n      }\n    }\n\n    return false\n  }\n\n  public toggleTileSelected(tile: ITiledSelectItem): void {\n    if (!this.selectionToggleable && this.isSelected(tile)) {\n      return\n    }\n\n    if (this.isSelected(tile)) {\n      this.unselectTile(tile)\n    } else {\n      this.selectTile(tile)\n    }\n  }\n\n  public selectTile(tile: ITiledSelectItem): void {\n    if (this.multiple) {\n      if (!this.isSelected(tile)) {\n        const value: string[] = <string[]>this.value || []\n        this.value = [ ...coerceArray(value), tile.value ]\n      }\n    } else {\n      this.value = tile.value\n    }\n  }\n\n  public unselectTile(tile: ITiledSelectItem): void {\n    if (this.multiple) {\n      const value: string[] = <string[]>this.value || []\n      this.value = value.filter(v => v !== tile.value)\n    } else {\n      this.value = undefined\n    }\n  }\n\n  public getSelectedTiles(): ITiledSelectItem[] {\n    return this.tiles.filter(t => this.isSelected(t))\n  }\n\n  getOverlayTpl(tile: ITiledSelectItem) {\n    // console.log('overlayTpls', this.overlayTpls)\n    return this.overlayTpls.find(t => t.record.name === tile.name)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  width: 100%; /* Needed for IE */\n}\n\n.tiled-select--container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n\n  &.grid {\n    flex-direction: row;\n\n    .tile-wrapper {\n      padding: 12px;\n      width: 200px;\n      height: 180px;\n\n      .tiled-select-tile {\n        height: 100%;\n      }\n    }\n\n    @media screen and (max-width: 600px) {\n      .tile-wrapper {\n        padding: 6px;\n        width: 150px;\n        height: 135px;\n      }\n    }\n  }\n\n  &.list {\n    flex-direction: column;\n\n    .tile-wrapper {\n      width: 100%;\n      height: 50px;\n\n      &:not(:last-child) {\n        margin-bottom: 4px;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./tiled-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_platform",
                        "type": "Platform"
                    }
                ],
                "line": 87,
                "jsdoctags": [
                    {
                        "name": "_platform",
                        "type": "Platform",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "tiles": {
                    "name": "tiles",
                    "setSignature": {
                        "name": "tiles",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 99,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "string | [] | undefined",
                        "line": 95
                    }
                }
            },
            "templateData": "<div class=\"tiled-select--container\"\n  [class.grid]=\"layout === 'grid'\"\n  [class.list]=\"layout === 'list'\"\n  [@tiles]=\"tilesAnimationState\"\n  [@.disabled]=\"animationsDisabled\">\n  <ng-container *ngFor=\"let tile of tiles\">\n    <div class=\"tile-wrapper\">\n      <seam-tiled-select-tile\n        class=\"tiled-select-tile\"\n        [name]=\"tile.name\"\n        [label]=\"tile.label\"\n        [icon]=\"tile.icon\"\n        [disabled]=\"disabled || tile.disabled\"\n        [attr.hidden]=\"tile.hidden\"\n        [layout]=\"layout\"\n        [selected]=\"isSelected(tile)\"\n        [selectable]=\"true\"\n        [tileBackdrop]=\"tileBackdrop\"\n        [showSelectedIcon]=\"showSelectedIcon\"\n        [overlayTpl]=\"getOverlayTpl(tile)\"\n        (activated)=\"onTileSelected($event, tile)\">\n      </seam-tiled-select-tile>\n    </div>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "TiledSelectTileComponent",
            "id": "component-TiledSelectTileComponent-cb28c058a77d746e59ad745128e80659",
            "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile/tiled-select-tile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-tiled-select-tile",
            "styleUrls": [
                "./tiled-select-tile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tiled-select-tile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 76
                },
                {
                    "name": "grayscaleOnDisable",
                    "defaultValue": "true",
                    "line": 81
                },
                {
                    "name": "icon",
                    "line": 75,
                    "type": "string | IconProp"
                },
                {
                    "name": "iconClass",
                    "line": 85,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 74,
                    "type": "string"
                },
                {
                    "name": "layout",
                    "defaultValue": "'grid'",
                    "line": 71,
                    "type": "TiledSelectLayout"
                },
                {
                    "name": "name",
                    "line": 73,
                    "type": "string"
                },
                {
                    "name": "overlayTpl",
                    "line": 87,
                    "type": "TiledSelectTileOverlayDirective"
                },
                {
                    "name": "selectable",
                    "defaultValue": "false",
                    "line": 80
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "line": 77
                },
                {
                    "name": "showLabel",
                    "defaultValue": "true",
                    "line": 82
                },
                {
                    "name": "showSelectedIcon",
                    "defaultValue": "true",
                    "line": 83
                },
                {
                    "name": "tileBackdrop",
                    "defaultValue": "false",
                    "line": 79
                }
            ],
            "outputsClass": [
                {
                    "name": "activated",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 89,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faCheckCircle",
                    "defaultValue": "faCheckCircle",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "labelTpl",
                    "type": "TiledSelectTileLabelTplDirective",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TiledSelectTileLabelTplDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "pulsing",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "pulsingTimeout",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 94
                }
            ],
            "methodsClass": [
                {
                    "name": "mDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110
                },
                {
                    "name": "onTileClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "@pulse",
                    "defaultValue": "true",
                    "line": 69
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { animate, animation, keyframes, style, transition, trigger, useAnimation } from '@angular/animations'\nimport { ChangeDetectorRef, Component, ContentChild, EventEmitter, HostBinding, Input, Output } from '@angular/core'\n\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\nimport { faCheckCircle } from '@fortawesome/free-regular-svg-icons'\n\nimport { TiledSelectTileLabelTplDirective } from '../../directives/tiled-select-tile-label-tpl.directive'\nimport { TiledSelectTileOverlayDirective } from '../../directives/tiled-select-tile-overlay.directive'\nimport { TiledSelectLayout } from '../../tiled-select.models'\n\nexport const tilePulse = animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({ transform: 'scale3d(1, 1, 1)' }),\n      style({ transform: 'scale3d({{ scale }}, {{ scale }}, {{ scale }})' }),\n      style({ transform: 'scale3d(1, 1, 1)' }),\n    ])\n  ),\n  { params: { scale: 1.05, timing: 0.75, delay: 0 } }\n)\n\nexport const tileScaleUp = animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({ transform: 'scale3d({{ scale }}, {{ scale }}, {{ scale }})' }),\n    ])\n  ),\n  { params: { scale: 1.05, timing: 0.75, delay: 0 } }\n)\n\nexport const tileScaleDown = animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({ transform: 'scale3d(1, 1, 1)' }),\n    ])\n  ),\n  { params: { scale: 1.05, timing: 0.75, delay: 0 } }\n)\n\n@Component({\n  selector: 'seam-tiled-select-tile',\n  templateUrl: './tiled-select-tile.component.html',\n  styleUrls: ['./tiled-select-tile.component.scss'],\n  animations: [\n    trigger('pulse', [\n      transition('false => true', [\n        useAnimation(tilePulse)\n        // useAnimation(tileScaleUp)\n      ]),\n      // transition('true => false', [\n      //   useAnimation(tileScaleDown)\n      // ])\n    ]),\n    // trigger('openClose', [\n    //   state('true', style({ height: '*' })),\n    //   state('false', style({ height: '0px' })),\n    //   transition('false <=> true', animate(500))\n    // ])\n  ],\n  // changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TiledSelectTileComponent {\n\n  faCheckCircle = faCheckCircle\n\n  @HostBinding('@pulse') pulseAnimationState = true\n\n  @Input() layout: TiledSelectLayout = 'grid'\n\n  @Input() name: string\n  @Input() label: string\n  @Input() icon: string | IconProp\n  @Input() disabled = false\n  @Input() selected = false\n\n  @Input() tileBackdrop = false\n  @Input() selectable = false\n  @Input() grayscaleOnDisable = true\n  @Input() showLabel = true\n  @Input() showSelectedIcon = true\n\n  @Input() iconClass: string\n\n  @Input() overlayTpl: TiledSelectTileOverlayDirective\n\n  @Output() activated = new EventEmitter<any>()\n\n  @ContentChild(TiledSelectTileLabelTplDirective, { static: true }) labelTpl: TiledSelectTileLabelTplDirective\n\n  pulsing = false\n  pulsingTimeout: number | undefined\n\n  constructor(\n    private cdr: ChangeDetectorRef\n  ) { }\n\n  onTileClick(event: any) {\n    if (!this.selectable) { return }\n    this.activated.emit(event)\n\n    // this.pulsing = true\n    // setTimeout(() => {\n    //   this.pulsing = false\n    // }, 750)\n  }\n\n  mDown() {\n    if (this.pulsingTimeout) {\n      clearTimeout(this.pulsingTimeout)\n    }\n\n    if (!this.pulsing) {\n      this.pulsing = true\n      // this.cdr.detectChanges()\n    }\n\n    // console.log('start')\n    this.pulsingTimeout = window.setTimeout(() => {\n      this.pulsing = false\n      // this.cdr.detectChanges()\n      this.pulsingTimeout = undefined\n    }, 750)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$light-grey: rgba(230,230,230,1);\n$light-blue: rgba(60,150,200,1);\n\n:host {\n  display: block;\n}\n\n.tiled-select-tile-panel {\n  width: 100%;\n  height: 100%;\n\n  box-sizing: border-box;\n  border: 1px solid $light-grey;\n  background-color: white;\n  color: rgba(80,80,80,1);\n  position: relative;\n  overflow: hidden;\n\n  &:disabled:not(.no-grayscale) {\n    filter: grayscale(1);\n  }\n\n  .grey-fix {\n    visibility: hidden;\n    display: block;\n  }\n\n  &.selected {\n    border: 1px solid $light-blue;\n  }\n\n  &.selectable {\n    &:hover:not(:disabled) {\n      box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n                  0px 2px 2px 0px rgba(0, 0, 0, 0.14),\n                  0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n      cursor: pointer;\n    }\n\n    &:focus:not(:disabled) {\n      outline: none;\n    }\n  }\n\n  &:not(.selectable) {\n    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n                0px 2px 2px 0px rgba(0, 0, 0, 0.14),\n                0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  }\n\n  .tiled-select-tile-panel--content {\n    display: flex;\n    height: 100%;\n    width: 100%;\n\n    // .tiled-select-tile-panel--icon {\n    //   user-select: none;\n    //   overflow: hidden;\n    // }\n\n    .tiled-select-tile-panel--selected {\n      position: absolute;\n      top: 4px;\n      right: 4px;\n      // max-width: 24px;\n      // max-height: 24px;\n    }\n\n    .selected-backdrop {\n      opacity: 0.2;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      border-radius: 15px;\n      transition: ease-in-out 0.2s background-color;\n      pointer-events: none;\n    }\n  }\n\n  .tiled-select-tile-panel--overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    // background-color: rgba(150,150,150,0.5);\n  }\n\n  //\n  // Grid\n  //\n  &.grid {\n    border-radius: 15px;\n    padding: 0;\n    margin: 0;\n\n    .tiled-select-tile-panel--content {\n      flex-direction: column;\n\n      .selected-backdrop {\n        border-radius: 15px;\n      }\n    }\n\n    .tiled-select-tile-panel--label-container {\n      flex: 0 0 auto;\n      height: 2.5em;\n      line-height: 1em;\n\n      .tiled-select-tile-panel--label {\n        display: block;\n        font-size: 90%;\n        padding: 0 1em;\n        white-space: initial;\n      }\n    }\n\n    @media screen and (max-width: 600px) {\n      .tiled-select-tile-panel--label-container {\n        height: 2rem;\n        line-height: 0.9em;\n\n        .tiled-select-tile-panel--label {\n          font-size: 13px;\n          padding: 0 0.7em;\n        }\n      }\n    }\n  }\n\n  //\n  // List\n  //\n  &.list {\n    border-radius: 10px;\n    padding: 4px 4px 4px 4px;\n\n    .tiled-select-tile-panel--content {\n      flex-direction: row;\n\n      .selected-backdrop {\n        border-radius: 10px;\n      }\n    }\n\n    .tiled-select-tile-panel--label-container {\n      display: flex;\n      max-height: 100%;\n      flex-direction: column;\n      padding-right: 40px;\n\n      .tiled-select-tile-panel--label {\n        padding: 0 6px;\n        text-align: left;\n        margin: auto 0;\n        font-size: 80%;\n        white-space: initial;\n      }\n    }\n\n    .tiled-select-tile-panel--selected {\n      ::ng-deep .svg-inline--fa {\n        height: 39px;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./tiled-select-tile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 94,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button\n  class=\"btn tiled-select-tile-panel\"\n  [disabled]=\"disabled\"\n  [class.grid]=\"layout === 'grid'\"\n  [class.list]=\"layout === 'list'\"\n  [class.selected]=\"selectable && selected\"\n  [class.selectable]=\"selectable\"\n  [class.no-grayscale]=\"!grayscaleOnDisable\"\n  (click)=\"onTileClick($event)\"\n  [@pulse]=\"pulsing ? true : false\"\n  [attr.data-category]=\"name\"\n  [attr.title]=\"showLabel ? '' : label\"\n  type=\"button\">\n  <div class=\"tiled-select-tile-panel--content\">\n    <seam-tiled-select-tile-icon\n      class=\"tiled-select-tile-panel--icon\"\n      [class.invisible]=\"!icon\"\n      [icon]=\"icon\"\n      [iconClass]=\"iconClass\"\n      [layout]=\"layout\"\n      [grayscaleOnDisable]=\"grayscaleOnDisable\"\n      [disabled]=\"disabled\">\n    </seam-tiled-select-tile-icon>\n    <div class=\"tiled-select-tile-panel--label-container\" *ngIf=\"showLabel\">\n      <span *ngIf=\"!labelTpl\" class=\"tiled-select-tile-panel--label\">{{ label }}</span>\n      <ng-template *ngIf=\"labelTpl\"\n        [ngTemplateOutlet]=\"labelTpl.template\"\n        [ngTemplateOutletContext]=\"{ $implicit: label, label: label }\">\n      </ng-template>\n    </div>\n    <div *ngIf=\"tileBackdrop\" class=\"selected-backdrop\"\n      [class.bg-success]=\"selected\"></div>\n    <fa-icon\n      *ngIf=\"selected && showSelectedIcon\"\n      class=\"tiled-select-tile-panel--selected text-success\"\n      [icon]=\"faCheckCircle\"\n      size=\"3x\">\n    </fa-icon>\n  </div>\n  <div class=\"tiled-select-tile-panel--overlay\" *ngIf=\"overlayTpl\">\n    <ng-template [ngTemplateOutlet]=\"overlayTpl.template\"></ng-template>\n  </div>\n</button>\n"
        },
        {
            "name": "TiledSelectTileIconComponent",
            "id": "component-TiledSelectTileIconComponent-22cc3737247bfe9e1f46a0208bf36418",
            "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile-icon/tiled-select-tile-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-tiled-select-tile-icon",
            "styleUrls": [
                "./tiled-select-tile-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tiled-select-tile-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 25
                },
                {
                    "name": "grayscaleOnDisable",
                    "defaultValue": "false",
                    "line": 24
                },
                {
                    "name": "icon",
                    "line": 30,
                    "type": "SeamIcon | undefined"
                },
                {
                    "name": "iconClass",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "layout",
                    "defaultValue": "'grid'",
                    "line": 23,
                    "type": "\"grid\" | \"list\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_iconObj",
                    "type": "IconProp | undefined",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_iconUrl",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "iconTpl",
                    "type": "TiledSelectTileIconTplDirective",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TiledSelectTileIconTplDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "needToFix",
                    "defaultValue": "needToFix",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                }
            ],
            "hostBindings": [
                {
                    "name": "class.grid",
                    "line": 20
                },
                {
                    "name": "class.list",
                    "line": 21
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, HostBinding, Input, OnInit } from '@angular/core'\n\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\n\nimport { SeamIcon } from '../../../icon/index'\n\nimport { TiledSelectTileIconTplDirective } from '../../directives/tiled-select-tile-icon-tpl.directive'\n\nconst needToFix = /(MSIE 10)|(Trident.*rv:11\\.0)|( Edge\\/[\\d\\.]+$)/.test(navigator.userAgent)\n\n@Component({\n  selector: 'seam-tiled-select-tile-icon',\n  templateUrl: './tiled-select-tile-icon.component.html',\n  styleUrls: ['./tiled-select-tile-icon.component.scss']\n})\nexport class TiledSelectTileIconComponent implements OnInit {\n\n  needToFix = needToFix\n\n  @HostBinding('class.grid') get _cssClassGrid() { return this.layout === 'grid' }\n  @HostBinding('class.list') get _cssClassList() { return this.layout === 'list' }\n\n  @Input() layout: 'grid' | 'list' = 'grid'\n  @Input() grayscaleOnDisable = false\n  @Input() disabled = false\n\n  @Input() iconClass: string\n\n  @Input()\n  get icon(): SeamIcon | undefined { return this._iconUrl || this._iconObj }\n  set icon(value: SeamIcon | undefined) {\n    if (typeof value === 'string') {\n      this._iconUrl = value\n      this._iconObj = undefined\n    } else {\n      this._iconUrl = undefined\n      this._iconObj = value\n    }\n  }\n\n  public _iconUrl: string | undefined\n  public _iconObj: IconProp | undefined\n\n  @ContentChild(TiledSelectTileIconTplDirective, { static: true }) iconTpl: TiledSelectTileIconTplDirective\n\n  constructor() { }\n\n  ngOnInit() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$light-grey: rgba(230,230,230,1);\n$light-blue: rgba(60,150,200,1);\n\n:host {\n  display: block;\n\n  user-select: none;\n  overflow: hidden;\n\n  &.grid {\n    flex: 1 1 auto;\n    margin: 0 auto;\n    display: flex;\n    align-items: center;\n    width: 100%; // Needed for Firefox\n\n    .tiled-select-tile-panel--icon-img {\n      width: 100%;\n      max-width: 75px;\n      max-height: 75px;\n      margin: 0 auto;\n\n      &[src$=\".svg\"] {\n        height: 100%; // Needed for IE\n      }\n    }\n\n    > .grayscale-fix {\n      max-width: 75px;\n      max-height: 75px;\n      margin: 0 auto;\n    }\n  }\n\n  &.list {\n    border: 1px solid $light-grey;\n    border-radius: 8px;\n    min-width: 39px;\n    width: 39px;\n    min-height: 39px;\n    height: 39px;\n    padding: 1px;\n    align-items: center;\n    display: flex;\n\n    img {\n      max-width: 100%;\n      max-height: 100%;\n      margin: 0 auto;\n    }\n  }\n}\n\n.grey-fix {\n  visibility: hidden;\n  display: block;\n}\n\n.tiled-select-tile-icon--fa {\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  text-align: center;\n  width: 100%;\n  padding: 2px;\n\n  ::ng-deep .svg-inline--fa {\n    max-width: 100%;\n    height: 100%;\n    width: 100%;\n  }\n}\n",
                    "styleUrl": "./tiled-select-tile-icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 44
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "icon": {
                    "name": "icon",
                    "setSignature": {
                        "name": "icon",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"iconTpl; else noIconTpl\">\n  <ng-template\n    [ngTemplateOutlet]=\"iconTpl.template\"\n    [ngTemplateOutletContext]=\"{ $implicit: icon, icon: icon }\">\n  </ng-template>\n</ng-container>\n<ng-template #noIconTpl>\n\n  <fa-icon *ngIf=\"_iconObj\"\n    class=\"tiled-select-tile-icon--fa {{ iconClass }}\"\n    [icon]=\"_iconObj\"></fa-icon>\n\n  <ng-container *ngIf=\"_iconUrl\">\n    <!-- Partial fix for IE greyscale -->\n    <ng-container *ngIf=\"needToFix\">\n      <ng-container *ngIf=\"disabled && grayscaleOnDisable\">\n        <span class=\"grayscale-fix\" style=\"display: inline-block; position: relative;\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" id=\"svgroot\" style=\"position: absolute; left: 0; right: 0;\" viewBox=\"0 0 48 48\" width=\"100%\" height=\"100%\">\n            <defs><filter id=\"gray\"><feColorMatrix type=\"matrix\" values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\" /></filter></defs>\n            <image filter=\"url(&quot;#gray&quot;)\" preserveAspectRatio=\"none meet\" x=\"0\" y=\"0\" width=\"48\" height=\"48\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n              [attr.xlink:href]=\"_iconUrl\" />\n          </svg>\n          <img class=\"tiled-select-tile-panel--icon-img {{ iconClass }}\" style=\"display: block; visibility: hidden;\" alt=\"Icon\" [src]=\"_iconUrl\">\n        </span>\n      </ng-container>\n      <ng-container *ngIf=\"!disabled\">\n        <img class=\"tiled-select-tile-panel--icon-img {{ iconClass }}\" [src]=\"_iconUrl\" alt=\"Icon\">\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"!needToFix\">\n      <img class=\"tiled-select-tile-panel--icon-img {{ iconClass }}\" [src]=\"_iconUrl\" alt=\"Icon\">\n    </ng-container>\n  </ng-container>\n\n</ng-template>\n"
        },
        {
            "name": "ToggleButtonComponent",
            "id": "component-ToggleButtonComponent-afb4a91588f2435e74b4fbb9c1714adf",
            "file": "projects/ui-common/src/lib/buttons/toggle-button/toggle-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "seamToggleButton",
            "host": {},
            "inputs": [
                "disabled",
                "theme",
                "size"
            ],
            "outputs": [],
            "providers": [
                {
                    "name": "TOGGLE_BUTTON_VALUE_ACCESSOR"
                }
            ],
            "selector": "button[seamToggleButton]",
            "styleUrls": [
                "./toggle-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "value",
                    "line": 41,
                    "type": "boolean"
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "description": "<p>ARIA type for the button. </p>\n",
                    "line": 60,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "onTouched",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "_toggleValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                }
            ],
            "hostBindings": [
                {
                    "name": "class.active",
                    "line": 49
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y'\nimport { coerceBooleanProperty } from '@angular/cdk/coercion'\nimport {\n  Component, ElementRef, EventEmitter,\n  forwardRef, HostBinding, Input, OnDestroy, Output, Renderer2\n} from '@angular/core'\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms'\n\nimport { toggleAttribute } from '../../utils/index'\nimport { ButtonComponent } from '../button/button.component'\n\n\nexport const TOGGLE_BUTTON_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => ToggleButtonComponent),\n  multi: true,\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seamToggleButton]',\n  templateUrl: './toggle-button.component.html',\n  styleUrls: ['./toggle-button.component.scss'],\n  exportAs: 'seamToggleButton',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled', 'theme', 'size' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    '[attr.type]': 'type',\n    'class': 'btn',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_toggleValue()',\n  },\n  providers: [ TOGGLE_BUTTON_VALUE_ACCESSOR ]\n})\nexport class ToggleButtonComponent extends ButtonComponent implements OnDestroy, ControlValueAccessor {\n\n  // tslint:disable-next-line:no-input-rename\n  @Input('value') val: boolean\n\n  @Output() readonly change = new EventEmitter<boolean>()\n\n  onChange: any\n  onTouched: any\n\n  @HostBinding('class.active')\n  get _activeCssClass() { return this.value ? coerceBooleanProperty(this.value) : false}\n\n  constructor(\n    _elementRef: ElementRef,\n    _focusMonitor: FocusMonitor,\n    _renderer: Renderer2\n  ) { super(_elementRef, _focusMonitor, _renderer) }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n  get value(): boolean {\n    return this.val\n  }\n\n  set value(value: boolean) {\n    this.val = value\n    this.change.emit(this.val)\n    if (this.onChange) { this.onChange(value) }\n    if (this.onTouched) { this.onTouched() }\n  }\n\n  writeValue(value: any): void {\n    this.value = value\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled\n  }\n\n  _toggleValue() {\n    this.value = !this.value\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./toggle-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ButtonComponent",
            "implements": [
                "OnDestroy",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 63,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 59
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "ToggleEditActionsContainerComponent",
            "id": "component-ToggleEditActionsContainerComponent-2d9307c7ec07367892517aebcb6170a5",
            "file": "projects/ui-common/src/lib/toggle-edit/toggle-edit-actions-container/toggle-edit-actions-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-toggle-edit-actions-container",
            "styleUrls": [
                "./toggle-edit-actions-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle-edit-actions-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-toggle-edit-actions-container',\n  templateUrl: './toggle-edit-actions-container.component.html',\n  styleUrls: ['./toggle-edit-actions-container.component.scss']\n})\nexport class ToggleEditActionsContainerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n",
                    "styleUrl": "./toggle-edit-actions-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "ToggleEditComponent",
            "id": "component-ToggleEditComponent-54102a72fe7d5ac3d77ee05c7547e278",
            "file": "projects/ui-common/src/lib/toggle-edit/toggle-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-toggle-edit",
            "styleUrls": [
                "./toggle-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cancelOnBlur",
                    "defaultValue": "true",
                    "line": 67
                },
                {
                    "name": "editing",
                    "line": 73,
                    "type": "boolean"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 70
                },
                {
                    "name": "waitOnSubmit",
                    "defaultValue": "false",
                    "line": 68
                }
            ],
            "outputsClass": [
                {
                    "name": "changeAccepted",
                    "defaultValue": "new EventEmitter<IToggleEditRef>()",
                    "line": 85,
                    "type": "EventEmitter"
                },
                {
                    "name": "changeDeclined",
                    "defaultValue": "new EventEmitter<IToggleEditRef>()",
                    "line": 86,
                    "type": "EventEmitter"
                },
                {
                    "name": "editingChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 87,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_actionsFocused",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_beforeEditValue",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "<p>Input value before editing.</p>\n<p>If the edit change is canceled the input value will be reset back to this\nvalue.</p>\n",
                    "line": 63,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_editing",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_focused",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Use <code>hasFocus()</code> to check for focus. This is only for monitoring focus lost. </p>\n",
                    "line": 52,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_focusObserver",
                    "type": "MutationObserver",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_previousDisabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_submitting",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "displayTpl",
                    "type": "ToggleEditDisplayTplDirective",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "ToggleEditDisplayTplDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "faCheck",
                    "defaultValue": "faCheck",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "faPen",
                    "defaultValue": "faPen",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "faTimes",
                    "defaultValue": "faTimes",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "modalRef",
                    "type": "OverlayRef",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "templatePortal",
                    "type": "TemplatePortal<any>",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "templatePortalContent",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'templatePortalContent', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_checkDisabledChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_destroyMonitors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_initMonitors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 294,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "actionsFocusChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 442,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancelEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 285,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "canSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 186,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "focusContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 321,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getControl",
                    "args": [],
                    "optional": false,
                    "returnType": "AbstractControl | null",
                    "typeParameters": [],
                    "line": 258,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "FormControl | null",
                    "typeParameters": [],
                    "line": 249,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getFormGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup | null",
                    "typeParameters": [],
                    "line": 240,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getOverlayPosition",
                    "args": [
                        {
                            "name": "origin",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "PositionStrategy",
                    "typeParameters": [],
                    "line": 403,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "origin",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPositions",
                    "args": [],
                    "optional": false,
                    "returnType": "ConnectionPositionPair[]",
                    "typeParameters": [],
                    "line": 413,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getValue",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 217,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hasControl",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 254,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hasFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 317,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditing",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 341,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isFormGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 236,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isInFormField",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 245,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isSubmitting",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 194,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "keydownEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 389,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120
                },
                {
                    "name": "resetValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "resized",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 436,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "startEditing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 345,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "stopEditing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 365,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submitComplete",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submitEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 267,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "toggleEditing",
                    "args": [
                        {
                            "name": "isEditing",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 331,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "isEditing",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBeforeEditValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.toggle-edit-active",
                    "line": 65
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y'\nimport { coerceBooleanProperty } from '@angular/cdk/coercion'\nimport { ENTER, ESCAPE } from '@angular/cdk/keycodes'\nimport { ConnectionPositionPair, Overlay, OverlayRef, PositionStrategy } from '@angular/cdk/overlay'\nimport { TemplatePortal } from '@angular/cdk/portal'\nimport {\n  AfterViewInit,\n  Component,\n  ContentChild,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Host,\n  HostBinding,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Renderer2,\n  Self,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core'\nimport { AbstractControl, ControlContainer, FormControl, FormGroup } from '@angular/forms'\n\nimport { faCheck, faPen, faTimes } from '@fortawesome/free-solid-svg-icons'\n\nimport { FormFieldComponent } from '../form-field/form-field.component'\nimport { ICanToggleEdit } from './models/can-toggle-edit'\nimport { IToggleEditRef } from './models/toggle-edit-ref'\nimport { ToggleEditDisplayTplDirective } from './toggle-edit-display-tpl.directive'\nimport { ToggleEditKeyboardListenerService } from './toggle-edit-keyboard-listener.service'\n\n\n@Component({\n  selector: 'seam-toggle-edit',\n  templateUrl: './toggle-edit.component.html',\n  styleUrls: ['./toggle-edit.component.scss']\n})\nexport class ToggleEditComponent implements OnInit, OnDestroy, AfterViewInit, DoCheck, ICanToggleEdit, IToggleEditRef {\n\n  faPen = faPen\n  faTimes = faTimes\n  faCheck = faCheck\n\n  private _previousDisabled = false\n\n  /** Use `hasFocus()` to check for focus. This is only for monitoring focus lost. */\n  private _focused = false\n  private _focusObserver: MutationObserver\n  private _actionsFocused = false\n  private _submitting = false\n\n  /**\n   * Input value before editing.\n   *\n   * If the edit change is canceled the input value will be reset back to this\n   * value.\n   */\n  private _beforeEditValue = null\n\n  @HostBinding('class.toggle-edit-active') get _toggleEditActiveClass() { return this.editing }\n\n  @Input() cancelOnBlur = true\n  @Input() waitOnSubmit = false\n\n  @Input() placeholder = ''\n\n  @Input()\n  get editing(): boolean { return this._editing }\n  set editing(value: boolean) {\n    if (this.disabled && value) { return }\n\n    if (!this._editing) {\n      this.updateBeforeEditValue()\n    }\n    this._editing = coerceBooleanProperty(value)\n    this.editingChange.emit(value)\n  }\n  private _editing = false\n\n  @Output() changeAccepted = new EventEmitter<IToggleEditRef>()\n  @Output() changeDeclined = new EventEmitter<IToggleEditRef>()\n  @Output() editingChange = new EventEmitter<boolean>()\n\n  @ViewChild('templatePortalContent', { static: true }) templatePortalContent: TemplateRef<any>\n  public templatePortal: TemplatePortal<any>\n  public modalRef: OverlayRef\n\n  @ContentChild(ToggleEditDisplayTplDirective, { static: true }) displayTpl: ToggleEditDisplayTplDirective\n\n  constructor(\n    private _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    @Optional() @Self() private controlContainer: ControlContainer,\n    @Optional() @Host() private formFieldComponent: FormFieldComponent,\n    private _kbListener: ToggleEditKeyboardListenerService,\n    private _focusMonitor: FocusMonitor,\n    private _ngZone: NgZone,\n    private _renderer: Renderer2,\n    private _viewContainerRef: ViewContainerRef,\n    private _overlay: Overlay\n  ) {\n    this._ngZone.runOutsideAngular(() => {\n      this._focusObserver = new MutationObserver(() => {\n        this._ngZone.run(() => {\n          if (this.hasFocus()) {\n            if (this.disabled) { return }\n            this._onFocus()\n          } else {\n            this._onBlur()\n          }\n        })\n      })\n    })\n  }\n\n  ngOnInit() {\n    this._initMonitors()\n    if (this.formFieldComponent) {\n      // TODO: Consider making this smarter, such as avoiding overwritting when input set.\n      this.formFieldComponent.numPaddingErrors = 0\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyMonitors()\n  }\n\n  ngAfterViewInit() {\n    if (this.formFieldComponent && this.formFieldComponent.contentInput) {\n      this.formFieldComponent.contentInput.stateChanges.subscribe(_ => {\n        this._checkDisabledChange()\n      })\n    }\n    setTimeout(() => {\n      this.templatePortal = new TemplatePortal(this.templatePortalContent, this._viewContainerRef)\n    })\n    this._checkDisabledChange()\n  }\n\n  ngDoCheck() {\n    this._checkDisabledChange()\n  }\n\n  private _initMonitors() {\n    this._kbListener.add(this)\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true)\n    this._focusObserver.observe(this._elementRef.nativeElement, {\n      attributes: true,\n      attributeFilter: ['class'],\n      childList: false,\n      characterData: false\n    })\n  }\n\n  private _destroyMonitors() {\n    this._kbListener.remove(this)\n\n    this._focusObserver.disconnect()\n    this._focused = false\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement)\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'tabindex')\n  }\n\n  // Make this disabled checking implementation better. It gets called to much\n  // trying to be accurate.\n  private _checkDisabledChange() {\n    const isDisabled = this.disabled\n    if (isDisabled !== this._previousDisabled) {\n\n    }\n  }\n\n  public get disabled() {\n    const control = this.getControl()\n    if (control) {\n      return control.disabled\n    }\n    return false\n  }\n\n  public canSubmit(): boolean {\n    const control = this.getControl()\n    if (control) {\n      return control.valid\n    }\n    return true\n  }\n\n  public isSubmitting(): boolean {\n    return this._submitting\n  }\n\n  public submitComplete(error?: any): void {\n    const control = this.getControl()\n    if (control) {\n      control.enable()\n    }\n    this._submitting = false\n\n    if (!error) {\n      this.stopEditing()\n    }\n  }\n\n  public updateBeforeEditValue(): void {\n    const control = this.getControl()\n    if (control) {\n      this._beforeEditValue = control.value\n    }\n  }\n\n  public getValue(): string | null {\n    const control = this.getControl()\n    if (control) {\n      return control.value\n    }\n\n    return null\n  }\n\n  public resetValue(): void {\n    const control = this.getControl()\n    if (control) {\n      // Reset without emitting then update which will emit, because reset will\n      // emit changes before setting pristine\n      control.reset(this._beforeEditValue, { emitEvent: false })\n      control.updateValueAndValidity()\n    }\n  }\n\n  public isFormGroup(): boolean {\n    return !!this.controlContainer\n  }\n\n  public getFormGroup(): FormGroup | null {\n    if (!this.isFormGroup()) { return null }\n    return <FormGroup>this.controlContainer.control\n  }\n\n  public isInFormField(): boolean {\n    return !!this.formFieldComponent\n  }\n\n  public getFormControl(): FormControl |  null {\n    if (!this.isInFormField()) { return null }\n    return <FormControl>this.formFieldComponent.contentInput.ngControl.control\n  }\n\n  public hasControl(): boolean {\n    return !!this.getControl()\n  }\n\n  public getControl(): AbstractControl | null {\n    if (this.isFormGroup()) {\n      return this.getFormGroup()\n    } else if (this.isInFormField()) {\n      return this.getFormControl()\n    }\n    return null\n  }\n\n  public submitEdit(): void {\n    if (!this.canSubmit()) {\n      return\n    }\n\n    if (this.waitOnSubmit) {\n      const control = this.getControl()\n      if (control) {\n        control.disable()\n      }\n      this._submitting = true\n    }\n\n    this.stopEditing()\n\n    this.changeAccepted.emit(<IToggleEditRef>this)\n  }\n\n  public cancelEdit(): void {\n    // Reset without emitting then update which will emit, because reset will\n    // emit changes before setting pristine\n    this.resetValue()\n    this.stopEditing()\n\n    this.changeDeclined.emit(<IToggleEditRef>this)\n  }\n\n  private _onFocus(): void {\n    // Return if already focused\n    if (this._focused) { return }\n\n    this._focused = true\n    this._actionsFocused = false\n  }\n\n  private _onBlur(): void {\n    // Return if focus hasn't been detected\n    if (!this._focused) { return }\n\n    if (this.editing && this.cancelOnBlur) {\n      setTimeout(() => {\n        if (!this._actionsFocused) {\n          this.cancelEdit()\n        }\n      })\n    }\n\n    this._focused = false\n  }\n\n  public hasFocus(): boolean {\n    return this._elementRef.nativeElement.classList.contains('cdk-focused')\n  }\n\n  public focusContent(): void {\n    // Set the tab index to `-1` to allow the root element of the component to\n    // receive `focus` event from javascript, but not get focused by keyboard\n    // navigation. This is for the focus monitor. If a button is clicked the\n    // focus monitor emits a blur before the focus of the input. This will avoid\n    // the blur by letting the component itself receive focus events.\n    this._renderer.setAttribute(this._elementRef.nativeElement, 'tabindex', '-1')\n    this._elementRef.nativeElement.focus()\n  }\n\n  public toggleEditing(isEditing?: boolean): void {\n    if (this.editing === isEditing) { return }\n    const _editing = isEditing === undefined ? !this.editing : !!isEditing\n    if (_editing) {\n      this.startEditing()\n    } else {\n      this.stopEditing()\n    }\n  }\n\n  public isEditing(): boolean {\n    return this.editing\n  }\n\n  public startEditing(): void {\n    if (this.disabled) { return }\n    if (this.isEditing()) {\n      return\n    }\n\n    this.updateBeforeEditValue()\n\n    this.focusContent()\n\n    this.editing = true\n\n    this.modalRef = this._overlay.create({\n      hasBackdrop: false,\n      positionStrategy: this.getOverlayPosition(this._elementRef.nativeElement),\n    })\n\n    this.modalRef.attach(this.templatePortal)\n  }\n\n  public stopEditing(): void {\n    if (!this.isEditing()) {\n      return\n    }\n\n    if (this.isSubmitting()) {\n      return\n    }\n\n    if (this.modalRef.hasAttached()) {\n      this.modalRef.detach()\n    }\n\n    // NOTE: This is a hack to avoid a focus lost issue introduced by a focus\n    // acuired issue's hack.\n    this._elementRef.nativeElement.focus()\n    this._elementRef.nativeElement.blur()\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement)\n    this._renderer.removeAttribute(this._elementRef.nativeElement, 'tabindex')\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true)\n\n    this.editing = false\n  }\n\n  public keydownEvent(event: KeyboardEvent): void {\n    // tslint:disable-next-line:deprecation\n    switch (event.keyCode) {\n      case ESCAPE: {\n        this.cancelEdit()\n        break\n      }\n      case ENTER: {\n        this.submitEdit()\n        break\n      }\n    }\n  }\n\n  private getOverlayPosition(origin: HTMLElement): PositionStrategy {\n    const positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(origin)\n      .withPositions(this.getPositions())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n\n    return positionStrategy\n  }\n\n  private getPositions(): ConnectionPositionPair[] {\n    return [\n      {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'top',\n      },\n      {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top',\n      },\n      {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n      },\n    ]\n  }\n\n  public resized(): void {\n    if (this.modalRef && this.modalRef.hasAttached()) {\n      this.modalRef.updatePosition()\n    }\n  }\n\n  public actionsFocusChange(event: any): void {\n    this._actionsFocused = !!event\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/utilities';\n\n:host {\n  display: block;\n  position: relative;\n}\n\n.toggle-edit-not-editing {\n  transition: 250ms ease-in-out background-color;\n\n  .toggle-edit-content-container {\n    display: flex;\n    flex-direction: row;\n\n    .toggle-edit-content {\n      flex: 1 1 auto;\n      display: flex;\n      align-items: center;\n    }\n  }\n\n  &:not(.is-disabled) {\n    &:hover,\n    &.toggle-edit-editing {\n      background-color: $light;\n\n      .toggle-edit-edit-btn {\n        opacity: 1;\n        visibility: visible;\n      }\n    }\n  }\n\n  .toggle-edit-edit-btn {\n    opacity: 0;\n    visibility: hidden;\n  }\n\n  .toggle-edit-edit-btn,\n  .toggle-edit-submit-btn,\n  .toggle-edit-cancel-btn {\n    transition: 250ms ease-in-out;\n  }\n\n  .toggle-edit-edit-btn {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n\n  .toggle-edit-submit-btn {\n    border-radius: 0;\n  }\n\n  .toggle-edit-cancel-btn {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n}\n",
                    "styleUrl": "./toggle-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>"
                    },
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer"
                    },
                    {
                        "name": "formFieldComponent",
                        "type": "FormFieldComponent"
                    },
                    {
                        "name": "_kbListener",
                        "type": "ToggleEditKeyboardListenerService"
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay"
                    }
                ],
                "line": 93,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formFieldComponent",
                        "type": "FormFieldComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_kbListener",
                        "type": "ToggleEditKeyboardListenerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit",
                "DoCheck",
                "ICanToggleEdit",
                "IToggleEditRef"
            ],
            "accessors": {
                "editing": {
                    "name": "editing",
                    "setSignature": {
                        "name": "editing",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 74,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "getSignature": {
                        "name": "disabled",
                        "type": "",
                        "returnType": "",
                        "line": 178
                    }
                }
            },
            "templateData": "<div class=\"toggle-edit-not-editing rounded\"\n  [class.w-100]=\"editing\"\n  [class.toggle-edit-editing]=\"editing\"\n  [class.is-disabled]=\"disabled\"\n  (seamElemResized)=\"resized()\">\n  <div class=\"toggle-edit-content-container\">\n    <div class=\"toggle-edit-content\" (click)=\"toggleEditing(true)\">\n      <ng-container *ngIf=\"editing; else notEditingTpl\">\n        <ng-content></ng-content>\n      </ng-container>\n      <ng-template #notEditingTpl>\n        <ng-container *ngIf=\"displayTpl; else noDisplayTpl\">\n          <ng-template [ngTemplateOutlet]=\"displayTpl.template\" [ngTemplateOutletContext]=\"{ $implicit: getValue() || placeholder }\"></ng-template>\n        </ng-container>\n        <ng-template #noDisplayTpl>\n          <div class=\"pl-1 pr-1\">\n            {{ getValue() || placeholder }}\n          </div>\n        </ng-template>\n      </ng-template>\n    </div>\n    <div>\n      <ng-template *ngIf=\"!editing\" [cdkPortalOutlet]=\"templatePortal\"></ng-template>\n      <ng-template #templatePortalContent>\n        <seam-toggle-edit-actions-container\n          [class.bg-light]=\"editing\"\n          tabindex=\"-1\"\n          cdkMonitorSubtreeFocus\n          (cdkFocusChange)=\"actionsFocusChange($event)\">\n          <button *ngIf=\"!editing\"\n            type=\"button\"\n            class=\"toggle-edit-edit-btn btn text-secondary bg-transparent p-1 border-0\"\n            (click)=\"toggleEditing(true)\">\n            <fa-icon [icon]=\"faPen\"></fa-icon>\n          </button>\n          <button *ngIf=\"editing\"\n            type=\"button\"\n            [disabled]=\"!canSubmit()\"\n            class=\"toggle-edit-submit-btn btn text-secondary bg-transparent p-1 border-0\"\n            (click)=\"submitEdit()\">\n            <fa-icon [icon]=\"faCheck\"></fa-icon>\n          </button>\n          <button *ngIf=\"editing\"\n            type=\"button\"\n            class=\"toggle-edit-cancel-btn btn text-secondary bg-transparent p-1 border-0\"\n            (click)=\"cancelEdit()\">\n            <fa-icon [icon]=\"faTimes\"></fa-icon>\n          </button>\n        </seam-toggle-edit-actions-container>\n      </ng-template>\n    </div>\n  </div>\n</div>\n\n<seam-loading *ngIf=\"isSubmitting()\"></seam-loading>\n"
        },
        {
            "name": "TopBarComponent",
            "id": "component-TopBarComponent-e73991d09f6c32957306cb3dcf3a4f02",
            "file": "projects/ui-common/src/lib/framework/top-bar/top-bar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-top-bar",
            "styleUrls": [
                "./top-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./top-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "displayName",
                    "line": 43,
                    "type": "string"
                },
                {
                    "name": "hasTitle",
                    "defaultValue": "false",
                    "line": 39
                },
                {
                    "name": "logo",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "logoSm",
                    "line": 37,
                    "type": "string | null"
                },
                {
                    "name": "organizationName",
                    "line": 44,
                    "type": "string | null"
                },
                {
                    "name": "originalDisplayName",
                    "line": 45,
                    "type": "string | null"
                },
                {
                    "name": "subTitleText",
                    "line": 41,
                    "type": "string | null"
                },
                {
                    "name": "titleText",
                    "line": 40,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_items$",
                    "type": "Observable<TopBarItemDirective[]>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "_topBarItems",
                    "type": "QueryList<TopBarItemDirective>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TopBarItemDirective"
                        }
                    ]
                },
                {
                    "name": "_topBarMenu",
                    "type": "TopBarMenuDirective | null",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TopBarMenuDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "faBars",
                    "defaultValue": "faBars",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isMobile$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Input,\n  OnDestroy,\n  OnInit,\n  QueryList\n} from '@angular/core'\nimport { Observable } from 'rxjs'\n\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamLayoutService } from '../../layout/index'\n\nimport { untilDestroyed } from 'ngx-take-until-destroy'\nimport { map, shareReplay, startWith, tap } from 'rxjs/operators'\nimport { TopBarItemDirective } from './top-bar-item.directive'\nimport { TopBarMenuDirective } from './top-bar-menu.directive'\n\n@Component({\n  selector: 'seam-top-bar',\n  templateUrl: './top-bar.component.html',\n  styleUrls: ['./top-bar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TopBarComponent implements OnInit, OnDestroy, AfterContentInit {\n\n  faBars = faBars\n\n  @ContentChild(TopBarMenuDirective, { static: true }) _topBarMenu?: TopBarMenuDirective | null\n  @ContentChildren(TopBarItemDirective) _topBarItems: QueryList<TopBarItemDirective>\n\n  @Input() logo: string\n  @Input() logoSm?: string | null\n\n  @Input() hasTitle = false\n  @Input() titleText: string\n  @Input() subTitleText?: string | null\n\n  @Input() displayName: string\n  @Input() organizationName?: string | null\n  @Input() originalDisplayName?: string | null\n\n  _items$: Observable<TopBarItemDirective[]>\n\n  public isMobile$: Observable<boolean>\n\n  constructor(\n    private _layout: TheSeamLayoutService\n  ) {\n    this.isMobile$ = this._layout.isMobile$\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { }\n\n  ngAfterContentInit() {\n    this._items$ = this._topBarItems.changes.pipe(\n      startWith(undefined),\n      untilDestroyed(this),\n      map(() => this._topBarItems.toArray()),\n      shareReplay({ bufferSize: 1, refCount: true })\n    )\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  flex: 1 1 100%;\n  display: flex;\n  flex-direction: row;\n\n  padding: 8px;\n}\n\n.top-bar--logo {\n  flex: 0 0 auto;\n  overflow: hidden;\n  cursor: pointer;\n\n  img {\n    max-height: 60px;\n    max-width: 200px;\n  }\n}\n\n.top-bar-icon-container {\n  margin: auto 0;\n}\n",
                    "styleUrl": "./top-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_layout",
                        "type": "TheSeamLayoutService"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "_layout",
                        "type": "TheSeamLayoutService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterContentInit"
            ],
            "templateData": "<!-- Nav Toggle -->\n<div class=\"d-flex flex-column justify-content-center pr-2\" *ngIf=\"isMobile$ | async\">\n  <button seamBaseLayoutNavToggle seamIconBtn [icon]=\"faBars\" iconType=\"borderless-styled-square\"></button>\n</div>\n\n<!-- Logo -->\n<div class=\"top-bar--logo d-flex flex-column justify-content-center pr-2\" routerLink=\"/\">\n  <img [src]=\"logo\" [src.lt-md]=\"hasTitle ? logoSm : logo\" alt=\"Logo\">\n</div>\n\n<!-- Title -->\n<div class=\"d-flex flex-column flex-grow-1\">\n  <seam-top-bar-title *ngIf=\"hasTitle\" [titleText]=\"titleText\" [subTitleText]=\"subTitleText\"></seam-top-bar-title>\n</div>\n\n<!-- Items -->\n<div class=\"top-bar-icon-container mr-2\">\n  <ng-container *ngFor=\"let item of _items$ | async\">\n    <ng-template [ngTemplateOutlet]=\"item.template\"></ng-template>\n  </ng-container>\n</div>\n\n<!-- Menu -->\n<button seamTopBarMenuButton\n  [seamMenuToggle]=\"_topBarMenu?.menu\"\n  [displayName]=\"displayName\"\n  [organizationName]=\"organizationName\"\n  [originalDisplayName]=\"originalDisplayName\">\n</button>\n"
        },
        {
            "name": "TopBarMenuButtonComponent",
            "id": "component-TopBarMenuButtonComponent-685c71bfd41154b89280941e9456338d",
            "file": "projects/ui-common/src/lib/framework/top-bar/top-bar-menu-button/top-bar-menu-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "seamButton",
            "host": {},
            "inputs": [
                "disabled"
            ],
            "outputs": [],
            "providers": [],
            "selector": "button[seamTopBarMenuButton]",
            "styleUrls": [
                "./top-bar-menu-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./top-bar-menu-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "displayName",
                    "line": 33,
                    "type": "string"
                },
                {
                    "name": "organizationName",
                    "line": 34,
                    "type": "string | null"
                },
                {
                    "name": "originalDisplayName",
                    "line": 35,
                    "type": "string | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faAngleDown",
                    "defaultValue": "faAngleDown",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit } from '@angular/core'\n\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons'\n\nimport { CanDisableCtor, mixinDisabled } from '../../../core/common-behaviors/index'\n\nclass TopBarMenuButtonBase {}\n\nconst _TopBarMenuButtonMixinBase: CanDisableCtor & typeof TopBarMenuButtonBase =\n  mixinDisabled(TopBarMenuButtonBase)\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seamTopBarMenuButton]',\n  templateUrl: './top-bar-menu-button.component.html',\n  styleUrls: ['./top-bar-menu-button.component.scss'],\n  exportAs: 'seamButton',\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'disabled' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    'attr.type': 'button',\n    'class': 'btn btn-link border text-decoration-none',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TopBarMenuButtonComponent extends _TopBarMenuButtonMixinBase implements OnInit, OnDestroy {\n\n  faAngleDown = faAngleDown\n\n  @Input() displayName: string\n  @Input() organizationName?: string | null\n  @Input() originalDisplayName?: string | null\n\n  ngOnInit() { }\n\n  ngOnDestroy() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  min-width: 200px;\n\n  border-radius: 0;\n  border-top: 0 !important;\n  border-bottom: 0 !important;\n  border-right: 0 !important;\n}\n",
                    "styleUrl": "./top-bar-menu-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "_TopBarMenuButtonMixinBase",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"d-flex flex-row\">\n  <div class=\"text-left flex-grow-1 text-truncate\">\n    <span *ngIf=\"originalDisplayName\">{{ originalDisplayName }} as </span>\n    <span>{{ displayName }}</span>\n    <br>\n    <span *ngIf=\"organizationName\">{{ organizationName }}</span>\n  </div>\n  <div class=\"pl-2 d-flex flex-column\">\n    <div class=\"flex-grow-1\"></div>\n    <seam-icon class=\"d-block\" [icon]=\"faAngleDown\"></seam-icon>\n    <div class=\"flex-grow-1\"></div>\n  </div>\n</div>\n"
        },
        {
            "name": "TopBarTitleComponent",
            "id": "component-TopBarTitleComponent-a1f728ddc525d2adfe2b77eafade6da3",
            "file": "projects/ui-common/src/lib/framework/top-bar/top-bar-title/top-bar-title.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-top-bar-title",
            "styleUrls": [
                "./top-bar-title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./top-bar-title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "subTitleText",
                    "line": 12,
                    "type": "string | null"
                },
                {
                    "name": "titleText",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-top-bar-title',\n  templateUrl: './top-bar-title.component.html',\n  styleUrls: ['./top-bar-title.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TopBarTitleComponent implements OnInit {\n\n  @Input() titleText: string\n  @Input() subTitleText?: string | null\n\n  constructor() { }\n\n  ngOnInit() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  flex: 1 1 auto;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n",
                    "styleUrl": "./top-bar-title.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 class=\"mb-0\" [ngStyle]=\"{ 'font-size.px': 32 }\" [ngStyle.lt-md]=\"{ 'font-size.px': 26 }\">\n  {{ titleText }}\n  <br fxHide.gt-sm>\n  <small *ngIf=\"subTitleText\" class=\"text-muted\">{{ subTitleText }}</small>\n</h2>\n"
        },
        {
            "name": "UnsavedChangesDialogComponent",
            "id": "component-UnsavedChangesDialogComponent-2007faf7a1b240288cab4ed753d85219",
            "file": "projects/ui-common/src/lib/unsaved-changes-dialog/unsaved-changes-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-unsaved-changes-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  unsaved-changes-dialog works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\n// TODO: Decide if this component should be implemented or just use the native\n//  browser dialog for in-app routing also.\n\n@Component({\n  selector: 'seam-unsaved-changes-dialog',\n  template: `\n    <p>\n      unsaved-changes-dialog works!\n    </p>\n  `,\n  styles: []\n})\nexport class UnsavedChangesDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "UserDetailsExComponent",
            "id": "component-UserDetailsExComponent-b298494ff06005973a966ef61983d5c3",
            "file": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "user-details-ex",
            "styleUrls": [],
            "styles": [],
            "template": "<nav aria-label=\"breadcrumb\">\n  <ol class=\"breadcrumb\">\n    <li class=\"breadcrumb-item\"><a routerLink=\"/\">Dashboard</a></li>\n    <li class=\"breadcrumb-item\"><a routerLink=\"/users\">Users</a></li>\n    <li class=\"breadcrumb-item active\" aria-current=\"page\">Detail</li>\n  </ol>\n</nav>\n\n<div>User Details</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "name$",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 278
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { boolean, select, text, withKnobs } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/angular'\n\nimport { APP_BASE_HREF, CommonModule } from '@angular/common'\nimport { Component, Inject, NgModule } from '@angular/core'\nimport { FormControl, ReactiveFormsModule } from '@angular/forms'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ActivatedRoute, Route, Router, RouterModule } from '@angular/router'\nimport { Observable, of } from 'rxjs'\nimport { delay, map } from 'rxjs/operators'\n\nimport {\n  faBell, faBuilding, faChartLine, faCompass, faFilePdf, faSignature,\n  faUsers, faWrench\n} from '@fortawesome/free-solid-svg-icons'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\n\nimport { TheSeamFormFieldModule } from '../../form-field/index'\nimport { TheSeamIconModule } from '../../icon/index'\nimport { TheSeamWidgetModule } from '../../widget/index'\nimport { TheSeamBaseLayoutModule } from '../base-layout/index'\nimport { TheSeamDashboardModule } from '../dashboard/index'\nimport { DynamicDatatablePageComponent } from '../dynamic-pages/dynamic-datatable-page/dynamic-datatable-page.component'\nimport { DynamicPagesModule } from '../dynamic-pages/dynamic-pages.module'\nimport { TheSeamDynamicRouterModule } from '../dynamic-router/dynamic-router.module'\nimport { HierarchyLevelResolver } from '../dynamic-router/resolvers/hierarchy-level.resolver'\nimport { TheSeamSideNavModule } from '../side-nav/index'\nimport { TheSeamTopBarModule } from '../top-bar/index'\n\nimport { exampleData2 } from '../../datatable-dynamic/_story-data/dynamic-data-2'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-1',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 1\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 1</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget1Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-2',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 2\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 2</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget2Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-3',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 3\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 3</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items.slice(0, 2)\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <a seam-widget-footer-link routerLink=\"/example1\">See All</a>\n</seam-widget>`\n})\nclass StoryExWidget3Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-4',\n  template: `<seam-widget [icon]=\"faWrench\" titleText=\"Example Widget 4\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n  <seam-widget-content-header>Widget example 4</seam-widget-content-header>\n\n  <seam-widget-tile-list>\n    <button *ngFor=\"let item of items\" seam-widget-tile [icon]=\"faBell\">{{ item }}</button>\n  </seam-widget-tile-list>\n\n  <seam-widget-footer-text *ngIf=\"p?.length\">Submitted: {{ Date.now() | date: 'MM-dd-yyyy h:mm aaa' }}</seam-widget-footer-text>\n</seam-widget>`\n})\nclass StoryExWidget4Component {\n  faWrench = faWrench\n  faBell = faBell\n  initialized$ = of(true)\n  items = [ 'one', 'two', 'three', 'four' ]\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-5',\n  template: `<seam-widget [icon]=\"faUsers\" titleText=\"2019 Member Enrollments\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <seam-widget-tile-list>\n    <button seam-widget-tile [icon]=\"tileIcon\">17 members.</button>\n    <button seam-widget-tile [icon]=\"tileIcon\"\n      [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\">13 pending approvals.</button>\n    [notificationIcon]=\"faClock\" notificationIconClass=\"text-danger\"\n  </seam-widget-tile-list>\n</seam-widget>`\n})\nclass StoryExWidget5Component {\n  faUsers = faUsers\n  faClock = faClock\n  tileIcon = 'assets/images/icons8-user-groups-ab17c7.png'\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-6',\n  template: `<seam-widget [icon]=\"faSignature\" titleText=\"Bill of Ladings\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <table class=\"table table-striped mb-0\">\n    <thead>\n      <tr>\n        <th scope=\"col\"></th>\n        <th scope=\"col\">Bill of Lading</th>\n        <th scope=\"col\">Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514071</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513935</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514006</td>\n        <td>Awaiting Signature</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8513991</td>\n        <td>In Transit</td>\n      </tr>\n      <tr>\n        <th scope=\"row\">\n          <seam-icon [icon]=\"faFilePdf\" iconClass=\"text-danger\"></seam-icon>\n        </th>\n        <td>8514077</td>\n        <td>Complete</td>\n      </tr>\n    </tbody>\n  </table>\n\n</seam-widget>`\n})\nclass StoryExWidget6Component {\n  faSignature = faSignature\n  faFilePdf = faFilePdf\n  initialized$ = of(true)\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-7',\n  template: `<seam-widget [icon]=\"faChartLine\" titleText=\"Product Trends By Month\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <img [src]=\"figureImg\" />\n\n</seam-widget>`\n})\nclass StoryExWidget7Component {\n  faChartLine = faChartLine\n  initialized$ = of(true)\n  figureImg = 'assets/images/chart.png'\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'story-ex-widget-8',\n  template: `<seam-widget [icon]=\"faClock\" titleText=\"Example Text\"\n    [hasConfig]=\"true\" [canCollapse]=\"true\" [loading]=\"!(initialized$ | async)\">\n\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n  nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa\n  qui officia deserunt mollit anim id est laborum. <a>More…</a></p>\n\n</seam-widget>`\n})\nclass StoryExWidget8Component {\n  faClock = faClock\n  initialized$ = of(true)\n}\n\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'name-ex',\n  template: `\n    <div>Name: {{ name$ | async }}</div>\n  `\n})\nclass StoryNameExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('name-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    console.log('config', this._router.config)\n    console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'user-details-ex',\n  template: `\n    <nav aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Dashboard</a></li>\n        <li class=\"breadcrumb-item\"><a routerLink=\"/users\">Users</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">Detail</li>\n      </ol>\n    </nav>\n\n    <div>User Details</div>\n  `\n})\nclass UserDetailsExComponent {\n\n  name$: Observable<string | undefined>\n\n  constructor(\n    private _route: ActivatedRoute,\n    private _router: Router\n  ) {\n    console.log('user-details-ex', this)\n    this.name$ = this._route.data.pipe(map(v => v['name'] || undefined))\n\n    // console.log('config', this._router.config)\n    // console.log('config2', this._route.routeConfig)\n    // this._router.config.unshift(this._routes)\n  }\n}\n\n\n\nstoriesOf('Framework/Examples', module)\n  .addDecorator(withKnobs)\n\n  .add('Table With Detail Nav', () => ({\n    moduleMetadata: {\n      declarations: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n\n        StoryNameExComponent,\n        UserDetailsExComponent\n      ],\n      imports: [\n        BrowserAnimationsModule,\n        ReactiveFormsModule,\n        TheSeamFormFieldModule,\n        TheSeamDynamicRouterModule,\n        RouterModule.forRoot([\n          {\n            path: 'users',\n            component: DynamicDatatablePageComponent,\n            data: {\n              name: 'Users',\n              tableDef: exampleData2\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n            children: [\n              {\n                path: 'details',\n                component: UserDetailsExComponent,\n                data: { },\n                resolve: {\n                  hierLevel: HierarchyLevelResolver\n                }\n              },\n            ]\n          },\n          {\n            path: 'documents',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Documents'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'settings',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Settings'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          },\n          {\n            path: 'status',\n            component: StoryNameExComponent,\n            data: {\n              name: 'Status'\n            },\n            resolve: {\n              hierLevel: HierarchyLevelResolver\n            },\n            // loadChildren: () => Promise.resolve(LevelTwoModule)\n            // loadChildren: () => of(LevelTwoModule)\n          }\n        ], { useHash: true }),\n        TheSeamBaseLayoutModule,\n        TheSeamDashboardModule,\n        TheSeamSideNavModule,\n        TheSeamTopBarModule,\n        TheSeamWidgetModule,\n        DynamicPagesModule,\n        TheSeamIconModule\n      ],\n      providers: [\n        { provide: APP_BASE_HREF, useValue: '/' },\n      ],\n      entryComponents: [\n        StoryExWidget1Component,\n        StoryExWidget2Component,\n        StoryExWidget3Component,\n        StoryExWidget4Component,\n        StoryExWidget5Component,\n        StoryExWidget6Component,\n        StoryExWidget7Component,\n        StoryExWidget8Component,\n        UserDetailsExComponent\n      ]\n    },\n    props: {\n      navItems: [\n        {\n          itemType: 'link',\n          label: 'Dashboard',\n          icon: faSignature,\n          link: '/',\n        },\n        {\n          itemType: 'basic',\n          label: 'Tables',\n          icon: faBuilding,\n          children: [\n            {\n              itemType: 'link',\n              label: 'Users',\n              icon: faSignature,\n              link: 'users',\n            },\n            {\n              itemType: 'link',\n              label: 'Documents',\n              icon: faBuilding,\n              link: 'documents'\n            }\n          ]\n        },\n        { itemType: 'divider' },\n        {\n          itemType: 'title',\n          label: 'Admin'\n        },\n        {\n          itemType: 'link',\n          label: 'Settings',\n          icon: faSignature,\n          link: 'settings'\n        },\n        {\n          itemType: 'link',\n          label: 'Status',\n          icon: faBuilding,\n          link: 'status'\n        }\n      ],\n      widgets: [\n        { col: 1, order: 1, type: StoryExWidget1Component },\n        { col: 2, order: 2, type: StoryExWidget2Component },\n        { col: 3, order: 1, type: StoryExWidget3Component },\n        { col: 2, order: 2, type: StoryExWidget4Component },\n        { col: 3, order: 0, type: StoryExWidget5Component },\n        { col: 1, order: 0, type: StoryExWidget6Component },\n        { col: 2, order: 0, type: StoryExWidget7Component },\n        { col: 2, order: 1, type: StoryExWidget8Component }\n      ],\n      logo: text('logo', 'assets/images/theseam_logo.svg'),\n      logoSm: text('logoSm', 'assets/images/theseam_logo_notext.svg'),\n      titleText: text('titleText', 'Dashboard'),\n      subTitleText: text('subTitleText', 'Example'),\n      displayName: text('displayName', 'Mark Berry'),\n      organizationName: text('organizationName', 'The Seam'),\n\n      dashboardBreadcrubs: boolean('Breadcrumbs on Dashboard', true),\n    },\n    template: `\n      <div style=\"height: 100vh; width: 100vw;\">\n        <seam-base-layout>\n          <seam-side-nav\n            *seamBaseLayoutSideBar\n            [items]=\"navItems\">\n          </seam-side-nav>\n          <seam-top-bar\n            *seamBaseLayoutTopBar\n            [logo]=\"logo\"\n            [logoSm]=\"logoSm\"\n            [titleText]=\"titleText\"\n            [subTitleText]=\"subTitleText\"\n            [displayName]=\"displayName\"\n            [organizationName]=\"organizationName\">\n          </seam-top-bar>\n\n          <seam-hierarchy-router-outlet *seamBaseLayoutContent>\n            <nav aria-label=\"breadcrumb\" *ngIf=\"dashboardBreadcrubs\">\n              <ol class=\"breadcrumb\">\n                <li class=\"breadcrumb-item active\" aria-current=\"page\">Dashboard</li>\n              </ol>\n            </nav>\n            <seam-dashboard [widgets]=\"widgets\"></seam-dashboard>\n          </seam-hierarchy-router-outlet>\n        </seam-base-layout>\n      </div>\n    `\n  }))\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 278,
                "jsdoctags": [
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "WidgetButtonGroupComponent",
            "id": "component-WidgetButtonGroupComponent-d9002beb54ef79a06d7388832dd9f820",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-button-group/widget-button-group.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-widget-button-group",
            "styleUrls": [
                "./widget-button-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-button-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-widget-button-group',\n  templateUrl: './widget-button-group.component.html',\n  styleUrls: ['./widget-button-group.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetButtonGroupComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n",
                    "styleUrl": "./widget-button-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content select=\"[seamButton]\"></ng-content>\n"
        },
        {
            "name": "WidgetComponent",
            "id": "component-WidgetComponent-b6e5e21b95bfd2090d1873293eaeca52",
            "file": "projects/ui-common/src/lib/widget/widget/widget.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-widget",
            "styleUrls": [
                "./widget.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "canCollapse",
                    "defaultValue": "false",
                    "line": 58
                },
                {
                    "name": "hasConfig",
                    "defaultValue": "false",
                    "line": 57
                },
                {
                    "name": "icon",
                    "line": 39,
                    "type": "SeamIcon | undefined"
                },
                {
                    "name": "iconClass",
                    "line": 53,
                    "type": "string"
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "line": 55
                },
                {
                    "name": "titleText",
                    "line": 36,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_iconObj",
                    "type": "IconProp | undefined",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_iconUrl",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "collapsed",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "collapseIcon",
                    "defaultValue": "faAngleDown",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "configIcon",
                    "defaultValue": "faCog",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "iconTpl",
                    "type": "WidgetIconTplDirective",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "WidgetIconTplDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "titleTpl",
                    "type": "WidgetTitleTplDirective",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "WidgetTitleTplDirective, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "collapse",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { animate, query, style, transition, trigger } from '@angular/animations'\nimport { Component, ContentChild, Input, OnInit } from '@angular/core'\n\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\nimport { faAngleDown, faCog } from '@fortawesome/free-solid-svg-icons'\n\nimport { SeamIcon } from '../../icon/icon'\n\nimport { WidgetIconTplDirective } from '../directives/widget-icon-tpl.directive'\nimport { WidgetTitleTplDirective } from '../directives/widget-title-tpl.directive'\n\n@Component({\n  selector: 'seam-widget',\n  templateUrl: './widget.component.html',\n  styleUrls: ['./widget.component.scss'],\n  animations: [\n    trigger('loadingAnim', [\n      transition(':enter', [\n        style({ opacity: 0 }),\n        animate('250ms ease-in-out', style({ opacity: 1 }))\n      ]),\n      transition(':leave', [\n        style({ opacity: 1 }),\n        animate('250ms ease-in-out', style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class WidgetComponent implements OnInit {\n\n  configIcon = faCog\n  collapseIcon = faAngleDown\n\n  collapsed = false\n\n  @Input() titleText: string\n\n  @Input()\n  get icon(): SeamIcon | undefined { return this._iconUrl || this._iconObj }\n  set icon(value: SeamIcon | undefined) {\n    if (typeof value === 'string') {\n      this._iconUrl = value\n      this._iconObj = undefined\n    } else {\n      this._iconUrl = undefined\n      this._iconObj = value\n    }\n  }\n\n  public _iconUrl: string | undefined\n  public _iconObj: IconProp | undefined\n\n  @Input() iconClass: string\n\n  @Input() loading = false\n\n  @Input() hasConfig = false\n  @Input() canCollapse = false\n\n  @ContentChild(WidgetIconTplDirective, { static: true }) iconTpl: WidgetIconTplDirective\n  @ContentChild(WidgetTitleTplDirective, { static: true }) titleTpl: WidgetTitleTplDirective\n\n  constructor() { }\n\n  ngOnInit() { }\n\n  collapse() {\n    this.collapsed = !this.collapsed\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles/utilities';\n\n:host {\n  display: block;\n  font-size: $seam-widget-body-font-size;\n}\n\n.widget-header {\n  background-color: #F4F4F4;\n  border-bottom: 1px solid $border-color;\n  font-size: $seam-widget-header-title-font-size;\n  display: flex;\n  flex-direction: row;\n\n  .widget-header-content {\n    flex: 1 1 100%;\n  }\n\n  .widget-header-btns-container {\n    display: flex;\n    flex-direction: row;\n\n    > div {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      padding: 4px;\n    }\n\n    ::ng-deep {\n      .widget-header-btn-config {\n\n        .seam-icon--fa {\n          display: flex;\n          flex-direction: row;\n          justify-content: center;\n          text-align: center;\n          height: 25px;\n          width: 30px;\n\n          ::ng-deep .svg-inline--fa {\n            max-width: 100%;\n            height: 100%;\n            width: 100%;\n          }\n        }\n      }\n\n      .widget-header-btn-collapse {\n\n        .seam-icon--fa {\n          display: flex;\n          flex-direction: row;\n          justify-content: center;\n          text-align: center;\n          height: 15px;\n          width: 30px;\n\n          ::ng-deep .svg-inline--fa {\n            max-width: 100%;\n            height: 100%;\n            width: 100%;\n          }\n        }\n      }\n    }\n  }\n\n  .widget-header-title {\n    font-size: $seam-widget-header-title-font-size;\n  }\n}\n\n.widget-header-icon {\n  max-height: $seam-widget-header-icon-height;\n  max-width: $seam-widget-header-icon-width;\n  height: $seam-widget-header-icon-height;\n  width: $seam-widget-header-icon-width;\n  display: inline-block;\n  vertical-align: top;\n\n  .widget-header-icon--fa {\n    max-height: $seam-widget-header-icon-height;\n    max-width: $seam-widget-header-icon-width;\n    height: $seam-widget-header-icon-height;\n    width: $seam-widget-header-icon-width;\n\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    text-align: center;\n\n    ::ng-deep .svg-inline--fa {\n      max-width: 100%;\n      height: 100%;\n      width: 100%;\n    }\n  }\n\n  .widget-header-icon--img {\n    height: 100%;\n    max-height: $seam-widget-header-icon-height;\n    max-width: $seam-widget-header-icon-width;\n  }\n}\n",
                    "styleUrl": "./widget.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 61
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "icon": {
                    "name": "icon",
                    "setSignature": {
                        "name": "icon",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"border rounded overflow-hidden\">\n  <div class=\"widget-header\" seamWidgetDragHandle>\n    <div class=\"widget-header-content p-2 text-nowrap\">\n      <span class=\"mr-1 widget-header-icon\">\n        <ng-container *ngIf=\"iconTpl; else noIconTpl\">\n          <ng-template\n            [ngTemplateOutlet]=\"iconTpl.template\"\n            [ngTemplateOutletContext]=\"{ $implicit: icon, icon: icon, title: titleText }\">\n          </ng-template>\n        </ng-container>\n        <ng-template #noIconTpl>\n          <fa-icon *ngIf=\"_iconObj\"\n            class=\"widget-header-icon--fa {{ iconClass }}\"\n            [icon]=\"_iconObj\"></fa-icon>\n          <img *ngIf=\"_iconUrl\"\n            class=\"widget-header-icon--img {{ iconClass }}\"\n            [src]=\"_iconUrl\" [alt]=\"titleText\">\n        </ng-template>\n      </span>\n      <span class=\"widget-header-title text-truncate\">\n        <ng-container *ngIf=\"titleTpl; else noTitleTpl\">\n          <ng-template\n            [ngTemplateOutlet]=\"titleTpl.template\"\n            [ngTemplateOutletContext]=\"{ $implicit: titleText, icon: icon, title: titleText }\">\n          </ng-template>\n        </ng-container>\n        <ng-template #noTitleTpl>{{ titleText }}</ng-template>\n      </span>\n    </div>\n    <div class=\"widget-header-btns-container\" *ngIf=\"hasConfig || canCollapse\">\n      <div *ngIf=\"hasConfig\">\n        <!-- <button seamIconBtn [icon]=\"configIcon\"\n          class=\"widget-header-btn-config\"\n          iconType=\"\">\n          <span class=\"sr-only\">Widget configuration menu</span>\n        </button> -->\n        <button seamButton class=\"widget-header-btn-config p-0\">\n          <seam-icon class=\"d-block\" [icon]=\"configIcon\" iconClass=\"text-secondary\"></seam-icon>\n          <span class=\"sr-only\">Widget configuration menu</span>\n        </button>\n      </div>\n\n      <div *ngIf=\"canCollapse\" class=\"px-0\">\n        <button seamButton class=\"widget-header-btn-collapse p-0\" (click)=\"collapse()\">\n          <seam-icon class=\"d-block\" [icon]=\"collapseIcon\" iconClass=\"text-secondary\" style=\"margin-left: -10px; margin-right: -5px;\"></seam-icon>\n          <span class=\"sr-only\">Widget collapse</span>\n        </button>\n      </div>\n    </div>\n  </div>\n  <div class=\"position-relative bg-white\" [style.height.px]=\"loading ? 150 : undefined\">\n    <ng-container *ngIf=\"!collapsed\">\n      <div class=\"p-2\" *ngIf=\"!loading else loadingTpl\">\n        <ng-content></ng-content>\n      </div>\n      <ng-content select=\"seam-widget-footer\"></ng-content>\n      <ng-template #loadingTpl>\n        <div class=\"position-absolute\" @loadingAnim style=\"top:0;right:0;bottom:0;left:0\">\n          <seam-loading [theme]=\"'primary'\"></seam-loading>\n        </div>\n      </ng-template>\n    </ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "WidgetContentHeaderComponent",
            "id": "component-WidgetContentHeaderComponent-a2129bb811f21e00a2f2b5c880b16ef0",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-content-header/widget-content-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-widget-content-header",
            "styleUrls": [
                "./widget-content-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-content-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-widget-content-header',\n  templateUrl: './widget-content-header.component.html',\n  styleUrls: ['./widget-content-header.component.scss']\n})\nexport class WidgetContentHeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/utilities';\n\n:host {\n  display: block;\n  padding: $seam-widget-content-header-padding;\n}\n",
                    "styleUrl": "./widget-content-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "WidgetDescriptionComponent",
            "id": "component-WidgetDescriptionComponent-f636327878b599d40f6ba7c5103d85e4",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-description/widget-description.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-widget-description",
            "styleUrls": [
                "./widget-description.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-description.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core'\n\n@Component({\n  selector: 'seam-widget-description',\n  templateUrl: './widget-description.component.html',\n  styleUrls: ['./widget-description.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetDescriptionComponent { }\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-description.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p><ng-content></ng-content></p>\n"
        },
        {
            "name": "WidgetEmptyLabelComponent",
            "id": "component-WidgetEmptyLabelComponent-61decef222405ba25612c9d8f9550169",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-empty-label/widget-empty-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-widget-empty-label,a[seam-widget-empty-label],button[seam-widget-empty-label]",
            "styleUrls": [
                "./widget-empty-label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-empty-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "line": 24,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef<HTMLElement | HTMLAnchorElement | HTMLButtonElement>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_isAnchor",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "description": "<p>Determines if the component host is an anchor. </p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_isButton",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 33,
                    "description": "<p>Determines if the component host is a button. </p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.type",
                    "line": 19
                },
                {
                    "name": "class.btn",
                    "line": 13
                },
                {
                    "name": "class.btn-link",
                    "line": 16
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, HostBinding, Input, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-widget-empty-label,a[seam-widget-empty-label],button[seam-widget-empty-label]',\n  templateUrl: './widget-empty-label.component.html',\n  styleUrls: ['./widget-empty-label.component.scss']\n})\nexport class WidgetEmptyLabelComponent implements OnInit {\n\n  private _type: string\n\n  @HostBinding('class.btn')\n  get _btnCss() { return this._isButton() ? true : false }\n\n  @HostBinding('class.btn-link')\n  get _btnLinkCss() { return this._isButton() ? true : false }\n\n  @HostBinding('attr.type')\n  get _attrType() {\n    return this._type || this._isButton() ? 'button' : undefined\n  }\n\n  @Input()\n  get type(): string { return this._type }\n\n  constructor(\n    public _elementRef: ElementRef<HTMLElement | HTMLAnchorElement | HTMLButtonElement>\n  ) { }\n\n  ngOnInit() { }\n\n  /** Determines if the component host is a button. */\n  private _isButton(): boolean {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'button'\n  }\n\n  /** Determines if the component host is an anchor. */\n  private _isAnchor(): boolean {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'a'\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/utilities';\n\n:host {\n  display: block;\n  font-size: $seam-widget-body-font-size;\n  padding: $seam-widget-empty-label-padding;\n  width: 100%;\n  text-align: left;\n}\n",
                    "styleUrl": "./widget-empty-label.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement | HTMLAnchorElement | HTMLButtonElement>"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement | HTMLAnchorElement | HTMLButtonElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "WidgetFooterComponent",
            "id": "component-WidgetFooterComponent-7305844d7bccd0d4a53ce29eb8d5cd65",
            "file": "projects/ui-common/src/lib/widget/widget-footer/widget-footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-widget-footer",
            "styleUrls": [
                "./widget-footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-widget-footer',\n  templateUrl: './widget-footer.component.html',\n  styleUrls: ['./widget-footer.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetFooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: row;\n  margin: 0.25rem;\n}\n\n.widget-footer--left {\n  flex: 1 1 100%;\n}\n\n.widget-footer--right {\n  flex: 0 0 auto;\n}\n",
                    "styleUrl": "./widget-footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"widget-footer--left\">\n  <ng-content select=\"seam-widget-footer-text\"></ng-content>\n</div>\n<div class=\"widget-footer--right\">\n  <ng-content select=\"seam-widget-button-group\"></ng-content>\n</div>\n"
        },
        {
            "name": "WidgetFooterLinkComponent",
            "id": "component-WidgetFooterLinkComponent-5a045b096d5bd073c52178e3af0c811e",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-footer-link/widget-footer-link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "a[seam-widget-footer-link]",
            "styleUrls": [
                "./widget-footer-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-footer-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'a[seam-widget-footer-link]',\n  templateUrl: './widget-footer-link.component.html',\n  styleUrls: ['./widget-footer-link.component.scss']\n})\nexport class WidgetFooterLinkComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/utilities';\n\n:host {\n  display: block;\n  text-align: center;\n\n  margin-top: $seam-widget-footer-link-margin-top;\n}\n",
                    "styleUrl": "./widget-footer-link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "WidgetFooterTextComponent",
            "id": "component-WidgetFooterTextComponent-1ec4f51bf6b0b0ef1dc4fe2f917176ee",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-footer-text/widget-footer-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-widget-footer-text",
            "styleUrls": [
                "./widget-footer-text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-footer-text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-widget-footer-text',\n  templateUrl: './widget-footer-text.component.html',\n  styleUrls: ['./widget-footer-text.component.scss']\n})\nexport class WidgetFooterTextComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/utilities';\n\n:host {\n  display: block;\n  font-size: $seam-widget-footer-font-size;\n  margin-top: $seam-widget-footer-text-margin-top;\n}\n",
                    "styleUrl": "./widget-footer-text.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<em>\n  <ng-content></ng-content>\n</em>\n"
        },
        {
            "name": "WidgetHeaderBadgeComponent",
            "id": "component-WidgetHeaderBadgeComponent-a1b3557e40f4e81965cc04064ab16333",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-header-badge/widget-header-badge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [
                "theme"
            ],
            "outputs": [],
            "providers": [],
            "selector": "seam-widget-header-badge",
            "styleUrls": [
                "./widget-header-badge.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-header-badge.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, Input, OnInit, Renderer2 } from '@angular/core'\n\nimport {\n  CanThemeCtor,\n  mixinTheme\n} from '../../../core/common-behaviors'\n\nclass WidgetHeaderBadgeBase {\n\n  constructor(\n    public _elementRef: ElementRef\n  ) { }\n\n}\n\nconst _WidgetHeaderBadgeMixinBase:  CanThemeCtor &\n    typeof WidgetHeaderBadgeBase = mixinTheme(WidgetHeaderBadgeBase, 'badge')\n\n@Component({\n  selector: 'seam-widget-header-badge',\n  templateUrl: './widget-header-badge.component.html',\n  styleUrls: ['./widget-header-badge.component.scss'],\n  // tslint:disable-next-line:use-input-property-decorator\n  inputs: [ 'theme' ],\n  // tslint:disable-next-line:use-host-property-decorator\n  host: {\n    'class': 'badge float-right'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetHeaderBadgeComponent extends _WidgetHeaderBadgeMixinBase implements OnInit {\n\n  constructor(\n    _elementRef: ElementRef\n  ) { super(_elementRef) }\n\n  ngOnInit() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/utilities';\n\n:host {\n  font-size: $seam-widget-header-title-font-size;\n}\n",
                    "styleUrl": "./widget-header-badge.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "_WidgetHeaderBadgeMixinBase",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "WidgetListGroupComponent",
            "id": "component-WidgetListGroupComponent-f09d1cf48cf49a2e28a8c0d6963c4c03",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-widget-list-group",
            "styleUrls": [
                "./widget-list-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-list-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ContentChild, HostBinding, Input, OnInit } from '@angular/core'\n\n// TODO: Make `ListGroup` a root component and wrap it with `WidgetListGroup`.\n\n@Component({\n  selector: 'seam-widget-list-group',\n  templateUrl: './widget-list-group.component.html',\n  styleUrls: ['./widget-list-group.component.scss'],\n  host: {\n    'class': 'list-group'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-list-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content select=\"seam-widget-list-group-item,\n  a[seam-widget-list-group-item],\n  a[seamWidgetListGroupItem],\n  button[seam-widget-list-group-item],\n  button[seamWidgetListGroupItem]\">\n</ng-content>\n"
        },
        {
            "name": "WidgetListGroupItemAnchorComponent",
            "id": "component-WidgetListGroupItemAnchorComponent-a0140dd57b70a68e1f1d5e7cdc18dfa4",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "seamWidgetListGroupItem",
            "host": {},
            "inputs": [
                "WIDGET_LIST_GROUP_ITEM_INPUTS"
            ],
            "outputs": [],
            "providers": [],
            "selector": "a[seam-widget-list-group-item],a[seamWidgetListGroupItem]",
            "styleUrls": [
                "./widget-list-group-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-list-group-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tabIndex",
                    "description": "<p>Tabindex of the button. </p>\n",
                    "line": 153,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>",
                    "optional": false,
                    "description": "",
                    "line": 156,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_focusMonitor",
                    "type": "FocusMonitor",
                    "optional": false,
                    "description": "",
                    "line": 157,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_renderer",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 158,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_haltDisabledEvents",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y'\nimport { ChangeDetectionStrategy, Component, ContentChild, ElementRef, Input, OnDestroy, OnInit, Renderer2 } from '@angular/core'\n\nimport {\n  CanBeActive,\n  CanBeActiveCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanTheme,\n  CanThemeCtor,\n  HasElementRef,\n  mixinActive,\n  mixinDisabled,\n  mixinTheme\n} from '../../../../core/common-behaviors/index'\nimport { SeamIcon } from '../../../../icon/index'\n\nimport { WidgetListGroupItemIconTplDirective } from './widget-list-group-item-icon-tpl.directive'\n\nconst WIDGET_LIST_GROUP_ITEM_INPUTS = [ 'disabled', 'theme', 'active', 'icon', 'iconClass', 'label' ]\n\nclass WidgetListGroupItemBase {\n\n  @ContentChild(WidgetListGroupItemIconTplDirective, { static: true }) iconTpl?: WidgetListGroupItemIconTplDirective\n\n  icon?: SeamIcon\n  iconClass?: string\n\n  label?: string\n\n  constructor(\n    public _elementRef: ElementRef,\n    public _renderer: Renderer2\n  ) { }\n\n  /** Focuses the element. */\n  focus(): void {\n    this._getHostElement().focus()\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement\n  }\n}\n\nclass WidgetListGroupItemActionableBase extends WidgetListGroupItemBase implements OnDestroy {\n  constructor(\n    public _elementRef: ElementRef,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _renderer)\n    this._focusMonitor.monitor(this._elementRef, true)\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef)\n  }\n}\n\n\nconst _WidgetListGroupItemBase: CanDisableCtor & CanThemeCtor & CanBeActiveCtor &\n  typeof WidgetListGroupItemBase = mixinActive(mixinTheme(mixinDisabled(WidgetListGroupItemBase), 'list-group-item'))\n\nconst _WidgetListGroupItemActionableBase: CanDisableCtor & CanThemeCtor & CanBeActiveCtor &\n  typeof WidgetListGroupItemActionableBase = mixinActive(mixinTheme(mixinDisabled(WidgetListGroupItemActionableBase), 'list-group-item'))\n\n@Component({\n  selector: 'seam-widget-list-group-item',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    'class': 'list-group-item',\n    '[class.active]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemComponent extends _WidgetListGroupItemBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive {\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _renderer)\n  }\n\n  ngOnInit() { }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seam-widget-list-group-item],button[seamWidgetListGroupItem]',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    '[attr.type]': 'type',\n    'class': 'list-group-item list-group-item-action',\n    '[class.active]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemButtonComponent extends _WidgetListGroupItemActionableBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive, OnDestroy {\n\n  /** ARIA type for the button. */\n  @Input() type: 'button' | 'submit' | 'reset' = 'button'\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _focusMonitor, _renderer)\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'a[seam-widget-list-group-item],a[seamWidgetListGroupItem]',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    'class': 'list-group-item list-group-item-action',\n    '[class.active]': 'active',\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemAnchorComponent extends _WidgetListGroupItemActionableBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive, OnDestroy {\n\n  /** Tabindex of the button. */\n  @Input() tabIndex: number\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _focusMonitor, _renderer)\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault()\n      event.stopImmediatePropagation()\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-list-group-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>"
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 153,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "_WidgetListGroupItemActionableBase",
            "implements": [
                "OnInit",
                "HasElementRef",
                "CanTheme",
                "CanDisable",
                "CanBeActive",
                "OnDestroy"
            ],
            "templateData": "<div class=\"d-flex flex-row\">\n  <ng-container *ngIf=\"iconTpl; else noIconTpl\">\n    <span class=\"pr-2\">\n      <ng-container *ngTemplateOutlet=\"iconTpl\"></ng-container>\n    </span>\n  </ng-container>\n  <ng-template #noIconTpl>\n    <span class=\"pr-2\">\n      <seam-icon *ngIf=\"icon\"\n        [icon]=\"icon\"\n        [iconClass]=\"iconClass\"\n        iconType=\"borderless-styled-square\">\n      </seam-icon>\n    </span>\n  </ng-template>\n\n  <div class=\"d-flex flex-column justify-content-center\">\n    {{ label }}\n  </div>\n</div>\n"
        },
        {
            "name": "WidgetListGroupItemButtonComponent",
            "id": "component-WidgetListGroupItemButtonComponent-a0140dd57b70a68e1f1d5e7cdc18dfa4",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "seamWidgetListGroupItem",
            "host": {},
            "inputs": [
                "WIDGET_LIST_GROUP_ITEM_INPUTS"
            ],
            "outputs": [],
            "providers": [],
            "selector": "button[seam-widget-list-group-item],button[seamWidgetListGroupItem]",
            "styleUrls": [
                "./widget-list-group-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-list-group-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "description": "<p>ARIA type for the button. </p>\n",
                    "line": 116,
                    "type": "\"button\" | \"submit\" | \"reset\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_focusMonitor",
                    "type": "FocusMonitor",
                    "optional": false,
                    "description": "",
                    "line": 120,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_renderer",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y'\nimport { ChangeDetectionStrategy, Component, ContentChild, ElementRef, Input, OnDestroy, OnInit, Renderer2 } from '@angular/core'\n\nimport {\n  CanBeActive,\n  CanBeActiveCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanTheme,\n  CanThemeCtor,\n  HasElementRef,\n  mixinActive,\n  mixinDisabled,\n  mixinTheme\n} from '../../../../core/common-behaviors/index'\nimport { SeamIcon } from '../../../../icon/index'\n\nimport { WidgetListGroupItemIconTplDirective } from './widget-list-group-item-icon-tpl.directive'\n\nconst WIDGET_LIST_GROUP_ITEM_INPUTS = [ 'disabled', 'theme', 'active', 'icon', 'iconClass', 'label' ]\n\nclass WidgetListGroupItemBase {\n\n  @ContentChild(WidgetListGroupItemIconTplDirective, { static: true }) iconTpl?: WidgetListGroupItemIconTplDirective\n\n  icon?: SeamIcon\n  iconClass?: string\n\n  label?: string\n\n  constructor(\n    public _elementRef: ElementRef,\n    public _renderer: Renderer2\n  ) { }\n\n  /** Focuses the element. */\n  focus(): void {\n    this._getHostElement().focus()\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement\n  }\n}\n\nclass WidgetListGroupItemActionableBase extends WidgetListGroupItemBase implements OnDestroy {\n  constructor(\n    public _elementRef: ElementRef,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _renderer)\n    this._focusMonitor.monitor(this._elementRef, true)\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef)\n  }\n}\n\n\nconst _WidgetListGroupItemBase: CanDisableCtor & CanThemeCtor & CanBeActiveCtor &\n  typeof WidgetListGroupItemBase = mixinActive(mixinTheme(mixinDisabled(WidgetListGroupItemBase), 'list-group-item'))\n\nconst _WidgetListGroupItemActionableBase: CanDisableCtor & CanThemeCtor & CanBeActiveCtor &\n  typeof WidgetListGroupItemActionableBase = mixinActive(mixinTheme(mixinDisabled(WidgetListGroupItemActionableBase), 'list-group-item'))\n\n@Component({\n  selector: 'seam-widget-list-group-item',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    'class': 'list-group-item',\n    '[class.active]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemComponent extends _WidgetListGroupItemBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive {\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _renderer)\n  }\n\n  ngOnInit() { }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seam-widget-list-group-item],button[seamWidgetListGroupItem]',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    '[attr.type]': 'type',\n    'class': 'list-group-item list-group-item-action',\n    '[class.active]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemButtonComponent extends _WidgetListGroupItemActionableBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive, OnDestroy {\n\n  /** ARIA type for the button. */\n  @Input() type: 'button' | 'submit' | 'reset' = 'button'\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _focusMonitor, _renderer)\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'a[seam-widget-list-group-item],a[seamWidgetListGroupItem]',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    'class': 'list-group-item list-group-item-action',\n    '[class.active]': 'active',\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemAnchorComponent extends _WidgetListGroupItemActionableBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive, OnDestroy {\n\n  /** Tabindex of the button. */\n  @Input() tabIndex: number\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _focusMonitor, _renderer)\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault()\n      event.stopImmediatePropagation()\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-list-group-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>"
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 116,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_focusMonitor",
                        "type": "FocusMonitor",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "_WidgetListGroupItemActionableBase",
            "implements": [
                "OnInit",
                "HasElementRef",
                "CanTheme",
                "CanDisable",
                "CanBeActive",
                "OnDestroy"
            ],
            "templateData": "<div class=\"d-flex flex-row\">\n  <ng-container *ngIf=\"iconTpl; else noIconTpl\">\n    <span class=\"pr-2\">\n      <ng-container *ngTemplateOutlet=\"iconTpl\"></ng-container>\n    </span>\n  </ng-container>\n  <ng-template #noIconTpl>\n    <span class=\"pr-2\">\n      <seam-icon *ngIf=\"icon\"\n        [icon]=\"icon\"\n        [iconClass]=\"iconClass\"\n        iconType=\"borderless-styled-square\">\n      </seam-icon>\n    </span>\n  </ng-template>\n\n  <div class=\"d-flex flex-column justify-content-center\">\n    {{ label }}\n  </div>\n</div>\n"
        },
        {
            "name": "WidgetListGroupItemComponent",
            "id": "component-WidgetListGroupItemComponent-a0140dd57b70a68e1f1d5e7cdc18dfa4",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "seamWidgetListGroupItem",
            "host": {},
            "inputs": [
                "WIDGET_LIST_GROUP_ITEM_INPUTS"
            ],
            "outputs": [],
            "providers": [],
            "selector": "seam-widget-list-group-item",
            "styleUrls": [
                "./widget-list-group-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-list-group-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_renderer",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y'\nimport { ChangeDetectionStrategy, Component, ContentChild, ElementRef, Input, OnDestroy, OnInit, Renderer2 } from '@angular/core'\n\nimport {\n  CanBeActive,\n  CanBeActiveCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanTheme,\n  CanThemeCtor,\n  HasElementRef,\n  mixinActive,\n  mixinDisabled,\n  mixinTheme\n} from '../../../../core/common-behaviors/index'\nimport { SeamIcon } from '../../../../icon/index'\n\nimport { WidgetListGroupItemIconTplDirective } from './widget-list-group-item-icon-tpl.directive'\n\nconst WIDGET_LIST_GROUP_ITEM_INPUTS = [ 'disabled', 'theme', 'active', 'icon', 'iconClass', 'label' ]\n\nclass WidgetListGroupItemBase {\n\n  @ContentChild(WidgetListGroupItemIconTplDirective, { static: true }) iconTpl?: WidgetListGroupItemIconTplDirective\n\n  icon?: SeamIcon\n  iconClass?: string\n\n  label?: string\n\n  constructor(\n    public _elementRef: ElementRef,\n    public _renderer: Renderer2\n  ) { }\n\n  /** Focuses the element. */\n  focus(): void {\n    this._getHostElement().focus()\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement\n  }\n}\n\nclass WidgetListGroupItemActionableBase extends WidgetListGroupItemBase implements OnDestroy {\n  constructor(\n    public _elementRef: ElementRef,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _renderer)\n    this._focusMonitor.monitor(this._elementRef, true)\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef)\n  }\n}\n\n\nconst _WidgetListGroupItemBase: CanDisableCtor & CanThemeCtor & CanBeActiveCtor &\n  typeof WidgetListGroupItemBase = mixinActive(mixinTheme(mixinDisabled(WidgetListGroupItemBase), 'list-group-item'))\n\nconst _WidgetListGroupItemActionableBase: CanDisableCtor & CanThemeCtor & CanBeActiveCtor &\n  typeof WidgetListGroupItemActionableBase = mixinActive(mixinTheme(mixinDisabled(WidgetListGroupItemActionableBase), 'list-group-item'))\n\n@Component({\n  selector: 'seam-widget-list-group-item',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    'class': 'list-group-item',\n    '[class.active]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemComponent extends _WidgetListGroupItemBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive {\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _renderer)\n  }\n\n  ngOnInit() { }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'button[seam-widget-list-group-item],button[seamWidgetListGroupItem]',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    '[attr.type]': 'type',\n    'class': 'list-group-item list-group-item-action',\n    '[class.active]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemButtonComponent extends _WidgetListGroupItemActionableBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive, OnDestroy {\n\n  /** ARIA type for the button. */\n  @Input() type: 'button' | 'submit' | 'reset' = 'button'\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _focusMonitor, _renderer)\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'a[seam-widget-list-group-item],a[seamWidgetListGroupItem]',\n  templateUrl: './widget-list-group-item.component.html',\n  styleUrls: ['./widget-list-group-item.component.scss'],\n  exportAs: 'seamWidgetListGroupItem',\n  inputs: WIDGET_LIST_GROUP_ITEM_INPUTS,\n  host: {\n    'class': 'list-group-item list-group-item-action',\n    '[class.active]': 'active',\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetListGroupItemAnchorComponent extends _WidgetListGroupItemActionableBase\n  implements OnInit, HasElementRef, CanTheme, CanDisable, CanBeActive, OnDestroy {\n\n  /** Tabindex of the button. */\n  @Input() tabIndex: number\n\n  constructor(\n    public _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    public _focusMonitor: FocusMonitor,\n    public _renderer: Renderer2\n  ) {\n    super(_elementRef, _focusMonitor, _renderer)\n  }\n\n  ngOnInit() { }\n\n  ngOnDestroy() { super.ngOnDestroy() }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault()\n      event.stopImmediatePropagation()\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-list-group-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>"
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 83,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "_WidgetListGroupItemBase",
            "implements": [
                "OnInit",
                "HasElementRef",
                "CanTheme",
                "CanDisable",
                "CanBeActive"
            ],
            "templateData": "<div class=\"d-flex flex-row\">\n  <ng-container *ngIf=\"iconTpl; else noIconTpl\">\n    <span class=\"pr-2\">\n      <ng-container *ngTemplateOutlet=\"iconTpl\"></ng-container>\n    </span>\n  </ng-container>\n  <ng-template #noIconTpl>\n    <span class=\"pr-2\">\n      <seam-icon *ngIf=\"icon\"\n        [icon]=\"icon\"\n        [iconClass]=\"iconClass\"\n        iconType=\"borderless-styled-square\">\n      </seam-icon>\n    </span>\n  </ng-template>\n\n  <div class=\"d-flex flex-column justify-content-center\">\n    {{ label }}\n  </div>\n</div>\n"
        },
        {
            "name": "WidgetsGridComponent",
            "id": "component-WidgetsGridComponent-93fbc22706f5cf4fb16a4668e5389cce",
            "file": "projects/ui-common/src/lib/widgets-grid/widgets-grid.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-widgets-grid",
            "styleUrls": [
                "./widgets-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widgets-grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "widgets",
                    "line": 26,
                    "type": "IWidgetsGridItemDef[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_widgets",
                    "defaultValue": "new BehaviorSubject<IWidgetsGridItemDef[]>([])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "dashboard",
                    "type": "Array<GridsterItem>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "options",
                    "type": "GridsterConfig",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "resizeEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "widgetItems$",
                    "type": "Observable<IWidgetsGridItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_createWidgetGridItem",
                    "args": [
                        {
                            "name": "def",
                            "type": "IWidgetsGridItemDef"
                        }
                    ],
                    "optional": false,
                    "returnType": "IWidgetsGridItem",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "def",
                            "type": "IWidgetsGridItemDef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ComponentPortal } from '@angular/cdk/portal'\nimport { ChangeDetectionStrategy, Component, EventEmitter, Injector, Input, OnDestroy, OnInit } from '@angular/core'\nimport { BehaviorSubject, Observable } from 'rxjs'\nimport { map, tap } from 'rxjs/operators'\n\nimport {CompactType, DisplayGrid, GridsterConfig, GridsterItem, GridType} from 'angular-gridster2'\nimport { untilDestroyed } from 'ngx-take-until-destroy'\n\nimport { notNullOrUndefined } from '../utils/index'\n\nimport { IWidgetsGridItem, IWidgetsGridItemDef } from './widgets-grid-item'\n\n@Component({\n  selector: 'seam-widgets-grid',\n  templateUrl: './widgets-grid.component.html',\n  styleUrls: ['./widgets-grid.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetsGridComponent implements OnInit, OnDestroy {\n\n  options: GridsterConfig\n  dashboard: Array<GridsterItem>\n  resizeEvent: EventEmitter<any> = new EventEmitter<any>()\n\n  @Input()\n  get widgets(): IWidgetsGridItemDef[] { return this._widgets.value }\n  set widgets(value: IWidgetsGridItemDef[]) { this._widgets.next(value) }\n  private _widgets = new BehaviorSubject<IWidgetsGridItemDef[]>([])\n\n  public widgetItems$: Observable<IWidgetsGridItem[]>\n\n  constructor(\n    private injector: Injector\n  ) { }\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.VerticalFixed,\n      displayGrid: DisplayGrid.OnDragAndResize,\n      compactType: CompactType.None,\n      margin: 60,\n      mobileBreakpoint: 640,\n      disableWindowResize: false,\n      scrollToNewItems: false,\n      disableWarnings: false,\n      ignoreMarginInRow: false,\n      itemResizeCallback: (item) => {\n        // update DB with new size\n        // send the update to widgets\n        this.resizeEvent.emit(item)\n      },\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      }\n    }\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0, type: 'widgetA'},\n      {cols: 2, rows: 2, y: 0, x: 2, type: 'widgetB'},\n      {cols: 2, rows: 1, y: 1, x: 0, type: 'widgetC'},\n    ]\n\n    this.widgetItems$ = this._widgets\n      .pipe(\n        untilDestroyed(this),\n        map(defs => defs.map(d => this._createWidgetGridItem(d)).filter(notNullOrUndefined)),\n        // tap(items => console.log('items', items))\n      )\n\n    this.widgetItems$.subscribe()\n  }\n\n  ngOnDestroy() { }\n\n  private _createWidgetGridItem(def: IWidgetsGridItemDef): IWidgetsGridItem {\n    let portal: ComponentPortal<any>\n    if (def.componentFactoryResolver) {\n      portal = new ComponentPortal(def.type, undefined, undefined, def.componentFactoryResolver)\n    } else {\n      portal = new ComponentPortal(def.type)\n    }\n\n    const item: IWidgetsGridItem = {\n      ...def,\n      portal: portal\n    }\n\n    return item\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  height: 100%;\n}\n",
                    "styleUrl": "./widgets-grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "widgets": {
                    "name": "widgets",
                    "setSignature": {
                        "name": "widgets",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "[]"
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "[]",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<gridster [options]=\"options\">\n  <!-- <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    {{ item.type }}\n  </gridster-item> -->\n  <gridster-item [item]=\"item\" *ngFor=\"let item of widgetItems$ | async\">\n    <ng-template [cdkPortalOutlet]=\"item.portal\"></ng-template>\n  </gridster-item>\n</gridster>\n"
        },
        {
            "name": "WidgetTableComponent",
            "id": "component-WidgetTableComponent-2626faaff9340a40b10b05638e7e6c0b",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-table/widget-table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-widget-table",
            "styleUrls": [
                "./widget-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "line": 13,
                    "type": "(string | ITableColumn)[]"
                },
                {
                    "name": "hasHeader",
                    "defaultValue": "true",
                    "line": 17
                },
                {
                    "name": "rows",
                    "defaultValue": "[]",
                    "line": 14,
                    "type": "T[]"
                },
                {
                    "name": "size",
                    "defaultValue": "'sm'",
                    "line": 16,
                    "type": "\"sm\" | \"md\" | undefined | null"
                },
                {
                    "name": "trackBy",
                    "line": 15,
                    "type": "TrackByFunction<T>"
                }
            ],
            "outputsClass": [
                {
                    "name": "actionRefreshRequest",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "_actionRefreshRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core'\n\nimport { ITableColumn, TrackByFunction } from '../../../table/index'\n\n@Component({\n  selector: 'seam-widget-table',\n  templateUrl: './widget-table.component.html',\n  styleUrls: ['./widget-table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class WidgetTableComponent<T> implements OnInit {\n\n  @Input() columns: (string | ITableColumn)[]\n  @Input() rows: T[] = []\n  @Input() trackBy: TrackByFunction<T>\n  @Input() size: 'sm' | 'md' | undefined | null = 'sm'\n  @Input() hasHeader = true\n\n  @Output() readonly actionRefreshRequest = new EventEmitter<any>()\n\n  constructor() { }\n\n  ngOnInit() { }\n\n  _actionRefreshRequest() {\n    this.actionRefreshRequest.emit()\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./widget-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<seam-table\n  [columns]=\"columns\"\n  [rows]=\"rows\"\n  [trackBy]=\"trackBy\"\n  [size]=\"size\"\n  [hasHeader]=\"hasHeader\"\n  (actionRefreshRequest)=\"_actionRefreshRequest()\">\n</seam-table>\n"
        },
        {
            "name": "WidgetTileComponent",
            "id": "component-WidgetTileComponent-438fb3f7d819aeaeb69b5034485a7b52",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-tile/widget-tile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-widget-tile, a[seam-widget-tile], button[seam-widget-tile]",
            "styleUrls": [
                "./widget-tile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-tile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 31
                },
                {
                    "name": "grayscaleOnDisable",
                    "defaultValue": "true",
                    "line": 33
                },
                {
                    "name": "icon",
                    "line": 30,
                    "type": "string | IconProp"
                },
                {
                    "name": "iconClass",
                    "line": 35,
                    "type": "string"
                },
                {
                    "name": "notificationIcon",
                    "line": 37,
                    "type": "string | IconProp"
                },
                {
                    "name": "notificationIconClass",
                    "line": 38,
                    "type": "string"
                },
                {
                    "name": "type",
                    "line": 28,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_elementRef",
                    "type": "ElementRef<HTMLElement | HTMLAnchorElement | HTMLButtonElement>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "secondaryIcon",
                    "type": "WidgetTileSecondaryIconDirective",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "WidgetTileSecondaryIconDirective, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_isButton",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 49,
                    "description": "<p>Determines if the component host is a button. </p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.type",
                    "line": 17
                },
                {
                    "name": "class.btn",
                    "line": 22
                },
                {
                    "name": "class.disabled",
                    "line": 25
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, ElementRef, HostBinding, Input, OnInit } from '@angular/core'\n\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\n\nimport { WidgetTileSecondaryIconDirective } from './widget-tile-secondary-icon.directive'\n\n@Component({\n  selector: 'seam-widget-tile, a[seam-widget-tile], button[seam-widget-tile]',\n  templateUrl: './widget-tile.component.html',\n  styleUrls: ['./widget-tile.component.scss']\n})\nexport class WidgetTileComponent implements OnInit {\n\n  private _type: string\n\n  @HostBinding('attr.type')\n  get _attrType() {\n    return this._type || this._isButton() ? 'button' : undefined\n  }\n\n  @HostBinding('class.btn')\n  get _btnCss() { return this._isButton() ? true : false }\n\n  @HostBinding('class.disabled')\n  get _DisabledCss() { return this.disabled }\n\n  @Input()\n  get type(): string { return this._type }\n\n  @Input() icon: string | IconProp\n  @Input() disabled = false\n\n  @Input() grayscaleOnDisable = true\n\n  @Input() iconClass: string\n\n  @Input() notificationIcon: string | IconProp\n  @Input() notificationIconClass: string\n\n  @ContentChild(WidgetTileSecondaryIconDirective, { static: true }) secondaryIcon: WidgetTileSecondaryIconDirective\n\n  constructor(\n    public _elementRef: ElementRef<HTMLElement | HTMLAnchorElement | HTMLButtonElement>\n  ) { }\n\n  ngOnInit() { }\n\n  /** Determines if the component host is a button. */\n  private _isButton(): boolean {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'button'\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/utilities';\n\n:host {\n  display: block;\n  color: $body-color;\n  font-size: $seam-widget-tile-font-size;\n  font-weight: $font-weight-normal;\n  line-height: $seam-widget-tile-line-height;\n  border: 1px solid $seam-widget-tile-border-color;\n  width: 100%;\n  border-radius: $seam-widget-tile-border-radius;\n  padding: 4px 4px 4px 4px;\n  margin-bottom: $seam-widget-tile-margin-bottom;\n\n  &a {\n    text-decoration: none;\n  }\n\n  &.disabled {\n    pointer-events: none;\n    cursor: default;\n  }\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n}\n\n.widget-tile--notification-icon {\n  position: absolute;\n  bottom: -3px;\n  right: -3px;\n  width: 15px !important;\n  height: 15px !important;\n}\n",
                    "styleUrl": "./widget-tile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement | HTMLAnchorElement | HTMLButtonElement>"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef<HTMLElement | HTMLAnchorElement | HTMLButtonElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"d-flex flex-row\">\n  <div style=\"position: relative\">\n    <seam-icon [icon]=\"icon\" iconType=\"styled-square\" [iconClass]=\"iconClass\"></seam-icon>\n\n    <seam-icon *ngIf=\"notificationIcon\"\n      class=\"widget-tile--notification-icon\"\n      [icon]=\"notificationIcon\"\n      iconType=\"image-fill\"\n      [iconClass]=\"notificationIconClass\"></seam-icon>\n  </div>\n  <div class=\"flex-grow-1 text-left pl-2\" style=\"margin: auto 0;\">\n    <ng-content></ng-content>\n  </div>\n  <div *ngIf=\"secondaryIcon\">\n    <ng-template [ngTemplateOutlet]=\"secondaryIcon.template\"></ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "WidgetTileListComponent",
            "id": "component-WidgetTileListComponent-90c1afa26e9b1998caada4e2080e0313",
            "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-tile-list/widget-tile-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "seam-widget-tile-list",
            "styleUrls": [
                "./widget-tile-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./widget-tile-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'seam-widget-tile-list',\n  templateUrl: './widget-tile-list.component.html',\n  styleUrls: ['./widget-tile-list.component.scss']\n})\nexport class WidgetTileListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/utilities';\n\n:host {\n  display: flex;\n  flex-direction: column;\n}\n",
                    "styleUrl": "./widget-tile-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content select=\"[seam-widget-tile],seam-widget-tile\"></ng-content>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ExampleLazyLoadedWidgetsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DynamicPagesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DynamicDatatablePageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamDatatableDynamicModule"
                        },
                        {
                            "name": "TheSeamDynamicRouterModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DynamicDatatablePageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExampleLazyLoadedWidgetsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExampleLazyLoadedWidgetsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamWidgetsGridModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ExampleLazyLoadedWidgetsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FooterBarModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FooterBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FooterBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LazyWidgetOneModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LazyWidgetOneComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamWidgetModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LevelTwoModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StorySubNameExComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecursiveIdModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RecursiveIdOneComponent"
                        },
                        {
                            "name": "RecursiveIdThreeComponent"
                        },
                        {
                            "name": "RecursiveIdTwoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamDynamicRouterModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoryExModalLazyModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StoryExModalLazyComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamModalModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoryHelperComponentsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StoryEmptyComponent"
                        },
                        {
                            "name": "StoryEmptyWithRouteComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StoryEmptyComponent"
                        },
                        {
                            "name": "StoryEmptyWithRouteComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StoryInitialRouteModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamBaseLayoutModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BaseLayoutContentDirective"
                        },
                        {
                            "name": "BaseLayoutContentFooterDirective"
                        },
                        {
                            "name": "BaseLayoutContentHeaderDirective"
                        },
                        {
                            "name": "BaseLayoutNavToggleDirective"
                        },
                        {
                            "name": "BaseLayoutSideBarDirective"
                        },
                        {
                            "name": "BaseLayoutTopBarDirective"
                        },
                        {
                            "name": "TheSeamBaseLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamButtonsModule"
                        },
                        {
                            "name": "TheSeamIconModule"
                        },
                        {
                            "name": "TheSeamScrollbarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BaseLayoutContentDirective"
                        },
                        {
                            "name": "BaseLayoutContentFooterDirective"
                        },
                        {
                            "name": "BaseLayoutContentHeaderDirective"
                        },
                        {
                            "name": "BaseLayoutNavToggleDirective"
                        },
                        {
                            "name": "BaseLayoutSideBarDirective"
                        },
                        {
                            "name": "BaseLayoutTopBarDirective"
                        },
                        {
                            "name": "TheSeamBaseLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamBreadcrumbsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BreadcrumbsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BreadcrumbsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamButtonsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AnchorBadgeButtonComponent"
                        },
                        {
                            "name": "AnchorButtonComponent"
                        },
                        {
                            "name": "BadgeButtonComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "ProgressCircleButtonComponent"
                        },
                        {
                            "name": "ToggleButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamProgressModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AnchorBadgeButtonComponent"
                        },
                        {
                            "name": "AnchorButtonComponent"
                        },
                        {
                            "name": "BadgeButtonComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "ProgressCircleButtonComponent"
                        },
                        {
                            "name": "ToggleButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamCardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CardActionComponent"
                        },
                        {
                            "name": "CardBodyComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CardFooterComponent"
                        },
                        {
                            "name": "CardHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamSharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CardActionComponent"
                        },
                        {
                            "name": "CardBodyComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CardFooterComponent"
                        },
                        {
                            "name": "CardHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamCheckboxModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TheSeamCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TheSeamCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamConfirmDialogModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "SeamConfirmDialogService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmClickDirective"
                        },
                        {
                            "name": "ConfirmDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamIconModule"
                        },
                        {
                            "name": "TheSeamModalModule"
                        },
                        {
                            "name": "TheSeamSharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ConfirmClickDirective"
                        },
                        {
                            "name": "ConfirmDialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamDashboardModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "DashboardWidgetsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "DashboardWidgetsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamDataExporterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamDataFiltersModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DataFilterSearchComponent"
                        },
                        {
                            "name": "DataFilterTextComponent"
                        },
                        {
                            "name": "DataFilterToggleButtonsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamFormFieldModule"
                        },
                        {
                            "name": "TheSeamIconModule"
                        },
                        {
                            "name": "TheSeamToggleGroupModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DataFilterSearchComponent"
                        },
                        {
                            "name": "DataFilterTextComponent"
                        },
                        {
                            "name": "DataFilterToggleButtonsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamDatatableDynamicModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DatatableDynamicComponent"
                        },
                        {
                            "name": "DatatableDynamicFilterContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamDataExporterModule"
                        },
                        {
                            "name": "TheSeamDataFiltersModule"
                        },
                        {
                            "name": "TheSeamDatatableModule"
                        },
                        {
                            "name": "TheSeamIconModule"
                        },
                        {
                            "name": "TheSeamSharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DatatableDynamicComponent"
                        },
                        {
                            "name": "TheSeamDatatableModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamDatatableModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DatatableActionMenuComponent"
                        },
                        {
                            "name": "DatatableActionMenuItemComponent"
                        },
                        {
                            "name": "DatatableActionMenuToggleDirective"
                        },
                        {
                            "name": "DatatableCellTplDirective"
                        },
                        {
                            "name": "DatatableColumnComponent"
                        },
                        {
                            "name": "DatatableComponent"
                        },
                        {
                            "name": "DatatableExportButtonComponent"
                        },
                        {
                            "name": "DatatableFilterDirective"
                        },
                        {
                            "name": "DatatableMenuBarComponent"
                        },
                        {
                            "name": "DatatableRowActionItemDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamButtonsModule"
                        },
                        {
                            "name": "TheSeamConfirmDialogModule"
                        },
                        {
                            "name": "TheSeamIconModule"
                        },
                        {
                            "name": "TheSeamLoadingModule"
                        },
                        {
                            "name": "TheSeamMenuModule"
                        },
                        {
                            "name": "TheSeamSharedModule"
                        },
                        {
                            "name": "TheSeamTableCellTypesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DatatableActionMenuComponent"
                        },
                        {
                            "name": "DatatableActionMenuItemComponent"
                        },
                        {
                            "name": "DatatableCellTplDirective"
                        },
                        {
                            "name": "DatatableColumnComponent"
                        },
                        {
                            "name": "DatatableComponent"
                        },
                        {
                            "name": "DatatableExportButtonComponent"
                        },
                        {
                            "name": "DatatableFilterDirective"
                        },
                        {
                            "name": "DatatableMenuBarComponent"
                        },
                        {
                            "name": "DatatableRowActionItemDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamDynamicComponentLoaderModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamDynamicRouterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HierarchyRouterOutletComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HierarchyRouterOutletComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamFormFieldErrorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormFieldErrorComponent"
                        },
                        {
                            "name": "FormFieldErrorListComponent"
                        },
                        {
                            "name": "FormFieldErrorListItemDirective"
                        },
                        {
                            "name": "FormFieldErrorListItemTplDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormFieldErrorComponent"
                        },
                        {
                            "name": "FormFieldErrorListComponent"
                        },
                        {
                            "name": "FormFieldErrorListItemDirective"
                        },
                        {
                            "name": "FormFieldErrorListItemTplDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamFormFieldModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormFieldComponent"
                        },
                        {
                            "name": "FormFieldErrorDirective"
                        },
                        {
                            "name": "FormFieldLabelTplDirective"
                        },
                        {
                            "name": "InputDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamFormFieldErrorModule"
                        },
                        {
                            "name": "TheSeamSharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FormFieldComponent"
                        },
                        {
                            "name": "FormFieldErrorDirective"
                        },
                        {
                            "name": "FormFieldLabelTplDirective"
                        },
                        {
                            "name": "InputDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamIconModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconBtnComponent"
                        },
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "IconNotificationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconBtnComponent"
                        },
                        {
                            "name": "IconComponent"
                        },
                        {
                            "name": "IconNotificationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamLayoutModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamLoadingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "TheSeamLoadingOverlayService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoadingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoadingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamMenuModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "MenuDividerComponent"
                        },
                        {
                            "name": "MenuFooterActionComponent"
                        },
                        {
                            "name": "MenuFooterComponent"
                        },
                        {
                            "name": "MenuItemComponent"
                        },
                        {
                            "name": "MenuToggleDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamIconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "MenuDividerComponent"
                        },
                        {
                            "name": "MenuFooterActionComponent"
                        },
                        {
                            "name": "MenuFooterComponent"
                        },
                        {
                            "name": "MenuItemComponent"
                        },
                        {
                            "name": "MenuToggleDirective"
                        },
                        {
                            "name": "TheSeamIconModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamModalModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "Modal"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ModalBodyComponent"
                        },
                        {
                            "name": "ModalCloseDirective"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "ModalContainerComponent"
                        },
                        {
                            "name": "ModalDirective"
                        },
                        {
                            "name": "ModalFooterComponent"
                        },
                        {
                            "name": "ModalFooterTplDirective"
                        },
                        {
                            "name": "ModalHeaderComponent"
                        },
                        {
                            "name": "ModalHeaderIconTplDirective"
                        },
                        {
                            "name": "ModalHeaderTitleTplDirective"
                        },
                        {
                            "name": "ModalTitleDirective"
                        },
                        {
                            "name": "RouteModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ModalBodyComponent"
                        },
                        {
                            "name": "ModalCloseDirective"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "ModalDirective"
                        },
                        {
                            "name": "ModalFooterComponent"
                        },
                        {
                            "name": "ModalFooterTplDirective"
                        },
                        {
                            "name": "ModalHeaderComponent"
                        },
                        {
                            "name": "ModalHeaderIconTplDirective"
                        },
                        {
                            "name": "ModalHeaderTitleTplDirective"
                        },
                        {
                            "name": "ModalTitleDirective"
                        },
                        {
                            "name": "RouteModalComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamPdfViewerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PdfPageComponent"
                        },
                        {
                            "name": "PdfViewerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamSharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PdfPageComponent"
                        },
                        {
                            "name": "PdfViewerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamProgressModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProgressCircleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProgressCircleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamScrollbarModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "OverlayScrollbarDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "OverlayScrollbarDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamSharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AutoFocusDirective"
                        },
                        {
                            "name": "ClickOutsideDirective"
                        },
                        {
                            "name": "DisableControlDirective"
                        },
                        {
                            "name": "ElemResizedDirective"
                        },
                        {
                            "name": "EncryptedAssetLinkDirective"
                        },
                        {
                            "name": "HoverClassDirective"
                        },
                        {
                            "name": "HoverClassToggleDirective"
                        },
                        {
                            "name": "MaskCharsPipe"
                        },
                        {
                            "name": "NgSelectExtraDirective"
                        },
                        {
                            "name": "PasswordInputRevealComponent"
                        },
                        {
                            "name": "TruncatePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamLoadingModule"
                        },
                        {
                            "name": "TheSeamModalModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AutoFocusDirective"
                        },
                        {
                            "name": "ClickOutsideDirective"
                        },
                        {
                            "name": "DisableControlDirective"
                        },
                        {
                            "name": "ElemResizedDirective"
                        },
                        {
                            "name": "EncryptedAssetLinkDirective"
                        },
                        {
                            "name": "HoverClassDirective"
                        },
                        {
                            "name": "HoverClassToggleDirective"
                        },
                        {
                            "name": "MaskCharsPipe"
                        },
                        {
                            "name": "NgSelectExtraDirective"
                        },
                        {
                            "name": "PasswordInputRevealComponent"
                        },
                        {
                            "name": "TheSeamScrollbarModule"
                        },
                        {
                            "name": "TruncatePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamSideNavModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SideNavComponent"
                        },
                        {
                            "name": "SideNavItemComponent"
                        },
                        {
                            "name": "SideNavToggleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamIconModule"
                        },
                        {
                            "name": "TheSeamLayoutModule"
                        },
                        {
                            "name": "TheSeamScrollbarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SideNavComponent"
                        },
                        {
                            "name": "SideNavItemComponent"
                        },
                        {
                            "name": "SideNavToggleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamTabbedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabbedComponent"
                        },
                        {
                            "name": "TabbedContentComponent"
                        },
                        {
                            "name": "TabbedContentComponent"
                        },
                        {
                            "name": "TabbedItemComponent"
                        },
                        {
                            "name": "TabbedTabContentDirective"
                        },
                        {
                            "name": "TabbedTabDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TabbedComponent"
                        },
                        {
                            "name": "TabbedContentComponent"
                        },
                        {
                            "name": "TabbedItemComponent"
                        },
                        {
                            "name": "TabbedTabContentDirective"
                        },
                        {
                            "name": "TabbedTabDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamTableCellTypesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TableCellTypeDateComponent"
                        },
                        {
                            "name": "TableCellTypeIconComponent"
                        },
                        {
                            "name": "TableCellTypeSelectorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamIconModule"
                        },
                        {
                            "name": "TheSeamSharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TableCellTypeDateComponent"
                        },
                        {
                            "name": "TableCellTypeIconComponent"
                        },
                        {
                            "name": "TableCellTypeSelectorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamTableModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamTableCellTypesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TheSeamTableCellTypesModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamTiledSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TiledSelectComponent"
                        },
                        {
                            "name": "TiledSelectTileComponent"
                        },
                        {
                            "name": "TiledSelectTileIconComponent"
                        },
                        {
                            "name": "TiledSelectTileIconTplDirective"
                        },
                        {
                            "name": "TiledSelectTileLabelTplDirective"
                        },
                        {
                            "name": "TiledSelectTileOverlayDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TiledSelectComponent"
                        },
                        {
                            "name": "TiledSelectTileComponent"
                        },
                        {
                            "name": "TiledSelectTileIconTplDirective"
                        },
                        {
                            "name": "TiledSelectTileLabelTplDirective"
                        },
                        {
                            "name": "TiledSelectTileOverlayDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamToggleEditModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ToggleEditActionsContainerComponent"
                        },
                        {
                            "name": "ToggleEditComponent"
                        },
                        {
                            "name": "ToggleEditDisplayTplDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamFormFieldModule"
                        },
                        {
                            "name": "TheSeamLoadingModule"
                        },
                        {
                            "name": "TheSeamSharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ToggleEditComponent"
                        },
                        {
                            "name": "ToggleEditDisplayTplDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamToggleGroupModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ToggleGroupDirective"
                        },
                        {
                            "name": "ToggleGroupOptionDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ToggleGroupDirective"
                        },
                        {
                            "name": "ToggleGroupOptionDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamTopBarModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TopBarComponent"
                        },
                        {
                            "name": "TopBarItemDirective"
                        },
                        {
                            "name": "TopBarMenuButtonComponent"
                        },
                        {
                            "name": "TopBarMenuDirective"
                        },
                        {
                            "name": "TopBarTitleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamBaseLayoutModule"
                        },
                        {
                            "name": "TheSeamButtonsModule"
                        },
                        {
                            "name": "TheSeamIconModule"
                        },
                        {
                            "name": "TheSeamLayoutModule"
                        },
                        {
                            "name": "TheSeamMenuModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TheSeamMenuModule"
                        },
                        {
                            "name": "TopBarComponent"
                        },
                        {
                            "name": "TopBarItemDirective"
                        },
                        {
                            "name": "TopBarMenuButtonComponent"
                        },
                        {
                            "name": "TopBarMenuDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamUnsavedChangesDialogModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UnsavedChangesDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UnsavedChangesDialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamWidgetButtonGroupModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WidgetButtonGroupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamButtonsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TheSeamButtonsModule"
                        },
                        {
                            "name": "WidgetButtonGroupComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamWidgetContentHeaderModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WidgetContentHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WidgetContentHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamWidgetDescriptionModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WidgetDescriptionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WidgetDescriptionComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamWidgetEmptyLabelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WidgetEmptyLabelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WidgetEmptyLabelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamWidgetFooterLinkModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WidgetFooterLinkComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WidgetFooterLinkComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamWidgetFooterTextModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WidgetFooterTextComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WidgetFooterTextComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamWidgetHeaderBadgeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WidgetHeaderBadgeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WidgetHeaderBadgeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamWidgetListGroupModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WidgetListGroupComponent"
                        },
                        {
                            "name": "WidgetListGroupItemAnchorComponent"
                        },
                        {
                            "name": "WidgetListGroupItemButtonComponent"
                        },
                        {
                            "name": "WidgetListGroupItemComponent"
                        },
                        {
                            "name": "WidgetListGroupItemIconTplDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamIconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WidgetListGroupComponent"
                        },
                        {
                            "name": "WidgetListGroupItemAnchorComponent"
                        },
                        {
                            "name": "WidgetListGroupItemButtonComponent"
                        },
                        {
                            "name": "WidgetListGroupItemComponent"
                        },
                        {
                            "name": "WidgetListGroupItemIconTplDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamWidgetModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WidgetComponent"
                        },
                        {
                            "name": "WidgetDragHandleDirective"
                        },
                        {
                            "name": "WidgetFooterComponent"
                        },
                        {
                            "name": "WidgetIconTplDirective"
                        },
                        {
                            "name": "WidgetTitleTplDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamButtonsModule"
                        },
                        {
                            "name": "TheSeamIconModule"
                        },
                        {
                            "name": "TheSeamLoadingModule"
                        },
                        {
                            "name": "TheSeamWidgetButtonGroupModule"
                        },
                        {
                            "name": "TheSeamWidgetContentHeaderModule"
                        },
                        {
                            "name": "TheSeamWidgetDescriptionModule"
                        },
                        {
                            "name": "TheSeamWidgetEmptyLabelModule"
                        },
                        {
                            "name": "TheSeamWidgetFooterLinkModule"
                        },
                        {
                            "name": "TheSeamWidgetFooterTextModule"
                        },
                        {
                            "name": "TheSeamWidgetHeaderBadgeModule"
                        },
                        {
                            "name": "TheSeamWidgetListGroupModule"
                        },
                        {
                            "name": "TheSeamWidgetTableModule"
                        },
                        {
                            "name": "TheSeamWidgetTileListModule"
                        },
                        {
                            "name": "TheSeamWidgetTileModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TheSeamWidgetButtonGroupModule"
                        },
                        {
                            "name": "TheSeamWidgetContentHeaderModule"
                        },
                        {
                            "name": "TheSeamWidgetDescriptionModule"
                        },
                        {
                            "name": "TheSeamWidgetEmptyLabelModule"
                        },
                        {
                            "name": "TheSeamWidgetFooterLinkModule"
                        },
                        {
                            "name": "TheSeamWidgetFooterTextModule"
                        },
                        {
                            "name": "TheSeamWidgetHeaderBadgeModule"
                        },
                        {
                            "name": "TheSeamWidgetListGroupModule"
                        },
                        {
                            "name": "TheSeamWidgetTableModule"
                        },
                        {
                            "name": "TheSeamWidgetTileListModule"
                        },
                        {
                            "name": "TheSeamWidgetTileModule"
                        },
                        {
                            "name": "WidgetComponent"
                        },
                        {
                            "name": "WidgetFooterComponent"
                        },
                        {
                            "name": "WidgetIconTplDirective"
                        },
                        {
                            "name": "WidgetTitleTplDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamWidgetsGridModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WidgetsGridComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WidgetsGridComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamWidgetTableModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WidgetTableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamTableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WidgetTableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamWidgetTileListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WidgetTileListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WidgetTileListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TheSeamWidgetTileModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WidgetTileComponent"
                        },
                        {
                            "name": "WidgetTileSecondaryIconDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TheSeamIconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WidgetTileComponent"
                        },
                        {
                            "name": "WidgetTileSecondaryIconDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "_MatCheckboxMixinBase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
                "type": "",
                "defaultValue": "mixinTabIndex(mixinDisabled(TheSeamCheckboxComponentBase))"
            },
            {
                "name": "_OverlayScrollbarDefaults",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/scrollbar/overlay-scrollbars-config.ts",
                "type": "IOverlayScrollbarsConfig",
                "defaultValue": "{\n  className: 'os-theme-dark os-theme-no-hover',\n  sizeAutoCapable: false,\n  paddingAbsolute: true,\n  autoUpdate: true\n}"
            },
            {
                "name": "_seamMenuItemMixinBase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/menu/menu-item.component.ts",
                "type": "",
                "defaultValue": "mixinDisabled(TheSeamMenuItemBase)"
            },
            {
                "name": "_THESEAM_DATATABLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/datatable/datatable/datatable.component.ts",
                "type": "any",
                "defaultValue": "{\n  provide: THESEAM_DATATABLE,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DatatableComponent)\n}"
            },
            {
                "name": "_TheSeamButtonMixinBase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/buttons/button/button.component.ts",
                "type": "",
                "defaultValue": "mixinSize(mixinTheme(mixinDisabled(TheSeamButtonBase), 'btn'), 'btn')"
            },
            {
                "name": "_TopBarMenuButtonMixinBase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/top-bar/top-bar-menu-button/top-bar-menu-button.component.ts",
                "type": "",
                "defaultValue": "mixinDisabled(TopBarMenuButtonBase)"
            },
            {
                "name": "_uid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "_uid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "_uid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "_uid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "_uid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-router-outlet.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "_WidgetHeaderBadgeMixinBase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-header-badge/widget-header-badge.component.ts",
                "type": "",
                "defaultValue": "mixinTheme(WidgetHeaderBadgeBase, 'badge')"
            },
            {
                "name": "_WidgetListGroupItemActionableBase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
                "type": "",
                "defaultValue": "mixinActive(mixinTheme(mixinDisabled(WidgetListGroupItemActionableBase), 'list-group-item'))"
            },
            {
                "name": "_WidgetListGroupItemBase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
                "type": "",
                "defaultValue": "mixinActive(mixinTheme(mixinDisabled(WidgetListGroupItemBase), 'list-group-item'))"
            },
            {
                "name": "Buffer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/utils/file-utils.ts",
                "type": "",
                "defaultValue": "require('buffer/').Buffer"
            },
            {
                "name": "cellTypeComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/table-cell-types/table-cell-types.module.ts",
                "type": "[]",
                "defaultValue": "[\n  TableCellTypeDateComponent,\n  TableCellTypeIconComponent\n]"
            },
            {
                "name": "cellTypeProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/table-cell-types/table-cell-types.module.ts",
                "type": "[]",
                "defaultValue": "[\n  TABLE_CELL_TYPE_MANIFEST_DATE,\n  TABLE_CELL_TYPE_MANIFEST_ICON,\n  TABLE_CELL_TYPE_MANIFEST_IMAGE\n]"
            },
            {
                "name": "Checkbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `<seam-checkbox>Checkbox</seam-checkbox>`\n})"
            },
            {
                "name": "COLLAPSED_OVERLAY_STATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "string",
                "defaultValue": "'collapsed-overlay'"
            },
            {
                "name": "COLLAPSED_STATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts",
                "type": "string",
                "defaultValue": "'collapsed'"
            },
            {
                "name": "COLLAPSED_STATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "string",
                "defaultValue": "'collapsed'"
            },
            {
                "name": "COLLAPSED_STATES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "[]",
                "defaultValue": "[ COLLAPSED_STATE, COLLAPSED_OVERLAY_STATE ]"
            },
            {
                "name": "COMPACT_STATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts",
                "type": "string",
                "defaultValue": "'compact'"
            },
            {
                "name": "contentModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/widget/widget.module.ts",
                "type": "[]",
                "defaultValue": "[\n  TheSeamWidgetButtonGroupModule,\n  TheSeamWidgetContentHeaderModule,\n  TheSeamWidgetDescriptionModule,\n  TheSeamWidgetEmptyLabelModule,\n  TheSeamWidgetFooterLinkModule,\n  TheSeamWidgetFooterTextModule,\n  TheSeamWidgetHeaderBadgeModule,\n  TheSeamWidgetListGroupModule,\n  TheSeamWidgetTableModule,\n  TheSeamWidgetTileListModule,\n  TheSeamWidgetTileModule\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DATA_FILTER_SEARCH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts",
                "type": "any",
                "defaultValue": "{\n  provide: THESEAM_DATA_FILTER,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DataFilterSearchComponent),\n  multi: true,\n}"
            },
            {
                "name": "DATA_FILTER_TEXT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts",
                "type": "any",
                "defaultValue": "{\n  provide: THESEAM_DATA_FILTER,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DataFilterTextComponent),\n  multi: true,\n}"
            },
            {
                "name": "DATA_FILTER_TOGGLE_BUTTON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                "type": "any",
                "defaultValue": "{\n  provide: THESEAM_DATA_FILTER,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DataFilterToggleButtonsComponent),\n  multi: true,\n}"
            },
            {
                "name": "DEFAULT_FILE_EXTENSION_ICON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/icon/utils/file-extension-icon.ts",
                "type": "",
                "defaultValue": "faFile"
            },
            {
                "name": "DefaultSearchFilterOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts",
                "type": "ISearchFilterOptions",
                "defaultValue": "{\n  properties: undefined,\n  omitProperties: undefined,\n  exact: false,\n  caseSensitive: false\n}"
            },
            {
                "name": "DefaultTextFilterOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts",
                "type": "ITextFilterOptions",
                "defaultValue": "{\n  properties: undefined,\n  omitProperties: undefined,\n  exact: false,\n  caseSensitive: false,\n}"
            },
            {
                "name": "defaultThemeConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/loading/loading-themes.ts",
                "type": "NgxLoadingConfig",
                "defaultValue": "{\n  animationType: ngxLoadingAnimationTypes.threeBounce,\n  backdropBackgroundColour: 'rgba(0,0,0,0.3)',\n  backdropBorderRadius: '0px',\n  primaryColour: '#ffffff',\n  secondaryColour: '#ffffff',\n  tertiaryColour: '#ffffff'\n}"
            },
            {
                "name": "DefaultToggleButtonsFilterOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                "type": "IToggleButtonsFilterOptions",
                "defaultValue": "{\n  properties: undefined,\n  omitProperties: undefined,\n  multiple: false,\n  selectionToggleable: false,\n  buttons: [],\n  exact: false,\n  caseSensitive: false\n}"
            },
            {
                "name": "DYNAMIC_COMPONENT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-tokens.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('DYNAMIC_COMPONENT')"
            },
            {
                "name": "DYNAMIC_COMPONENT_MANIFESTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-tokens.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('DYNAMIC_COMPONENT_MANIFESTS')"
            },
            {
                "name": "DYNAMIC_MODULE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-tokens.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('DYNAMIC_MODULE')"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "exampleData1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/datatable-dynamic/_story-data/dynamic-data-1.ts",
                "type": "IDatatableDynamicDef",
                "defaultValue": "{\n  filterMenu: {\n    state: 'always-visible',\n    filters: [\n      { name: 'search', type: 'full-search' },\n      { name: 'text', type: 'common' },\n      { name: 'search', type: 'common' },\n      {\n        name: 'toggle-buttons',\n        type: 'common',\n        options: {\n          buttons: [\n            { name: '30', value: '30' },\n            { name: '32', value: '32' }\n          ]\n        }\n      }\n    ],\n    exporters: [\n      'exporter:csv',\n      'exporter:xlsx'\n    ],\n  },\n  columns: [\n    { prop: 'icn', name: 'Icon', cellType: 'icon' },\n    { prop: 'firstName', name: 'First Name' },\n    { prop: 'lastName', name: 'Last Name' },\n    { prop: 'age', name: 'Age' },\n    { prop: 'sentDate', name: 'Sent Date', cellType: 'date' }\n  ],\n  rows: [\n    { icn: 'faEnvelope', firstName: 'User1', lastName: 'Last1', age: 28, sentDate: '2019-07-22T16:25:58.0266996+00:00' },\n    { icn: 'faEnvelope', firstName: 'User2', lastName: 'Last2', age: 30, sentDate: '2019-08-22T19:23:58.0266996+00:00' },\n    { icn: 'faEnvelope', firstName: 'User3', lastName: 'Last3', age: 32, sentDate: '' },\n    { icn: 'faEnvelope', firstName: 'User4', lastName: 'Last4', age: 34, sentDate: '2019-08-22T19:23:58.0266996+00:00' },\n  ],\n  rowActions: [\n    {\n      label: 'Link',\n      action: { type: 'link', link: 'details' }\n    },\n    {\n      label: 'Link External',\n      action: { type: 'link', link: 'https://bing.com', external: true },\n      isHiddenExpr: 'row.age > 30'\n    },\n    {\n      label: 'Link External Config',\n      action: { type: 'link', link: 'https://bing.com', external: true, confirmDialog: { 'message': 'Are you sure?' } },\n      isHiddenExpr: 'row.age > 30'\n    },\n    {\n      label: 'Api Endpoint',\n      action: {\n        type: 'api',\n        // endpoint: 'example/users',\n        endpointExpr: '\"example/users/\" + row.age',\n        method: 'POST',\n        bodyExpr: '{ thing: row.age }',\n        paramsExpr: '{ age: row.age, name: row.firstName + \" \" + row.lastName }'\n      },\n      isHiddenExpr: 'row.age > 30'\n    },\n    {\n      label: 'Modal',\n      action: { type: 'modal', component: 'story-ex-modal' }\n    }\n  ],\n  options: {\n    virtualization: true\n  }\n}"
            },
            {
                "name": "exampleData2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/datatable-dynamic/_story-data/dynamic-data-2.ts",
                "type": "IDatatableDynamicDef",
                "defaultValue": "{\n  filterMenu: {\n    state: 'always-visible',\n    filters: [\n      { name: 'search', type: 'full-search' },\n      {\n        name: 'toggle-buttons',\n        type: 'common',\n        options: {\n          buttons: [\n            { name: '30', value: '30' },\n            { name: '32', value: '32' }\n          ]\n        }\n      }\n    ],\n    exporters: [\n      'exporter:csv',\n      'exporter:xlsx'\n    ],\n  },\n  columns: [\n    { prop: 'firstName', name: 'First Name' },\n    { prop: 'lastName', name: 'Last Name' },\n    { prop: 'age', name: 'Age' },\n    { prop: 'sentDate', name: 'Sent Date', cellType: 'date' }\n  ],\n  rows: [\n    { firstName: 'User1', lastName: 'Last1', age: 28, sentDate: '2019-07-22T16:25:58.0266996+00:00' },\n    { firstName: 'User2', lastName: 'Last2', age: 30, sentDate: '2019-04-22T12:15:58.0266996+00:00' },\n    { firstName: 'User3', lastName: 'Last3', age: 32, sentDate: '2019-08-22T19:23:58.0266996+00:00' },\n  ],\n  rowActions: [\n    {\n      label: 'View Detail',\n      action: {\n        type: 'link',\n        link: 'details'\n      }\n    }\n  ],\n  options: {\n    virtualization: true\n  }\n}"
            },
            {
                "name": "EXPAND_STATES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "[]",
                "defaultValue": "[ ...EXPANDED_STATES, ...COLLAPSED_STATES ]"
            },
            {
                "name": "EXPANDED_OVERLAY_STATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "string",
                "defaultValue": "'expanded-overlay'"
            },
            {
                "name": "EXPANDED_STATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "string",
                "defaultValue": "'expanded'"
            },
            {
                "name": "EXPANDED_STATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts",
                "type": "string",
                "defaultValue": "'expanded'"
            },
            {
                "name": "EXPANDED_STATES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "[]",
                "defaultValue": "[ EXPANDED_STATE, EXPANDED_OVERLAY_STATE ]"
            },
            {
                "name": "fader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                "type": "",
                "defaultValue": "trigger('routeAnimations', [\n    transition('* <=> *', [\n      // Set a default  style for enter and leave\n      query(':enter, :leave', [\n        style({\n          position: 'absolute',\n          left: 0,\n          width: '100%',\n          opacity: 0,\n          transform: 'scale(0) translateY(100%)',\n        }),\n      ], { optional: true }),\n      // Animate the new page in\n      query(':enter', [\n        animate('600ms ease', style({ opacity: 1, transform: 'scale(1) translateY(0)' })),\n      ], { optional: true })\n    ]),\n  ])"
            },
            {
                "name": "FILE_EXTENSION_ICONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/icon/utils/file-extension-icon.ts",
                "type": "object",
                "defaultValue": "{\n  'pdf': faFilePdf,\n  'doc': faFileWord,\n  'docx': faFileWord,\n  'xls': faFileExcel,\n  'xlsx': faFileExcel,\n  'gif': faFileImage,\n  'jpg': faFileImage,\n  'jpeg': faFileImage,\n  'png': faFileImage,\n  'zip': faFileArchive,\n  'ppt': faFilePowerpoint,\n  'pptx': faFilePowerpoint,\n  'txt': faFileAlt,\n  'json': faFileAlt\n}"
            },
            {
                "name": "filterComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-filters/data-filters.module.ts",
                "type": "[]",
                "defaultValue": "[\n  DataFilterSearchComponent,\n  DataFilterTextComponent,\n  DataFilterToggleButtonsComponent\n]"
            },
            {
                "name": "filterDefProviders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-filters/data-filters.module.ts",
                "type": "[]",
                "defaultValue": "[\n  { provide: THESEAM_DATA_FILTER_DEF, useValue: { name: 'search', component: DataFilterSearchComponent }, multi: true },\n  { provide: THESEAM_DATA_FILTER_DEF, useValue: { name: 'text', component: DataFilterTextComponent }, multi: true },\n  { provide: THESEAM_DATA_FILTER_DEF, useValue: { name: 'toggle-buttons', component: DataFilterToggleButtonsComponent }, multi: true },\n]"
            },
            {
                "name": "FULL_STATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts",
                "type": "string",
                "defaultValue": "'full'"
            },
            {
                "name": "GIN_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-table/widget-table.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    \"ginCode\": \"12345\",\n    \"name\": \"Gin 1\",\n    \"city\": \"SELMA\",\n    \"state\": \"AL\",\n    \"stateCode\": 1,\n    \"countyCode\": 1,\n    \"zipCode\": \"00000\",\n    \"isRegistered\": false\n  },\n  {\n    \"ginCode\": \"12346\",\n    \"name\": \"Gin 2\",\n    \"city\": \"WELCH\",\n    \"state\": \"TX\",\n    \"stateCode\": 48,\n    \"countyCode\": 115,\n    \"zipCode\": \"00000\",\n    \"isRegistered\": false\n  },\n  {\n    \"ginCode\": \"12347\",\n    \"name\": \"Gin 3\",\n    \"city\": \"LAMESA\",\n    \"state\": \"TX\",\n    \"stateCode\": 48,\n    \"countyCode\": 115,\n    \"zipCode\": \"00000\",\n    \"isRegistered\": false\n  },\n  {\n    \"ginCode\": \"12348\",\n    \"name\": \"Gin 4\",\n    \"city\": \"WELCH\",\n    \"state\": \"TX\",\n    \"stateCode\": 48,\n    \"countyCode\": 115,\n    \"zipCode\": \"00000\",\n    \"isRegistered\": false\n  },\n  {\n    \"ginCode\": \"12349\",\n    \"name\": \"Gin 5\",\n    \"city\": \"RIO HONDO\",\n    \"state\": \"TX\",\n    \"stateCode\": 48,\n    \"countyCode\": 61,\n    \"zipCode\": \"00000\",\n    \"isRegistered\": false\n  },\n  {\n    \"ginCode\": \"12350\",\n    \"name\": \"Gin 6\",\n    \"city\": \"RIO HONDO\",\n    \"state\": \"TX\",\n    \"stateCode\": 48,\n    \"countyCode\": 61,\n    \"zipCode\": \"00000\",\n    \"isRegistered\": false\n  },\n  {\n    \"ginCode\": \"12351\",\n    \"name\": \"Gin 7\",\n    \"city\": \"LAMESA\",\n    \"state\": \"TX\",\n    \"stateCode\": 48,\n    \"countyCode\": 115,\n    \"zipCode\": \"00000\",\n    \"isRegistered\": false\n  }\n]"
            },
            {
                "name": "GIN_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/table/table/table.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    \"ginCode\": \"12345\",\n    \"name\": \"Gin 1\",\n    \"icon\": faEnvelope\n  },\n  {\n    \"ginCode\": \"12346\",\n    \"name\": \"Gin 2\",\n    \"icon\": faEnvelope\n  },\n  {\n    \"ginCode\": \"12347\",\n    \"name\": \"Gin 3\",\n    \"icon\": faEnvelope\n  },\n  {\n    \"ginCode\": \"12348\",\n    \"name\": \"Gin 4\",\n    \"icon\": faEnvelope\n  },\n  {\n    \"ginCode\": \"12349\",\n    \"name\": \"Gin 5\",\n    \"icon\": faEnvelope\n  },\n  {\n    \"ginCode\": \"12350\",\n    \"name\": \"Gin 6\",\n    \"icon\": faEnvelope\n  },\n  {\n    \"ginCode\": \"12351\",\n    \"name\": \"Gin 7\",\n    \"icon\": faEnvelope\n  }\n]"
            },
            {
                "name": "InitiallyChecked",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `<seam-checkbox [checked]=\"true\">Initially checked.</seam-checkbox>`\n})"
            },
            {
                "name": "InitiallyIndeterminate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `<seam-checkbox [indeterminate]=\"true\">Initially indeterminate.</seam-checkbox>`\n})"
            },
            {
                "name": "InitiallyUnchecked",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  template: `<seam-checkbox [checked]=\"false\">Initially unchecked.</seam-checkbox>`\n})"
            },
            {
                "name": "IS_ABSOLUTE_URL_REGEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/utils/is-absolute-url.ts",
                "type": "",
                "defaultValue": "new RegExp('^(?:[a-z]+:)?//', 'i')",
                "description": "<p>Explaination:\n  ^       - beginning of the string\n  (?:     - beginning of a non-captured group\n  [a-z]+  - any character of &#39;a&#39; to &#39;z&#39; 1 or more times\n  :       - string (colon character)\n  )?      - end of the non-captured group. Group appearing 0 or 1 times\n  //      - string (two forward slash characters)\n  &#39;i&#39;     - non case-sensitive flag</p>\n<p>source: <a href=\"https://stackoverflow.com/a/19709846\">https://stackoverflow.com/a/19709846</a></p>\n"
            },
            {
                "name": "knownIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/icon/utils/get-known-icon.ts",
                "type": "object",
                "defaultValue": "{\n  'faAddressCard': faAddressCard,\n  'faBan': faBan,\n  'faBell': faBell,\n  'faBookmark': faBookmark,\n  'faChartLine': faChartLine,\n  'faChartArea': faChartArea,\n  'faChartBar': faChartBar,\n  'faCheck': faCheck,\n  'faCheckCircle': faCheckCircle,\n  'faClock': faClock,\n  'faCloudUploadAlt': faCloudUploadAlt,\n  'faComment': faComment,\n  'faCog': faCog,\n  'faEdit': faEdit,\n  'faEnvelope': faEnvelope,\n  'faEnvelopeOpen': faEnvelopeOpen,\n  'faExclamation': faExclamation,\n  'faExclamationCircle': faExclamationCircle,\n  'faExclamationTriangle': faExclamationTriangle,\n  'faExternalLinkSquareAlt': faExternalLinkSquareAlt,\n  'faFile': faFile,\n  'faFileAlt': faFileAlt,\n  'faFileArchive': faFileArchive,\n  'faFileAudio': faFileAudio,\n  'faFileCode': faFileCode,\n  'faFileContract': faFileContract,\n  'faFileCsv': faFileCsv,\n  'faFileDownload': faFileDownload,\n  'faFileExcel': faFileExcel,\n  'faFileExport': faFileExport,\n  'faFileImage': faFileImage,\n  'faFileImport': faFileImport,\n  'faFileInvoice': faFileInvoice,\n  'faFileInvoiceDollar': faFileInvoiceDollar,\n  'faFileMedical': faFileMedical,\n  'faFileMedicalAlt': faFileMedicalAlt,\n  'faFilePdf': faFilePdf,\n  'faFilePowerpoint': faFilePowerpoint,\n  'faFilePrescription': faFilePrescription,\n  'faFileSignature': faFileSignature,\n  'faFileUpload': faFileUpload,\n  'faFileVideo': faFileVideo,\n  'faFileWord': faFileWord,\n  'faFolder': faFolder,\n  'faFolderOpen': faFolderOpen,\n  'faImage': faImage,\n  'faImages': faImages,\n  'faInbox': faInbox,\n  'faInfoCircle': faInfoCircle,\n  'faLock': faLock,\n  'faLockOpen': faLockOpen,\n  'faPrint': faPrint,\n  'faQuestionCircle': faQuestionCircle,\n  'faReceipt': faReceipt,\n  'faReply': faReply,\n  'faSave': faSave,\n  'faShare': faShare,\n  'faSignature': faSignature,\n  'faStickyNote': faStickyNote,\n  'faTimes': faTimes,\n  'faTimesCircle': faTimesCircle,\n  'faTrash': faTrash,\n  'faTrashAlt': faTrashAlt,\n  'faUser': faUser,\n  'faUserCheck': faUserCheck,\n  'faUserCircle': faUserCircle,\n  'faUserEdit': faUserEdit,\n  'faUserTimes': faUserTimes,\n  'faUsers': faUsers,\n  'faUserPlus': faUserPlus\n}"
            },
            {
                "name": "LIB_MENU",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/menu/menu.component.ts",
                "type": "any",
                "defaultValue": "{\n  provide: THESEAM_MENU_PANEL,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => MenuComponent)\n}"
            },
            {
                "name": "LIB_MODAL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/modal/modal/modal.component.ts",
                "type": "any",
                "defaultValue": "{\n  provide: THESEAM_MODAL_CONTAINER,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => ModalComponent),\n  multi: true,\n}"
            },
            {
                "name": "LIB_MODAL_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/modal/modal-config.ts",
                "type": "",
                "defaultValue": "new InjectionToken<ModalConfig>('seamModalConfig')",
                "description": "<p>Injection token that can be used to specify modal options. </p>\n"
            },
            {
                "name": "LIB_OVERLAY_SCROLLBARS_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/scrollbar/overlay-scrollbars-config.ts",
                "type": "",
                "defaultValue": "new InjectionToken<IOverlayScrollbarsConfig>('seamOverlayScrollbarsConfig')",
                "description": "<p>Injection token that can be used to specify overlayscrollbars options. </p>\n"
            },
            {
                "name": "loadingForRoot",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/loading/loading.module.ts",
                "type": "",
                "defaultValue": "NgxLoadingModule.forRoot(defaultThemeConfig)"
            },
            {
                "name": "localStorage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/services/local-storage.service.ts",
                "type": "Storage",
                "defaultValue": "'localStorage' in window && window.localStorage != null ? window.localStorage : localStorageMemory"
            },
            {
                "name": "manifests",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "type": "IDynamicComponentManifest[]",
                "defaultValue": "[\n  {\n    componentId: 'widget-one',\n    path: 'widget-one',\n    loadChildren: () => import('./example-lazy-loaded-widgets/lazy-widget-one/lazy-widget-one.module').then(m => m.LazyWidgetOneModule)\n  }\n]"
            },
            {
                "name": "manifests",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/example-lazy-loaded-widgets/example-lazy-loaded-widgets.module.ts",
                "type": "IDynamicComponentManifest[]",
                "defaultValue": "[\n  {\n    componentId: 'widget-one',\n    path: 'widget-one',\n    loadChildren: () => import('./lazy-widget-one/lazy-widget-one.module').then(m => m.LazyWidgetOneModule)\n  }\n]"
            },
            {
                "name": "mediaQueriesMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/layout/observe-media-query.ts",
                "type": "object",
                "defaultValue": "{\n  'xs'   : 'screen and (max-width: 599px)',\n  'sm'   : 'screen and (min-width: 600px) and (max-width: 959px)',\n  'md'   : 'screen and (min-width: 960px) and (max-width: 1279px)',\n  'lg'   : 'screen and (min-width: 1280px) and (max-width: 1919px)',\n  'xl'   : 'screen and (min-width: 1920px) and (max-width: 5000px)',\n  'lt-sm': 'screen and (max-width: 599px)',\n  'lt-md': 'screen and (max-width: 959px)',\n  'lt-lg': 'screen and (max-width: 1279px)',\n  'lt-xl': 'screen and (max-width: 1919px)',\n  'gt-xs': 'screen and (min-width: 600px)',\n  'gt-sm': 'screen and (min-width: 960px)',\n  'gt-md': 'screen and (min-width: 1280px)',\n  'gt-lg': 'screen and (min-width: 1920px)'\n}"
            },
            {
                "name": "menuDropdownPanelExpandIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/menu/menu-animations.ts",
                "type": "",
                "defaultValue": "animation([\n  style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  }),\n  group([\n    animate('100ms linear', style({ opacity: 1 })),\n    animate('120ms ease', style({ transform: 'scale(1)' })),\n  ])\n])"
            },
            {
                "name": "menuDropdownPanelExpandOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/menu/menu-animations.ts",
                "type": "",
                "defaultValue": "animation([\n  style({\n    opacity: 1,\n    transform: 'scale(1)'\n  }),\n  group([\n    animate('100ms linear', style({ opacity: 0 })),\n    animate('120ms ease', style({ transform: 'scale(0.8)' })),\n  ])\n])"
            },
            {
                "name": "menuDropdownPanelSlideIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/menu/menu-animations.ts",
                "type": "",
                "defaultValue": "animation([\n  query('.dropdown-menu', [\n    style({\n      opacity: 0,\n      transform: 'translateY(-70%)'\n    }),\n    group([\n      animate('170ms linear', style({ opacity: 1 })),\n      animate('220ms ease', style({ transform: 'translateY(0)' })),\n    ])\n  ])\n])"
            },
            {
                "name": "menuDropdownPanelSlideOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/menu/menu-animations.ts",
                "type": "",
                "defaultValue": "animation([\n  query('.dropdown-menu', [\n    style({\n      opacity: 1,\n      transform: 'translateY(0)'\n    }),\n    group([\n      animate('170ms linear', style({ opacity: 0 })),\n      animate('220ms ease', style({ transform: 'translateY(-70%)' })),\n    ])\n  ])\n])"
            },
            {
                "name": "MODAL_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                "type": "",
                "defaultValue": "new InjectionToken<ModalConfig>('ModalConfig')",
                "description": "<p>Injection token for the DialogConfig. </p>\n"
            },
            {
                "name": "MODAL_CONTAINER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                "type": "",
                "defaultValue": "new InjectionToken<ComponentType<ModalContainerComponent>>('ModalContainer')",
                "description": "<p>Injection token for the Dialog&#39;s DialogContainer component. </p>\n"
            },
            {
                "name": "MODAL_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('ModalData')",
                "description": "<p>Injection token for the Dialog&#39;s Data. </p>\n"
            },
            {
                "name": "MODAL_REF",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                "type": "",
                "defaultValue": "new InjectionToken<ModalRef<any>>('ModalRef')",
                "description": "<p>Injection token for the DialogRef constructor. </p>\n"
            },
            {
                "name": "MODAL_SCROLL_STRATEGY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                "type": "",
                "defaultValue": "new InjectionToken<() => ScrollStrategy>('ModalScrollStrategy')",
                "description": "<p>Injection token for the Dialog&#39;s ScrollStrategy. </p>\n"
            },
            {
                "name": "navItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
                "type": "ISideNavItem[]",
                "defaultValue": "[\n  {\n    itemType: 'link',\n    label: 'Example 1',\n    icon: faSignature,\n    link: 'example1',\n  },\n  {\n    itemType: 'link',\n    label: 'Example 2',\n    icon: faBuilding,\n    link: 'example2',\n    children: [\n      {\n        itemType: 'link',\n        label: 'Example 1.1',\n        icon: faSignature,\n        link: 'example2/example1.1',\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.2',\n        icon: faBuilding,\n        link: 'example2/example1.2'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.3',\n        link: 'example2/example1.3'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.4',\n        // link: 'example2/example1.4'\n      }\n    ]\n  },\n  {\n    itemType: 'basic',\n    label: 'Example 3',\n    icon: faBook,\n    children: [\n      {\n        itemType: 'link',\n        label: 'Example 1.1',\n        icon: faSignature,\n        link: 'example3/example1.1',\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.2',\n        icon: faBuilding,\n        link: 'example3/example1.2'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.3',\n        link: 'example3/example1.3'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.4',\n        // link: 'example3/example1.4'\n      }\n    ]\n  },\n  {\n    itemType: 'link',\n    label: 'Example 4',\n    link: 'example4'\n  },\n  {\n    itemType: 'link',\n    label: 'Example 5',\n    // link: 'example5'\n  }\n]"
            },
            {
                "name": "needToFix",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/icon/icon/icon.component.ts",
                "type": "",
                "defaultValue": "/(MSIE 10)|(Trident.*rv:11\\.0)|( Edge\\/[\\d\\.]+$)/.test(navigator.userAgent)"
            },
            {
                "name": "needToFix",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile-icon/tiled-select-tile-icon.component.ts",
                "type": "",
                "defaultValue": "/(MSIE 10)|(Trident.*rv:11\\.0)|( Edge\\/[\\d\\.]+$)/.test(navigator.userAgent)"
            },
            {
                "name": "nextLabelUniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/form-field/form-field.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "nextUniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/form-field/input.directive.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "passiveEventListenerOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/menu/menu-toggle.directive.ts",
                "type": "",
                "defaultValue": "normalizePassiveListenerOptions({passive: true})",
                "description": "<p>Options for binding a passive event listener. </p>\n"
            },
            {
                "name": "pdfjsLib",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/viewers/pdf-viewer/pdf-page/pdf-page.component.ts",
                "type": "",
                "defaultValue": "require('pdfjs-dist/build/pdf')"
            },
            {
                "name": "pdfjsLib",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/viewers/pdf-viewer/pdf-viewer.component.ts",
                "type": "",
                "defaultValue": "require('pdfjs-dist/build/pdf')"
            },
            {
                "name": "phoneNumberMask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/utils/input-masks.ts",
                "type": "[]",
                "defaultValue": "['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]"
            },
            {
                "name": "primaryThemeConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/loading/loading-themes.ts",
                "type": "NgxLoadingConfig",
                "defaultValue": "{\n  animationType: ngxLoadingAnimationTypes.threeBounce,\n  backdropBackgroundColour: 'rgba(250,250,250,0.2)',\n  backdropBorderRadius: '0px',\n  primaryColour: 'rgba(53,126,189,0.7)',\n  secondaryColour: 'rgba(53,126,189,0.7)',\n  tertiaryColour: 'rgba(53,126,189,0.7)'\n}"
            },
            {
                "name": "pulseAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/icon/icon-notification/icon-notification.component.ts",
                "type": "",
                "defaultValue": "animation([\n  style({ transform: 'scale(1)' }),\n  animate(\n    '{{ timings }}',\n    keyframes([\n      style({ transform: 'scale(1)', offset: 0 }),\n      style({ transform: 'scale({{ scale }})', offset: 0.5 }),\n      style({ transform: 'scale(1)', offset: 1 })\n    ])\n  )\n])"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "routeDefs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/dynamic-router/stories/example-route-defs-1.ts",
                "type": "IDynamicRouteDef[]",
                "defaultValue": "[\n  {\n    path: 'profile',\n    component: 'name-ex-1',\n    data: {\n      name: 'Mark'\n    }\n  }\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  // {\n  //   path: 'story-ex-modal',\n  //   loadChildren: () => ExampleModalModule,\n  //   outlet: 'modal'\n  // }\n]"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
                "type": "Route[]",
                "defaultValue": "[\n  {\n    path: '',\n    data: { breadcrumb: 'Dashboard' },\n    children: [\n      { path: 'example1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1' } },\n      {\n        path: 'example2',\n        component: StoryRoutePlacholderComponent,\n        data: { breadcrumb: 'example2' },\n        children: [\n          { path: 'example1.1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.1' } },\n          { path: 'example1.2', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.2' } },\n          { path: 'example1.3', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.3' } },\n          { path: 'example1.4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.4' } }\n        ]\n      },\n      {\n        path: 'example3',\n        component: StoryRoutePlacholderComponent,\n        data: { breadcrumb: 'example3' },\n        children: [\n          { path: 'example1.1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.1' } },\n          { path: 'example1.2', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.2' } },\n          { path: 'example1.3', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.3' } },\n          { path: 'example1.4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.4' } }\n        ]\n      },\n      { path: 'example4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example4' } },\n      { path: 'example5', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example5' } }\n    ]\n  }\n]"
            },
            {
                "name": "sideToSide",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                "type": "",
                "defaultValue": "trigger('routeAnimations', [\n  transition('* => *', [\n    style({\n      position: 'fixed',\n      width: '100%',\n      transform: 'translateX(-100%)'\n    }),\n    animate('1000ms ease', style({ transform: 'translateX(0%)' }))\n  ]),\n  transition(':leave', [\n    style({\n      position: 'fixed',\n      width: '100%',\n      transform: 'translateX(0%)'\n    }),\n    animate('1000ms ease', style({ transform: 'translateX(-100%)' }))\n  ])\n])"
            },
            {
                "name": "slideEnterAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select/tiled-select.component.ts",
                "type": "",
                "defaultValue": "animation([\n  style({ opacity: 0, transform: 'translateX(-15px)' }),\n  stagger(100, [\n    animate('0.5s', style({ opacity: 1, transform: 'translateX(0)' }))\n  ])\n])"
            },
            {
                "name": "slider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                "type": "",
                "defaultValue": "trigger('routeAnimations', [\n    transition('* => isLeft', [\n      query('.router-container :enter, .router-container :leave', [\n        style({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ], { optional: true }),\n      query('.router-container :enter', [\n        style({ left: '-100%'})\n      ], { optional: true }),\n      query('.hierarchy-router-outlet--content', [\n        style({ left: '0%', position: 'absolute' })\n      ], { optional: true }),\n      group([\n        query('.router-container :leave', [\n          animate('1000ms ease', style({ left: '100%'}))\n        ], { optional: true }),\n        query('.router-container :enter', [\n          animate('1000ms ease', style({ left: '0%'}))\n        ], { optional: true }),\n        query('.hierarchy-router-outlet--content', [\n          animate('1000ms ease', style({ left: '-100%'}))\n        ], { optional: true }),\n      ]),\n      // Normalize the page style... Might not be necessary\n\n      // Required only if you have child animations on the page\n      query('.router-container :leave', animateChild(), { optional: true }),\n      query('.router-container :enter', animateChild(), { optional: true }),\n    ]),\n    transition('* => isRight', [\n      query('.router-container :enter, .router-container :leave', [\n        style({\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          width: '100%'\n        })\n      ], { optional: true }),\n      query('.router-container :enter', [\n        style({ right: '-100%'})\n      ], { optional: true }),\n      query('.hierarchy-router-outlet--content', [\n        style({ left: '0%', position: 'absolute' })\n      ], { optional: true }),\n      group([\n        query('.router-container :leave', [\n          animate('1000ms ease', style({ right: '100%'}))\n        ], { optional: true }),\n        query('.router-container :enter', [\n          animate('1000ms ease', style({ right: '0%'}))\n        ], { optional: true }),\n        query('.hierarchy-router-outlet--content', [\n          animate('1000ms ease', style({ left: '-100%'}))\n        ], { optional: true }),\n      ]),\n      // Normalize the page style... Might not be necessary\n\n      // Required only if you have child animations on the page\n      query('.router-container :leave', animateChild(), { optional: true }),\n      query('.router-container :enter', animateChild(), { optional: true }),\n    ]),\n    transition('isRight => *', [\n      query('.router-container :enter, .router-container :leave', [\n        style({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ], { optional: true }),\n      query('.router-container :enter', [\n        style({ left: '-100%'})\n      ], { optional: true }),\n      query('.hierarchy-router-outlet--content', [\n        style({ left: '0%', position: 'absolute' })\n      ], { optional: true }),\n      group([\n        query('.router-container :leave', [\n          animate('1000ms ease', style({ left: '100%'}))\n        ], { optional: true }),\n        query('.router-container :enter', [\n          animate('1000ms ease', style({ left: '0%'}))\n        ], { optional: true }),\n        query('.hierarchy-router-outlet--content', [\n          animate('1000ms ease', style({ left: '-100%'}))\n        ], { optional: true }),\n      ]),\n      // Normalize the page style... Might not be necessary\n\n      // Required only if you have child animations on the page\n      query('.router-container :leave', animateChild(), { optional: true }),\n      query('.router-container :enter', animateChild(), { optional: true }),\n    ]),\n    transition('isLeft => *', [\n      query('.router-container :enter, .router-container :leave', [\n        style({\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          width: '100%'\n        })\n      ], { optional: true }),\n      query('.router-container :enter', [\n        style({ right: '-100%'})\n      ], { optional: true }),\n      group([\n        query('.router-container :leave', [\n          animate('1000ms ease', style({ right: '100%'}))\n        ], { optional: true }),\n        query('.router-container :enter', [\n          animate('1000ms ease', style({ right: '0%'}))\n        ], { optional: true })\n      ]),\n      // Normalize the page style... Might not be necessary\n\n      // Required only if you have child animations on the page\n      query('.router-container :leave', animateChild(), { optional: true }),\n      query('.router-container :enter', animateChild(), { optional: true }),\n    ])\n  ])"
            },
            {
                "name": "stepper",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                "type": "",
                "defaultValue": "trigger('routeAnimations', [\n    transition('* <=> *', [\n      query(':enter, :leave', [\n        style({\n          position: 'absolute',\n          left: 0,\n          width: '100%',\n        }),\n      ], { optional: true }),\n      group([\n        query(':enter', [\n          animate('2000ms ease', keyframes([\n            style({ transform: 'scale(0) translateX(100%)', offset: 0 }),\n            style({ transform: 'scale(0.5) translateX(25%)', offset: 0.3 }),\n            style({ transform: 'scale(1) translateX(0%)', offset: 1 }),\n          ])),\n        ], { optional: true }),\n        query(':leave', [\n          animate('2000ms ease', keyframes([\n            style({ transform: 'scale(1)', offset: 0 }),\n            style({ transform: 'scale(0.5) translateX(-25%) rotate(0)', offset: 0.35 }),\n            style({ opacity: 0, transform: 'translateX(-50%) rotate(-180deg) scale(6)', offset: 1 }),\n          ])),\n        ], { optional: true })\n      ]),\n    ])\n  ])"
            },
            {
                "name": "STORY_INITIAL_ROUTE_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/story-helpers/initial-route.service.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('STORY_INITIAL_ROUTE_URL')"
            },
            {
                "name": "STORY_INITIAL_ROUTE_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/story-helpers/initial-route-service.ts",
                "type": "",
                "defaultValue": "new InjectionToken<any>('STORY_INITIAL_ROUTE_URL')"
            },
            {
                "name": "StyledDiv",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/stories/mdx/components/doc-alert.tsx",
                "type": "",
                "defaultValue": "styled.div({\n  'borderRadius': '0',\n  'borderLeftWidth': '5px !important'\n})"
            },
            {
                "name": "TABLE_CELL_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/table/table-cell-tokens.ts",
                "type": "",
                "defaultValue": "new InjectionToken<ITableCellData>('TABLE_CELL_DATA')"
            },
            {
                "name": "TABLE_CELL_TYPE_MANIFEST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/table-cell-types/table-cell-types-tokens.ts",
                "type": "",
                "defaultValue": "new InjectionToken<ITableCellTypeManifest>('TABLE_CELL_TYPE_MANIFEST')"
            },
            {
                "name": "TABLE_CELL_TYPE_MANIFEST_DATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/table-cell-types/table-cell-type-manifests.ts",
                "type": "ITableCellTypeManifestProvider",
                "defaultValue": "{\n  provide: TABLE_CELL_TYPE_MANIFEST,\n  useValue: {\n    name: 'date',\n    component: TableCellTypeDateComponent\n  },\n  multi: true\n}"
            },
            {
                "name": "TABLE_CELL_TYPE_MANIFEST_ICON",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/table-cell-types/table-cell-type-manifests.ts",
                "type": "ITableCellTypeManifestProvider",
                "defaultValue": "{\n  provide: TABLE_CELL_TYPE_MANIFEST,\n  useValue: {\n    name: 'icon',\n    component: TableCellTypeIconComponent\n  },\n  multi: true\n}"
            },
            {
                "name": "TABLE_CELL_TYPE_MANIFEST_IMAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/table-cell-types/table-cell-type-manifests.ts",
                "type": "ITableCellTypeManifestProvider",
                "defaultValue": "{\n  provide: TABLE_CELL_TYPE_MANIFEST,\n  useValue: {\n    name: 'image',\n    component: TableCellTypeIconComponent\n  },\n  multi: true\n}"
            },
            {
                "name": "THE_SEAM_BASE_LAYOUT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/base-layout/base-layout.component.ts",
                "type": "any",
                "defaultValue": "{\n  provide: THESEAM_BASE_LAYOUT_REF,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => TheSeamBaseLayoutComponent),\n  multi: false,\n}"
            },
            {
                "name": "ThemeNames",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/models/theme-names.ts",
                "type": "string[]",
                "defaultValue": "[\n  'default',\n  'primary',\n  'secondary',\n  'success',\n  'danger',\n  'warning',\n  'info',\n  'light',\n  'dark',\n  'lightgray',\n  'lightblue'\n]"
            },
            {
                "name": "THESEAM_BASE_LAYOUT_REF",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/base-layout/base-layout-tokens.ts",
                "type": "",
                "defaultValue": "new InjectionToken<ITheSeamBaseLayoutRef>('seamBaseLayoutRef')"
            },
            {
                "name": "THESEAM_CHECKBOX_CONTROL_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => TheSeamCheckboxComponent),\n  multi: true\n}"
            },
            {
                "name": "THESEAM_DATA_EXPORTER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-exporter/data-exporter.ts",
                "type": "",
                "defaultValue": "new InjectionToken<IDataExporter>('TheSeamDataExporter')"
            },
            {
                "name": "THESEAM_DATA_FILTER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                "type": "",
                "defaultValue": "new InjectionToken<IDataFilter>('TheSeamDataFilter')"
            },
            {
                "name": "THESEAM_DATA_FILTER_DEF",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-filters/data-filter-def.ts",
                "type": "",
                "defaultValue": "new InjectionToken<IDataFilterDef[]>('TheSeamDataFilter')"
            },
            {
                "name": "THESEAM_DATA_FILTER_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                "type": "",
                "defaultValue": "new InjectionToken<{}>('TheSeamDataFilterOptions')"
            },
            {
                "name": "THESEAM_DATATABLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/datatable/datatable/datatable.component.ts",
                "type": "",
                "defaultValue": "new InjectionToken<IDataFilter>('LibDatatable')",
                "description": "<p>Intended for internal classes declared by the <code>TheSeamDatatableModule</code>.</p>\n"
            },
            {
                "name": "THESEAM_MENU_PANEL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/menu/menu-panel-token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<ITheSeamMenuPanel>('THESEAM_MENU_PANEL')",
                "description": "<p>Injection token used to provide the parent menu to menu-specific components.</p>\n"
            },
            {
                "name": "THESEAM_MODAL_CONTAINER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/modal/modal.models.ts",
                "type": "",
                "defaultValue": "new InjectionToken<IModalContainer>('seamModalContainer')"
            },
            {
                "name": "THESEAM_MODAL_SCROLL_STRATEGY_PROVIDER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                "type": "object",
                "defaultValue": "{\n  provide: MODAL_SCROLL_STRATEGY,\n  deps: [ Overlay ],\n  useFactory: THESEAM_MODAL_SCROLL_STRATEGY_PROVIDER_FACTORY,\n}"
            },
            {
                "name": "THESEAM_WIDGETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/widget/widget-token.ts",
                "type": "",
                "defaultValue": "new InjectionToken<IWidgetRegistryRecord>('TheSeamWidgets')"
            },
            {
                "name": "TILED_SELECT_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select/tiled-select.component.ts",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => TiledSelectComponent),\n  multi: true,\n}"
            },
            {
                "name": "tilePulse",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile/tiled-select-tile.component.ts",
                "type": "",
                "defaultValue": "animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({ transform: 'scale3d(1, 1, 1)' }),\n      style({ transform: 'scale3d({{ scale }}, {{ scale }}, {{ scale }})' }),\n      style({ transform: 'scale3d(1, 1, 1)' }),\n    ])\n  ),\n  { params: { scale: 1.05, timing: 0.75, delay: 0 } }\n)"
            },
            {
                "name": "tileScaleDown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile/tiled-select-tile.component.ts",
                "type": "",
                "defaultValue": "animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({ transform: 'scale3d(1, 1, 1)' }),\n    ])\n  ),\n  { params: { scale: 1.05, timing: 0.75, delay: 0 } }\n)"
            },
            {
                "name": "tileScaleUp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile/tiled-select-tile.component.ts",
                "type": "",
                "defaultValue": "animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({ transform: 'scale3d({{ scale }}, {{ scale }}, {{ scale }})' }),\n    ])\n  ),\n  { params: { scale: 1.05, timing: 0.75, delay: 0 } }\n)"
            },
            {
                "name": "TOGGLE_BUTTON_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/buttons/toggle-button/toggle-button.component.ts",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => ToggleButtonComponent),\n  multi: true,\n}"
            },
            {
                "name": "TOGGLE_GROUP_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/toggle-group/toggle-group.directive.ts",
                "type": "any",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => ToggleGroupDirective),\n  multi: true,\n}"
            },
            {
                "name": "transformer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                "type": "",
                "defaultValue": "trigger('routeAnimations', [\n    transition('* => isLeft', transformTo({ x: -100, y: -100, rotate: -720 }) ),\n    transition('* => isRight', transformTo({ x: 100, y: -100, rotate: 90 }) ),\n    transition('isRight => *', transformTo({ x: -100, y: -100, rotate: 360 }) ),\n    transition('isLeft => *', transformTo({ x: 100, y: -100, rotate: -360 }) )\n])"
            },
            {
                "name": "uniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/modal/modal-ref.ts",
                "type": "number",
                "defaultValue": "0",
                "description": "<p>Unique id for the created dialog. </p>\n"
            },
            {
                "name": "WIDGET_LIST_GROUP_ITEM_INPUTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
                "type": "[]",
                "defaultValue": "[ 'disabled', 'theme', 'active', 'icon', 'iconClass', 'label' ]"
            }
        ],
        "functions": [
            {
                "name": "_knobUndefinedNullHACK",
                "file": "projects/ui-common/src/lib/utils/storybook-knobs-hack.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Hack for storybook knobs to allow <code>undefined</code> and <code>null</code> in <code>select</code>.</p>\n<p>NOTE: This feature is being worked on, so this hack shouldn&#39;t be needed long.</p>\n",
                "args": [
                    {
                        "name": "v",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "v",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "activatedRoutesWithDataProperty",
                "file": "projects/ui-common/src/lib/utils/router/operators/activatedRoutesWithDataProperty.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "prop"
                    },
                    {
                        "name": "mustHaveDefined",
                        "type": "boolean"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "prop",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mustHaveDefined",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "calcDashoffset",
                "file": "projects/ui-common/src/lib/progress/progress-circle/progress-circle.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value"
                    },
                    {
                        "name": "circumference"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "circumference",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "calcPercentage",
                "file": "projects/ui-common/src/lib/progress/progress-circle/progress-circle.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "total"
                    },
                    {
                        "name": "n"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "total",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "n",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "composeDataFilters",
                "file": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "filters"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "filters",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "deleteProperties",
                "file": "projects/ui-common/src/lib/utils/obj-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Delete properties of object </p>\n",
                "args": [
                    {
                        "name": "obj"
                    },
                    {
                        "name": "propNames"
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "obj",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "propNames",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "deleteProperty",
                "file": "projects/ui-common/src/lib/utils/obj-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Delete property of object </p>\n",
                "args": [
                    {
                        "name": "obj"
                    },
                    {
                        "name": "propName"
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "obj",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "propName",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "emailExistsValidator",
                "file": "projects/ui-common/src/lib/validators/email-exists.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Validates that an email already exists.</p>\n",
                "args": [
                    {
                        "name": "emailExists"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "emailExists",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "exportOperator",
                "file": "projects/ui-common/src/lib/data-exporter/data-exporter.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "exportFn"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "exportFn",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "extendStyles",
                "file": "projects/ui-common/src/lib/widget/directives/widget-drag-handle.directive.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "dest"
                    },
                    {
                        "name": "source"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "dest",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "source",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "fileBufferToBlob",
                "file": "projects/ui-common/src/lib/utils/file-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "fileBuffer"
                    },
                    {
                        "name": "defaultMime"
                    }
                ],
                "returnType": "Promise<Blob>",
                "jsdoctags": [
                    {
                        "name": "fileBuffer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultMime",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "fileBufferToObjectUrl",
                "file": "projects/ui-common/src/lib/utils/file-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "fileBuffer"
                    },
                    {
                        "name": "defaultMime"
                    }
                ],
                "returnType": "Promise<string>",
                "jsdoctags": [
                    {
                        "name": "fileBuffer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultMime",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "fileDataFromBuffer",
                "file": "projects/ui-common/src/lib/utils/file-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "fileBuffer"
                    },
                    {
                        "name": "defaultMime"
                    }
                ],
                "returnType": "Promise<IFileData>",
                "jsdoctags": [
                    {
                        "name": "fileBuffer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultMime",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "fileExtensionIcon",
                "file": "projects/ui-common/src/lib/icon/utils/file-extension-icon.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "extension"
                    },
                    {
                        "name": "defaultIfNotFound",
                        "type": "boolean"
                    }
                ],
                "returnType": "SeamIcon | undefined",
                "jsdoctags": [
                    {
                        "name": "extension",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultIfNotFound",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "filterOperator",
                "file": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "filterFn"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "filterFn",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getClosestModal",
                "file": "projects/ui-common/src/lib/modal/modal-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Finds the closest MatDialogRef to an element by looking at the DOM.</p>\n",
                "args": [
                    {
                        "name": "element"
                    },
                    {
                        "name": "openDialogs"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 168,
                            "end": 175,
                            "flags": 0,
                            "escapedText": "element"
                        },
                        "tagName": {
                            "pos": 162,
                            "end": 167,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>Element relative to which to look for a dialog.</p>\n"
                    },
                    {
                        "name": {
                            "pos": 234,
                            "end": 245,
                            "flags": 0,
                            "escapedText": "openDialogs"
                        },
                        "tagName": {
                            "pos": 228,
                            "end": 233,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>References to the currently-open dialogs.</p>\n"
                    }
                ]
            },
            {
                "name": "getControlName",
                "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "c"
                    }
                ],
                "returnType": "string | null",
                "jsdoctags": [
                    {
                        "name": "c",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getControlPath",
                "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "c"
                    },
                    {
                        "name": "path"
                    }
                ],
                "returnType": "string | null",
                "jsdoctags": [
                    {
                        "name": "c",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "path",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getKnownIcon",
                "file": "projects/ui-common/src/lib/icon/utils/get-known-icon.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "iconStr"
                    }
                ],
                "returnType": "SeamIcon | undefined",
                "jsdoctags": [
                    {
                        "name": "iconStr",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hasRouteConfigDataProp",
                "file": "projects/ui-common/src/lib/utils/router/operators/activatedRoutesWithDataProperty.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "route"
                    },
                    {
                        "name": "prop"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "route",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "prop",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hasRouteConfigResolveProp",
                "file": "projects/ui-common/src/lib/utils/router/operators/activatedRoutesWithDataProperty.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "route"
                    },
                    {
                        "name": "prop"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "route",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "prop",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isAbsoluteUrl",
                "file": "projects/ui-common/src/lib/utils/is-absolute-url.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "url"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "url",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isMediaQueryActive",
                "file": "projects/ui-common/src/lib/layout/observe-media-query.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>TODO: Find out if the MediaObserver can return an immediate result on load\naccurately like the native matchMedia. If not switch to another that can or\njust implement it myself. I would rather use a well tested library for\nsomething like that, since it could have a lot of affect on performance.</p>\n",
                "args": [
                    {
                        "name": "query"
                    },
                    {
                        "name": "fallback"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "query",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fallback",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isNullOrUndefined",
                "file": "projects/ui-common/src/lib/utils/is-null-or-undefined.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "jexlObservable",
                "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "expression"
                    },
                    {
                        "name": "context",
                        "type": "any",
                        "optional": true
                    }
                ],
                "returnType": "Observable<R>",
                "jsdoctags": [
                    {
                        "name": "expression",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "context",
                        "type": "any",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "leafChildRoute",
                "file": "projects/ui-common/src/lib/utils/router/leafChildRoute.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapEach",
                "file": "projects/ui-common/src/lib/utils/operators/map-each.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "predicate"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "predicate",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mergeModalConfigs",
                "file": "projects/ui-common/src/lib/modal/modal-config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "a",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mergeOverlayScrollbarsConfigs",
                "file": "projects/ui-common/src/lib/scrollbar/overlay-scrollbars-config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "a",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mixinActive",
                "file": "projects/ui-common/src/lib/core/common-behaviors/active.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Mixin to augment a directive with a <code>disabled</code> property. </p>\n",
                "args": [
                    {
                        "name": "base"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "base",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mixinDisabled",
                "file": "projects/ui-common/src/lib/core/common-behaviors/disabled.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Mixin to augment a directive with a <code>disabled</code> property. </p>\n",
                "args": [
                    {
                        "name": "base"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "base",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mixinInitialized",
                "file": "projects/ui-common/src/lib/core/common-behaviors/initialized.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. </p>\n",
                "args": [
                    {
                        "name": "base"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "base",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mixinSize",
                "file": "projects/ui-common/src/lib/core/common-behaviors/size.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Mixin to augment a directive with a <code>size</code> property. </p>\n",
                "args": [
                    {
                        "name": "base"
                    },
                    {
                        "name": "sizePrefix"
                    },
                    {
                        "name": "defaultSize",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "base",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sizePrefix",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultSize",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mixinTabIndex",
                "file": "projects/ui-common/src/lib/core/common-behaviors/tabindex.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Mixin to augment a directive with a <code>tabIndex</code> property. </p>\n",
                "args": [
                    {
                        "name": "base"
                    },
                    {
                        "name": "defaultTabIndex",
                        "type": "number"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "base",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultTabIndex",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mixinTheme",
                "file": "projects/ui-common/src/lib/core/common-behaviors/theme.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Mixin to augment a directive with a <code>theme</code> property. </p>\n",
                "args": [
                    {
                        "name": "base"
                    },
                    {
                        "name": "themePrefix"
                    },
                    {
                        "name": "defaultTheme",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "base",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themePrefix",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultTheme",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "notNullOrUndefined",
                "file": "projects/ui-common/src/lib/utils/not-null-or-undefined.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value"
                    }
                ],
                "returnType": "T",
                "jsdoctags": [
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "observeControlIsDifferent",
                "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Observe the changed state of the input value from the time this function is\ncalled.</p>\n<p>When this function is called the value is stored. Each time the control&#39;s\nvalue changes the value is compared with the initial value. Currenly the\nvalues are compared as stringified objects using <code>JSON.stringify</code>.</p>\n<p>TODO: Allow the value compare implementation to be optionally changed.</p>\n",
                "args": [
                    {
                        "name": "control"
                    }
                ],
                "returnType": "Observable<boolean>",
                "jsdoctags": [
                    {
                        "name": "control",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "observeControlStatus",
                "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Observe the status of a control using a work around for status not changing\nafter pending.</p>\n",
                "args": [
                    {
                        "name": "control"
                    }
                ],
                "returnType": "Observable<string>",
                "jsdoctags": [
                    {
                        "name": "control",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "observeControlValid",
                "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Observe the valid state of a control.</p>\n<p>By default <code>waitOnPending</code> is false and the control states map to:\n  &#39;VALID&#39; =&gt; true\n  &#39;INVALID&#39; =&gt; false\n  &#39;PENDING&#39; =&gt; false</p>\n<p>If <code>waitOnPending</code> is true the valid result when &#39;PENDING&#39; remains the same\n  as it was before &#39;PENDING&#39; until it is no longer &#39;PENDING&#39;.</p>\n",
                "args": [
                    {
                        "name": "control"
                    },
                    {
                        "name": "waitOnPending",
                        "type": "boolean"
                    }
                ],
                "returnType": "Observable<boolean>",
                "jsdoctags": [
                    {
                        "name": "control",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "waitOnPending",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "observeControlValue",
                "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Observe the value of a control.</p>\n",
                "args": [
                    {
                        "name": "control"
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "control",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "observeControlValueChange",
                "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Observe the value of a control with the previous.</p>\n",
                "args": [
                    {
                        "name": "control"
                    }
                ],
                "returnType": "Observable<literal type>",
                "jsdoctags": [
                    {
                        "name": "control",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "observeMediaQuery",
                "file": "projects/ui-common/src/lib/layout/observe-media-query.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Observable helper for observing a single breakpoint alias with\n<code>@angular/flex-layout</code> MediaObserver.</p>\n",
                "args": [
                    {
                        "name": "mediaObserver"
                    },
                    {
                        "name": "alias"
                    }
                ],
                "returnType": "Observable<boolean>",
                "jsdoctags": [
                    {
                        "name": "mediaObserver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alias",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "openBlob",
                "file": "projects/ui-common/src/lib/utils/file-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "blob"
                    },
                    {
                        "name": "target",
                        "optional": true
                    },
                    {
                        "name": "filename",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "blob",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "target",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filename",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "phoneLengthValidator",
                "file": "projects/ui-common/src/lib/validators/phone-length.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Validates that a value is a valid phone number length.</p>\n",
                "args": [
                    {
                        "name": "control"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "control",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "pollingTicker",
                "file": "projects/ui-common/src/lib/utils/polling-ticker.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Call an action and emits the result to its subscriber on an interval or when\nticker emits. When the ticker emits, the interval time will reset.</p>\n<p>When subscribed to, the action will be called and emitted right away unless\nthe <code>emitOnInit</code> option is set to false.</p>\n",
                "args": [
                    {
                        "name": "action"
                    },
                    {
                        "name": "pollingInterval",
                        "optional": true
                    },
                    {
                        "name": "ticker",
                        "optional": true
                    },
                    {
                        "name": "options",
                        "optional": true
                    }
                ],
                "returnType": "Observable<R>",
                "jsdoctags": [
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pollingInterval",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ticker",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "readFileAsDataUrlAsync",
                "file": "projects/ui-common/src/lib/utils/file-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "file"
                    }
                ],
                "returnType": "Promise<string | null>",
                "jsdoctags": [
                    {
                        "name": "file",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "readFileAsync",
                "file": "projects/ui-common/src/lib/utils/file-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "file",
                        "type": "any"
                    }
                ],
                "returnType": "Promise<ArrayBuffer | null>",
                "jsdoctags": [
                    {
                        "name": "file",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "routeButton",
                "file": "projects/ui-common/src/lib/story-helpers/route-button.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Until I find a way to avoid &#39;@storybook/addon-knobs&#39; from interfering with\nNgZone I can&#39;t import it in the knob when built by ng-packagr.</p>\n",
                "args": [
                    {
                        "name": "buttonKnob",
                        "type": "any"
                    },
                    {
                        "name": "url"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "buttonKnob",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "url",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "routeChanges",
                "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-router-outlet.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "router"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "routeSnapshotPathFull",
                "file": "projects/ui-common/src/lib/utils/router/route-snapshot-path-full.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "route"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "route",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "routeSnapshotPathRelative",
                "file": "projects/ui-common/src/lib/utils/router/route-snapshot-path-relative.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "route"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "route",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "searchDataFilter",
                "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data"
                    },
                    {
                        "name": "values"
                    },
                    {
                        "name": "options",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "values",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sideNavExpandStateChangeFn",
                "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "fromState"
                    },
                    {
                        "name": "toState"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "fromState",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toState",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "storyInitialRouteFactory",
                "file": "projects/ui-common/src/lib/story-helpers/initial-route-factory.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "_storyInitialRouteService"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "_storyInitialRouteService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "storyInitialRouteFactory",
                "file": "projects/ui-common/src/lib/story-helpers/initial-route-service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "_storyInitialRouteService"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "_storyInitialRouteService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "subscriberCount",
                "file": "projects/ui-common/src/lib/utils/subscriber-count.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>This is just for helping debug observables that aren&#39;t being unsubscribed\nfrom correctly.</p>\n",
                "args": [
                    {
                        "name": "sourceObservable"
                    },
                    {
                        "name": "description"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "sourceObservable",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "tapFirst",
                "file": "projects/ui-common/src/lib/utils/operators/tap-first.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Like tap, but only calls predicate on first emission.</p>\n",
                "args": [
                    {
                        "name": "predicate"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "predicate",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "taxIdValidator",
                "file": "projects/ui-common/src/lib/validators/tax-id.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Validates that value matches on of the following:\n  &#39;&#39;             // empty string\n  &#39;xxxxxxxxx&#39;    // &#39;x&#39; is a number\n  &#39;xx-xxxxxxx&#39;   // &#39;x&#39; is a number\n  &#39;xxx-xx-xxxx&#39;  // &#39;x&#39; is a number</p>\n",
                "args": [
                    {
                        "name": "control"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "control",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "textDataFilter",
                "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data"
                    },
                    {
                        "name": "text"
                    },
                    {
                        "name": "options",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "text",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "THESEAM_MODAL_SCROLL_STRATEGY_PROVIDER_FACTORY",
                "file": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "overlay"
                    }
                ],
                "returnType": "ScrollStrategy",
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "throwDialogContentAlreadyAttachedError",
                "file": "projects/ui-common/src/lib/modal/modal-container/modal-container.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": []
            },
            {
                "name": "toggleAttribute",
                "file": "projects/ui-common/src/lib/utils/dom-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Source: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute#Polyfill\">https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute#Polyfill</a></p>\n",
                "args": [
                    {
                        "name": "element",
                        "type": ""
                    },
                    {
                        "name": "name",
                        "type": ""
                    },
                    {
                        "name": "force",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "force",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "toggleButtonsFilter",
                "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "data"
                    },
                    {
                        "name": "values"
                    },
                    {
                        "name": "options",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "values",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "toggleNativeDragInteractions",
                "file": "projects/ui-common/src/lib/widget/directives/widget-drag-handle.directive.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "element"
                    },
                    {
                        "name": "enable",
                        "type": "boolean"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "element",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "enable",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "transformTo",
                "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "waitOnConditionAsync",
                "file": "projects/ui-common/src/lib/utils/wait-on-condition-async.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "condition"
                    },
                    {
                        "name": "timeoutDuration"
                    },
                    {
                        "name": "throwOnTimeout",
                        "type": "boolean"
                    }
                ],
                "returnType": "Promise<any>",
                "jsdoctags": [
                    {
                        "name": "condition",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeoutDuration",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "throwOnTimeout",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "waitOnNonPendingStatus",
                "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Wait on the status of a form control to not be <code>&#39;PENDING&#39;</code>.</p>\n<p>NOTE: This function is mainly just a work around for an issue where\n  <code>statusChanges</code> sometimes emits <code>&#39;Pending&#39;</code> without emitting another state\n  when complete. Seems to happen with async validators if the value changes\n  before completing, even if the validator completes(subscription <code>complete</code>\n  if observable).</p>\n",
                "args": [
                    {
                        "name": "control"
                    }
                ],
                "returnType": "Observable<string>",
                "jsdoctags": [
                    {
                        "name": "control",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "withoutProperties",
                "file": "projects/ui-common/src/lib/utils/obj-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Returns object without properties </p>\n",
                "args": [
                    {
                        "name": "obj"
                    },
                    {
                        "name": "propNames"
                    }
                ],
                "returnType": "Pick<T, Exclude<T, K>>",
                "jsdoctags": [
                    {
                        "name": "obj",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "propNames",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "withoutProperty",
                "file": "projects/ui-common/src/lib/utils/obj-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Returns object without property </p>\n",
                "args": [
                    {
                        "name": "obj"
                    },
                    {
                        "name": "propName"
                    }
                ],
                "returnType": "Pick<T, Exclude<T, K>>",
                "jsdoctags": [
                    {
                        "name": "obj",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "propName",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "wrapIntoObservable",
                "file": "projects/ui-common/src/lib/utils/wrap-into-observable.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value"
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "_PipeTransform",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "PipeTransform | PipeTransform",
                "file": "projects/ui-common/src/lib/datatable/datatable-column/datatable-column.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "_PointerEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "PointerEvent | PointerEvent",
                "file": "projects/ui-common/src/lib/shared/directives/hover-class.directive.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "_PointerEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "PointerEvent | PointerEvent",
                "file": "projects/ui-common/src/lib/shared/directives/hover-class-toggle.directive.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "CalculatedValueContextFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ui-common/src/lib/table-cell-types/table-cell-types-models.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "CaluclatedValueContextType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ICalucatedValueContext | CalculatedValueContextFn",
                "file": "projects/ui-common/src/lib/table-cell-types/table-cell-types-models.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "CanBeActiveCtor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Constructor<CanBeActive>",
                "file": "projects/ui-common/src/lib/core/common-behaviors/active.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "CanDisableCtor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Constructor<CanDisable>",
                "file": "projects/ui-common/src/lib/core/common-behaviors/disabled.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "CanSizeCtor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Constructor<CanSize>",
                "file": "projects/ui-common/src/lib/core/common-behaviors/size.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "CanThemeCtor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Constructor<CanTheme>",
                "file": "projects/ui-common/src/lib/core/common-behaviors/theme.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "ComponentType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-filter-container/datatable-dynamic-filter-container.component.ts",
                "description": "<p>Interface that can be used to generically type a class. </p>\n",
                "kind": 163
            },
            {
                "name": "Constructor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ui-common/src/lib/core/common-behaviors/constructor.ts",
                "description": "",
                "kind": 163
            },
            {
                "name": "DialogRole",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"dialog\" | \"alertdialog\"",
                "file": "projects/ui-common/src/lib/modal/modal-config.ts",
                "description": "<p>Valid ARIA roles for a dialog element. </p>\n",
                "kind": 168
            },
            {
                "name": "DynamicDatatableCellTypeConfigIconAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "DynamicDatatableCellActionLink | DynamicDatatableCellActionModal",
                "file": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "DynamicDatatableRowActionType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "DynamicDatatableRowActionLink | DynamicDatatableRowActionApi | DynamicDatatableRowActionModal",
                "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "HasInitializedCtor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Constructor<HasInitialized>",
                "file": "projects/ui-common/src/lib/core/common-behaviors/initialized.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "HasTabIndexCtor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Constructor<HasTabIndex>",
                "file": "projects/ui-common/src/lib/core/common-behaviors/tabindex.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "IconTemplateType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"link\" | \"link-external\" | \"link-encrypted\" | \"button\"",
                "file": "projects/ui-common/src/lib/table-cell-types/table-cell-type-icon/table-cell-type-icon.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "IDataExporterFunction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ui-common/src/lib/data-exporter/data-exporter.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "IDataFilterFunction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "IDynamicDatatableCellType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"string\" | \"integer\" | \"decimal\" | \"date\" | \"icon\" | \"url\"",
                "file": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "IDynamicDatatableExporter",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"exporter:csv\" | \"exporter:xlsx\"",
                "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "IDynamicDatatableFooterMenuItemType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"button\" | \"text\"",
                "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "IOverlayScrollbarsConfig",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "OverlayScrollbars.Options",
                "file": "projects/ui-common/src/lib/scrollbar/overlay-scrollbars-config-model.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "ISearchFilterOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ITextFilterOptions",
                "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/search-filter-options.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "ISideNavItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ISideNavTitle | ISideNavDivider | ISideNavBasic | ISideNavLink | ISideNavButton",
                "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "MediaQueryAliases",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"lt-sm\" | \"lt-md\" | \"lt-lg\" | \"lt-xl\" | \"gt-xs\" | \"gt-sm\" | \"gt-md\" | \"gt-lg\"",
                "file": "projects/ui-common/src/lib/layout/breakpoint-aliases.ts",
                "description": "<table class=\"table table-bordered compodoc-table\">\n<thead>\n<tr>\n<th>breakpoint</th>\n<th>mediaQuery</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>xs</td>\n<td>&#39;screen and (max-width: 599px)&#39;</td>\n</tr>\n<tr>\n<td>sm</td>\n<td>&#39;screen and (min-width: 600px) and (max-width: 959px)&#39;</td>\n</tr>\n<tr>\n<td>md</td>\n<td>&#39;screen and (min-width: 960px) and (max-width: 1279px)&#39;</td>\n</tr>\n<tr>\n<td>lg</td>\n<td>&#39;screen and (min-width: 1280px) and (max-width: 1919px)&#39;</td>\n</tr>\n<tr>\n<td>xl</td>\n<td>&#39;screen and (min-width: 1920px) and (max-width: 5000px)&#39;</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>lt-sm</td>\n<td>&#39;screen and (max-width: 599px)&#39;</td>\n</tr>\n<tr>\n<td>lt-md</td>\n<td>&#39;screen and (max-width: 959px)&#39;</td>\n</tr>\n<tr>\n<td>lt-lg</td>\n<td>&#39;screen and (max-width: 1279px)&#39;</td>\n</tr>\n<tr>\n<td>lt-xl</td>\n<td>&#39;screen and (max-width: 1919px)&#39;</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>gt-xs</td>\n<td>&#39;screen and (min-width: 600px)&#39;</td>\n</tr>\n<tr>\n<td>gt-sm</td>\n<td>&#39;screen and (min-width: 960px)&#39;</td>\n</tr>\n<tr>\n<td>gt-md</td>\n<td>&#39;screen and (min-width: 1280px)&#39;</td>\n</tr>\n<tr>\n<td>gt-lg</td>\n<td>&#39;screen and (min-width: 1920px)&#39;</td>\n</tr>\n</tbody>\n</table>\n",
                "kind": 168
            },
            {
                "name": "PollingActionFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ui-common/src/lib/utils/polling-ticker.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "SeamIcon",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "IconProp | IconDefinition | string",
                "file": "projects/ui-common/src/lib/icon/icon.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "SizePrefixes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ui-common/src/lib/models/size-prefixes.ts",
                "description": "",
                "kind": 177
            },
            {
                "name": "SizeTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\" | \"dark\" | \"lightgray\" | \"lightblue\"",
                "file": "projects/ui-common/src/lib/models/size-types.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "TabsDirection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"horizontal\" | \"vertical\"",
                "file": "projects/ui-common/src/lib/tabbed/tabbed.service.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ThemePrefixes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"btn\" | \"text\" | \"bg\" | \"badge\" | \"list-group-item\"",
                "file": "projects/ui-common/src/lib/models/theme-prefixes.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ThemeTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\" | \"dark\" | \"lightgray\" | \"lightblue\"",
                "file": "projects/ui-common/src/lib/models/theme-types.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "TheSeamIconType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"borderless-styled-square\" | \"styled-square\" | \"image-fill\" | undefined",
                "file": "projects/ui-common/src/lib/icon/icon/icon.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "TheSeamLoadingTheme",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"primary\"",
                "file": "projects/ui-common/src/lib/loading/loading.models.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "TheSeamTableCellType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"date\" | \"icon\"",
                "file": "projects/ui-common/src/lib/table/table-column.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "TheSeamTableColumnExportValueFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ui-common/src/lib/table/table-column.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "TiledSelectLayout",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"grid\" | \"list\"",
                "file": "projects/ui-common/src/lib/tiled-select/tiled-select.models.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "TrackByFunction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ui-common/src/lib/table/table/table.component.ts",
                "description": "<p>An optional function passed into the <code>NgForOf</code> directive that defines how to track\nchanges for items in an iterable.\nThe function takes the iteration index and item ID.\nWhen supplied, Angular tracks changes by the return value of the function.</p>\n<p>NOTE: Can&#39;t import the type from&#39;@angular/core&#39;, because of a bug in angular-cli&#39;s\nbuild that can&#39;t find exported types that only exist at compile time if there\nare exports that exist at runtime in the same file.</p>\n",
                "kind": 162
            },
            {
                "name": "Writeable",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/ui-common/src/lib/widget/directives/widget-drag-handle.directive.ts",
                "description": "",
                "kind": 176
            }
        ],
        "enumerations": [
            {
                "name": "HttpStatus",
                "childs": [
                    {
                        "name": "Unauthorized",
                        "value": "401"
                    },
                    {
                        "name": "Forbidden",
                        "value": "403"
                    },
                    {
                        "name": "NotFound",
                        "value": "404"
                    },
                    {
                        "name": "RequestTimeout",
                        "value": "408"
                    },
                    {
                        "name": "UnprocessableEntity",
                        "value": "422"
                    },
                    {
                        "name": "InternalServerError",
                        "value": "500"
                    },
                    {
                        "name": "NotImplemented",
                        "value": "501"
                    },
                    {
                        "name": "BadGateway",
                        "value": "502"
                    },
                    {
                        "name": "ServiceUnavailable",
                        "value": "503"
                    },
                    {
                        "name": "GatewayTimeout",
                        "value": "502"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "<p>Most of the status code packages seemed to be incomplete, so instead of\nimporting a possibly incomplete package for the few status codes we currently\nwould need, just add them to them as necessary.</p>\n",
                "file": "projects/ui-common/src/lib/models/http-status-codes.ts"
            }
        ],
        "groupedVariables": {
            "projects/ui-common/src/lib/checkbox/checkbox.component.ts": [
                {
                    "name": "_MatCheckboxMixinBase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
                    "type": "",
                    "defaultValue": "mixinTabIndex(mixinDisabled(TheSeamCheckboxComponentBase))"
                },
                {
                    "name": "_uid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                },
                {
                    "name": "THESEAM_CHECKBOX_CONTROL_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line: no-use-before-declare\n  useExisting: forwardRef(() => TheSeamCheckboxComponent),\n  multi: true\n}"
                }
            ],
            "projects/ui-common/src/lib/scrollbar/overlay-scrollbars-config.ts": [
                {
                    "name": "_OverlayScrollbarDefaults",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/scrollbar/overlay-scrollbars-config.ts",
                    "type": "IOverlayScrollbarsConfig",
                    "defaultValue": "{\n  className: 'os-theme-dark os-theme-no-hover',\n  sizeAutoCapable: false,\n  paddingAbsolute: true,\n  autoUpdate: true\n}"
                },
                {
                    "name": "LIB_OVERLAY_SCROLLBARS_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/scrollbar/overlay-scrollbars-config.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<IOverlayScrollbarsConfig>('seamOverlayScrollbarsConfig')",
                    "description": "<p>Injection token that can be used to specify overlayscrollbars options. </p>\n"
                }
            ],
            "projects/ui-common/src/lib/menu/menu-item.component.ts": [
                {
                    "name": "_seamMenuItemMixinBase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/menu/menu-item.component.ts",
                    "type": "",
                    "defaultValue": "mixinDisabled(TheSeamMenuItemBase)"
                }
            ],
            "projects/ui-common/src/lib/datatable/datatable/datatable.component.ts": [
                {
                    "name": "_THESEAM_DATATABLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/datatable/datatable/datatable.component.ts",
                    "type": "any",
                    "defaultValue": "{\n  provide: THESEAM_DATATABLE,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DatatableComponent)\n}"
                },
                {
                    "name": "THESEAM_DATATABLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/datatable/datatable/datatable.component.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<IDataFilter>('LibDatatable')",
                    "description": "<p>Intended for internal classes declared by the <code>TheSeamDatatableModule</code>.</p>\n"
                }
            ],
            "projects/ui-common/src/lib/buttons/button/button.component.ts": [
                {
                    "name": "_TheSeamButtonMixinBase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/buttons/button/button.component.ts",
                    "type": "",
                    "defaultValue": "mixinSize(mixinTheme(mixinDisabled(TheSeamButtonBase), 'btn'), 'btn')"
                }
            ],
            "projects/ui-common/src/lib/framework/top-bar/top-bar-menu-button/top-bar-menu-button.component.ts": [
                {
                    "name": "_TopBarMenuButtonMixinBase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/top-bar/top-bar-menu-button/top-bar-menu-button.component.ts",
                    "type": "",
                    "defaultValue": "mixinDisabled(TopBarMenuButtonBase)"
                }
            ],
            "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts": [
                {
                    "name": "_uid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                },
                {
                    "name": "DATA_FILTER_TOGGLE_BUTTON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                    "type": "any",
                    "defaultValue": "{\n  provide: THESEAM_DATA_FILTER,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DataFilterToggleButtonsComponent),\n  multi: true,\n}"
                },
                {
                    "name": "DefaultToggleButtonsFilterOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                    "type": "IToggleButtonsFilterOptions",
                    "defaultValue": "{\n  properties: undefined,\n  omitProperties: undefined,\n  multiple: false,\n  selectionToggleable: false,\n  buttons: [],\n  exact: false,\n  caseSensitive: false\n}"
                }
            ],
            "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts": [
                {
                    "name": "_uid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                },
                {
                    "name": "DATA_FILTER_TEXT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts",
                    "type": "any",
                    "defaultValue": "{\n  provide: THESEAM_DATA_FILTER,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DataFilterTextComponent),\n  multi: true,\n}"
                },
                {
                    "name": "DefaultTextFilterOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts",
                    "type": "ITextFilterOptions",
                    "defaultValue": "{\n  properties: undefined,\n  omitProperties: undefined,\n  exact: false,\n  caseSensitive: false,\n}"
                }
            ],
            "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts": [
                {
                    "name": "_uid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                },
                {
                    "name": "DATA_FILTER_SEARCH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts",
                    "type": "any",
                    "defaultValue": "{\n  provide: THESEAM_DATA_FILTER,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => DataFilterSearchComponent),\n  multi: true,\n}"
                },
                {
                    "name": "DefaultSearchFilterOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts",
                    "type": "ISearchFilterOptions",
                    "defaultValue": "{\n  properties: undefined,\n  omitProperties: undefined,\n  exact: false,\n  caseSensitive: false\n}"
                }
            ],
            "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-router-outlet.component.ts": [
                {
                    "name": "_uid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-router-outlet.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/ui-common/src/lib/widget/widget-content-components/widget-header-badge/widget-header-badge.component.ts": [
                {
                    "name": "_WidgetHeaderBadgeMixinBase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-header-badge/widget-header-badge.component.ts",
                    "type": "",
                    "defaultValue": "mixinTheme(WidgetHeaderBadgeBase, 'badge')"
                }
            ],
            "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts": [
                {
                    "name": "_WidgetListGroupItemActionableBase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
                    "type": "",
                    "defaultValue": "mixinActive(mixinTheme(mixinDisabled(WidgetListGroupItemActionableBase), 'list-group-item'))"
                },
                {
                    "name": "_WidgetListGroupItemBase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
                    "type": "",
                    "defaultValue": "mixinActive(mixinTheme(mixinDisabled(WidgetListGroupItemBase), 'list-group-item'))"
                },
                {
                    "name": "WIDGET_LIST_GROUP_ITEM_INPUTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
                    "type": "[]",
                    "defaultValue": "[ 'disabled', 'theme', 'active', 'icon', 'iconClass', 'label' ]"
                }
            ],
            "projects/ui-common/src/lib/utils/file-utils.ts": [
                {
                    "name": "Buffer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/utils/file-utils.ts",
                    "type": "",
                    "defaultValue": "require('buffer/').Buffer"
                }
            ],
            "projects/ui-common/src/lib/table-cell-types/table-cell-types.module.ts": [
                {
                    "name": "cellTypeComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/table-cell-types/table-cell-types.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  TableCellTypeDateComponent,\n  TableCellTypeIconComponent\n]"
                },
                {
                    "name": "cellTypeProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/table-cell-types/table-cell-types.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  TABLE_CELL_TYPE_MANIFEST_DATE,\n  TABLE_CELL_TYPE_MANIFEST_ICON,\n  TABLE_CELL_TYPE_MANIFEST_IMAGE\n]"
                }
            ],
            "projects/ui-common/src/lib/checkbox/checkbox.stories.ts": [
                {
                    "name": "Checkbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `<seam-checkbox>Checkbox</seam-checkbox>`\n})"
                },
                {
                    "name": "InitiallyChecked",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `<seam-checkbox [checked]=\"true\">Initially checked.</seam-checkbox>`\n})"
                },
                {
                    "name": "InitiallyIndeterminate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `<seam-checkbox [indeterminate]=\"true\">Initially indeterminate.</seam-checkbox>`\n})"
                },
                {
                    "name": "InitiallyUnchecked",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  template: `<seam-checkbox [checked]=\"false\">Initially unchecked.</seam-checkbox>`\n})"
                }
            ],
            "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts": [
                {
                    "name": "COLLAPSED_OVERLAY_STATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                    "type": "string",
                    "defaultValue": "'collapsed-overlay'"
                },
                {
                    "name": "COLLAPSED_STATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                    "type": "string",
                    "defaultValue": "'collapsed'"
                },
                {
                    "name": "COLLAPSED_STATES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                    "type": "[]",
                    "defaultValue": "[ COLLAPSED_STATE, COLLAPSED_OVERLAY_STATE ]"
                },
                {
                    "name": "EXPAND_STATES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                    "type": "[]",
                    "defaultValue": "[ ...EXPANDED_STATES, ...COLLAPSED_STATES ]"
                },
                {
                    "name": "EXPANDED_OVERLAY_STATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                    "type": "string",
                    "defaultValue": "'expanded-overlay'"
                },
                {
                    "name": "EXPANDED_STATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                    "type": "string",
                    "defaultValue": "'expanded'"
                },
                {
                    "name": "EXPANDED_STATES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                    "type": "[]",
                    "defaultValue": "[ EXPANDED_STATE, EXPANDED_OVERLAY_STATE ]"
                }
            ],
            "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts": [
                {
                    "name": "COLLAPSED_STATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts",
                    "type": "string",
                    "defaultValue": "'collapsed'"
                },
                {
                    "name": "COMPACT_STATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts",
                    "type": "string",
                    "defaultValue": "'compact'"
                },
                {
                    "name": "EXPANDED_STATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts",
                    "type": "string",
                    "defaultValue": "'expanded'"
                },
                {
                    "name": "FULL_STATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts",
                    "type": "string",
                    "defaultValue": "'full'"
                }
            ],
            "projects/ui-common/src/lib/widget/widget.module.ts": [
                {
                    "name": "contentModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/widget/widget.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  TheSeamWidgetButtonGroupModule,\n  TheSeamWidgetContentHeaderModule,\n  TheSeamWidgetDescriptionModule,\n  TheSeamWidgetEmptyLabelModule,\n  TheSeamWidgetFooterLinkModule,\n  TheSeamWidgetFooterTextModule,\n  TheSeamWidgetHeaderBadgeModule,\n  TheSeamWidgetListGroupModule,\n  TheSeamWidgetTableModule,\n  TheSeamWidgetTileListModule,\n  TheSeamWidgetTileModule\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                }
            ],
            "projects/ui-common/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/test.ts",
                    "type": "any"
                }
            ],
            "projects/ui-common/src/lib/icon/utils/file-extension-icon.ts": [
                {
                    "name": "DEFAULT_FILE_EXTENSION_ICON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/icon/utils/file-extension-icon.ts",
                    "type": "",
                    "defaultValue": "faFile"
                },
                {
                    "name": "FILE_EXTENSION_ICONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/icon/utils/file-extension-icon.ts",
                    "type": "object",
                    "defaultValue": "{\n  'pdf': faFilePdf,\n  'doc': faFileWord,\n  'docx': faFileWord,\n  'xls': faFileExcel,\n  'xlsx': faFileExcel,\n  'gif': faFileImage,\n  'jpg': faFileImage,\n  'jpeg': faFileImage,\n  'png': faFileImage,\n  'zip': faFileArchive,\n  'ppt': faFilePowerpoint,\n  'pptx': faFilePowerpoint,\n  'txt': faFileAlt,\n  'json': faFileAlt\n}"
                }
            ],
            "projects/ui-common/src/lib/loading/loading-themes.ts": [
                {
                    "name": "defaultThemeConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/loading/loading-themes.ts",
                    "type": "NgxLoadingConfig",
                    "defaultValue": "{\n  animationType: ngxLoadingAnimationTypes.threeBounce,\n  backdropBackgroundColour: 'rgba(0,0,0,0.3)',\n  backdropBorderRadius: '0px',\n  primaryColour: '#ffffff',\n  secondaryColour: '#ffffff',\n  tertiaryColour: '#ffffff'\n}"
                },
                {
                    "name": "primaryThemeConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/loading/loading-themes.ts",
                    "type": "NgxLoadingConfig",
                    "defaultValue": "{\n  animationType: ngxLoadingAnimationTypes.threeBounce,\n  backdropBackgroundColour: 'rgba(250,250,250,0.2)',\n  backdropBorderRadius: '0px',\n  primaryColour: 'rgba(53,126,189,0.7)',\n  secondaryColour: 'rgba(53,126,189,0.7)',\n  tertiaryColour: 'rgba(53,126,189,0.7)'\n}"
                }
            ],
            "projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-tokens.ts": [
                {
                    "name": "DYNAMIC_COMPONENT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-tokens.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('DYNAMIC_COMPONENT')"
                },
                {
                    "name": "DYNAMIC_COMPONENT_MANIFESTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-tokens.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('DYNAMIC_COMPONENT_MANIFESTS')"
                },
                {
                    "name": "DYNAMIC_MODULE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-tokens.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('DYNAMIC_MODULE')"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "projects/ui-common/src/lib/datatable-dynamic/_story-data/dynamic-data-1.ts": [
                {
                    "name": "exampleData1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/datatable-dynamic/_story-data/dynamic-data-1.ts",
                    "type": "IDatatableDynamicDef",
                    "defaultValue": "{\n  filterMenu: {\n    state: 'always-visible',\n    filters: [\n      { name: 'search', type: 'full-search' },\n      { name: 'text', type: 'common' },\n      { name: 'search', type: 'common' },\n      {\n        name: 'toggle-buttons',\n        type: 'common',\n        options: {\n          buttons: [\n            { name: '30', value: '30' },\n            { name: '32', value: '32' }\n          ]\n        }\n      }\n    ],\n    exporters: [\n      'exporter:csv',\n      'exporter:xlsx'\n    ],\n  },\n  columns: [\n    { prop: 'icn', name: 'Icon', cellType: 'icon' },\n    { prop: 'firstName', name: 'First Name' },\n    { prop: 'lastName', name: 'Last Name' },\n    { prop: 'age', name: 'Age' },\n    { prop: 'sentDate', name: 'Sent Date', cellType: 'date' }\n  ],\n  rows: [\n    { icn: 'faEnvelope', firstName: 'User1', lastName: 'Last1', age: 28, sentDate: '2019-07-22T16:25:58.0266996+00:00' },\n    { icn: 'faEnvelope', firstName: 'User2', lastName: 'Last2', age: 30, sentDate: '2019-08-22T19:23:58.0266996+00:00' },\n    { icn: 'faEnvelope', firstName: 'User3', lastName: 'Last3', age: 32, sentDate: '' },\n    { icn: 'faEnvelope', firstName: 'User4', lastName: 'Last4', age: 34, sentDate: '2019-08-22T19:23:58.0266996+00:00' },\n  ],\n  rowActions: [\n    {\n      label: 'Link',\n      action: { type: 'link', link: 'details' }\n    },\n    {\n      label: 'Link External',\n      action: { type: 'link', link: 'https://bing.com', external: true },\n      isHiddenExpr: 'row.age > 30'\n    },\n    {\n      label: 'Link External Config',\n      action: { type: 'link', link: 'https://bing.com', external: true, confirmDialog: { 'message': 'Are you sure?' } },\n      isHiddenExpr: 'row.age > 30'\n    },\n    {\n      label: 'Api Endpoint',\n      action: {\n        type: 'api',\n        // endpoint: 'example/users',\n        endpointExpr: '\"example/users/\" + row.age',\n        method: 'POST',\n        bodyExpr: '{ thing: row.age }',\n        paramsExpr: '{ age: row.age, name: row.firstName + \" \" + row.lastName }'\n      },\n      isHiddenExpr: 'row.age > 30'\n    },\n    {\n      label: 'Modal',\n      action: { type: 'modal', component: 'story-ex-modal' }\n    }\n  ],\n  options: {\n    virtualization: true\n  }\n}"
                }
            ],
            "projects/ui-common/src/lib/datatable-dynamic/_story-data/dynamic-data-2.ts": [
                {
                    "name": "exampleData2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/datatable-dynamic/_story-data/dynamic-data-2.ts",
                    "type": "IDatatableDynamicDef",
                    "defaultValue": "{\n  filterMenu: {\n    state: 'always-visible',\n    filters: [\n      { name: 'search', type: 'full-search' },\n      {\n        name: 'toggle-buttons',\n        type: 'common',\n        options: {\n          buttons: [\n            { name: '30', value: '30' },\n            { name: '32', value: '32' }\n          ]\n        }\n      }\n    ],\n    exporters: [\n      'exporter:csv',\n      'exporter:xlsx'\n    ],\n  },\n  columns: [\n    { prop: 'firstName', name: 'First Name' },\n    { prop: 'lastName', name: 'Last Name' },\n    { prop: 'age', name: 'Age' },\n    { prop: 'sentDate', name: 'Sent Date', cellType: 'date' }\n  ],\n  rows: [\n    { firstName: 'User1', lastName: 'Last1', age: 28, sentDate: '2019-07-22T16:25:58.0266996+00:00' },\n    { firstName: 'User2', lastName: 'Last2', age: 30, sentDate: '2019-04-22T12:15:58.0266996+00:00' },\n    { firstName: 'User3', lastName: 'Last3', age: 32, sentDate: '2019-08-22T19:23:58.0266996+00:00' },\n  ],\n  rowActions: [\n    {\n      label: 'View Detail',\n      action: {\n        type: 'link',\n        link: 'details'\n      }\n    }\n  ],\n  options: {\n    virtualization: true\n  }\n}"
                }
            ],
            "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts": [
                {
                    "name": "fader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                    "type": "",
                    "defaultValue": "trigger('routeAnimations', [\n    transition('* <=> *', [\n      // Set a default  style for enter and leave\n      query(':enter, :leave', [\n        style({\n          position: 'absolute',\n          left: 0,\n          width: '100%',\n          opacity: 0,\n          transform: 'scale(0) translateY(100%)',\n        }),\n      ], { optional: true }),\n      // Animate the new page in\n      query(':enter', [\n        animate('600ms ease', style({ opacity: 1, transform: 'scale(1) translateY(0)' })),\n      ], { optional: true })\n    ]),\n  ])"
                },
                {
                    "name": "sideToSide",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                    "type": "",
                    "defaultValue": "trigger('routeAnimations', [\n  transition('* => *', [\n    style({\n      position: 'fixed',\n      width: '100%',\n      transform: 'translateX(-100%)'\n    }),\n    animate('1000ms ease', style({ transform: 'translateX(0%)' }))\n  ]),\n  transition(':leave', [\n    style({\n      position: 'fixed',\n      width: '100%',\n      transform: 'translateX(0%)'\n    }),\n    animate('1000ms ease', style({ transform: 'translateX(-100%)' }))\n  ])\n])"
                },
                {
                    "name": "slider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                    "type": "",
                    "defaultValue": "trigger('routeAnimations', [\n    transition('* => isLeft', [\n      query('.router-container :enter, .router-container :leave', [\n        style({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ], { optional: true }),\n      query('.router-container :enter', [\n        style({ left: '-100%'})\n      ], { optional: true }),\n      query('.hierarchy-router-outlet--content', [\n        style({ left: '0%', position: 'absolute' })\n      ], { optional: true }),\n      group([\n        query('.router-container :leave', [\n          animate('1000ms ease', style({ left: '100%'}))\n        ], { optional: true }),\n        query('.router-container :enter', [\n          animate('1000ms ease', style({ left: '0%'}))\n        ], { optional: true }),\n        query('.hierarchy-router-outlet--content', [\n          animate('1000ms ease', style({ left: '-100%'}))\n        ], { optional: true }),\n      ]),\n      // Normalize the page style... Might not be necessary\n\n      // Required only if you have child animations on the page\n      query('.router-container :leave', animateChild(), { optional: true }),\n      query('.router-container :enter', animateChild(), { optional: true }),\n    ]),\n    transition('* => isRight', [\n      query('.router-container :enter, .router-container :leave', [\n        style({\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          width: '100%'\n        })\n      ], { optional: true }),\n      query('.router-container :enter', [\n        style({ right: '-100%'})\n      ], { optional: true }),\n      query('.hierarchy-router-outlet--content', [\n        style({ left: '0%', position: 'absolute' })\n      ], { optional: true }),\n      group([\n        query('.router-container :leave', [\n          animate('1000ms ease', style({ right: '100%'}))\n        ], { optional: true }),\n        query('.router-container :enter', [\n          animate('1000ms ease', style({ right: '0%'}))\n        ], { optional: true }),\n        query('.hierarchy-router-outlet--content', [\n          animate('1000ms ease', style({ left: '-100%'}))\n        ], { optional: true }),\n      ]),\n      // Normalize the page style... Might not be necessary\n\n      // Required only if you have child animations on the page\n      query('.router-container :leave', animateChild(), { optional: true }),\n      query('.router-container :enter', animateChild(), { optional: true }),\n    ]),\n    transition('isRight => *', [\n      query('.router-container :enter, .router-container :leave', [\n        style({\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ], { optional: true }),\n      query('.router-container :enter', [\n        style({ left: '-100%'})\n      ], { optional: true }),\n      query('.hierarchy-router-outlet--content', [\n        style({ left: '0%', position: 'absolute' })\n      ], { optional: true }),\n      group([\n        query('.router-container :leave', [\n          animate('1000ms ease', style({ left: '100%'}))\n        ], { optional: true }),\n        query('.router-container :enter', [\n          animate('1000ms ease', style({ left: '0%'}))\n        ], { optional: true }),\n        query('.hierarchy-router-outlet--content', [\n          animate('1000ms ease', style({ left: '-100%'}))\n        ], { optional: true }),\n      ]),\n      // Normalize the page style... Might not be necessary\n\n      // Required only if you have child animations on the page\n      query('.router-container :leave', animateChild(), { optional: true }),\n      query('.router-container :enter', animateChild(), { optional: true }),\n    ]),\n    transition('isLeft => *', [\n      query('.router-container :enter, .router-container :leave', [\n        style({\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          width: '100%'\n        })\n      ], { optional: true }),\n      query('.router-container :enter', [\n        style({ right: '-100%'})\n      ], { optional: true }),\n      group([\n        query('.router-container :leave', [\n          animate('1000ms ease', style({ right: '100%'}))\n        ], { optional: true }),\n        query('.router-container :enter', [\n          animate('1000ms ease', style({ right: '0%'}))\n        ], { optional: true })\n      ]),\n      // Normalize the page style... Might not be necessary\n\n      // Required only if you have child animations on the page\n      query('.router-container :leave', animateChild(), { optional: true }),\n      query('.router-container :enter', animateChild(), { optional: true }),\n    ])\n  ])"
                },
                {
                    "name": "stepper",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                    "type": "",
                    "defaultValue": "trigger('routeAnimations', [\n    transition('* <=> *', [\n      query(':enter, :leave', [\n        style({\n          position: 'absolute',\n          left: 0,\n          width: '100%',\n        }),\n      ], { optional: true }),\n      group([\n        query(':enter', [\n          animate('2000ms ease', keyframes([\n            style({ transform: 'scale(0) translateX(100%)', offset: 0 }),\n            style({ transform: 'scale(0.5) translateX(25%)', offset: 0.3 }),\n            style({ transform: 'scale(1) translateX(0%)', offset: 1 }),\n          ])),\n        ], { optional: true }),\n        query(':leave', [\n          animate('2000ms ease', keyframes([\n            style({ transform: 'scale(1)', offset: 0 }),\n            style({ transform: 'scale(0.5) translateX(-25%) rotate(0)', offset: 0.35 }),\n            style({ opacity: 0, transform: 'translateX(-50%) rotate(-180deg) scale(6)', offset: 1 }),\n          ])),\n        ], { optional: true })\n      ]),\n    ])\n  ])"
                },
                {
                    "name": "transformer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                    "type": "",
                    "defaultValue": "trigger('routeAnimations', [\n    transition('* => isLeft', transformTo({ x: -100, y: -100, rotate: -720 }) ),\n    transition('* => isRight', transformTo({ x: 100, y: -100, rotate: 90 }) ),\n    transition('isRight => *', transformTo({ x: -100, y: -100, rotate: 360 }) ),\n    transition('isLeft => *', transformTo({ x: 100, y: -100, rotate: -360 }) )\n])"
                }
            ],
            "projects/ui-common/src/lib/data-filters/data-filters.module.ts": [
                {
                    "name": "filterComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-filters/data-filters.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  DataFilterSearchComponent,\n  DataFilterTextComponent,\n  DataFilterToggleButtonsComponent\n]"
                },
                {
                    "name": "filterDefProviders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-filters/data-filters.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  { provide: THESEAM_DATA_FILTER_DEF, useValue: { name: 'search', component: DataFilterSearchComponent }, multi: true },\n  { provide: THESEAM_DATA_FILTER_DEF, useValue: { name: 'text', component: DataFilterTextComponent }, multi: true },\n  { provide: THESEAM_DATA_FILTER_DEF, useValue: { name: 'toggle-buttons', component: DataFilterToggleButtonsComponent }, multi: true },\n]"
                }
            ],
            "projects/ui-common/src/lib/widget/widget-content-components/widget-table/widget-table.stories.ts": [
                {
                    "name": "GIN_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/widget/widget-content-components/widget-table/widget-table.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    \"ginCode\": \"12345\",\n    \"name\": \"Gin 1\",\n    \"city\": \"SELMA\",\n    \"state\": \"AL\",\n    \"stateCode\": 1,\n    \"countyCode\": 1,\n    \"zipCode\": \"00000\",\n    \"isRegistered\": false\n  },\n  {\n    \"ginCode\": \"12346\",\n    \"name\": \"Gin 2\",\n    \"city\": \"WELCH\",\n    \"state\": \"TX\",\n    \"stateCode\": 48,\n    \"countyCode\": 115,\n    \"zipCode\": \"00000\",\n    \"isRegistered\": false\n  },\n  {\n    \"ginCode\": \"12347\",\n    \"name\": \"Gin 3\",\n    \"city\": \"LAMESA\",\n    \"state\": \"TX\",\n    \"stateCode\": 48,\n    \"countyCode\": 115,\n    \"zipCode\": \"00000\",\n    \"isRegistered\": false\n  },\n  {\n    \"ginCode\": \"12348\",\n    \"name\": \"Gin 4\",\n    \"city\": \"WELCH\",\n    \"state\": \"TX\",\n    \"stateCode\": 48,\n    \"countyCode\": 115,\n    \"zipCode\": \"00000\",\n    \"isRegistered\": false\n  },\n  {\n    \"ginCode\": \"12349\",\n    \"name\": \"Gin 5\",\n    \"city\": \"RIO HONDO\",\n    \"state\": \"TX\",\n    \"stateCode\": 48,\n    \"countyCode\": 61,\n    \"zipCode\": \"00000\",\n    \"isRegistered\": false\n  },\n  {\n    \"ginCode\": \"12350\",\n    \"name\": \"Gin 6\",\n    \"city\": \"RIO HONDO\",\n    \"state\": \"TX\",\n    \"stateCode\": 48,\n    \"countyCode\": 61,\n    \"zipCode\": \"00000\",\n    \"isRegistered\": false\n  },\n  {\n    \"ginCode\": \"12351\",\n    \"name\": \"Gin 7\",\n    \"city\": \"LAMESA\",\n    \"state\": \"TX\",\n    \"stateCode\": 48,\n    \"countyCode\": 115,\n    \"zipCode\": \"00000\",\n    \"isRegistered\": false\n  }\n]"
                }
            ],
            "projects/ui-common/src/lib/table/table/table.stories.ts": [
                {
                    "name": "GIN_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/table/table/table.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    \"ginCode\": \"12345\",\n    \"name\": \"Gin 1\",\n    \"icon\": faEnvelope\n  },\n  {\n    \"ginCode\": \"12346\",\n    \"name\": \"Gin 2\",\n    \"icon\": faEnvelope\n  },\n  {\n    \"ginCode\": \"12347\",\n    \"name\": \"Gin 3\",\n    \"icon\": faEnvelope\n  },\n  {\n    \"ginCode\": \"12348\",\n    \"name\": \"Gin 4\",\n    \"icon\": faEnvelope\n  },\n  {\n    \"ginCode\": \"12349\",\n    \"name\": \"Gin 5\",\n    \"icon\": faEnvelope\n  },\n  {\n    \"ginCode\": \"12350\",\n    \"name\": \"Gin 6\",\n    \"icon\": faEnvelope\n  },\n  {\n    \"ginCode\": \"12351\",\n    \"name\": \"Gin 7\",\n    \"icon\": faEnvelope\n  }\n]"
                }
            ],
            "projects/ui-common/src/lib/utils/is-absolute-url.ts": [
                {
                    "name": "IS_ABSOLUTE_URL_REGEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/utils/is-absolute-url.ts",
                    "type": "",
                    "defaultValue": "new RegExp('^(?:[a-z]+:)?//', 'i')",
                    "description": "<p>Explaination:\n  ^       - beginning of the string\n  (?:     - beginning of a non-captured group\n  [a-z]+  - any character of &#39;a&#39; to &#39;z&#39; 1 or more times\n  :       - string (colon character)\n  )?      - end of the non-captured group. Group appearing 0 or 1 times\n  //      - string (two forward slash characters)\n  &#39;i&#39;     - non case-sensitive flag</p>\n<p>source: <a href=\"https://stackoverflow.com/a/19709846\">https://stackoverflow.com/a/19709846</a></p>\n"
                }
            ],
            "projects/ui-common/src/lib/icon/utils/get-known-icon.ts": [
                {
                    "name": "knownIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/icon/utils/get-known-icon.ts",
                    "type": "object",
                    "defaultValue": "{\n  'faAddressCard': faAddressCard,\n  'faBan': faBan,\n  'faBell': faBell,\n  'faBookmark': faBookmark,\n  'faChartLine': faChartLine,\n  'faChartArea': faChartArea,\n  'faChartBar': faChartBar,\n  'faCheck': faCheck,\n  'faCheckCircle': faCheckCircle,\n  'faClock': faClock,\n  'faCloudUploadAlt': faCloudUploadAlt,\n  'faComment': faComment,\n  'faCog': faCog,\n  'faEdit': faEdit,\n  'faEnvelope': faEnvelope,\n  'faEnvelopeOpen': faEnvelopeOpen,\n  'faExclamation': faExclamation,\n  'faExclamationCircle': faExclamationCircle,\n  'faExclamationTriangle': faExclamationTriangle,\n  'faExternalLinkSquareAlt': faExternalLinkSquareAlt,\n  'faFile': faFile,\n  'faFileAlt': faFileAlt,\n  'faFileArchive': faFileArchive,\n  'faFileAudio': faFileAudio,\n  'faFileCode': faFileCode,\n  'faFileContract': faFileContract,\n  'faFileCsv': faFileCsv,\n  'faFileDownload': faFileDownload,\n  'faFileExcel': faFileExcel,\n  'faFileExport': faFileExport,\n  'faFileImage': faFileImage,\n  'faFileImport': faFileImport,\n  'faFileInvoice': faFileInvoice,\n  'faFileInvoiceDollar': faFileInvoiceDollar,\n  'faFileMedical': faFileMedical,\n  'faFileMedicalAlt': faFileMedicalAlt,\n  'faFilePdf': faFilePdf,\n  'faFilePowerpoint': faFilePowerpoint,\n  'faFilePrescription': faFilePrescription,\n  'faFileSignature': faFileSignature,\n  'faFileUpload': faFileUpload,\n  'faFileVideo': faFileVideo,\n  'faFileWord': faFileWord,\n  'faFolder': faFolder,\n  'faFolderOpen': faFolderOpen,\n  'faImage': faImage,\n  'faImages': faImages,\n  'faInbox': faInbox,\n  'faInfoCircle': faInfoCircle,\n  'faLock': faLock,\n  'faLockOpen': faLockOpen,\n  'faPrint': faPrint,\n  'faQuestionCircle': faQuestionCircle,\n  'faReceipt': faReceipt,\n  'faReply': faReply,\n  'faSave': faSave,\n  'faShare': faShare,\n  'faSignature': faSignature,\n  'faStickyNote': faStickyNote,\n  'faTimes': faTimes,\n  'faTimesCircle': faTimesCircle,\n  'faTrash': faTrash,\n  'faTrashAlt': faTrashAlt,\n  'faUser': faUser,\n  'faUserCheck': faUserCheck,\n  'faUserCircle': faUserCircle,\n  'faUserEdit': faUserEdit,\n  'faUserTimes': faUserTimes,\n  'faUsers': faUsers,\n  'faUserPlus': faUserPlus\n}"
                }
            ],
            "projects/ui-common/src/lib/menu/menu.component.ts": [
                {
                    "name": "LIB_MENU",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/menu/menu.component.ts",
                    "type": "any",
                    "defaultValue": "{\n  provide: THESEAM_MENU_PANEL,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => MenuComponent)\n}"
                }
            ],
            "projects/ui-common/src/lib/modal/modal/modal.component.ts": [
                {
                    "name": "LIB_MODAL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/modal/modal/modal.component.ts",
                    "type": "any",
                    "defaultValue": "{\n  provide: THESEAM_MODAL_CONTAINER,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => ModalComponent),\n  multi: true,\n}"
                }
            ],
            "projects/ui-common/src/lib/modal/modal-config.ts": [
                {
                    "name": "LIB_MODAL_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/modal/modal-config.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<ModalConfig>('seamModalConfig')",
                    "description": "<p>Injection token that can be used to specify modal options. </p>\n"
                }
            ],
            "projects/ui-common/src/lib/loading/loading.module.ts": [
                {
                    "name": "loadingForRoot",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/loading/loading.module.ts",
                    "type": "",
                    "defaultValue": "NgxLoadingModule.forRoot(defaultThemeConfig)"
                }
            ],
            "projects/ui-common/src/lib/services/local-storage.service.ts": [
                {
                    "name": "localStorage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/services/local-storage.service.ts",
                    "type": "Storage",
                    "defaultValue": "'localStorage' in window && window.localStorage != null ? window.localStorage : localStorageMemory"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "manifests",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "type": "IDynamicComponentManifest[]",
                    "defaultValue": "[\n  {\n    componentId: 'widget-one',\n    path: 'widget-one',\n    loadChildren: () => import('./example-lazy-loaded-widgets/lazy-widget-one/lazy-widget-one.module').then(m => m.LazyWidgetOneModule)\n  }\n]"
                }
            ],
            "src/app/example-lazy-loaded-widgets/example-lazy-loaded-widgets.module.ts": [
                {
                    "name": "manifests",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/example-lazy-loaded-widgets/example-lazy-loaded-widgets.module.ts",
                    "type": "IDynamicComponentManifest[]",
                    "defaultValue": "[\n  {\n    componentId: 'widget-one',\n    path: 'widget-one',\n    loadChildren: () => import('./lazy-widget-one/lazy-widget-one.module').then(m => m.LazyWidgetOneModule)\n  }\n]"
                }
            ],
            "projects/ui-common/src/lib/layout/observe-media-query.ts": [
                {
                    "name": "mediaQueriesMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/layout/observe-media-query.ts",
                    "type": "object",
                    "defaultValue": "{\n  'xs'   : 'screen and (max-width: 599px)',\n  'sm'   : 'screen and (min-width: 600px) and (max-width: 959px)',\n  'md'   : 'screen and (min-width: 960px) and (max-width: 1279px)',\n  'lg'   : 'screen and (min-width: 1280px) and (max-width: 1919px)',\n  'xl'   : 'screen and (min-width: 1920px) and (max-width: 5000px)',\n  'lt-sm': 'screen and (max-width: 599px)',\n  'lt-md': 'screen and (max-width: 959px)',\n  'lt-lg': 'screen and (max-width: 1279px)',\n  'lt-xl': 'screen and (max-width: 1919px)',\n  'gt-xs': 'screen and (min-width: 600px)',\n  'gt-sm': 'screen and (min-width: 960px)',\n  'gt-md': 'screen and (min-width: 1280px)',\n  'gt-lg': 'screen and (min-width: 1920px)'\n}"
                }
            ],
            "projects/ui-common/src/lib/menu/menu-animations.ts": [
                {
                    "name": "menuDropdownPanelExpandIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/menu/menu-animations.ts",
                    "type": "",
                    "defaultValue": "animation([\n  style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  }),\n  group([\n    animate('100ms linear', style({ opacity: 1 })),\n    animate('120ms ease', style({ transform: 'scale(1)' })),\n  ])\n])"
                },
                {
                    "name": "menuDropdownPanelExpandOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/menu/menu-animations.ts",
                    "type": "",
                    "defaultValue": "animation([\n  style({\n    opacity: 1,\n    transform: 'scale(1)'\n  }),\n  group([\n    animate('100ms linear', style({ opacity: 0 })),\n    animate('120ms ease', style({ transform: 'scale(0.8)' })),\n  ])\n])"
                },
                {
                    "name": "menuDropdownPanelSlideIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/menu/menu-animations.ts",
                    "type": "",
                    "defaultValue": "animation([\n  query('.dropdown-menu', [\n    style({\n      opacity: 0,\n      transform: 'translateY(-70%)'\n    }),\n    group([\n      animate('170ms linear', style({ opacity: 1 })),\n      animate('220ms ease', style({ transform: 'translateY(0)' })),\n    ])\n  ])\n])"
                },
                {
                    "name": "menuDropdownPanelSlideOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/menu/menu-animations.ts",
                    "type": "",
                    "defaultValue": "animation([\n  query('.dropdown-menu', [\n    style({\n      opacity: 1,\n      transform: 'translateY(0)'\n    }),\n    group([\n      animate('170ms linear', style({ opacity: 0 })),\n      animate('220ms ease', style({ transform: 'translateY(-70%)' })),\n    ])\n  ])\n])"
                }
            ],
            "projects/ui-common/src/lib/modal/modal-injectors.ts": [
                {
                    "name": "MODAL_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<ModalConfig>('ModalConfig')",
                    "description": "<p>Injection token for the DialogConfig. </p>\n"
                },
                {
                    "name": "MODAL_CONTAINER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<ComponentType<ModalContainerComponent>>('ModalContainer')",
                    "description": "<p>Injection token for the Dialog&#39;s DialogContainer component. </p>\n"
                },
                {
                    "name": "MODAL_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('ModalData')",
                    "description": "<p>Injection token for the Dialog&#39;s Data. </p>\n"
                },
                {
                    "name": "MODAL_REF",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<ModalRef<any>>('ModalRef')",
                    "description": "<p>Injection token for the DialogRef constructor. </p>\n"
                },
                {
                    "name": "MODAL_SCROLL_STRATEGY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<() => ScrollStrategy>('ModalScrollStrategy')",
                    "description": "<p>Injection token for the Dialog&#39;s ScrollStrategy. </p>\n"
                },
                {
                    "name": "THESEAM_MODAL_SCROLL_STRATEGY_PROVIDER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                    "type": "object",
                    "defaultValue": "{\n  provide: MODAL_SCROLL_STRATEGY,\n  deps: [ Overlay ],\n  useFactory: THESEAM_MODAL_SCROLL_STRATEGY_PROVIDER_FACTORY,\n}"
                }
            ],
            "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts": [
                {
                    "name": "navItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
                    "type": "ISideNavItem[]",
                    "defaultValue": "[\n  {\n    itemType: 'link',\n    label: 'Example 1',\n    icon: faSignature,\n    link: 'example1',\n  },\n  {\n    itemType: 'link',\n    label: 'Example 2',\n    icon: faBuilding,\n    link: 'example2',\n    children: [\n      {\n        itemType: 'link',\n        label: 'Example 1.1',\n        icon: faSignature,\n        link: 'example2/example1.1',\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.2',\n        icon: faBuilding,\n        link: 'example2/example1.2'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.3',\n        link: 'example2/example1.3'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.4',\n        // link: 'example2/example1.4'\n      }\n    ]\n  },\n  {\n    itemType: 'basic',\n    label: 'Example 3',\n    icon: faBook,\n    children: [\n      {\n        itemType: 'link',\n        label: 'Example 1.1',\n        icon: faSignature,\n        link: 'example3/example1.1',\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.2',\n        icon: faBuilding,\n        link: 'example3/example1.2'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.3',\n        link: 'example3/example1.3'\n      },\n      {\n        itemType: 'link',\n        label: 'Example 1.4',\n        // link: 'example3/example1.4'\n      }\n    ]\n  },\n  {\n    itemType: 'link',\n    label: 'Example 4',\n    link: 'example4'\n  },\n  {\n    itemType: 'link',\n    label: 'Example 5',\n    // link: 'example5'\n  }\n]"
                },
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
                    "type": "Route[]",
                    "defaultValue": "[\n  {\n    path: '',\n    data: { breadcrumb: 'Dashboard' },\n    children: [\n      { path: 'example1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1' } },\n      {\n        path: 'example2',\n        component: StoryRoutePlacholderComponent,\n        data: { breadcrumb: 'example2' },\n        children: [\n          { path: 'example1.1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.1' } },\n          { path: 'example1.2', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.2' } },\n          { path: 'example1.3', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.3' } },\n          { path: 'example1.4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.4' } }\n        ]\n      },\n      {\n        path: 'example3',\n        component: StoryRoutePlacholderComponent,\n        data: { breadcrumb: 'example3' },\n        children: [\n          { path: 'example1.1', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.1' } },\n          { path: 'example1.2', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.2' } },\n          { path: 'example1.3', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.3' } },\n          { path: 'example1.4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example1.4' } }\n        ]\n      },\n      { path: 'example4', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example4' } },\n      { path: 'example5', component: StoryRoutePlacholderComponent, data: { breadcrumb: 'example5' } }\n    ]\n  }\n]"
                }
            ],
            "projects/ui-common/src/lib/icon/icon/icon.component.ts": [
                {
                    "name": "needToFix",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/icon/icon/icon.component.ts",
                    "type": "",
                    "defaultValue": "/(MSIE 10)|(Trident.*rv:11\\.0)|( Edge\\/[\\d\\.]+$)/.test(navigator.userAgent)"
                }
            ],
            "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile-icon/tiled-select-tile-icon.component.ts": [
                {
                    "name": "needToFix",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile-icon/tiled-select-tile-icon.component.ts",
                    "type": "",
                    "defaultValue": "/(MSIE 10)|(Trident.*rv:11\\.0)|( Edge\\/[\\d\\.]+$)/.test(navigator.userAgent)"
                }
            ],
            "projects/ui-common/src/lib/form-field/form-field.component.ts": [
                {
                    "name": "nextLabelUniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/form-field/form-field.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/ui-common/src/lib/form-field/input.directive.ts": [
                {
                    "name": "nextUniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/form-field/input.directive.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/ui-common/src/lib/menu/menu-toggle.directive.ts": [
                {
                    "name": "passiveEventListenerOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/menu/menu-toggle.directive.ts",
                    "type": "",
                    "defaultValue": "normalizePassiveListenerOptions({passive: true})",
                    "description": "<p>Options for binding a passive event listener. </p>\n"
                }
            ],
            "projects/ui-common/src/lib/viewers/pdf-viewer/pdf-page/pdf-page.component.ts": [
                {
                    "name": "pdfjsLib",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/viewers/pdf-viewer/pdf-page/pdf-page.component.ts",
                    "type": "",
                    "defaultValue": "require('pdfjs-dist/build/pdf')"
                }
            ],
            "projects/ui-common/src/lib/viewers/pdf-viewer/pdf-viewer.component.ts": [
                {
                    "name": "pdfjsLib",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/viewers/pdf-viewer/pdf-viewer.component.ts",
                    "type": "",
                    "defaultValue": "require('pdfjs-dist/build/pdf')"
                }
            ],
            "projects/ui-common/src/lib/utils/input-masks.ts": [
                {
                    "name": "phoneNumberMask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/utils/input-masks.ts",
                    "type": "[]",
                    "defaultValue": "['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]"
                }
            ],
            "projects/ui-common/src/lib/icon/icon-notification/icon-notification.component.ts": [
                {
                    "name": "pulseAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/icon/icon-notification/icon-notification.component.ts",
                    "type": "",
                    "defaultValue": "animation([\n  style({ transform: 'scale(1)' }),\n  animate(\n    '{{ timings }}',\n    keyframes([\n      style({ transform: 'scale(1)', offset: 0 }),\n      style({ transform: 'scale({{ scale }})', offset: 0.5 }),\n      style({ transform: 'scale(1)', offset: 1 })\n    ])\n  )\n])"
                }
            ],
            "projects/ui-common/src/lib/framework/dynamic-router/stories/example-route-defs-1.ts": [
                {
                    "name": "routeDefs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/dynamic-router/stories/example-route-defs-1.ts",
                    "type": "IDynamicRouteDef[]",
                    "defaultValue": "[\n  {\n    path: 'profile',\n    component: 'name-ex-1',\n    data: {\n      name: 'Mark'\n    }\n  }\n]"
                }
            ],
            "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.stories.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  // {\n  //   path: 'story-ex-modal',\n  //   loadChildren: () => ExampleModalModule,\n  //   outlet: 'modal'\n  // }\n]"
                }
            ],
            "projects/ui-common/src/lib/tiled-select/components/tiled-select/tiled-select.component.ts": [
                {
                    "name": "slideEnterAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select/tiled-select.component.ts",
                    "type": "",
                    "defaultValue": "animation([\n  style({ opacity: 0, transform: 'translateX(-15px)' }),\n  stagger(100, [\n    animate('0.5s', style({ opacity: 1, transform: 'translateX(0)' }))\n  ])\n])"
                },
                {
                    "name": "TILED_SELECT_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select/tiled-select.component.ts",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => TiledSelectComponent),\n  multi: true,\n}"
                }
            ],
            "projects/ui-common/src/lib/story-helpers/initial-route.service.ts": [
                {
                    "name": "STORY_INITIAL_ROUTE_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/story-helpers/initial-route.service.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('STORY_INITIAL_ROUTE_URL')"
                }
            ],
            "projects/ui-common/src/lib/story-helpers/initial-route-service.ts": [
                {
                    "name": "STORY_INITIAL_ROUTE_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/story-helpers/initial-route-service.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>('STORY_INITIAL_ROUTE_URL')"
                }
            ],
            "projects/ui-common/src/stories/mdx/components/doc-alert.tsx": [
                {
                    "name": "StyledDiv",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/stories/mdx/components/doc-alert.tsx",
                    "type": "",
                    "defaultValue": "styled.div({\n  'borderRadius': '0',\n  'borderLeftWidth': '5px !important'\n})"
                }
            ],
            "projects/ui-common/src/lib/table/table-cell-tokens.ts": [
                {
                    "name": "TABLE_CELL_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/table/table-cell-tokens.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<ITableCellData>('TABLE_CELL_DATA')"
                }
            ],
            "projects/ui-common/src/lib/table-cell-types/table-cell-types-tokens.ts": [
                {
                    "name": "TABLE_CELL_TYPE_MANIFEST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/table-cell-types/table-cell-types-tokens.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<ITableCellTypeManifest>('TABLE_CELL_TYPE_MANIFEST')"
                }
            ],
            "projects/ui-common/src/lib/table-cell-types/table-cell-type-manifests.ts": [
                {
                    "name": "TABLE_CELL_TYPE_MANIFEST_DATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/table-cell-types/table-cell-type-manifests.ts",
                    "type": "ITableCellTypeManifestProvider",
                    "defaultValue": "{\n  provide: TABLE_CELL_TYPE_MANIFEST,\n  useValue: {\n    name: 'date',\n    component: TableCellTypeDateComponent\n  },\n  multi: true\n}"
                },
                {
                    "name": "TABLE_CELL_TYPE_MANIFEST_ICON",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/table-cell-types/table-cell-type-manifests.ts",
                    "type": "ITableCellTypeManifestProvider",
                    "defaultValue": "{\n  provide: TABLE_CELL_TYPE_MANIFEST,\n  useValue: {\n    name: 'icon',\n    component: TableCellTypeIconComponent\n  },\n  multi: true\n}"
                },
                {
                    "name": "TABLE_CELL_TYPE_MANIFEST_IMAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/table-cell-types/table-cell-type-manifests.ts",
                    "type": "ITableCellTypeManifestProvider",
                    "defaultValue": "{\n  provide: TABLE_CELL_TYPE_MANIFEST,\n  useValue: {\n    name: 'image',\n    component: TableCellTypeIconComponent\n  },\n  multi: true\n}"
                }
            ],
            "projects/ui-common/src/lib/framework/base-layout/base-layout.component.ts": [
                {
                    "name": "THE_SEAM_BASE_LAYOUT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/base-layout/base-layout.component.ts",
                    "type": "any",
                    "defaultValue": "{\n  provide: THESEAM_BASE_LAYOUT_REF,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => TheSeamBaseLayoutComponent),\n  multi: false,\n}"
                }
            ],
            "projects/ui-common/src/lib/models/theme-names.ts": [
                {
                    "name": "ThemeNames",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/models/theme-names.ts",
                    "type": "string[]",
                    "defaultValue": "[\n  'default',\n  'primary',\n  'secondary',\n  'success',\n  'danger',\n  'warning',\n  'info',\n  'light',\n  'dark',\n  'lightgray',\n  'lightblue'\n]"
                }
            ],
            "projects/ui-common/src/lib/framework/base-layout/base-layout-tokens.ts": [
                {
                    "name": "THESEAM_BASE_LAYOUT_REF",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/framework/base-layout/base-layout-tokens.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<ITheSeamBaseLayoutRef>('seamBaseLayoutRef')"
                }
            ],
            "projects/ui-common/src/lib/data-exporter/data-exporter.ts": [
                {
                    "name": "THESEAM_DATA_EXPORTER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-exporter/data-exporter.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<IDataExporter>('TheSeamDataExporter')"
                }
            ],
            "projects/ui-common/src/lib/data-filters/data-filter.ts": [
                {
                    "name": "THESEAM_DATA_FILTER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<IDataFilter>('TheSeamDataFilter')"
                },
                {
                    "name": "THESEAM_DATA_FILTER_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<{}>('TheSeamDataFilterOptions')"
                }
            ],
            "projects/ui-common/src/lib/data-filters/data-filter-def.ts": [
                {
                    "name": "THESEAM_DATA_FILTER_DEF",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/data-filters/data-filter-def.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<IDataFilterDef[]>('TheSeamDataFilter')"
                }
            ],
            "projects/ui-common/src/lib/menu/menu-panel-token.ts": [
                {
                    "name": "THESEAM_MENU_PANEL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/menu/menu-panel-token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<ITheSeamMenuPanel>('THESEAM_MENU_PANEL')",
                    "description": "<p>Injection token used to provide the parent menu to menu-specific components.</p>\n"
                }
            ],
            "projects/ui-common/src/lib/modal/modal.models.ts": [
                {
                    "name": "THESEAM_MODAL_CONTAINER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/modal/modal.models.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<IModalContainer>('seamModalContainer')"
                }
            ],
            "projects/ui-common/src/lib/widget/widget-token.ts": [
                {
                    "name": "THESEAM_WIDGETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/widget/widget-token.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<IWidgetRegistryRecord>('TheSeamWidgets')"
                }
            ],
            "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile/tiled-select-tile.component.ts": [
                {
                    "name": "tilePulse",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile/tiled-select-tile.component.ts",
                    "type": "",
                    "defaultValue": "animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({ transform: 'scale3d(1, 1, 1)' }),\n      style({ transform: 'scale3d({{ scale }}, {{ scale }}, {{ scale }})' }),\n      style({ transform: 'scale3d(1, 1, 1)' }),\n    ])\n  ),\n  { params: { scale: 1.05, timing: 0.75, delay: 0 } }\n)"
                },
                {
                    "name": "tileScaleDown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile/tiled-select-tile.component.ts",
                    "type": "",
                    "defaultValue": "animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({ transform: 'scale3d(1, 1, 1)' }),\n    ])\n  ),\n  { params: { scale: 1.05, timing: 0.75, delay: 0 } }\n)"
                },
                {
                    "name": "tileScaleUp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile/tiled-select-tile.component.ts",
                    "type": "",
                    "defaultValue": "animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({ transform: 'scale3d({{ scale }}, {{ scale }}, {{ scale }})' }),\n    ])\n  ),\n  { params: { scale: 1.05, timing: 0.75, delay: 0 } }\n)"
                }
            ],
            "projects/ui-common/src/lib/buttons/toggle-button/toggle-button.component.ts": [
                {
                    "name": "TOGGLE_BUTTON_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/buttons/toggle-button/toggle-button.component.ts",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => ToggleButtonComponent),\n  multi: true,\n}"
                }
            ],
            "projects/ui-common/src/lib/toggle-group/toggle-group.directive.ts": [
                {
                    "name": "TOGGLE_GROUP_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/toggle-group/toggle-group.directive.ts",
                    "type": "any",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  // tslint:disable-next-line:no-use-before-declare\n  useExisting: forwardRef(() => ToggleGroupDirective),\n  multi: true,\n}"
                }
            ],
            "projects/ui-common/src/lib/modal/modal-ref.ts": [
                {
                    "name": "uniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ui-common/src/lib/modal/modal-ref.ts",
                    "type": "number",
                    "defaultValue": "0",
                    "description": "<p>Unique id for the created dialog. </p>\n"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ui-common/src/lib/utils/storybook-knobs-hack.ts": [
                {
                    "name": "_knobUndefinedNullHACK",
                    "file": "projects/ui-common/src/lib/utils/storybook-knobs-hack.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Hack for storybook knobs to allow <code>undefined</code> and <code>null</code> in <code>select</code>.</p>\n<p>NOTE: This feature is being worked on, so this hack shouldn&#39;t be needed long.</p>\n",
                    "args": [
                        {
                            "name": "v",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "v",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/router/operators/activatedRoutesWithDataProperty.ts": [
                {
                    "name": "activatedRoutesWithDataProperty",
                    "file": "projects/ui-common/src/lib/utils/router/operators/activatedRoutesWithDataProperty.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "prop"
                        },
                        {
                            "name": "mustHaveDefined",
                            "type": "boolean"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "prop",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mustHaveDefined",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasRouteConfigDataProp",
                    "file": "projects/ui-common/src/lib/utils/router/operators/activatedRoutesWithDataProperty.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "route"
                        },
                        {
                            "name": "prop"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prop",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasRouteConfigResolveProp",
                    "file": "projects/ui-common/src/lib/utils/router/operators/activatedRoutesWithDataProperty.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "route"
                        },
                        {
                            "name": "prop"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prop",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/progress/progress-circle/progress-circle.component.ts": [
                {
                    "name": "calcDashoffset",
                    "file": "projects/ui-common/src/lib/progress/progress-circle/progress-circle.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value"
                        },
                        {
                            "name": "circumference"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "circumference",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcPercentage",
                    "file": "projects/ui-common/src/lib/progress/progress-circle/progress-circle.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "total"
                        },
                        {
                            "name": "n"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "total",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "n",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/data-filters/data-filter.ts": [
                {
                    "name": "composeDataFilters",
                    "file": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "filters"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterOperator",
                    "file": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "filterFn"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "filterFn",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/obj-utils.ts": [
                {
                    "name": "deleteProperties",
                    "file": "projects/ui-common/src/lib/utils/obj-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Delete properties of object </p>\n",
                    "args": [
                        {
                            "name": "obj"
                        },
                        {
                            "name": "propNames"
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propNames",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProperty",
                    "file": "projects/ui-common/src/lib/utils/obj-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Delete property of object </p>\n",
                    "args": [
                        {
                            "name": "obj"
                        },
                        {
                            "name": "propName"
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propName",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "withoutProperties",
                    "file": "projects/ui-common/src/lib/utils/obj-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Returns object without properties </p>\n",
                    "args": [
                        {
                            "name": "obj"
                        },
                        {
                            "name": "propNames"
                        }
                    ],
                    "returnType": "Pick<T, Exclude<T, K>>",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propNames",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "withoutProperty",
                    "file": "projects/ui-common/src/lib/utils/obj-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Returns object without property </p>\n",
                    "args": [
                        {
                            "name": "obj"
                        },
                        {
                            "name": "propName"
                        }
                    ],
                    "returnType": "Pick<T, Exclude<T, K>>",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propName",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/validators/email-exists.validator.ts": [
                {
                    "name": "emailExistsValidator",
                    "file": "projects/ui-common/src/lib/validators/email-exists.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Validates that an email already exists.</p>\n",
                    "args": [
                        {
                            "name": "emailExists"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "emailExists",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/data-exporter/data-exporter.ts": [
                {
                    "name": "exportOperator",
                    "file": "projects/ui-common/src/lib/data-exporter/data-exporter.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "exportFn"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "exportFn",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/widget/directives/widget-drag-handle.directive.ts": [
                {
                    "name": "extendStyles",
                    "file": "projects/ui-common/src/lib/widget/directives/widget-drag-handle.directive.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "dest"
                        },
                        {
                            "name": "source"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "dest",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "source",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleNativeDragInteractions",
                    "file": "projects/ui-common/src/lib/widget/directives/widget-drag-handle.directive.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "element"
                        },
                        {
                            "name": "enable",
                            "type": "boolean"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enable",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/file-utils.ts": [
                {
                    "name": "fileBufferToBlob",
                    "file": "projects/ui-common/src/lib/utils/file-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "fileBuffer"
                        },
                        {
                            "name": "defaultMime"
                        }
                    ],
                    "returnType": "Promise<Blob>",
                    "jsdoctags": [
                        {
                            "name": "fileBuffer",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultMime",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fileBufferToObjectUrl",
                    "file": "projects/ui-common/src/lib/utils/file-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "fileBuffer"
                        },
                        {
                            "name": "defaultMime"
                        }
                    ],
                    "returnType": "Promise<string>",
                    "jsdoctags": [
                        {
                            "name": "fileBuffer",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultMime",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fileDataFromBuffer",
                    "file": "projects/ui-common/src/lib/utils/file-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "fileBuffer"
                        },
                        {
                            "name": "defaultMime"
                        }
                    ],
                    "returnType": "Promise<IFileData>",
                    "jsdoctags": [
                        {
                            "name": "fileBuffer",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultMime",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openBlob",
                    "file": "projects/ui-common/src/lib/utils/file-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "blob"
                        },
                        {
                            "name": "target",
                            "optional": true
                        },
                        {
                            "name": "filename",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "blob",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filename",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readFileAsDataUrlAsync",
                    "file": "projects/ui-common/src/lib/utils/file-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "file"
                        }
                    ],
                    "returnType": "Promise<string | null>",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readFileAsync",
                    "file": "projects/ui-common/src/lib/utils/file-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "file",
                            "type": "any"
                        }
                    ],
                    "returnType": "Promise<ArrayBuffer | null>",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/icon/utils/file-extension-icon.ts": [
                {
                    "name": "fileExtensionIcon",
                    "file": "projects/ui-common/src/lib/icon/utils/file-extension-icon.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "extension"
                        },
                        {
                            "name": "defaultIfNotFound",
                            "type": "boolean"
                        }
                    ],
                    "returnType": "SeamIcon | undefined",
                    "jsdoctags": [
                        {
                            "name": "extension",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultIfNotFound",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/modal/modal-utils.ts": [
                {
                    "name": "getClosestModal",
                    "file": "projects/ui-common/src/lib/modal/modal-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Finds the closest MatDialogRef to an element by looking at the DOM.</p>\n",
                    "args": [
                        {
                            "name": "element"
                        },
                        {
                            "name": "openDialogs"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 168,
                                "end": 175,
                                "flags": 0,
                                "escapedText": "element"
                            },
                            "tagName": {
                                "pos": 162,
                                "end": 167,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Element relative to which to look for a dialog.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 234,
                                "end": 245,
                                "flags": 0,
                                "escapedText": "openDialogs"
                            },
                            "tagName": {
                                "pos": 228,
                                "end": 233,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>References to the currently-open dialogs.</p>\n"
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/form-utils.ts": [
                {
                    "name": "getControlName",
                    "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "c"
                        }
                    ],
                    "returnType": "string | null",
                    "jsdoctags": [
                        {
                            "name": "c",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getControlPath",
                    "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "c"
                        },
                        {
                            "name": "path"
                        }
                    ],
                    "returnType": "string | null",
                    "jsdoctags": [
                        {
                            "name": "c",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "observeControlIsDifferent",
                    "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Observe the changed state of the input value from the time this function is\ncalled.</p>\n<p>When this function is called the value is stored. Each time the control&#39;s\nvalue changes the value is compared with the initial value. Currenly the\nvalues are compared as stringified objects using <code>JSON.stringify</code>.</p>\n<p>TODO: Allow the value compare implementation to be optionally changed.</p>\n",
                    "args": [
                        {
                            "name": "control"
                        }
                    ],
                    "returnType": "Observable<boolean>",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "observeControlStatus",
                    "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Observe the status of a control using a work around for status not changing\nafter pending.</p>\n",
                    "args": [
                        {
                            "name": "control"
                        }
                    ],
                    "returnType": "Observable<string>",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "observeControlValid",
                    "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Observe the valid state of a control.</p>\n<p>By default <code>waitOnPending</code> is false and the control states map to:\n  &#39;VALID&#39; =&gt; true\n  &#39;INVALID&#39; =&gt; false\n  &#39;PENDING&#39; =&gt; false</p>\n<p>If <code>waitOnPending</code> is true the valid result when &#39;PENDING&#39; remains the same\n  as it was before &#39;PENDING&#39; until it is no longer &#39;PENDING&#39;.</p>\n",
                    "args": [
                        {
                            "name": "control"
                        },
                        {
                            "name": "waitOnPending",
                            "type": "boolean"
                        }
                    ],
                    "returnType": "Observable<boolean>",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "waitOnPending",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "observeControlValue",
                    "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Observe the value of a control.</p>\n",
                    "args": [
                        {
                            "name": "control"
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "observeControlValueChange",
                    "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Observe the value of a control with the previous.</p>\n",
                    "args": [
                        {
                            "name": "control"
                        }
                    ],
                    "returnType": "Observable<literal type>",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "waitOnNonPendingStatus",
                    "file": "projects/ui-common/src/lib/utils/form-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Wait on the status of a form control to not be <code>&#39;PENDING&#39;</code>.</p>\n<p>NOTE: This function is mainly just a work around for an issue where\n  <code>statusChanges</code> sometimes emits <code>&#39;Pending&#39;</code> without emitting another state\n  when complete. Seems to happen with async validators if the value changes\n  before completing, even if the validator completes(subscription <code>complete</code>\n  if observable).</p>\n",
                    "args": [
                        {
                            "name": "control"
                        }
                    ],
                    "returnType": "Observable<string>",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/icon/utils/get-known-icon.ts": [
                {
                    "name": "getKnownIcon",
                    "file": "projects/ui-common/src/lib/icon/utils/get-known-icon.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "iconStr"
                        }
                    ],
                    "returnType": "SeamIcon | undefined",
                    "jsdoctags": [
                        {
                            "name": "iconStr",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/is-absolute-url.ts": [
                {
                    "name": "isAbsoluteUrl",
                    "file": "projects/ui-common/src/lib/utils/is-absolute-url.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "url"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/layout/observe-media-query.ts": [
                {
                    "name": "isMediaQueryActive",
                    "file": "projects/ui-common/src/lib/layout/observe-media-query.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>TODO: Find out if the MediaObserver can return an immediate result on load\naccurately like the native matchMedia. If not switch to another that can or\njust implement it myself. I would rather use a well tested library for\nsomething like that, since it could have a lot of affect on performance.</p>\n",
                    "args": [
                        {
                            "name": "query"
                        },
                        {
                            "name": "fallback"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fallback",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "observeMediaQuery",
                    "file": "projects/ui-common/src/lib/layout/observe-media-query.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Observable helper for observing a single breakpoint alias with\n<code>@angular/flex-layout</code> MediaObserver.</p>\n",
                    "args": [
                        {
                            "name": "mediaObserver"
                        },
                        {
                            "name": "alias"
                        }
                    ],
                    "returnType": "Observable<boolean>",
                    "jsdoctags": [
                        {
                            "name": "mediaObserver",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "alias",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/is-null-or-undefined.ts": [
                {
                    "name": "isNullOrUndefined",
                    "file": "projects/ui-common/src/lib/utils/is-null-or-undefined.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.component.ts": [
                {
                    "name": "jexlObservable",
                    "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "expression"
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "returnType": "Observable<R>",
                    "jsdoctags": [
                        {
                            "name": "expression",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/router/leafChildRoute.ts": [
                {
                    "name": "leafChildRoute",
                    "file": "projects/ui-common/src/lib/utils/router/leafChildRoute.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "activatedRoute"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "activatedRoute",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/operators/map-each.ts": [
                {
                    "name": "mapEach",
                    "file": "projects/ui-common/src/lib/utils/operators/map-each.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "predicate"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "predicate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/modal/modal-config.ts": [
                {
                    "name": "mergeModalConfigs",
                    "file": "projects/ui-common/src/lib/modal/modal-config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "a"
                        },
                        {
                            "name": "b"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/scrollbar/overlay-scrollbars-config.ts": [
                {
                    "name": "mergeOverlayScrollbarsConfigs",
                    "file": "projects/ui-common/src/lib/scrollbar/overlay-scrollbars-config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "a"
                        },
                        {
                            "name": "b"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "a",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/core/common-behaviors/active.ts": [
                {
                    "name": "mixinActive",
                    "file": "projects/ui-common/src/lib/core/common-behaviors/active.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Mixin to augment a directive with a <code>disabled</code> property. </p>\n",
                    "args": [
                        {
                            "name": "base"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "base",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/core/common-behaviors/disabled.ts": [
                {
                    "name": "mixinDisabled",
                    "file": "projects/ui-common/src/lib/core/common-behaviors/disabled.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Mixin to augment a directive with a <code>disabled</code> property. </p>\n",
                    "args": [
                        {
                            "name": "base"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "base",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/core/common-behaviors/initialized.ts": [
                {
                    "name": "mixinInitialized",
                    "file": "projects/ui-common/src/lib/core/common-behaviors/initialized.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. </p>\n",
                    "args": [
                        {
                            "name": "base"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "base",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/core/common-behaviors/size.ts": [
                {
                    "name": "mixinSize",
                    "file": "projects/ui-common/src/lib/core/common-behaviors/size.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Mixin to augment a directive with a <code>size</code> property. </p>\n",
                    "args": [
                        {
                            "name": "base"
                        },
                        {
                            "name": "sizePrefix"
                        },
                        {
                            "name": "defaultSize",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "base",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sizePrefix",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultSize",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/core/common-behaviors/tabindex.ts": [
                {
                    "name": "mixinTabIndex",
                    "file": "projects/ui-common/src/lib/core/common-behaviors/tabindex.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Mixin to augment a directive with a <code>tabIndex</code> property. </p>\n",
                    "args": [
                        {
                            "name": "base"
                        },
                        {
                            "name": "defaultTabIndex",
                            "type": "number"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "base",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultTabIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/core/common-behaviors/theme.ts": [
                {
                    "name": "mixinTheme",
                    "file": "projects/ui-common/src/lib/core/common-behaviors/theme.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Mixin to augment a directive with a <code>theme</code> property. </p>\n",
                    "args": [
                        {
                            "name": "base"
                        },
                        {
                            "name": "themePrefix"
                        },
                        {
                            "name": "defaultTheme",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "base",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "themePrefix",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultTheme",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/not-null-or-undefined.ts": [
                {
                    "name": "notNullOrUndefined",
                    "file": "projects/ui-common/src/lib/utils/not-null-or-undefined.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value"
                        }
                    ],
                    "returnType": "T",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/validators/phone-length.validator.ts": [
                {
                    "name": "phoneLengthValidator",
                    "file": "projects/ui-common/src/lib/validators/phone-length.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Validates that a value is a valid phone number length.</p>\n",
                    "args": [
                        {
                            "name": "control"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/polling-ticker.ts": [
                {
                    "name": "pollingTicker",
                    "file": "projects/ui-common/src/lib/utils/polling-ticker.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Call an action and emits the result to its subscriber on an interval or when\nticker emits. When the ticker emits, the interval time will reset.</p>\n<p>When subscribed to, the action will be called and emitted right away unless\nthe <code>emitOnInit</code> option is set to false.</p>\n",
                    "args": [
                        {
                            "name": "action"
                        },
                        {
                            "name": "pollingInterval",
                            "optional": true
                        },
                        {
                            "name": "ticker",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "optional": true
                        }
                    ],
                    "returnType": "Observable<R>",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pollingInterval",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ticker",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/story-helpers/route-button.ts": [
                {
                    "name": "routeButton",
                    "file": "projects/ui-common/src/lib/story-helpers/route-button.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Until I find a way to avoid &#39;@storybook/addon-knobs&#39; from interfering with\nNgZone I can&#39;t import it in the knob when built by ng-packagr.</p>\n",
                    "args": [
                        {
                            "name": "buttonKnob",
                            "type": "any"
                        },
                        {
                            "name": "url"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "buttonKnob",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "url",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-router-outlet.component.ts": [
                {
                    "name": "routeChanges",
                    "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-router-outlet.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "router"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "router",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/router/route-snapshot-path-full.ts": [
                {
                    "name": "routeSnapshotPathFull",
                    "file": "projects/ui-common/src/lib/utils/router/route-snapshot-path-full.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "route"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/router/route-snapshot-path-relative.ts": [
                {
                    "name": "routeSnapshotPathRelative",
                    "file": "projects/ui-common/src/lib/utils/router/route-snapshot-path-relative.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "route"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts": [
                {
                    "name": "searchDataFilter",
                    "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data"
                        },
                        {
                            "name": "values"
                        },
                        {
                            "name": "options",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts": [
                {
                    "name": "sideNavExpandStateChangeFn",
                    "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "fromState"
                        },
                        {
                            "name": "toState"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "fromState",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toState",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/story-helpers/initial-route-factory.ts": [
                {
                    "name": "storyInitialRouteFactory",
                    "file": "projects/ui-common/src/lib/story-helpers/initial-route-factory.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "_storyInitialRouteService"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "_storyInitialRouteService",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/story-helpers/initial-route-service.ts": [
                {
                    "name": "storyInitialRouteFactory",
                    "file": "projects/ui-common/src/lib/story-helpers/initial-route-service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "_storyInitialRouteService"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "_storyInitialRouteService",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/subscriber-count.ts": [
                {
                    "name": "subscriberCount",
                    "file": "projects/ui-common/src/lib/utils/subscriber-count.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>This is just for helping debug observables that aren&#39;t being unsubscribed\nfrom correctly.</p>\n",
                    "args": [
                        {
                            "name": "sourceObservable"
                        },
                        {
                            "name": "description"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "sourceObservable",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/operators/tap-first.ts": [
                {
                    "name": "tapFirst",
                    "file": "projects/ui-common/src/lib/utils/operators/tap-first.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Like tap, but only calls predicate on first emission.</p>\n",
                    "args": [
                        {
                            "name": "predicate"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "predicate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/validators/tax-id.validator.ts": [
                {
                    "name": "taxIdValidator",
                    "file": "projects/ui-common/src/lib/validators/tax-id.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Validates that value matches on of the following:\n  &#39;&#39;             // empty string\n  &#39;xxxxxxxxx&#39;    // &#39;x&#39; is a number\n  &#39;xx-xxxxxxx&#39;   // &#39;x&#39; is a number\n  &#39;xxx-xx-xxxx&#39;  // &#39;x&#39; is a number</p>\n",
                    "args": [
                        {
                            "name": "control"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts": [
                {
                    "name": "textDataFilter",
                    "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data"
                        },
                        {
                            "name": "text"
                        },
                        {
                            "name": "options",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "text",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/modal/modal-injectors.ts": [
                {
                    "name": "THESEAM_MODAL_SCROLL_STRATEGY_PROVIDER_FACTORY",
                    "file": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "overlay"
                        }
                    ],
                    "returnType": "ScrollStrategy",
                    "jsdoctags": [
                        {
                            "name": "overlay",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/modal/modal-container/modal-container.component.ts": [
                {
                    "name": "throwDialogContentAlreadyAttachedError",
                    "file": "projects/ui-common/src/lib/modal/modal-container/modal-container.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": []
                }
            ],
            "projects/ui-common/src/lib/utils/dom-utils.ts": [
                {
                    "name": "toggleAttribute",
                    "file": "projects/ui-common/src/lib/utils/dom-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Source: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute#Polyfill\">https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute#Polyfill</a></p>\n",
                    "args": [
                        {
                            "name": "element",
                            "type": ""
                        },
                        {
                            "name": "name",
                            "type": ""
                        },
                        {
                            "name": "force",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "force",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts": [
                {
                    "name": "toggleButtonsFilter",
                    "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "data"
                        },
                        {
                            "name": "values"
                        },
                        {
                            "name": "options",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts": [
                {
                    "name": "transformTo",
                    "file": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/wait-on-condition-async.ts": [
                {
                    "name": "waitOnConditionAsync",
                    "file": "projects/ui-common/src/lib/utils/wait-on-condition-async.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "condition"
                        },
                        {
                            "name": "timeoutDuration"
                        },
                        {
                            "name": "throwOnTimeout",
                            "type": "boolean"
                        }
                    ],
                    "returnType": "Promise<any>",
                    "jsdoctags": [
                        {
                            "name": "condition",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeoutDuration",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "throwOnTimeout",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ui-common/src/lib/utils/wrap-into-observable.ts": [
                {
                    "name": "wrapIntoObservable",
                    "file": "projects/ui-common/src/lib/utils/wrap-into-observable.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value"
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/ui-common/src/lib/models/http-status-codes.ts": [
                {
                    "name": "HttpStatus",
                    "childs": [
                        {
                            "name": "Unauthorized",
                            "value": "401"
                        },
                        {
                            "name": "Forbidden",
                            "value": "403"
                        },
                        {
                            "name": "NotFound",
                            "value": "404"
                        },
                        {
                            "name": "RequestTimeout",
                            "value": "408"
                        },
                        {
                            "name": "UnprocessableEntity",
                            "value": "422"
                        },
                        {
                            "name": "InternalServerError",
                            "value": "500"
                        },
                        {
                            "name": "NotImplemented",
                            "value": "501"
                        },
                        {
                            "name": "BadGateway",
                            "value": "502"
                        },
                        {
                            "name": "ServiceUnavailable",
                            "value": "503"
                        },
                        {
                            "name": "GatewayTimeout",
                            "value": "502"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "<p>Most of the status code packages seemed to be incomplete, so instead of\nimporting a possibly incomplete package for the few status codes we currently\nwould need, just add them to them as necessary.</p>\n",
                    "file": "projects/ui-common/src/lib/models/http-status-codes.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/ui-common/src/lib/datatable/datatable-column/datatable-column.component.ts": [
                {
                    "name": "_PipeTransform",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "PipeTransform | PipeTransform",
                    "file": "projects/ui-common/src/lib/datatable/datatable-column/datatable-column.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/shared/directives/hover-class.directive.ts": [
                {
                    "name": "_PointerEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "PointerEvent | PointerEvent",
                    "file": "projects/ui-common/src/lib/shared/directives/hover-class.directive.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/shared/directives/hover-class-toggle.directive.ts": [
                {
                    "name": "_PointerEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "PointerEvent | PointerEvent",
                    "file": "projects/ui-common/src/lib/shared/directives/hover-class-toggle.directive.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/table-cell-types/table-cell-types-models.ts": [
                {
                    "name": "CalculatedValueContextFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ui-common/src/lib/table-cell-types/table-cell-types-models.ts",
                    "description": "",
                    "kind": 162
                },
                {
                    "name": "CaluclatedValueContextType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ICalucatedValueContext | CalculatedValueContextFn",
                    "file": "projects/ui-common/src/lib/table-cell-types/table-cell-types-models.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/core/common-behaviors/active.ts": [
                {
                    "name": "CanBeActiveCtor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Constructor<CanBeActive>",
                    "file": "projects/ui-common/src/lib/core/common-behaviors/active.ts",
                    "description": "",
                    "kind": 161
                }
            ],
            "projects/ui-common/src/lib/core/common-behaviors/disabled.ts": [
                {
                    "name": "CanDisableCtor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Constructor<CanDisable>",
                    "file": "projects/ui-common/src/lib/core/common-behaviors/disabled.ts",
                    "description": "",
                    "kind": 161
                }
            ],
            "projects/ui-common/src/lib/core/common-behaviors/size.ts": [
                {
                    "name": "CanSizeCtor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Constructor<CanSize>",
                    "file": "projects/ui-common/src/lib/core/common-behaviors/size.ts",
                    "description": "",
                    "kind": 161
                }
            ],
            "projects/ui-common/src/lib/core/common-behaviors/theme.ts": [
                {
                    "name": "CanThemeCtor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Constructor<CanTheme>",
                    "file": "projects/ui-common/src/lib/core/common-behaviors/theme.ts",
                    "description": "",
                    "kind": 161
                }
            ],
            "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-filter-container/datatable-dynamic-filter-container.component.ts": [
                {
                    "name": "ComponentType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-filter-container/datatable-dynamic-filter-container.component.ts",
                    "description": "<p>Interface that can be used to generically type a class. </p>\n",
                    "kind": 163
                }
            ],
            "projects/ui-common/src/lib/core/common-behaviors/constructor.ts": [
                {
                    "name": "Constructor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ui-common/src/lib/core/common-behaviors/constructor.ts",
                    "description": "",
                    "kind": 163
                }
            ],
            "projects/ui-common/src/lib/modal/modal-config.ts": [
                {
                    "name": "DialogRole",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"dialog\" | \"alertdialog\"",
                    "file": "projects/ui-common/src/lib/modal/modal-config.ts",
                    "description": "<p>Valid ARIA roles for a dialog element. </p>\n",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts": [
                {
                    "name": "DynamicDatatableCellTypeConfigIconAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "DynamicDatatableCellActionLink | DynamicDatatableCellActionModal",
                    "file": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts": [
                {
                    "name": "DynamicDatatableRowActionType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "DynamicDatatableRowActionLink | DynamicDatatableRowActionApi | DynamicDatatableRowActionModal",
                    "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "IDynamicDatatableExporter",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"exporter:csv\" | \"exporter:xlsx\"",
                    "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "IDynamicDatatableFooterMenuItemType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"button\" | \"text\"",
                    "file": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/core/common-behaviors/initialized.ts": [
                {
                    "name": "HasInitializedCtor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Constructor<HasInitialized>",
                    "file": "projects/ui-common/src/lib/core/common-behaviors/initialized.ts",
                    "description": "",
                    "kind": 161
                }
            ],
            "projects/ui-common/src/lib/core/common-behaviors/tabindex.ts": [
                {
                    "name": "HasTabIndexCtor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Constructor<HasTabIndex>",
                    "file": "projects/ui-common/src/lib/core/common-behaviors/tabindex.ts",
                    "description": "",
                    "kind": 161
                }
            ],
            "projects/ui-common/src/lib/table-cell-types/table-cell-type-icon/table-cell-type-icon.component.ts": [
                {
                    "name": "IconTemplateType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"link\" | \"link-external\" | \"link-encrypted\" | \"button\"",
                    "file": "projects/ui-common/src/lib/table-cell-types/table-cell-type-icon/table-cell-type-icon.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/data-exporter/data-exporter.ts": [
                {
                    "name": "IDataExporterFunction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ui-common/src/lib/data-exporter/data-exporter.ts",
                    "description": "",
                    "kind": 162
                }
            ],
            "projects/ui-common/src/lib/data-filters/data-filter.ts": [
                {
                    "name": "IDataFilterFunction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                    "description": "",
                    "kind": 162
                }
            ],
            "projects/ui-common/src/lib/datatable-dynamic/models/cell-type.ts": [
                {
                    "name": "IDynamicDatatableCellType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"string\" | \"integer\" | \"decimal\" | \"date\" | \"icon\" | \"url\"",
                    "file": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/scrollbar/overlay-scrollbars-config-model.ts": [
                {
                    "name": "IOverlayScrollbarsConfig",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "OverlayScrollbars.Options",
                    "file": "projects/ui-common/src/lib/scrollbar/overlay-scrollbars-config-model.ts",
                    "description": "",
                    "kind": 161
                }
            ],
            "projects/ui-common/src/lib/data-filters/filters/data-filter-search/search-filter-options.ts": [
                {
                    "name": "ISearchFilterOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ITextFilterOptions",
                    "file": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/search-filter-options.ts",
                    "description": "",
                    "kind": 161
                }
            ],
            "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts": [
                {
                    "name": "ISideNavItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ISideNavTitle | ISideNavDivider | ISideNavBasic | ISideNavLink | ISideNavButton",
                    "file": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/layout/breakpoint-aliases.ts": [
                {
                    "name": "MediaQueryAliases",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"lt-sm\" | \"lt-md\" | \"lt-lg\" | \"lt-xl\" | \"gt-xs\" | \"gt-sm\" | \"gt-md\" | \"gt-lg\"",
                    "file": "projects/ui-common/src/lib/layout/breakpoint-aliases.ts",
                    "description": "<table class=\"table table-bordered compodoc-table\">\n<thead>\n<tr>\n<th>breakpoint</th>\n<th>mediaQuery</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>xs</td>\n<td>&#39;screen and (max-width: 599px)&#39;</td>\n</tr>\n<tr>\n<td>sm</td>\n<td>&#39;screen and (min-width: 600px) and (max-width: 959px)&#39;</td>\n</tr>\n<tr>\n<td>md</td>\n<td>&#39;screen and (min-width: 960px) and (max-width: 1279px)&#39;</td>\n</tr>\n<tr>\n<td>lg</td>\n<td>&#39;screen and (min-width: 1280px) and (max-width: 1919px)&#39;</td>\n</tr>\n<tr>\n<td>xl</td>\n<td>&#39;screen and (min-width: 1920px) and (max-width: 5000px)&#39;</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>lt-sm</td>\n<td>&#39;screen and (max-width: 599px)&#39;</td>\n</tr>\n<tr>\n<td>lt-md</td>\n<td>&#39;screen and (max-width: 959px)&#39;</td>\n</tr>\n<tr>\n<td>lt-lg</td>\n<td>&#39;screen and (max-width: 1279px)&#39;</td>\n</tr>\n<tr>\n<td>lt-xl</td>\n<td>&#39;screen and (max-width: 1919px)&#39;</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>gt-xs</td>\n<td>&#39;screen and (min-width: 600px)&#39;</td>\n</tr>\n<tr>\n<td>gt-sm</td>\n<td>&#39;screen and (min-width: 960px)&#39;</td>\n</tr>\n<tr>\n<td>gt-md</td>\n<td>&#39;screen and (min-width: 1280px)&#39;</td>\n</tr>\n<tr>\n<td>gt-lg</td>\n<td>&#39;screen and (min-width: 1920px)&#39;</td>\n</tr>\n</tbody>\n</table>\n",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/utils/polling-ticker.ts": [
                {
                    "name": "PollingActionFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ui-common/src/lib/utils/polling-ticker.ts",
                    "description": "",
                    "kind": 162
                }
            ],
            "projects/ui-common/src/lib/icon/icon.ts": [
                {
                    "name": "SeamIcon",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "IconProp | IconDefinition | string",
                    "file": "projects/ui-common/src/lib/icon/icon.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/models/size-prefixes.ts": [
                {
                    "name": "SizePrefixes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ui-common/src/lib/models/size-prefixes.ts",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/ui-common/src/lib/models/size-types.ts": [
                {
                    "name": "SizeTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\" | \"dark\" | \"lightgray\" | \"lightblue\"",
                    "file": "projects/ui-common/src/lib/models/size-types.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/tabbed/tabbed.service.ts": [
                {
                    "name": "TabsDirection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"horizontal\" | \"vertical\"",
                    "file": "projects/ui-common/src/lib/tabbed/tabbed.service.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/models/theme-prefixes.ts": [
                {
                    "name": "ThemePrefixes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"btn\" | \"text\" | \"bg\" | \"badge\" | \"list-group-item\"",
                    "file": "projects/ui-common/src/lib/models/theme-prefixes.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/models/theme-types.ts": [
                {
                    "name": "ThemeTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"primary\" | \"secondary\" | \"success\" | \"danger\" | \"warning\" | \"info\" | \"light\" | \"dark\" | \"lightgray\" | \"lightblue\"",
                    "file": "projects/ui-common/src/lib/models/theme-types.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/icon/icon/icon.component.ts": [
                {
                    "name": "TheSeamIconType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"borderless-styled-square\" | \"styled-square\" | \"image-fill\" | undefined",
                    "file": "projects/ui-common/src/lib/icon/icon/icon.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/loading/loading.models.ts": [
                {
                    "name": "TheSeamLoadingTheme",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"primary\"",
                    "file": "projects/ui-common/src/lib/loading/loading.models.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/table/table-column.ts": [
                {
                    "name": "TheSeamTableCellType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"date\" | \"icon\"",
                    "file": "projects/ui-common/src/lib/table/table-column.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "TheSeamTableColumnExportValueFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ui-common/src/lib/table/table-column.ts",
                    "description": "",
                    "kind": 162
                }
            ],
            "projects/ui-common/src/lib/tiled-select/tiled-select.models.ts": [
                {
                    "name": "TiledSelectLayout",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"grid\" | \"list\"",
                    "file": "projects/ui-common/src/lib/tiled-select/tiled-select.models.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ui-common/src/lib/table/table/table.component.ts": [
                {
                    "name": "TrackByFunction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ui-common/src/lib/table/table/table.component.ts",
                    "description": "<p>An optional function passed into the <code>NgForOf</code> directive that defines how to track\nchanges for items in an iterable.\nThe function takes the iteration index and item ID.\nWhen supplied, Angular tracks changes by the return value of the function.</p>\n<p>NOTE: Can&#39;t import the type from&#39;@angular/core&#39;, because of a bug in angular-cli&#39;s\nbuild that can&#39;t find exported types that only exist at compile time if there\nare exports that exist at runtime in the same file.</p>\n",
                    "kind": 162
                }
            ],
            "projects/ui-common/src/lib/widget/directives/widget-drag-handle.directive.ts": [
                {
                    "name": "Writeable",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/ui-common/src/lib/widget/directives/widget-drag-handle.directive.ts",
                    "description": "",
                    "kind": 176
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 15,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/breadcrumbs/breadcrumb.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITheSeamBreadcrumb",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/breadcrumbs/breadcrumbs-resolver.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITheSeamBreadcrumbsResolver",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/breadcrumbs/breadcrumbs.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TheSeamBreadcrumbsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/breadcrumbs/breadcrumbs/breadcrumbs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/breadcrumbs/stories/story-user-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoryUsersDataService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/breadcrumbs/stories/story-userid-to-name.resolver.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoryUserIdToNameResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/buttons/badge-button/badge-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnchorBadgeButtonComponent",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/buttons/badge-button/badge-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BadgeButtonComponent",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/buttons/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnchorButtonComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/buttons/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/buttons/button/button.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TheSeamButtonBase",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/buttons/button/button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_TheSeamButtonMixinBase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/buttons/progress-circle-button/progress-circle-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressCircleButtonComponent",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/buttons/toggle-button/toggle-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleButtonComponent",
                "coveragePercent": 6,
                "coverageCount": "1/15",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/buttons/toggle-button/toggle-button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOGGLE_BUTTON_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/card/card-action/card-action.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardActionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/card/card-body/card-body.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardBodyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/card/card-footer/card-footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/card/card-header/card-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TheSeamCheckboxComponent",
                "coveragePercent": 93,
                "coverageCount": "14/15",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TheSeamCheckboxChange",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TheSeamCheckboxComponentBase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_MatCheckboxMixinBase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_uid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THESEAM_CHECKBOX_CONTROL_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Checkbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InitiallyChecked",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InitiallyIndeterminate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InitiallyUnchecked",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/confirm-dialog/confirm-click.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ConfirmClickDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/confirm-dialog/confirm-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/confirm-dialog/confirm-dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SeamConfirmDialogService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/confirm-dialog/stories/confirm-dialog.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryLibConfirmDialogAlertServiceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/confirm-dialog/stories/confirm-dialog.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryLibConfirmDialogBasicServiceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/core/common-behaviors/active.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CanBeActive",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/core/common-behaviors/active.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mixinActive",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/core/common-behaviors/disabled.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CanDisable",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/core/common-behaviors/disabled.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mixinDisabled",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/core/common-behaviors/element-ref.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HasElementRef",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/core/common-behaviors/initialized.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HasInitialized",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/core/common-behaviors/initialized.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mixinInitialized",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/core/common-behaviors/renderer2.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HasRenderer2",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/core/common-behaviors/size.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CanSize",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/core/common-behaviors/size.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mixinSize",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/core/common-behaviors/tabindex.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HasTabIndex",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/core/common-behaviors/tabindex.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mixinTabIndex",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/core/common-behaviors/theme.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CanTheme",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/core/common-behaviors/theme.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mixinTheme",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-exporter/data-exporter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDataExporter",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-exporter/data-exporter.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "exportOperator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-exporter/data-exporter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THESEAM_DATA_EXPORTER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-exporter/exporters/csv-exporter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CSVDataExporter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-exporter/exporters/xlsx-exporter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "XLSXDataExporter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/data-filter-def.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDataFilterDef",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/data-filter-def.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THESEAM_DATA_FILTER_DEF",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDataFilter",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "composeDataFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "filterOperator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THESEAM_DATA_FILTER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/data-filter.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THESEAM_DATA_FILTER_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/data-filters.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/data-filters.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterDefProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataFilterSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "searchDataFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_uid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATA_FILTER_SEARCH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-search/data-filter-search.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultSearchFilterOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataFilterTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "textDataFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_uid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATA_FILTER_TEXT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/data-filter-text.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultTextFilterOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-text/text-filter-options.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITextFilterOptions",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataFilterToggleButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IToggleButton",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IToggleButtonsFilterOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "toggleButtonsFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_uid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATA_FILTER_TOGGLE_BUTTON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/data-filters/filters/data-filter-toggle-buttons/data-filter-toggle-buttons.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultToggleButtonsFilterOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/_story-data/dynamic-data-1.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleData1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/_story-data/dynamic-data-2.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleData2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDatatableDynamicDef",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicDatatableColumn",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicDatatableFilterMenu",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicDatatableFilterMenuItemDef",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicDatatableFooterMenu",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicDatatableFooterMenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicDatatableFooterMenuItemButton",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicDatatableFooterMenuItemText",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicDatatableOptions",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicDatatableRow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-def.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicDatatableRowActionDef",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic-filter-container/datatable-dynamic-filter-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatatableDynamicFilterContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatatableDynamicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IActionRowExprContext",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFilterComponentRecord",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "jexlObservable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExModalLazyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/datatable-dynamic.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/cell-action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicDatatableCellActionBase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/cell-action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicDatatableCellActionLink",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/cell-action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicDatatableCellActionModal",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicDatatableCellTypeConfig",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicDatatableCellTypeConfigDate",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicDatatableCellTypeConfigDecimal",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicDatatableCellTypeConfigIcon",
                "coveragePercent": 70,
                "coverageCount": "7/10",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicDatatableCellTypeConfigInteger",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/cell-type-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicDatatableCellTypeConfigString",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/confirm-dialog.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicDatatableConfirmDialog",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/jexl-expr-def.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IJexlExprDef",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/row-action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicDatatableRowActionApi",
                "coveragePercent": 33,
                "coverageCount": "3/9",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/row-action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicDatatableRowActionBase",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/row-action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicDatatableRowActionLink",
                "coveragePercent": 42,
                "coverageCount": "3/7",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable-dynamic/models/row-action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DynamicDatatableRowActionModal",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/datatable-action-menu-item/datatable-action-menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatatableActionMenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/datatable-action-menu-item/datatable-action-menu-item.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IActionMenuItemEndpointConfig",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/datatable-action-menu-item/datatable-action-menu-item.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IActionMenuItemModalConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/datatable-action-menu/datatable-action-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatatableActionMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/datatable-column/datatable-column.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatatableColumnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/datatable-export-button/datatable-export-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatatableExportButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/datatable-menu-bar/datatable-menu-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatatableMenuBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/datatable/datatable.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatatableComponent",
                "coveragePercent": 1,
                "coverageCount": "1/74",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/datatable/datatable.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICellContext",
                "coveragePercent": 5,
                "coverageCount": "1/17",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/datatable/datatable.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDatatableAccessor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/datatable/datatable.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_THESEAM_DATATABLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/datatable/datatable.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THESEAM_DATATABLE",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/directives/datatable-action-menu-toggle.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DatatableActionMenuToggleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/directives/datatable-cell-tpl.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DatatableCellTplDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/directives/datatable-filter.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DatatableFilterDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/directives/datatable-row-action-item.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DatatableRowActionItemDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/exporters/exporter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IExporter",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/models/table-column.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITheSeamDatatableColumn",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/datatable/services/datatable-scrollbar-helper.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TheSeamDatatableScrollbarHelperService",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TheSeamDynamicComponentLoader",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-manifest.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicComponentManifest",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DYNAMIC_COMPONENT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DYNAMIC_COMPONENT_MANIFESTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/dynamic-component-loader/dynamic-component-tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DYNAMIC_MODULE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/footer-bar/footer-bar/footer-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/form-field-error/form-field-error-list/form-field-error-list-item-tpl.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FormFieldErrorListItemTplDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/form-field-error/form-field-error-list/form-field-error-list-item.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FormFieldErrorListItemDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/form-field-error/form-field-error-list/form-field-error-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormFieldErrorListComponent",
                "coveragePercent": 2,
                "coverageCount": "1/40",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/form-field-error/form-field-error-list/form-field-error-list.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IErrorRecord",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/form-field-error/form-field-error/form-field-error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormFieldErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/form-field/form-field-error.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FormFieldErrorDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/form-field/form-field-label-tpl.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FormFieldLabelTplDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/form-field/form-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/form-field/form-field.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextLabelUniqueId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/form-field/input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "InputDirective",
                "coveragePercent": 30,
                "coverageCount": "9/30",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/form-field/input.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextUniqueId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/base-layout-nav.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITheSeamBaseLayoutNav",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/base-layout-ref.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITheSeamBaseLayoutRef",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/base-layout-tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THESEAM_BASE_LAYOUT_REF",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/base-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TheSeamBaseLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/base-layout.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THE_SEAM_BASE_LAYOUT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget1Component",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget2Component",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget3Component",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget4Component",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryRoutePlacholderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "navItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/base-layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/directives/base-layout-content-footer.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BaseLayoutContentFooterDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/directives/base-layout-content-header.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BaseLayoutContentHeaderDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/directives/base-layout-content.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BaseLayoutContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/directives/base-layout-nav-toggle.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BaseLayoutNavToggleDirective",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/directives/base-layout-side-bar.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BaseLayoutSideBarDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/base-layout/directives/base-layout-top-bar.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BaseLayoutTopBarDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDashboardWidgetsColumnRecord",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDashboardWidgetsItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDashboardWidgetsItemDef",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardWidgetsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DashboardWidgetsService",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget1Component",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget2Component",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget3Component",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dashboard/dashboard-widgets/dashboard-widgets.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget4Component",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-pages/dynamic-datatable-page/dynamic-datatable-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicDatatablePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/dynamic-route-def.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicRouteDef",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "transformTo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sideToSide",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "slider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stepper",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-route-animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "transformer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-router-outlet.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HierarchyRouterOutletComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-router-outlet.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "routeChanges",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/hierarchy-router-outlet/hierarchy-router-outlet.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_uid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/resolvers/hierarchy-level.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "HierarchyLevelResolver",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecursiveIdOneComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecursiveIdThreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecursiveIdTwoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryEx1Component",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryEx2Component",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryEx3Component",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExBaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryNameExComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/stories/dynamic-router.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StorySubNameExComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/dynamic-router/stories/example-route-defs-1.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routeDefs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SideNavItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COLLAPSED_STATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPACT_STATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXPANDED_STATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FULL_STATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryRoutePlacholderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav-item/side-nav-item.stories.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StoryNavToggleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav-toggle/side-nav-toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SideNavToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SideNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "sideNavExpandStateChangeFn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COLLAPSED_OVERLAY_STATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COLLAPSED_STATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COLLAPSED_STATES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXPAND_STATES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXPANDED_OVERLAY_STATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXPANDED_STATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXPANDED_STATES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISideNavBasic",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISideNavButton",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISideNavDivider",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISideNavItemBase",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISideNavItemStatus",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISideNavLink",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISideNavTitle",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/side-nav/side-nav.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryRoutePlacholderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget1Component",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget2Component",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget3Component",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget4Component",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget5Component",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget6Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget7Component",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget8Component",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryNameExComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/stories/table-with-detail-nav.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserDetailsExComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/top-bar/top-bar-item.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TopBarItemDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/top-bar/top-bar-menu-button/top-bar-menu-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TopBarMenuButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/top-bar/top-bar-menu-button/top-bar-menu-button.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TopBarMenuButtonBase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/top-bar/top-bar-menu-button/top-bar-menu-button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_TopBarMenuButtonMixinBase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/top-bar/top-bar-menu.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TopBarMenuDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/top-bar/top-bar-title/top-bar-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TopBarTitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/framework/top-bar/top-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TopBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/icon/icon-btn/icon-btn.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconBtnComponent",
                "coveragePercent": 18,
                "coverageCount": "7/37",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/icon/icon-notification/icon-notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconNotificationComponent",
                "coveragePercent": 50,
                "coverageCount": "6/12",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/icon/icon-notification/icon-notification.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pulseAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/icon/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 35,
                "coverageCount": "7/20",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/icon/icon/icon.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "needToFix",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/icon/utils/file-extension-icon.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "fileExtensionIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/icon/utils/file-extension-icon.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_FILE_EXTENSION_ICON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/icon/utils/file-extension-icon.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FILE_EXTENSION_ICONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/icon/utils/get-known-icon.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getKnownIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/icon/utils/get-known-icon.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "knownIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/layout/layout.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TheSeamLayoutService",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/layout/observe-media-query.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isMediaQueryActive",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/layout/observe-media-query.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "observeMediaQuery",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/layout/observe-media-query.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mediaQueriesMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/loading/fake-loading-overlay.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FakeTheSeamLoadingOverlayService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/loading/loading-overlay.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TheSeamLoadingOverlayService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/loading/loading-themes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultThemeConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/loading/loading-themes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "primaryThemeConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/loading/loading.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadingForRoot",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/loading/loading/loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu-animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "menuDropdownPanelExpandIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu-animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "menuDropdownPanelExpandOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu-animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "menuDropdownPanelSlideIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu-animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "menuDropdownPanelSlideOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu-divider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuDividerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu-footer-action/menu-footer-action.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuFooterActionComponent",
                "coveragePercent": 25,
                "coverageCount": "3/12",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu-footer/menu-footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuItemComponent",
                "coveragePercent": 56,
                "coverageCount": "9/16",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu-item.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TheSeamMenuItemBase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu-item.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_seamMenuItemMixinBase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu-panel-token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THESEAM_MENU_PANEL",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu-panel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITheSeamMenuPanel",
                "coveragePercent": 10,
                "coverageCount": "1/10",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu-toggle.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "MenuToggleDirective",
                "coveragePercent": 20,
                "coverageCount": "5/25",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu-toggle.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "passiveEventListenerOptions",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 50,
                "coverageCount": "11/22",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/menu/menu.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIB_MENU",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/directives/modal-close.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ModalCloseDirective",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/directives/modal-footer-tpl.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ModalFooterTplDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/directives/modal-header-icon-tpl.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ModalHeaderIconTplDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/directives/modal-header-title-tpl.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ModalHeaderTitleTplDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/directives/modal-title.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ModalTitleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/directives/modal.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ModalDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-body/modal-body.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalBodyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ModalConfig",
                "coveragePercent": 95,
                "coverageCount": "23/24",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IModalPosition",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-config.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mergeModalConfigs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIB_MODAL_CONFIG",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-container/modal-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalContainerComponent",
                "coveragePercent": 57,
                "coverageCount": "19/33",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-container/modal-container.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "throwDialogContentAlreadyAttachedError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-footer/modal-footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-header/modal-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "THESEAM_MODAL_SCROLL_STRATEGY_PROVIDER_FACTORY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MODAL_CONFIG",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MODAL_CONTAINER",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MODAL_DATA",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MODAL_REF",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MODAL_SCROLL_STRATEGY",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-injectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THESEAM_MODAL_SCROLL_STRATEGY_PROVIDER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-ref.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ModalRef",
                "coveragePercent": 87,
                "coverageCount": "14/16",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-ref.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uniqueId",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getClosestModal",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IModalContainer",
                "coveragePercent": 87,
                "coverageCount": "7/8",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal.models.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THESEAM_MODAL_CONTAINER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "Modal",
                "coveragePercent": 65,
                "coverageCount": "13/20",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 6,
                "coverageCount": "2/30",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/modal/modal.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIB_MODAL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/route-modal/route-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RouteModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/stories/modal.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryseamModalBasicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/stories/modal.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryseamModalBasicExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/stories/modal.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryseamModalSimpleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/modal/stories/modal.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryseamModalSimpleExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/models/theme-names.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThemeNames",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/progress/progress-circle/progress-circle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressCircleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/progress/progress-circle/progress-circle.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "calcDashoffset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/progress/progress-circle/progress-circle.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "calcPercentage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/scrollbar/overlay-scrollbar.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "OverlayScrollbarDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/scrollbar/overlay-scrollbars-config.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mergeOverlayScrollbarsConfigs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/scrollbar/overlay-scrollbars-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_OverlayScrollbarDefaults",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/scrollbar/overlay-scrollbars-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIB_OVERLAY_SCROLLBARS_CONFIG",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/scrollbar/overlay-scrollbars.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OverlayScrollbarsService",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/services/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/services/local-storage.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/services/local-storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "localStorage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/services/router-helpers.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RouterHelpersService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/shared/components/password-input-reveal/password-input-reveal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordInputRevealComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/shared/directives/auto-focus.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AutoFocusDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/shared/directives/click-outside.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickOutsideDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/shared/directives/disable-control.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DisableControlDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/shared/directives/elem-resized.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ElemResizedDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/shared/directives/elem-resized.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IElementResizedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/shared/directives/encrypted-asset-link.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "EncryptedAssetLinkDirective",
                "coveragePercent": 16,
                "coverageCount": "2/12",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/shared/directives/hover-class-toggle.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HoverClassToggleDirective",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/shared/directives/hover-class-toggle.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IHoverClassToggleRecord",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/shared/directives/hover-class.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HoverClassDirective",
                "coveragePercent": 7,
                "coverageCount": "1/13",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/shared/directives/ng-select-extra.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NgSelectExtraDirective",
                "coveragePercent": 21,
                "coverageCount": "4/19",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/shared/models/encrypted-asset-reader.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EncryptedAssetReader",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/shared/pipes/mask-chars.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MaskCharsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/shared/pipes/truncate.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TruncatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/story-helpers/initial-route-factory.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "storyInitialRouteFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/story-helpers/initial-route-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoryInitialRouteService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/story-helpers/initial-route-service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "storyInitialRouteFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/story-helpers/initial-route-service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORY_INITIAL_ROUTE_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/story-helpers/initial-route.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoryInitialRouteService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/story-helpers/initial-route.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORY_INITIAL_ROUTE_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/story-helpers/route-button.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "routeButton",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/story-helpers/story-empty-with-route.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryEmptyWithRouteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/story-helpers/story-empty.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryEmptyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tabbed/directives/tabbed-tab-content.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TabbedTabContentDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tabbed/directives/tabbed-tab.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TabbedTabDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tabbed/tabbed-content/tabbed-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabbedContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tabbed/tabbed-item/tabbed-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabbedItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tabbed/tabbed.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabbedComponent",
                "coveragePercent": 5,
                "coverageCount": "1/18",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tabbed/tabbed.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TabbedService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table-cell-types/services/table-cell-types-helpers.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TableCellTypesHelpersService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table-cell-types/table-cell-type-date/table-cell-type-date.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableCellTypeDateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table-cell-types/table-cell-type-icon/table-cell-type-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableCellTypeIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table-cell-types/table-cell-type-manifest-provider.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableCellTypeManifestProvider",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table-cell-types/table-cell-type-manifests.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TABLE_CELL_TYPE_MANIFEST_DATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table-cell-types/table-cell-type-manifests.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TABLE_CELL_TYPE_MANIFEST_ICON",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table-cell-types/table-cell-type-manifests.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TABLE_CELL_TYPE_MANIFEST_IMAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table-cell-types/table-cell-type-selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableCellTypeSelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table-cell-types/table-cell-types-models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICalucatedValueContext",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table-cell-types/table-cell-types-models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableCellTypeManifest",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/table-cell-types/table-cell-types-tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TABLE_CELL_TYPE_MANIFEST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table-cell-types/table-cell-types.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cellTypeComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table-cell-types/table-cell-types.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cellTypeProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table/table-cell-tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TABLE_CELL_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table/table-cell.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableCellData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table/table-cell.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableCellDataChange",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table/table-column.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITheSeamTableColumn",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/table/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table/table/table.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/table/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GIN_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/test-helpers/tick-helper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TickHelper",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile-icon/tiled-select-tile-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TiledSelectTileIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile-icon/tiled-select-tile-icon.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "needToFix",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile/tiled-select-tile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TiledSelectTileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile/tiled-select-tile.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tilePulse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile/tiled-select-tile.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tileScaleDown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tiled-select/components/tiled-select-tile/tiled-select-tile.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tileScaleUp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tiled-select/components/tiled-select/tiled-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TiledSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tiled-select/components/tiled-select/tiled-select.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "slideEnterAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tiled-select/components/tiled-select/tiled-select.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TILED_SELECT_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tiled-select/directives/tiled-select-tile-icon-tpl.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TiledSelectTileIconTplDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tiled-select/directives/tiled-select-tile-label-tpl.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TiledSelectTileLabelTplDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tiled-select/directives/tiled-select-tile-overlay.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TiledSelectTileOverlayDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/tiled-select/tiled-select.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITiledSelectItem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/toggle-edit/models/can-toggle-edit.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICanToggleEdit",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/toggle-edit/models/toggle-edit-ref.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IToggleEditRef",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/toggle-edit/toggle-edit-actions-container/toggle-edit-actions-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleEditActionsContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/toggle-edit/toggle-edit-display-tpl.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ToggleEditDisplayTplDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/toggle-edit/toggle-edit-keyboard-listener.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToggleEditKeyboardListenerService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/toggle-edit/toggle-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleEditComponent",
                "coveragePercent": 3,
                "coverageCount": "2/58",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/toggle-group/toggle-group-option.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ToggleGroupOptionDirective",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/toggle-group/toggle-group.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ToggleGroupDirective",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/toggle-group/toggle-group.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOGGLE_GROUP_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/unsaved-changes-dialog/unsaved-changes-can-deactivate.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UnsavedChangesCanDeactivate",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/unsaved-changes-dialog/unsaved-changes-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UnsavedChangesDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/unsaved-changes-dialog/unsaved-changes-dialog.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "UnsavedChangesDialogGuard",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/dom-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "toggleAttribute",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/file-utils.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/file-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "fileBufferToBlob",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/file-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "fileBufferToObjectUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/file-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "fileDataFromBuffer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/file-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "openBlob",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/file-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "readFileAsDataUrlAsync",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/file-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "readFileAsync",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/file-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Buffer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/form-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getControlName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/form-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getControlPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/form-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "observeControlIsDifferent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/form-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "observeControlStatus",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/form-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "observeControlValid",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/form-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "observeControlValue",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/form-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "observeControlValueChange",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/form-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "waitOnNonPendingStatus",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/input-masks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "phoneNumberMask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/is-absolute-url.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isAbsoluteUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/is-absolute-url.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IS_ABSOLUTE_URL_REGEX",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/is-null-or-undefined.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isNullOrUndefined",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/not-null-or-undefined.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "notNullOrUndefined",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/obj-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "deleteProperties",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/obj-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "deleteProperty",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/obj-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "withoutProperties",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/obj-utils.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "withoutProperty",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/operators/map-each.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mapEach",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/operators/tap-first.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "tapFirst",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/polling-ticker.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IntervalTimer",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/polling-ticker.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PollingTickerOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/polling-ticker.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "pollingTicker",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/refreshable.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Refreshable",
                "coveragePercent": 18,
                "coverageCount": "2/11",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/router/leafChildRoute.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "leafChildRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/router/operators/activatedRoutesWithDataProperty.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IActivatedRouteWithData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/router/operators/activatedRoutesWithDataProperty.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "activatedRoutesWithDataProperty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/router/operators/activatedRoutesWithDataProperty.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "hasRouteConfigDataProp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/router/operators/activatedRoutesWithDataProperty.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "hasRouteConfigResolveProp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/router/route-snapshot-path-full.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "routeSnapshotPathFull",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/router/route-snapshot-path-relative.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "routeSnapshotPathRelative",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/storybook-knobs-hack.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "_knobUndefinedNullHACK",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/subscriber-count.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "subscriberCount",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/wait-on-condition-async.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "waitOnConditionAsync",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/utils/wrap-into-observable.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "wrapIntoObservable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/validators/email-exists.validator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "emailExistsValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/validators/phone-length.validator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "phoneLengthValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/validators/tax-id.validator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "taxIdValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ui-common/src/lib/viewers/pdf-viewer/pdf-page/pdf-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PdfPageComponent",
                "coveragePercent": 10,
                "coverageCount": "2/19",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/viewers/pdf-viewer/pdf-page/pdf-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pdfjsLib",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/viewers/pdf-viewer/pdf-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PdfViewerComponent",
                "coveragePercent": 33,
                "coverageCount": "6/18",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/viewers/pdf-viewer/pdf-viewer.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pdfjsLib",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/directives/widget-drag-handle.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "WidgetDragHandleDirective",
                "coveragePercent": 33,
                "coverageCount": "3/9",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/directives/widget-drag-handle.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DragCSSStyleDeclaration",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/directives/widget-drag-handle.directive.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "extendStyles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/directives/widget-drag-handle.directive.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "toggleNativeDragInteractions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/directives/widget-icon-tpl.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "WidgetIconTplDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/directives/widget-title-tpl.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "WidgetTitleTplDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-button-group/widget-button-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetButtonGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-content-header/widget-content-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetContentHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-description/widget-description.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetDescriptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-empty-label/widget-empty-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetEmptyLabelComponent",
                "coveragePercent": 18,
                "coverageCount": "2/11",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-footer-link/widget-footer-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetFooterLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-footer-text/widget-footer-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetFooterTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-header-badge/widget-header-badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetHeaderBadgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-header-badge/widget-header-badge.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "WidgetHeaderBadgeBase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-header-badge/widget-header-badge.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_WidgetHeaderBadgeMixinBase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item-icon-tpl.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "WidgetListGroupItemIconTplDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetListGroupItemAnchorComponent",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetListGroupItemButtonComponent",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetListGroupItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "WidgetListGroupItemActionableBase",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "WidgetListGroupItemBase",
                "coveragePercent": 10,
                "coverageCount": "1/10",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_WidgetListGroupItemActionableBase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_WidgetListGroupItemBase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group-item/widget-list-group-item.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WIDGET_LIST_GROUP_ITEM_INPUTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-list-group/widget-list-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetListGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-table/widget-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-table/widget-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GIN_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-tile-list/widget-tile-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetTileListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-tile/widget-tile-secondary-icon.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "WidgetTileSecondaryIconDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-content-components/widget-tile/widget-tile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetTileComponent",
                "coveragePercent": 5,
                "coverageCount": "1/17",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-footer/widget-footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-registry.models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWidgetRegistryRecord",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-registry.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WidgetRegistryService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget-token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THESEAM_WIDGETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "contentModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widget/widget/widget.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widgets-grid/widgets-grid-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWidgetsGridItem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widgets-grid/widgets-grid-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWidgetsGridItemDef",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widgets-grid/widgets-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WidgetsGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widgets-grid/widgets-grid.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget1Component",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widgets-grid/widgets-grid.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget2Component",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widgets-grid/widgets-grid.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget3Component",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/lib/widgets-grid/widgets-grid.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "StoryExWidget4Component",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/stories/mdx/components/color-preview.tsx",
                "type": "class",
                "linktype": "classe",
                "name": "ColorDisp",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/stories/mdx/components/color-preview.tsx",
                "type": "interface",
                "linktype": "interface",
                "name": "ColorDispProps",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/stories/mdx/components/doc-alert.tsx",
                "type": "class",
                "linktype": "classe",
                "name": "DocAlert",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/stories/mdx/components/doc-alert.tsx",
                "type": "interface",
                "linktype": "interface",
                "name": "DocAlertProps",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/stories/mdx/components/doc-alert.tsx",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StyledDiv",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ui-common/src/testing/fake-toastr.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FakeToastrService",
                "coveragePercent": 57,
                "coverageCount": "8/14",
                "status": "good"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "manifests",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/example-lazy-loaded-widgets/example-lazy-loaded-widgets.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExampleLazyLoadedWidgetsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/example-lazy-loaded-widgets/example-lazy-loaded-widgets.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "manifests",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/example-lazy-loaded-widgets/lazy-widget-one/lazy-widget-one.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LazyWidgetOneComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}